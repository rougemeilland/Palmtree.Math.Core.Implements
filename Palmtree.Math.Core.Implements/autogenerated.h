/*
 * The MIT License
 *
 * Copyright 2019 Palmtree Software.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/* 
 * File:   autogenerated.h
 * Author: Lunor Kisasage
 *
 * Created on 2019/01/05, 0:18
 */

#ifndef AUTOGENERATED_H
#define AUTOGENERATED_H

#ifdef __cplusplus
extern "C" {
#endif


#include "pmc_internal.h"


__inline static char _ADD_8WORDS_ADC(char c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
#ifdef _MSC_VER
    _ADD_UNIT(c, xp[0], yp[0], &zp[0]);
    _ADD_UNIT(c, xp[1], yp[1], &zp[1]);
    _ADD_UNIT(c, xp[2], yp[2], &zp[2]);
    _ADD_UNIT(c, xp[3], yp[3], &zp[3]);
    _ADD_UNIT(c, xp[4], yp[4], &zp[4]);
    _ADD_UNIT(c, xp[5], yp[5], &zp[5]);
    _ADD_UNIT(c, xp[6], yp[6], &zp[6]);
    _ADD_UNIT(c, xp[7], yp[7], &zp[7]);
#elif defined(__GNUC__)
#ifdef _M_IX86
    __asm__ volatile (
        "addb\t$-1, %0\n\t"
        "movl\t%9, %%ecx\n\t"
        "adcl\t%10, %%ecx\n\t"
        "movl\t%%ecx, %1\n\t"
        "movl\t%11, %%ecx\n\t"
        "adcl\t%12, %%ecx\n\t"
        "movl\t%%ecx, %2\n\t"
        "movl\t%13, %%ecx\n\t"
        "adcl\t%14, %%ecx\n\t"
        "movl\t%%ecx, %3\n\t"
        "movl\t%15, %%ecx\n\t"
        "adcl\t%16, %%ecx\n\t"
        "movl\t%%ecx, %4\n\t"
        "movl\t%17, %%ecx\n\t"
        "adcl\t%18, %%ecx\n\t"
        "movl\t%%ecx, %5\n\t"
        "movl\t%19, %%ecx\n\t"
        "adcl\t%20, %%ecx\n\t"
        "movl\t%%ecx, %6\n\t"
        "movl\t%21, %%ecx\n\t"
        "adcl\t%22, %%ecx\n\t"
        "movl\t%%ecx, %7\n\t"
        "movl\t%23, %%ecx\n\t"
        "adcl\t%24, %%ecx\n\t"
        "movl\t%%ecx, %8\n\t"
        "setc\t%0"
        : "+r"(c), "=g"(zp[0]), "=g"(zp[1]), "=g"(zp[2]), "=g"(zp[3]), "=g"(zp[4]), "=g"(zp[5]), "=g"(zp[6]), "=g"(zp[7])
        : "g"(xp[0]), "rm"(yp[0]), "g"(xp[1]), "rm"(yp[1]), "g"(xp[2]), "rm"(yp[2]), "g"(xp[3]), "rm"(yp[3]), "g"(xp[4]), "rm"(yp[4]), "g"(xp[5]), "rm"(yp[5]), "g"(xp[6]), "rm"(yp[6]), "g"(xp[7]), "rm"(yp[7])
        : "cc", "%ecx"
);
#elif defined(_M_IX64)
    __asm__ volatile (
        "addb\t$-1, %0\n\t"
        "movq\t%9, %%rcx\n\t"
        "adcq\t%10, %%rcx\n\t"
        "movq\t%%rcx, %1\n\t"
        "movq\t%11, %%rcx\n\t"
        "adcq\t%12, %%rcx\n\t"
        "movq\t%%rcx, %2\n\t"
        "movq\t%13, %%rcx\n\t"
        "adcq\t%14, %%rcx\n\t"
        "movq\t%%rcx, %3\n\t"
        "movq\t%15, %%rcx\n\t"
        "adcq\t%16, %%rcx\n\t"
        "movq\t%%rcx, %4\n\t"
        "movq\t%17, %%rcx\n\t"
        "adcq\t%18, %%rcx\n\t"
        "movq\t%%rcx, %5\n\t"
        "movq\t%19, %%rcx\n\t"
        "adcq\t%20, %%rcx\n\t"
        "movq\t%%rcx, %6\n\t"
        "movq\t%21, %%rcx\n\t"
        "adcq\t%22, %%rcx\n\t"
        "movq\t%%rcx, %7\n\t"
        "movq\t%23, %%rcx\n\t"
        "adcq\t%24, %%rcx\n\t"
        "movq\t%%rcx, %8\n\t"
        "setc\t%0"
        : "+r"(c), "=g"(zp[0]), "=g"(zp[1]), "=g"(zp[2]), "=g"(zp[3]), "=g"(zp[4]), "=g"(zp[5]), "=g"(zp[6]), "=g"(zp[7])
        : "g"(xp[0]), "rm"(yp[0]), "g"(xp[1]), "rm"(yp[1]), "g"(xp[2]), "rm"(yp[2]), "g"(xp[3]), "rm"(yp[3]), "g"(xp[4]), "rm"(yp[4]), "g"(xp[5]), "rm"(yp[5]), "g"(xp[6]), "rm"(yp[6]), "g"(xp[7]), "rm"(yp[7])
        : "cc", "%rcx"
);
#else
#error unknown platform
#endif
#else
#error unknown compiler
#endif
    return (c);
}

__inline static char _ADD_8WORDS_ADCX(char c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
#ifdef _MSC_VER
    _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);
    _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);
    _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);
    _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);
    _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);
    _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);
    _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);
    _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);
#elif defined(__GNUC__)
#ifdef _M_IX86
    __asm__ volatile (
        "addb\t$-1, %0\n\t"
        "movl\t%9, %%ecx\n\t"
        "adcxl\t%10, %%ecx\n\t"
        "movl\t%%ecx, %1\n\t"
        "movl\t%11, %%ecx\n\t"
        "adcxl\t%12, %%ecx\n\t"
        "movl\t%%ecx, %2\n\t"
        "movl\t%13, %%ecx\n\t"
        "adcxl\t%14, %%ecx\n\t"
        "movl\t%%ecx, %3\n\t"
        "movl\t%15, %%ecx\n\t"
        "adcxl\t%16, %%ecx\n\t"
        "movl\t%%ecx, %4\n\t"
        "movl\t%17, %%ecx\n\t"
        "adcxl\t%18, %%ecx\n\t"
        "movl\t%%ecx, %5\n\t"
        "movl\t%19, %%ecx\n\t"
        "adcxl\t%20, %%ecx\n\t"
        "movl\t%%ecx, %6\n\t"
        "movl\t%21, %%ecx\n\t"
        "adcxl\t%22, %%ecx\n\t"
        "movl\t%%ecx, %7\n\t"
        "movl\t%23, %%ecx\n\t"
        "adcxl\t%24, %%ecx\n\t"
        "movl\t%%ecx, %8\n\t"
        "setc\t%0"
        : "+r"(c), "=g"(zp[0]), "=g"(zp[1]), "=g"(zp[2]), "=g"(zp[3]), "=g"(zp[4]), "=g"(zp[5]), "=g"(zp[6]), "=g"(zp[7])
        : "g"(xp[0]), "rm"(yp[0]), "g"(xp[1]), "rm"(yp[1]), "g"(xp[2]), "rm"(yp[2]), "g"(xp[3]), "rm"(yp[3]), "g"(xp[4]), "rm"(yp[4]), "g"(xp[5]), "rm"(yp[5]), "g"(xp[6]), "rm"(yp[6]), "g"(xp[7]), "rm"(yp[7])
        : "cc", "%ecx"
);
#elif defined(_M_IX64)
    __asm__ volatile (
        "addb\t$-1, %0\n\t"
        "movq\t%9, %%rcx\n\t"
        "adcxq\t%10, %%rcx\n\t"
        "movq\t%%rcx, %1\n\t"
        "movq\t%11, %%rcx\n\t"
        "adcxq\t%12, %%rcx\n\t"
        "movq\t%%rcx, %2\n\t"
        "movq\t%13, %%rcx\n\t"
        "adcxq\t%14, %%rcx\n\t"
        "movq\t%%rcx, %3\n\t"
        "movq\t%15, %%rcx\n\t"
        "adcxq\t%16, %%rcx\n\t"
        "movq\t%%rcx, %4\n\t"
        "movq\t%17, %%rcx\n\t"
        "adcxq\t%18, %%rcx\n\t"
        "movq\t%%rcx, %5\n\t"
        "movq\t%19, %%rcx\n\t"
        "adcxq\t%20, %%rcx\n\t"
        "movq\t%%rcx, %6\n\t"
        "movq\t%21, %%rcx\n\t"
        "adcxq\t%22, %%rcx\n\t"
        "movq\t%%rcx, %7\n\t"
        "movq\t%23, %%rcx\n\t"
        "adcxq\t%24, %%rcx\n\t"
        "movq\t%%rcx, %8\n\t"
        "setc\t%0"
        : "+r"(c), "=g"(zp[0]), "=g"(zp[1]), "=g"(zp[2]), "=g"(zp[3]), "=g"(zp[4]), "=g"(zp[5]), "=g"(zp[6]), "=g"(zp[7])
        : "g"(xp[0]), "rm"(yp[0]), "g"(xp[1]), "rm"(yp[1]), "g"(xp[2]), "rm"(yp[2]), "g"(xp[3]), "rm"(yp[3]), "g"(xp[4]), "rm"(yp[4]), "g"(xp[5]), "rm"(yp[5]), "g"(xp[6]), "rm"(yp[6]), "g"(xp[7]), "rm"(yp[7])
        : "cc", "%rcx"
);
#else
#error unknown platform
#endif
#else
#error unknown compiler
#endif
    return (c);
}

__inline static char _ADD_8WORDS_ADOX(char c, __UNIT_TYPE* xp, __UNIT_TYPE* yp, __UNIT_TYPE* zp)
{
#ifdef _MSC_VER
    _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);
    _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);
    _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);
    _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);
    _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);
    _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);
    _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);
    _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);
#elif defined(__GNUC__)
#ifdef _M_IX86
    __asm__ volatile (
        "addb\t$-1, %0\n\t"
        "movl\t%9, %%ecx\n\t"
        "adoxl\t%10, %%ecx\n\t"
        "movl\t%%ecx, %1\n\t"
        "movl\t%11, %%ecx\n\t"
        "adoxl\t%12, %%ecx\n\t"
        "movl\t%%ecx, %2\n\t"
        "movl\t%13, %%ecx\n\t"
        "adoxl\t%14, %%ecx\n\t"
        "movl\t%%ecx, %3\n\t"
        "movl\t%15, %%ecx\n\t"
        "adoxl\t%16, %%ecx\n\t"
        "movl\t%%ecx, %4\n\t"
        "movl\t%17, %%ecx\n\t"
        "adoxl\t%18, %%ecx\n\t"
        "movl\t%%ecx, %5\n\t"
        "movl\t%19, %%ecx\n\t"
        "adoxl\t%20, %%ecx\n\t"
        "movl\t%%ecx, %6\n\t"
        "movl\t%21, %%ecx\n\t"
        "adoxl\t%22, %%ecx\n\t"
        "movl\t%%ecx, %7\n\t"
        "movl\t%23, %%ecx\n\t"
        "adoxl\t%24, %%ecx\n\t"
        "movl\t%%ecx, %8\n\t"
        "setc\t%0"
        : "+r"(c), "=g"(zp[0]), "=g"(zp[1]), "=g"(zp[2]), "=g"(zp[3]), "=g"(zp[4]), "=g"(zp[5]), "=g"(zp[6]), "=g"(zp[7])
        : "g"(xp[0]), "rm"(yp[0]), "g"(xp[1]), "rm"(yp[1]), "g"(xp[2]), "rm"(yp[2]), "g"(xp[3]), "rm"(yp[3]), "g"(xp[4]), "rm"(yp[4]), "g"(xp[5]), "rm"(yp[5]), "g"(xp[6]), "rm"(yp[6]), "g"(xp[7]), "rm"(yp[7])
        : "cc", "%ecx"
);
#elif defined(_M_IX64)
    __asm__ volatile (
        "addb\t$-1, %0\n\t"
        "movq\t%9, %%rcx\n\t"
        "adoxq\t%10, %%rcx\n\t"
        "movq\t%%rcx, %1\n\t"
        "movq\t%11, %%rcx\n\t"
        "adoxq\t%12, %%rcx\n\t"
        "movq\t%%rcx, %2\n\t"
        "movq\t%13, %%rcx\n\t"
        "adoxq\t%14, %%rcx\n\t"
        "movq\t%%rcx, %3\n\t"
        "movq\t%15, %%rcx\n\t"
        "adoxq\t%16, %%rcx\n\t"
        "movq\t%%rcx, %4\n\t"
        "movq\t%17, %%rcx\n\t"
        "adoxq\t%18, %%rcx\n\t"
        "movq\t%%rcx, %5\n\t"
        "movq\t%19, %%rcx\n\t"
        "adoxq\t%20, %%rcx\n\t"
        "movq\t%%rcx, %6\n\t"
        "movq\t%21, %%rcx\n\t"
        "adoxq\t%22, %%rcx\n\t"
        "movq\t%%rcx, %7\n\t"
        "movq\t%23, %%rcx\n\t"
        "adoxq\t%24, %%rcx\n\t"
        "movq\t%%rcx, %8\n\t"
        "setc\t%0"
        : "+r"(c), "=g"(zp[0]), "=g"(zp[1]), "=g"(zp[2]), "=g"(zp[3]), "=g"(zp[4]), "=g"(zp[5]), "=g"(zp[6]), "=g"(zp[7])
        : "g"(xp[0]), "rm"(yp[0]), "g"(xp[1]), "rm"(yp[1]), "g"(xp[2]), "rm"(yp[2]), "g"(xp[3]), "rm"(yp[3]), "g"(xp[4]), "rm"(yp[4]), "g"(xp[5]), "rm"(yp[5]), "g"(xp[6]), "rm"(yp[6]), "g"(xp[7]), "rm"(yp[7])
        : "cc", "%rcx"
);
#else
#error unknown platform
#endif
#else
#error unknown compiler
#endif
    return (c);
}


#ifdef __cplusplus
}
#endif

#endif /* AUTOGENERATED_H */

/*
 * END OF FILE
 */
