	.file	"pmc_add.c"
	.text
	.p2align 4,,15
	.def	DoCarry;	.scl	3;	.type	32;	.endef
	.seh_proc	DoCarry
DoCarry:
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	.seh_endprologue
	movq	56(%rsp), %rsi
	testq	%r8, %r8
	movl	%ecx, %r11d
	je	.L9
	xorl	%ebx, %ebx
	testb	%cl, %cl
	movq	%r8, %r10
	jne	.L3
	jmp	.L25
	.p2align 4,,10
.L23:
	testb	%r11b, %r11b
	movq	%rcx, %r9
	je	.L4
.L3:
	movq	(%rdx), %rax
	leaq	8(%r9), %rcx
	addq	$8, %rdx
	addb	$-1, %r11b
	adcq	%rbx, %rax
	setc	%r11b
	subq	$1, %r10
	movq	%rax, (%r9)
	leaq	(%rsi,%r10), %rax
	subq	%r8, %rax
	testq	%r10, %r10
	jne	.L23
.L2:
	testb	%r11b, %r11b
	je	.L5
	testq	%rax, %rax
	je	.L11
	xorl	%eax, %eax
	movq	$1, (%rcx)
	popq	%rbx
	popq	%rsi
	ret
.L25:
	movq	%r9, %rcx
	.p2align 4,,10
.L4:
	xorl	%eax, %eax
	.p2align 4,,10
.L8:
	movq	(%rdx,%rax,8), %r8
	movq	%r8, (%rcx,%rax,8)
	addq	$1, %rax
	cmpq	%r10, %rax
	jne	.L8
.L5:
	xorl	%eax, %eax
.L1:
	popq	%rbx
	popq	%rsi
	ret
.L9:
	movq	%rsi, %rax
	movq	%r9, %rcx
	jmp	.L2
.L11:
	movl	$-4, %eax
	jmp	.L1
	.seh_endproc
	.p2align 4,,15
	.def	Add_X_X_using_ADC;	.scl	3;	.type	32;	.endef
	.seh_proc	Add_X_X_using_ADC
Add_X_X_using_ADC:
	pushq	%r15
	.seh_pushreg	%r15
	pushq	%r14
	.seh_pushreg	%r14
	pushq	%r13
	.seh_pushreg	%r13
	pushq	%r12
	.seh_pushreg	%r12
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$104, %rsp
	.seh_stackalloc	104
	.seh_endprologue
	movq	(%rcx), %rsi
	movq	(%rdx), %rax
	movq	%rsi, 56(%rsp)
	cmpq	%rax, %rsi
	movq	%rax, 64(%rsp)
	jb	.L27
	movq	%rax, 56(%rsp)
	movq	%rdx, %rax
	movq	%rcx, %rdx
	movq	%rsi, 64(%rsp)
	movq	%rax, %rcx
.L27:
	movq	56(%rsp), %r11
	movq	(%r8), %rax
	movq	40(%r8), %r10
	movq	40(%rdx), %rdx
	shrq	$3, %r11
	movq	40(%rcx), %r15
	testq	%r11, %r11
	movq	%rax, 72(%rsp)
	movq	%r10, 48(%rsp)
	movq	%r11, 80(%rsp)
	je	.L32
	movq	%r15, %r8
	movq	%rdx, %rax
	xorl	%r9d, %r9d
	movq	%r15, 88(%rsp)
	.p2align 4,,10
.L29:
/APP
 # 88 "autogenerated.h" 1
	addb	$-1, %r9b
	movq	(%rax), %rcx
	adcq	(%r8), %rcx
	movq	%rcx, %r15
	movq	8(%rax), %rcx
	adcq	8(%r8), %rcx
	movq	%rcx, %r14
	movq	16(%rax), %rcx
	adcq	16(%r8), %rcx
	movq	%rcx, %r13
	movq	24(%rax), %rcx
	adcq	24(%r8), %rcx
	movq	%rcx, %r12
	movq	32(%rax), %rcx
	adcq	32(%r8), %rcx
	movq	%rcx, %rbp
	movq	40(%rax), %rcx
	adcq	40(%r8), %rcx
	movq	%rcx, %rdi
	movq	48(%rax), %rcx
	adcq	48(%r8), %rcx
	movq	%rcx, %rsi
	movq	56(%rax), %rcx
	adcq	56(%r8), %rcx
	movq	%rcx, %rbx
	setc	%r9b
 # 0 "" 2
/NO_APP
	movq	%r15, (%r10)
	addq	$64, %rax
	addq	$64, %r8
	addq	$64, %r10
	movq	%r14, -56(%r10)
	movq	%r13, -48(%r10)
	movq	%r12, -40(%r10)
	movq	%rbp, -32(%r10)
	movq	%rdi, -24(%r10)
	movq	%rsi, -16(%r10)
	movq	%rbx, -8(%r10)
	subq	$1, %r11
	jne	.L29
	movq	80(%rsp), %rbx
	movq	88(%rsp), %r15
	movq	%rbx, %rax
	salq	$6, %rax
	addq	%rax, 48(%rsp)
	addq	%rax, %rdx
	addq	%rax, %r15
	movq	%rbx, %rax
	movq	56(%rsp), %rbx
	negq	%rax
	leaq	(%rbx,%rax,8), %r10
.L28:
	testq	%r10, %r10
	je	.L30
	movq	48(%rsp), %r11
	movq	%r10, %r8
	xorl	%eax, %eax
	.p2align 4,,10
.L31:
	movq	(%rdx,%rax), %rcx
	addb	$-1, %r9b
	adcq	(%r15,%rax), %rcx
	setc	%r9b
	movq	%rcx, (%r11,%rax)
	addq	$8, %rax
	subq	$1, %r8
	jne	.L31
	salq	$3, %r10
	addq	%r10, 48(%rsp)
	addq	%r10, %rdx
.L30:
	movq	56(%rsp), %rdi
	movsbl	%r9b, %ecx
	movq	72(%rsp), %rax
	movq	64(%rsp), %r8
	movq	48(%rsp), %r9
	subq	%rdi, %rax
	movq	%rax, 32(%rsp)
	subq	%rdi, %r8
	call	DoCarry
	addq	$104, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 4,,10
.L32:
	movq	56(%rsp), %r10
	xorl	%r9d, %r9d
	jmp	.L28
	.seh_endproc
	.p2align 4,,15
	.def	Add_X_X_using_ADCX;	.scl	3;	.type	32;	.endef
	.seh_proc	Add_X_X_using_ADCX
Add_X_X_using_ADCX:
	pushq	%r15
	.seh_pushreg	%r15
	pushq	%r14
	.seh_pushreg	%r14
	pushq	%r13
	.seh_pushreg	%r13
	pushq	%r12
	.seh_pushreg	%r12
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$104, %rsp
	.seh_stackalloc	104
	.seh_endprologue
	movq	(%rcx), %rsi
	movq	(%rdx), %rax
	movq	%rsi, 56(%rsp)
	cmpq	%rax, %rsi
	movq	%rax, 64(%rsp)
	jb	.L39
	movq	%rax, 56(%rsp)
	movq	%rdx, %rax
	movq	%rcx, %rdx
	movq	%rsi, 64(%rsp)
	movq	%rax, %rcx
.L39:
	movq	56(%rsp), %r11
	movq	(%r8), %rax
	movq	40(%r8), %r10
	movq	40(%rdx), %rdx
	shrq	$3, %r11
	movq	40(%rcx), %r15
	testq	%r11, %r11
	movq	%rax, 72(%rsp)
	movq	%r10, 48(%rsp)
	movq	%r11, 80(%rsp)
	je	.L44
	movq	%r15, %r8
	movq	%rdx, %rax
	xorl	%r9d, %r9d
	movq	%r15, 88(%rsp)
	.p2align 4,,10
.L41:
/APP
 # 173 "autogenerated.h" 1
	addb	$-1, %r9b
	movq	(%rax), %rcx
	adcxq	(%r8), %rcx
	movq	%rcx, %r15
	movq	8(%rax), %rcx
	adcxq	8(%r8), %rcx
	movq	%rcx, %r14
	movq	16(%rax), %rcx
	adcxq	16(%r8), %rcx
	movq	%rcx, %r13
	movq	24(%rax), %rcx
	adcxq	24(%r8), %rcx
	movq	%rcx, %r12
	movq	32(%rax), %rcx
	adcxq	32(%r8), %rcx
	movq	%rcx, %rbp
	movq	40(%rax), %rcx
	adcxq	40(%r8), %rcx
	movq	%rcx, %rdi
	movq	48(%rax), %rcx
	adcxq	48(%r8), %rcx
	movq	%rcx, %rsi
	movq	56(%rax), %rcx
	adcxq	56(%r8), %rcx
	movq	%rcx, %rbx
	setc	%r9b
 # 0 "" 2
/NO_APP
	movq	%r15, (%r10)
	addq	$64, %rax
	addq	$64, %r8
	addq	$64, %r10
	movq	%r14, -56(%r10)
	movq	%r13, -48(%r10)
	movq	%r12, -40(%r10)
	movq	%rbp, -32(%r10)
	movq	%rdi, -24(%r10)
	movq	%rsi, -16(%r10)
	movq	%rbx, -8(%r10)
	subq	$1, %r11
	jne	.L41
	movq	80(%rsp), %rbx
	movq	88(%rsp), %r15
	movq	%rbx, %rax
	salq	$6, %rax
	addq	%rax, 48(%rsp)
	addq	%rax, %rdx
	addq	%rax, %r15
	movq	%rbx, %rax
	movq	56(%rsp), %rbx
	negq	%rax
	leaq	(%rbx,%rax,8), %r10
.L40:
	testq	%r10, %r10
	je	.L42
	movq	48(%rsp), %r11
	movq	%r10, %r8
	xorl	%eax, %eax
	.p2align 4,,10
.L43:
	movq	(%rdx,%rax), %rcx
	addb	$-1, %r9b
	adcq	(%r15,%rax), %rcx
	setc	%r9b
	movq	%rcx, (%r11,%rax)
	addq	$8, %rax
	subq	$1, %r8
	jne	.L43
	salq	$3, %r10
	addq	%r10, 48(%rsp)
	addq	%r10, %rdx
.L42:
	movq	56(%rsp), %rdi
	movsbl	%r9b, %ecx
	movq	72(%rsp), %rax
	movq	64(%rsp), %r8
	movq	48(%rsp), %r9
	subq	%rdi, %rax
	movq	%rax, 32(%rsp)
	subq	%rdi, %r8
	call	DoCarry
	addq	$104, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 4,,10
.L44:
	movq	56(%rsp), %r10
	xorl	%r9d, %r9d
	jmp	.L40
	.seh_endproc
	.p2align 4,,15
	.globl	PMC_Add_XI
	.def	PMC_Add_XI;	.scl	2;	.type	32;	.endef
	.seh_proc	PMC_Add_XI
PMC_Add_XI:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$72, %rsp
	.seh_stackalloc	72
	.seh_endprologue
	testq	%r8, %r8
	movq	%rcx, %rbx
	movl	%edx, %ebp
	movq	%r8, %rdi
	je	.L57
	testq	%rcx, %rcx
	je	.L57
	call	CheckNumber
	testl	%eax, %eax
	movl	%eax, %esi
	jne	.L50
	testb	$2, 24(%rbx)
	je	.L52
	testl	%ebp, %ebp
	jne	.L62
.L54:
	movq	56(%rsp), %rax
	movq	%rax, (%rdi)
.L50:
	movl	%esi, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L52:
	testl	%ebp, %ebp
	je	.L63
	leaq	56(%rsp), %rcx
	movl	$31, %eax
/APP
 # 506 "pmc_internal.h" 1
	bsrl %ebp, %edx
 # 0 "" 2
/NO_APP
	subl	%edx, %eax
	movl	$32, %edx
	subq	%rax, %rdx
	movq	8(%rbx), %rax
	cmpq	%rax, %rdx
	cmovb	%rax, %rdx
	addq	$1, %rdx
	call	AllocateNumber
	testl	%eax, %eax
	jne	.L61
	movq	56(%rsp), %rcx
	movq	40(%rbx), %rdx
	movq	(%rbx), %r10
	movq	(%rcx), %rax
	addq	(%rdx), %rbp
	movq	40(%rcx), %r8
	setc	%cl
	subq	$1, %rax
	addq	$8, %rdx
	movq	%rbp, (%r8)
	leaq	8(%r8), %r9
	movsbl	%cl, %ecx
	movq	%rax, 32(%rsp)
	leaq	-1(%r10), %r8
	call	DoCarry
	testl	%eax, %eax
	je	.L64
.L61:
	movl	%eax, %esi
.L65:
	movl	%esi, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L63:
	leaq	56(%rsp), %rdx
	movq	%rbx, %rcx
	call	DuplicateNumber
	testl	%eax, %eax
	je	.L54
	movl	%eax, %esi
	jmp	.L65
	.p2align 4,,10
.L62:
	leaq	56(%rsp), %rdx
	movl	%ebp, %ecx
	call	From_I_Imp
	testl	%eax, %eax
	je	.L54
	movl	%eax, %esi
	jmp	.L65
	.p2align 4,,10
.L64:
	movq	56(%rsp), %rcx
	call	CommitNumber
	jmp	.L54
	.p2align 4,,10
.L57:
	movl	$-1, %esi
	jmp	.L50
	.seh_endproc
	.p2align 4,,15
	.globl	PMC_Add_XL
	.def	PMC_Add_XL;	.scl	2;	.type	32;	.endef
	.seh_proc	PMC_Add_XL
PMC_Add_XL:
	pushq	%r12
	.seh_pushreg	%r12
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$64, %rsp
	.seh_stackalloc	64
	.seh_endprologue
	testq	%r8, %r8
	movq	%rcx, %rbx
	movq	%rdx, %rdi
	movq	%r8, %rbp
	je	.L77
	testq	%rcx, %rcx
	je	.L77
	call	CheckNumber
	testl	%eax, %eax
	movl	%eax, %esi
	jne	.L66
	testb	$2, 24(%rbx)
	je	.L68
	testq	%rdi, %rdi
	jne	.L88
.L70:
	movq	56(%rsp), %rax
	movq	%rax, 0(%rbp)
.L66:
	movl	%esi, %eax
	addq	$64, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	popq	%r12
	ret
	.p2align 4,,10
.L68:
	testq	%rdi, %rdi
	je	.L89
	movq	%rdi, %r12
	movq	8(%rbx), %rax
	shrq	$32, %r12
	testq	%r12, %r12
	jne	.L73
	movl	$31, %ecx
/APP
 # 506 "pmc_internal.h" 1
	bsrl %edi, %edx
 # 0 "" 2
/NO_APP
	subl	%edx, %ecx
	movl	$32, %edx
	subq	%rcx, %rdx
	leaq	56(%rsp), %rcx
	cmpq	%rax, %rdx
	cmovb	%rax, %rdx
	addq	$1, %rdx
	call	AllocateNumber
	testl	%eax, %eax
	jne	.L83
	movq	56(%rsp), %rcx
	movq	40(%rbx), %rdx
	movq	(%rbx), %r10
	movq	(%rcx), %rax
	addq	(%rdx), %rdi
	movq	40(%rcx), %r8
	setc	%cl
	subq	$1, %rax
	addq	$8, %rdx
	movq	%rdi, (%r8)
	leaq	8(%r8), %r9
	movsbl	%cl, %ecx
	movq	%rax, 32(%rsp)
	leaq	-1(%r10), %r8
	call	DoCarry
	testl	%eax, %eax
	jne	.L83
.L74:
	movq	56(%rsp), %rcx
	call	CommitNumber
	jmp	.L70
	.p2align 4,,10
.L73:
	movl	$31, %ecx
/APP
 # 506 "pmc_internal.h" 1
	bsrl %r12d, %edx
 # 0 "" 2
/NO_APP
	subl	%edx, %ecx
	movl	$64, %edx
	subq	%rcx, %rdx
	leaq	56(%rsp), %rcx
	cmpq	%rax, %rdx
	cmovb	%rax, %rdx
	addq	$1, %rdx
	call	AllocateNumber
	testl	%eax, %eax
	je	.L90
.L83:
	movl	%eax, %esi
.L91:
	movl	%esi, %eax
	addq	$64, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	popq	%r12
	ret
	.p2align 4,,10
.L88:
	leaq	56(%rsp), %rdx
	movq	%rdi, %rcx
	call	From_L_Imp
	testl	%eax, %eax
	je	.L70
	movl	%eax, %esi
	jmp	.L91
	.p2align 4,,10
.L89:
	leaq	56(%rsp), %rdx
	movq	%rbx, %rcx
	call	DuplicateNumber
	testl	%eax, %eax
	je	.L70
	movl	%eax, %esi
	jmp	.L91
	.p2align 4,,10
.L90:
	movq	(%rbx), %r10
	movl	%edi, %edi
	movq	56(%rsp), %rcx
	movq	40(%rbx), %rdx
	cmpq	$1, %r10
	movq	40(%rcx), %r8
	movq	(%rdx), %rax
	ja	.L75
	addq	%rax, %rdi
	setc	%dl
	xorl	%eax, %eax
	movq	%rdi, (%r8)
	addb	$-1, %dl
	adcq	%rax, %r12
	movq	%r12, 8(%r8)
	jnc	.L74
	movq	$1, 16(%r8)
	jmp	.L74
	.p2align 4,,10
.L75:
	addq	%rax, %rdi
	movq	(%rcx), %r9
	setc	%al
	movq	%rdi, (%r8)
	addb	$-1, %al
	adcq	8(%rdx), %r12
	leaq	-2(%r9), %rax
	leaq	16(%r8), %r9
	setc	%cl
	movq	%r12, 8(%r8)
	addq	$16, %rdx
	movq	%rax, 32(%rsp)
	leaq	-2(%r10), %r8
	movsbl	%cl, %ecx
	call	DoCarry
	testl	%eax, %eax
	je	.L74
	movl	%eax, %esi
	jmp	.L91
	.p2align 4,,10
.L77:
	movl	$-1, %esi
	jmp	.L66
	.seh_endproc
	.p2align 4,,15
	.globl	PMC_Add_XX
	.def	PMC_Add_XX;	.scl	2;	.type	32;	.endef
	.seh_proc	PMC_Add_XX
PMC_Add_XX:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$56, %rsp
	.seh_stackalloc	56
	.seh_endprologue
	movq	%rdx, %rdi
	testq	%r8, %r8
	movq	%rcx, %rsi
	sete	%dl
	testq	%rdi, %rdi
	movq	%r8, %rbp
	sete	%al
	orb	%al, %dl
	jne	.L97
	testq	%rcx, %rcx
	je	.L97
	call	CheckNumber
	testl	%eax, %eax
	movl	%eax, %ebx
	je	.L104
.L92:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L104:
	movq	%rdi, %rcx
	call	CheckNumber
	testl	%eax, %eax
	movl	%eax, %ebx
	jne	.L92
	movzbl	24(%rdi), %eax
	andl	$2, %eax
	testb	$2, 24(%rsi)
	jne	.L105
	testb	%al, %al
	je	.L96
	leaq	40(%rsp), %rdx
	movq	%rsi, %rcx
	call	DuplicateNumber
	testl	%eax, %eax
	jne	.L102
.L103:
	movq	40(%rsp), %rdx
.L95:
	movl	%ebx, %eax
	movq	%rdx, 0(%rbp)
	addq	$56, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L105:
	testb	%al, %al
	movq	.refptr.number_zero(%rip), %rdx
	jne	.L95
	leaq	40(%rsp), %rdx
	movq	%rdi, %rcx
	call	DuplicateNumber
	testl	%eax, %eax
	je	.L103
	.p2align 4,,10
.L102:
	movl	%eax, %ebx
	jmp	.L92
	.p2align 4,,10
.L96:
	movq	8(%rdi), %rdx
	leaq	40(%rsp), %rcx
	cmpq	%rdx, 8(%rsi)
	cmovnb	8(%rsi), %rdx
	addq	$1, %rdx
	call	AllocateNumber
	testl	%eax, %eax
	jne	.L102
	movq	40(%rsp), %r8
	movq	%rdi, %rdx
	movq	%rsi, %rcx
	call	*fp_Add_X_X_using_ADC(%rip)
	testl	%eax, %eax
	jne	.L102
	movq	40(%rsp), %rcx
	call	CommitNumber
	jmp	.L103
	.p2align 4,,10
.L97:
	movl	$-1, %ebx
	jmp	.L92
	.seh_endproc
	.p2align 4,,15
	.globl	Initialize_Add
	.def	Initialize_Add;	.scl	2;	.type	32;	.endef
	.seh_proc	Initialize_Add
Initialize_Add:
	.seh_endprologue
	leaq	Add_X_X_using_ADC(%rip), %rdx
	leaq	Add_X_X_using_ADCX(%rip), %rax
	testb	$2, (%rcx)
	cmove	%rdx, %rax
	movq	%rax, fp_Add_X_X_using_ADC(%rip)
	xorl	%eax, %eax
	ret
	.seh_endproc
.lcomm fp_Add_X_X_using_ADC,8,8
	.ident	"GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0"
	.def	CheckNumber;	.scl	2;	.type	32;	.endef
	.def	AllocateNumber;	.scl	2;	.type	32;	.endef
	.def	DuplicateNumber;	.scl	2;	.type	32;	.endef
	.def	From_I_Imp;	.scl	2;	.type	32;	.endef
	.def	CommitNumber;	.scl	2;	.type	32;	.endef
	.def	From_L_Imp;	.scl	2;	.type	32;	.endef
	.section	.rdata$.refptr.number_zero, "dr"
	.globl	.refptr.number_zero
	.linkonce	discard
.refptr.number_zero:
	.quad	number_zero
