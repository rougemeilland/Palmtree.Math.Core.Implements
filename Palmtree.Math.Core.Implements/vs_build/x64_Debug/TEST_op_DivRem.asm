; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__1C66ECB2_pmc_debug@h DB 01H
__E0086EBB_test_op_divrem@c DB 01H
msvcjmc	ENDS
PUBLIC	TEST_PMC_DivRem_I_X
PUBLIC	TEST_PMC_DivRem_L_X
PUBLIC	TEST_PMC_DivRem_X_I
PUBLIC	TEST_PMC_DivRem_X_L
PUBLIC	TEST_PMC_DivRem_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@ ; `string'
PUBLIC	??_C@_0BH@GMMALBOD@PMC_DivRem_I_X?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@GFJFNJNP@PMC_DivRem_I_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
PUBLIC	??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BH@PEGDMGPD@PMC_DivRem_L_X?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@LDKNNJHG@PMC_DivRem_L_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
PUBLIC	??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@CJJOGBJJ@PMC_DivRem_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
PUBLIC	??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ ; `string'
PUBLIC	??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@IELOONJL@PMC_DivRem_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
PUBLIC	??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@FNKPNHFA@PMC_DivRem_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_DivRem_I_X DD imagerel $LN13
	DD	imagerel $LN13+594
	DD	imagerel $unwind$TEST_PMC_DivRem_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_DivRem_L_X DD imagerel $LN13
	DD	imagerel $LN13+599
	DD	imagerel $unwind$TEST_PMC_DivRem_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_DivRem_X_I DD imagerel $LN16
	DD	imagerel $LN16+836
	DD	imagerel $unwind$TEST_PMC_DivRem_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_DivRem_X_L DD imagerel $LN16
	DD	imagerel $LN16+839
	DD	imagerel $unwind$TEST_PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_DivRem_X_X DD imagerel $LN21
	DD	imagerel $LN21+1195
	DD	imagerel $unwind$TEST_PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_EQUALS_MEMORY DD imagerel _EQUALS_MEMORY
	DD	imagerel _EQUALS_MEMORY+198
	DD	imagerel $unwind$_EQUALS_MEMORY
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DB@FNKPNHFA@PMC_DivRem_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@FNKPNHFA@PMC_DivRem_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_DivRem_X_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_DivRem_X'
	DB	'_X (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@IELOONJL@PMC_DivRem_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@IELOONJL@PMC_DivRem_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_DivRem_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_DivRem_X'
	DB	'_L (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
CONST	SEGMENT
??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ DB 'P'
	DB	'MC_ToByteArray', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CJJOGBJJ@PMC_DivRem_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@CJJOGBJJ@PMC_DivRem_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_DivRem_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_DivRem_X'
	DB	'_I (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LDKNNJHG@PMC_DivRem_L_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@LDKNNJHG@PMC_DivRem_L_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_DivRem_L_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PEGDMGPD@PMC_DivRem_L_X?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@PEGDMGPD@PMC_DivRem_L_X?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_DivRem_L'
	DB	'_X (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 08fH
	DB	0e8H, 097H, ']', 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H, 0eaH
	DB	092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 08fH
	DB	0a4H, 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H, 0eaH, 092H, 'v', 082H
	DB	0b5H, 082H, 0c8H, 082H, 0a2H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GFJFNJNP@PMC_DivRem_I_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@GFJFNJNP@PMC_DivRem_I_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_DivRem_I_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GMMALBOD@PMC_DivRem_I_X?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@GMMALBOD@PMC_DivRem_I_X?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_DivRem_I'
	DB	'_X (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
CONST	SEGMENT
??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@ DB 'P'
	DB	'MC_FromByteArray', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_EQUALS_MEMORY DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_DivRem_X_X DD 025054a19H
	DD	011d2322H
	DD	0701600a7H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0520H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_DivRem_X_X$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_PMC_DivRem_X_X$rtcName$1 DB 076H
	DB	00H
	ORG $+2
TEST_PMC_DivRem_X_X$rtcName$2 DB 071H
	DB	00H
	ORG $+2
TEST_PMC_DivRem_X_X$rtcName$3 DB 072H
	DB	00H
	ORG $+2
TEST_PMC_DivRem_X_X$rtcName$4 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_PMC_DivRem_X_X$rtcName$5 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_PMC_DivRem_X_X$rtcName$6 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_PMC_DivRem_X_X$rtcName$7 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_PMC_DivRem_X_X$rtcVarDesc DD 0308H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcName$7
	DD	01f0H
	DD	0100H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcName$6
	DD	01c8H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcName$5
	DD	0b0H
	DD	0100H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcName$4
	DD	088H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcName$0
	ORG $+384
TEST_PMC_DivRem_X_X$rtcFrameData DD 08H
	DD	00H
	DQ	FLAT:TEST_PMC_DivRem_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_DivRem_X_L DD 025054a19H
	DD	011d2322H
	DD	070160077H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	03a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_DivRem_X_L$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_PMC_DivRem_X_L$rtcName$1 DB 071H
	DB	00H
	ORG $+2
TEST_PMC_DivRem_X_L$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_PMC_DivRem_X_L$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_PMC_DivRem_X_L$rtcName$4 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	072H
	DB	00H
	ORG $+7
TEST_PMC_DivRem_X_L$rtcVarDesc DD 01a8H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_L$rtcName$4
	DD	0188H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_L$rtcName$3
	DD	070H
	DD	0100H
	DQ	FLAT:TEST_PMC_DivRem_X_L$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_L$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_L$rtcName$0
	ORG $+240
TEST_PMC_DivRem_X_L$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:TEST_PMC_DivRem_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_DivRem_X_I DD 025054a19H
	DD	011d2322H
	DD	070160077H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	03a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_DivRem_X_I$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_PMC_DivRem_X_I$rtcName$1 DB 071H
	DB	00H
	ORG $+2
TEST_PMC_DivRem_X_I$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_PMC_DivRem_X_I$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_PMC_DivRem_X_I$rtcName$4 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	072H
	DB	00H
	ORG $+7
TEST_PMC_DivRem_X_I$rtcVarDesc DD 01a4H
	DD	04H
	DQ	FLAT:TEST_PMC_DivRem_X_I$rtcName$4
	DD	0188H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_I$rtcName$3
	DD	070H
	DD	0100H
	DQ	FLAT:TEST_PMC_DivRem_X_I$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_I$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_X_I$rtcName$0
	ORG $+240
TEST_PMC_DivRem_X_I$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:TEST_PMC_DivRem_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_DivRem_L_X DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_DivRem_L_X$rtcName$0 DB 076H
	DB	00H
	ORG $+6
TEST_PMC_DivRem_L_X$rtcName$1 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	071H
	DB	00H
	ORG $+7
TEST_PMC_DivRem_L_X$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	072H
	DB	00H
	ORG $+15
TEST_PMC_DivRem_L_X$rtcVarDesc DD 068H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_L_X$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_L_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_L_X$rtcName$0
	ORG $+144
TEST_PMC_DivRem_L_X$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TEST_PMC_DivRem_L_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_DivRem_I_X DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_DivRem_I_X$rtcName$0 DB 076H
	DB	00H
	ORG $+6
TEST_PMC_DivRem_I_X$rtcName$1 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	071H
	DB	00H
	ORG $+7
TEST_PMC_DivRem_I_X$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	072H
	DB	00H
	ORG $+15
TEST_PMC_DivRem_I_X$rtcVarDesc DD 064H
	DD	04H
	DQ	FLAT:TEST_PMC_DivRem_I_X$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:TEST_PMC_DivRem_I_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_DivRem_I_X$rtcName$0
	ORG $+144
TEST_PMC_DivRem_I_X$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TEST_PMC_DivRem_I_X$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 224
count1$ = 232
buffer2$ = 240
count2$ = 248
_EQUALS_MEMORY PROC					; COMDAT

; 155  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__1C66ECB2_pmc_debug@h
	call	__CheckForDebuggerJustMyCode

; 156  :     if (count1 != count2)

	mov	rax, QWORD PTR count2$[rbp]
	cmp	QWORD PTR count1$[rbp], rax
	je	SHORT $LN4@EQUALS_MEM

; 157  :         return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN4@EQUALS_MEM:
$LN2@EQUALS_MEM:

; 158  :     while (count1 > 0)

	cmp	QWORD PTR count1$[rbp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 159  :     {
; 160  :         if (*buffer1 != *buffer2)

	mov	rax, QWORD PTR buffer1$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR buffer2$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN5@EQUALS_MEM

; 161  :             return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 162  :         ++buffer1;

	mov	rax, QWORD PTR buffer1$[rbp]
	inc	rax
	mov	QWORD PTR buffer1$[rbp], rax

; 163  :         ++buffer2;

	mov	rax, QWORD PTR buffer2$[rbp]
	inc	rax
	mov	QWORD PTR buffer2$[rbp], rax

; 164  :         --count1;

	mov	rax, QWORD PTR count1$[rbp]
	dec	rax
	mov	QWORD PTR count1$[rbp], rax

; 165  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 166  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 167  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
;	COMDAT TEST_PMC_DivRem_X_X
_TEXT	SEGMENT
u$ = 8
v$ = 40
q$ = 72
r$ = 104
actual_q_buf$ = 144
actual_q_buf_size$ = 424
actual_r_buf$ = 464
actual_r_buf_size$ = 744
result$ = 772
u_result$ = 804
v_result$ = 836
q_r_result$ = 868
tv212 = 1268
tv197 = 1268
tv182 = 1268
tv163 = 1268
tv143 = 1268
tv92 = 1268
tv74 = 1268
tv171 = 1272
tv152 = 1272
tv132 = 1272
tv82 = 1272
tv64 = 1272
__$ArrayPad$ = 1280
env$ = 1328
ep$ = 1336
no$ = 1344
u_buf$ = 1352
u_buf_size$ = 1360
v_buf$ = 1368
v_buf_size$ = 1376
desired_return_code$ = 1384
desired_q_buf$ = 1392
desired_q_buf_size$ = 1400
desired_r_buf$ = 1408
desired_r_buf_size$ = 1416
TEST_PMC_DivRem_X_X PROC				; COMDAT

; 124  : {

$LN21:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1336				; 00000538H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 334				; 0000014eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1368]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__E0086EBB_test_op_divrem@c
	call	__CheckForDebuggerJustMyCode

; 125  : 	HANDLE u;
; 126  : 	HANDLE v;
; 127  : 	HANDLE q;
; 128  : 	HANDLE r;
; 129  : 	unsigned char actual_q_buf[256];
; 130  : 	size_t actual_q_buf_size;
; 131  : 	unsigned char actual_r_buf[256];
; 132  : 	size_t actual_r_buf_size;
; 133  : 	PMC_STATUS_CODE result;
; 134  : 	PMC_STATUS_CODE u_result;
; 135  : 	PMC_STATUS_CODE v_result;
; 136  : 	PMC_STATUS_CODE q_r_result;
; 137  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 1), (u_result = ep->PMC_FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN7@TEST_PMC_D
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN8@TEST_PMC_D
$LN7@TEST_PMC_D:
	mov	DWORD PTR tv74[rbp], 0
$LN8@TEST_PMC_D:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 138  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 2), (v_result = ep->PMC_FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage("PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN9@TEST_PMC_D
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN10@TEST_PMC_D
$LN9@TEST_PMC_D:
	mov	DWORD PTR tv92[rbp], 0
$LN10@TEST_PMC_D:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 139  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 3), (q_r_result = ep->PMC_DivRem_X_X(u, v, &q, &r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Xの復帰コードが期待通りではない(%d)", q_r_result));

	lea	r9, QWORD PTR r$[rbp]
	lea	r8, QWORD PTR q$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+248]
	mov	DWORD PTR q_r_result$[rbp], eax
	mov	eax, DWORD PTR desired_return_code$[rbp]
	cmp	DWORD PTR q_r_result$[rbp], eax
	jne	SHORT $LN11@TEST_PMC_D
	mov	DWORD PTR tv143[rbp], 1
	jmp	SHORT $LN12@TEST_PMC_D
$LN11@TEST_PMC_D:
	mov	DWORD PTR tv143[rbp], 0
$LN12@TEST_PMC_D:
	mov	edx, DWORD PTR q_r_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DB@FNKPNHFA@PMC_DivRem_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv143[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 140  : 	if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_return_code$[rbp], 0
	jne	$LN2@TEST_PMC_D

; 141  : 	{
; 142  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 4), (result = ep->PMC_ToByteArray(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_q_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_q_buf$[rbp]
	mov	rcx, QWORD PTR q$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+56]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN13@TEST_PMC_D
	mov	DWORD PTR tv163[rbp], 1
	jmp	SHORT $LN14@TEST_PMC_D
$LN13@TEST_PMC_D:
	mov	DWORD PTR tv163[rbp], 0
$LN14@TEST_PMC_D:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
	call	FormatTestMesssage
	mov	QWORD PTR tv152[rbp], rax
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv152[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv163[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 143  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 5), (result = ep->PMC_ToByteArray(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_r_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_r_buf$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+56]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN15@TEST_PMC_D
	mov	DWORD PTR tv182[rbp], 1
	jmp	SHORT $LN16@TEST_PMC_D
$LN15@TEST_PMC_D:
	mov	DWORD PTR tv182[rbp], 0
$LN16@TEST_PMC_D:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
	call	FormatTestMesssage
	mov	QWORD PTR tv171[rbp], rax
	mov	r8d, 5
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv171[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv182[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 144  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 6), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	r9, QWORD PTR desired_q_buf_size$[rbp]
	mov	r8, QWORD PTR desired_q_buf$[rbp]
	mov	rdx, QWORD PTR actual_q_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_q_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN17@TEST_PMC_D
	mov	DWORD PTR tv197[rbp], 1
	jmp	SHORT $LN18@TEST_PMC_D
$LN17@TEST_PMC_D:
	mov	DWORD PTR tv197[rbp], 0
$LN18@TEST_PMC_D:
	mov	r8d, 6
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv197[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 145  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 7), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, "剰余の値が一致しない");

	mov	r9, QWORD PTR desired_r_buf_size$[rbp]
	mov	r8, QWORD PTR desired_r_buf$[rbp]
	mov	rdx, QWORD PTR actual_r_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_r_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN19@TEST_PMC_D
	mov	DWORD PTR tv212[rbp], 1
	jmp	SHORT $LN20@TEST_PMC_D
$LN19@TEST_PMC_D:
	mov	DWORD PTR tv212[rbp], 0
$LN20@TEST_PMC_D:
	mov	r8d, 7
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv212[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert
$LN2@TEST_PMC_D:

; 146  : 	}
; 147  : 	if (q_r_result == PMC_STATUS_OK)

	cmp	DWORD PTR q_r_result$[rbp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 148  : 	{
; 149  : 		ep->PMC_Dispose(q);

	mov	rcx, QWORD PTR q$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]

; 150  : 		ep->PMC_Dispose(r);

	mov	rcx, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_PMC_D:

; 151  : 	}
; 152  : 	if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN4@TEST_PMC_D

; 153  : 		ep->PMC_Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN4@TEST_PMC_D:

; 154  : 	if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN5@TEST_PMC_D

; 155  : 		ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN5@TEST_PMC_D:

; 156  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_DivRem_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1304]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
;	COMDAT TEST_PMC_DivRem_X_L
_TEXT	SEGMENT
u$ = 8
q$ = 40
actual_q_buf$ = 80
actual_q_buf_size$ = 360
actual_r$ = 392
result$ = 420
u_result$ = 452
q_result$ = 484
tv170 = 884
tv160 = 884
tv145 = 884
tv93 = 884
tv74 = 884
tv134 = 888
tv82 = 888
tv64 = 888
__$ArrayPad$ = 896
env$ = 944
ep$ = 952
no$ = 960
u_buf$ = 968
u_buf_size$ = 976
v$ = 984
desired_return_code$ = 992
desired_q_buf$ = 1000
desired_q_buf_size$ = 1008
desired_r$ = 1016
TEST_PMC_DivRem_X_L PROC				; COMDAT

; 100  : {

$LN16:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 952				; 000003b8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 238				; 000000eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+984]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__E0086EBB_test_op_divrem@c
	call	__CheckForDebuggerJustMyCode

; 101  :     HANDLE u;
; 102  :     HANDLE q;
; 103  :     unsigned char actual_q_buf[256];
; 104  :     size_t actual_q_buf_size;
; 105  :     unsigned __int64 actual_r;
; 106  :     PMC_STATUS_CODE result;
; 107  :     PMC_STATUS_CODE u_result;
; 108  :     PMC_STATUS_CODE q_result;
; 109  :     TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 1), (u_result = ep->PMC_FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN6@TEST_PMC_D
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN7@TEST_PMC_D
$LN6@TEST_PMC_D:
	mov	DWORD PTR tv74[rbp], 0
$LN7@TEST_PMC_D:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 110  :     TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 2), (q_result = ep->PMC_DivRem_X_L(u, v, &q, &actual_r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Lの復帰コードが期待通りではない(%d)", q_result));

	lea	r9, QWORD PTR actual_r$[rbp]
	lea	r8, QWORD PTR q$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+240]
	mov	DWORD PTR q_result$[rbp], eax
	mov	eax, DWORD PTR desired_return_code$[rbp]
	cmp	DWORD PTR q_result$[rbp], eax
	jne	SHORT $LN8@TEST_PMC_D
	mov	DWORD PTR tv93[rbp], 1
	jmp	SHORT $LN9@TEST_PMC_D
$LN8@TEST_PMC_D:
	mov	DWORD PTR tv93[rbp], 0
$LN9@TEST_PMC_D:
	mov	edx, DWORD PTR q_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DB@IELOONJL@PMC_DivRem_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv93[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 111  :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_return_code$[rbp], 0
	jne	$LN2@TEST_PMC_D

; 112  :     {
; 113  :         TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 3), (result = ep->PMC_ToByteArray(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_q_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_q_buf$[rbp]
	mov	rcx, QWORD PTR q$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+56]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN10@TEST_PMC_D
	mov	DWORD PTR tv145[rbp], 1
	jmp	SHORT $LN11@TEST_PMC_D
$LN10@TEST_PMC_D:
	mov	DWORD PTR tv145[rbp], 0
$LN11@TEST_PMC_D:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
	call	FormatTestMesssage
	mov	QWORD PTR tv134[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv134[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv145[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 114  :         TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	r9, QWORD PTR desired_q_buf_size$[rbp]
	mov	r8, QWORD PTR desired_q_buf$[rbp]
	mov	rdx, QWORD PTR actual_q_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_q_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_D
	mov	DWORD PTR tv160[rbp], 1
	jmp	SHORT $LN13@TEST_PMC_D
$LN12@TEST_PMC_D:
	mov	DWORD PTR tv160[rbp], 0
$LN13@TEST_PMC_D:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv160[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 115  :         TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 5), actual_r == desired_r, "剰余の値が一致しない");

	mov	rax, QWORD PTR desired_r$[rbp]
	cmp	QWORD PTR actual_r$[rbp], rax
	jne	SHORT $LN14@TEST_PMC_D
	mov	DWORD PTR tv170[rbp], 1
	jmp	SHORT $LN15@TEST_PMC_D
$LN14@TEST_PMC_D:
	mov	DWORD PTR tv170[rbp], 0
$LN15@TEST_PMC_D:
	mov	r8d, 5
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv170[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert
$LN2@TEST_PMC_D:

; 116  :     }
; 117  :     if (q_result == PMC_STATUS_OK)

	cmp	DWORD PTR q_result$[rbp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 118  :         ep->PMC_Dispose(q);

	mov	rcx, QWORD PTR q$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_PMC_D:

; 119  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN4@TEST_PMC_D

; 120  :         ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN4@TEST_PMC_D:

; 121  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_DivRem_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+920]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_DivRem_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
;	COMDAT TEST_PMC_DivRem_X_I
_TEXT	SEGMENT
u$ = 8
q$ = 40
actual_q_buf$ = 80
actual_q_buf_size$ = 360
actual_r$ = 388
result$ = 420
u_result$ = 452
q_result$ = 484
tv170 = 884
tv160 = 884
tv145 = 884
tv93 = 884
tv74 = 884
tv134 = 888
tv82 = 888
tv64 = 888
__$ArrayPad$ = 896
env$ = 944
ep$ = 952
no$ = 960
u_buf$ = 968
u_buf_size$ = 976
v$ = 984
desired_return_code$ = 992
desired_q_buf$ = 1000
desired_q_buf_size$ = 1008
desired_r$ = 1016
TEST_PMC_DivRem_X_I PROC				; COMDAT

; 76   : {

$LN16:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 952				; 000003b8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 238				; 000000eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+984]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__E0086EBB_test_op_divrem@c
	call	__CheckForDebuggerJustMyCode

; 77   :     HANDLE u;
; 78   :     HANDLE q;
; 79   :     unsigned char actual_q_buf[256];
; 80   :     size_t actual_q_buf_size;
; 81   :     unsigned __int32 actual_r;
; 82   :     PMC_STATUS_CODE result;
; 83   :     PMC_STATUS_CODE u_result;
; 84   :     PMC_STATUS_CODE q_result;
; 85   :     TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 1), (u_result = ep->PMC_FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN6@TEST_PMC_D
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN7@TEST_PMC_D
$LN6@TEST_PMC_D:
	mov	DWORD PTR tv74[rbp], 0
$LN7@TEST_PMC_D:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 86   :     TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 2), (q_result = ep->PMC_DivRem_X_I(u, v, &q, &actual_r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Iの復帰コードが期待通りではない(%d)", q_result));

	lea	r9, QWORD PTR actual_r$[rbp]
	lea	r8, QWORD PTR q$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+232]
	mov	DWORD PTR q_result$[rbp], eax
	mov	eax, DWORD PTR desired_return_code$[rbp]
	cmp	DWORD PTR q_result$[rbp], eax
	jne	SHORT $LN8@TEST_PMC_D
	mov	DWORD PTR tv93[rbp], 1
	jmp	SHORT $LN9@TEST_PMC_D
$LN8@TEST_PMC_D:
	mov	DWORD PTR tv93[rbp], 0
$LN9@TEST_PMC_D:
	mov	edx, DWORD PTR q_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DB@CJJOGBJJ@PMC_DivRem_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv93[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 87   :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_return_code$[rbp], 0
	jne	$LN2@TEST_PMC_D

; 88   :     {
; 89   :         TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 3), (result = ep->PMC_ToByteArray(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_q_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_q_buf$[rbp]
	mov	rcx, QWORD PTR q$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+56]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN10@TEST_PMC_D
	mov	DWORD PTR tv145[rbp], 1
	jmp	SHORT $LN11@TEST_PMC_D
$LN10@TEST_PMC_D:
	mov	DWORD PTR tv145[rbp], 0
$LN11@TEST_PMC_D:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
	call	FormatTestMesssage
	mov	QWORD PTR tv134[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv134[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv145[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 90   :         TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	r9, QWORD PTR desired_q_buf_size$[rbp]
	mov	r8, QWORD PTR desired_q_buf$[rbp]
	mov	rdx, QWORD PTR actual_q_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_q_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_D
	mov	DWORD PTR tv160[rbp], 1
	jmp	SHORT $LN13@TEST_PMC_D
$LN12@TEST_PMC_D:
	mov	DWORD PTR tv160[rbp], 0
$LN13@TEST_PMC_D:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv160[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 91   :         TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 5), actual_r == desired_r, "剰余の値が一致しない");

	mov	eax, DWORD PTR desired_r$[rbp]
	cmp	DWORD PTR actual_r$[rbp], eax
	jne	SHORT $LN14@TEST_PMC_D
	mov	DWORD PTR tv170[rbp], 1
	jmp	SHORT $LN15@TEST_PMC_D
$LN14@TEST_PMC_D:
	mov	DWORD PTR tv170[rbp], 0
$LN15@TEST_PMC_D:
	mov	r8d, 5
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv170[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert
$LN2@TEST_PMC_D:

; 92   :     }
; 93   :     if (q_result == PMC_STATUS_OK)

	cmp	DWORD PTR q_result$[rbp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 94   :         ep->PMC_Dispose(q);

	mov	rcx, QWORD PTR q$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_PMC_D:

; 95   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN4@TEST_PMC_D

; 96   :         ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN4@TEST_PMC_D:

; 97   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_DivRem_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+920]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_DivRem_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
;	COMDAT TEST_PMC_DivRem_L_X
_TEXT	SEGMENT
v$ = 8
actual_q$ = 40
actual_r$ = 72
result$ = 100
v_result$ = 132
tv146 = 340
tv136 = 340
tv93 = 340
tv74 = 340
tv82 = 344
tv64 = 344
env$ = 384
ep$ = 392
no$ = 400
u$ = 408
v_buf$ = 416
v_buf_size$ = 424
desired_return_code$ = 432
desired_q$ = 440
desired_r$ = 448
TEST_PMC_DivRem_L_X PROC				; COMDAT

; 58   : {

$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__E0086EBB_test_op_divrem@c
	call	__CheckForDebuggerJustMyCode

; 59   : 	HANDLE v;
; 60   : 	unsigned __int64 actual_q;
; 61   :     unsigned __int64 actual_r;
; 62   :     PMC_STATUS_CODE result;
; 63   : 	PMC_STATUS_CODE v_result;
; 64   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_L_X (%d.%d)", no, 1), (v_result = ep->PMC_FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage("PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN5@TEST_PMC_D
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_PMC_D
$LN5@TEST_PMC_D:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_PMC_D:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PEGDMGPD@PMC_DivRem_L_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 65   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_L_X (%d.%d)", no, 2), (result = ep->PMC_DivRem_L_X(u, v, &actual_q, &actual_r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_L_Xの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_r$[rbp]
	lea	r8, QWORD PTR actual_q$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+224]
	mov	DWORD PTR result$[rbp], eax
	mov	eax, DWORD PTR desired_return_code$[rbp]
	cmp	DWORD PTR result$[rbp], eax
	jne	SHORT $LN7@TEST_PMC_D
	mov	DWORD PTR tv93[rbp], 1
	jmp	SHORT $LN8@TEST_PMC_D
$LN7@TEST_PMC_D:
	mov	DWORD PTR tv93[rbp], 0
$LN8@TEST_PMC_D:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DB@LDKNNJHG@PMC_DivRem_L_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PEGDMGPD@PMC_DivRem_L_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv93[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 66   : 	if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_return_code$[rbp], 0
	jne	$LN2@TEST_PMC_D

; 67   : 	{
; 68   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_L_X (%d.%d)", no, 3), actual_q == desired_q, "商の値が一致しない");

	mov	rax, QWORD PTR desired_q$[rbp]
	cmp	QWORD PTR actual_q$[rbp], rax
	jne	SHORT $LN9@TEST_PMC_D
	mov	DWORD PTR tv136[rbp], 1
	jmp	SHORT $LN10@TEST_PMC_D
$LN9@TEST_PMC_D:
	mov	DWORD PTR tv136[rbp], 0
$LN10@TEST_PMC_D:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PEGDMGPD@PMC_DivRem_L_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv136[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 69   :         TEST_Assert(env, FormatTestLabel("PMC_DivRem_L_X (%d.%d)", no, 4), actual_r == desired_r, "剰余の値が一致しない");

	mov	rax, QWORD PTR desired_r$[rbp]
	cmp	QWORD PTR actual_r$[rbp], rax
	jne	SHORT $LN11@TEST_PMC_D
	mov	DWORD PTR tv146[rbp], 1
	jmp	SHORT $LN12@TEST_PMC_D
$LN11@TEST_PMC_D:
	mov	DWORD PTR tv146[rbp], 0
$LN12@TEST_PMC_D:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@PEGDMGPD@PMC_DivRem_L_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv146[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert
$LN2@TEST_PMC_D:

; 70   :     }
; 71   : 	if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 72   : 		ep->PMC_Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_PMC_D:

; 73   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_DivRem_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_DivRem_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
;	COMDAT TEST_PMC_DivRem_I_X
_TEXT	SEGMENT
v$ = 8
actual_q$ = 36
actual_r$ = 68
result$ = 100
v_result$ = 132
tv146 = 340
tv136 = 340
tv93 = 340
tv74 = 340
tv82 = 344
tv64 = 344
env$ = 384
ep$ = 392
no$ = 400
u$ = 408
v_buf$ = 416
v_buf_size$ = 424
desired_return_code$ = 432
desired_q$ = 440
desired_r$ = 448
TEST_PMC_DivRem_I_X PROC				; COMDAT

; 40   : {

$LN13:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__E0086EBB_test_op_divrem@c
	call	__CheckForDebuggerJustMyCode

; 41   : 	HANDLE v;
; 42   : 	unsigned __int32 actual_q;
; 43   :     unsigned __int32 actual_r;
; 44   :     PMC_STATUS_CODE result;
; 45   : 	PMC_STATUS_CODE v_result;
; 46   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_I_X (%d.%d)", no, 1), (v_result = ep->PMC_FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage("PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN5@TEST_PMC_D
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_PMC_D
$LN5@TEST_PMC_D:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_PMC_D:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@GMMALBOD@PMC_DivRem_I_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 47   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_I_X (%d.%d)", no, 2), (result = ep->PMC_DivRem_I_X(u, v, &actual_q, &actual_r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_I_Xの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_r$[rbp]
	lea	r8, QWORD PTR actual_q$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+216]
	mov	DWORD PTR result$[rbp], eax
	mov	eax, DWORD PTR desired_return_code$[rbp]
	cmp	DWORD PTR result$[rbp], eax
	jne	SHORT $LN7@TEST_PMC_D
	mov	DWORD PTR tv93[rbp], 1
	jmp	SHORT $LN8@TEST_PMC_D
$LN7@TEST_PMC_D:
	mov	DWORD PTR tv93[rbp], 0
$LN8@TEST_PMC_D:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DB@GFJFNJNP@PMC_DivRem_I_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@GMMALBOD@PMC_DivRem_I_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv93[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 48   : 	if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_return_code$[rbp], 0
	jne	$LN2@TEST_PMC_D

; 49   : 	{
; 50   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_I_X (%d.%d)", no, 3), actual_q == desired_q, "商の値が一致しない");

	mov	eax, DWORD PTR desired_q$[rbp]
	cmp	DWORD PTR actual_q$[rbp], eax
	jne	SHORT $LN9@TEST_PMC_D
	mov	DWORD PTR tv136[rbp], 1
	jmp	SHORT $LN10@TEST_PMC_D
$LN9@TEST_PMC_D:
	mov	DWORD PTR tv136[rbp], 0
$LN10@TEST_PMC_D:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@GMMALBOD@PMC_DivRem_I_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv136[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 51   :         TEST_Assert(env, FormatTestLabel("PMC_DivRem_I_X (%d.%d)", no, 4), actual_r == desired_r, "剰余の値が一致しない");

	mov	eax, DWORD PTR desired_r$[rbp]
	cmp	DWORD PTR actual_r$[rbp], eax
	jne	SHORT $LN11@TEST_PMC_D
	mov	DWORD PTR tv146[rbp], 1
	jmp	SHORT $LN12@TEST_PMC_D
$LN11@TEST_PMC_D:
	mov	DWORD PTR tv146[rbp], 0
$LN12@TEST_PMC_D:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@GMMALBOD@PMC_DivRem_I_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv146[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert
$LN2@TEST_PMC_D:

; 52   :     }
; 53   : 	if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 54   : 		ep->PMC_Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_PMC_D:

; 55   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_DivRem_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_DivRem_I_X ENDP
_TEXT	ENDS
END
