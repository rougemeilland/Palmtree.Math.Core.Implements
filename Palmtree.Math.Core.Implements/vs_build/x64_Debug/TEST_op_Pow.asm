; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__1C66ECB2_pmc_debug@h DB 01H
__F2CD1EB2_test_op_pow@c DB 01H
msvcjmc	ENDS
PUBLIC	TEST_PMC_Pow_X_I
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@ ; `string'
PUBLIC	??_C@_0BE@LIHHPOA@PMC_Pow_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CO@KAEHCBLI@PMC_Pow_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J@ ; `string'
PUBLIC	??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
_BSS	SEGMENT
?actual_z_buf@?1??TEST_PMC_Pow_X_I@@9@9 DB 010000H DUP (?) ; `TEST_PMC_Pow_X_I'::`2'::actual_z_buf
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_Pow_X_I DD imagerel $LN14
	DD	imagerel $LN14+699
	DD	imagerel $unwind$TEST_PMC_Pow_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_EQUALS_MEMORY DD imagerel _EQUALS_MEMORY
	DD	imagerel _EQUALS_MEMORY+198
	DD	imagerel $unwind$_EQUALS_MEMORY
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
CONST	SEGMENT
??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ DB 'P'
	DB	'MC_ToByteArray', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KAEHCBLI@PMC_Pow_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J@
CONST	SEGMENT
??_C@_0CO@KAEHCBLI@PMC_Pow_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J@ DB 'P'
	DB	'MC_Pow_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LIHHPOA@PMC_Pow_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BE@LIHHPOA@PMC_Pow_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Pow_X_I (%d.'
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
CONST	SEGMENT
??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@ DB 'P'
	DB	'MC_FromByteArray', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_EQUALS_MEMORY DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_Pow_X_I DD 025053901H
	DD	011d2322H
	DD	070160035H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_Pow_X_I$rtcName$0 DB 078H
	DB	00H
	ORG $+2
TEST_PMC_Pow_X_I$rtcName$1 DB 07aH
	DB	00H
	ORG $+2
TEST_PMC_Pow_X_I$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	07aH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_PMC_Pow_X_I$rtcVarDesc DD 068H
	DD	08H
	DQ	FLAT:TEST_PMC_Pow_X_I$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_PMC_Pow_X_I$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_Pow_X_I$rtcName$0
	ORG $+144
TEST_PMC_Pow_X_I$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TEST_PMC_Pow_X_I$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 224
count1$ = 232
buffer2$ = 240
count2$ = 248
_EQUALS_MEMORY PROC					; COMDAT

; 155  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__1C66ECB2_pmc_debug@h
	call	__CheckForDebuggerJustMyCode

; 156  :     if (count1 != count2)

	mov	rax, QWORD PTR count2$[rbp]
	cmp	QWORD PTR count1$[rbp], rax
	je	SHORT $LN4@EQUALS_MEM

; 157  :         return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN4@EQUALS_MEM:
$LN2@EQUALS_MEM:

; 158  :     while (count1 > 0)

	cmp	QWORD PTR count1$[rbp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 159  :     {
; 160  :         if (*buffer1 != *buffer2)

	mov	rax, QWORD PTR buffer1$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR buffer2$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN5@EQUALS_MEM

; 161  :             return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 162  :         ++buffer1;

	mov	rax, QWORD PTR buffer1$[rbp]
	inc	rax
	mov	QWORD PTR buffer1$[rbp], rax

; 163  :         ++buffer2;

	mov	rax, QWORD PTR buffer2$[rbp]
	inc	rax
	mov	QWORD PTR buffer2$[rbp], rax

; 164  :         --count1;

	mov	rax, QWORD PTR count1$[rbp]
	dec	rax
	mov	QWORD PTR count1$[rbp], rax

; 165  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 166  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 167  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_pow.c
;	COMDAT TEST_PMC_Pow_X_I
_TEXT	SEGMENT
x$ = 8
z$ = 40
actual_z_buf_size$ = 72
result$ = 100
x_result$ = 132
z_result$ = 164
tv159 = 372
tv144 = 372
tv92 = 372
tv74 = 372
tv133 = 376
tv82 = 376
tv64 = 376
env$ = 416
ep$ = 424
no$ = 432
x_buf$ = 440
x_buf_size$ = 448
y$ = 456
desired_result_code$ = 464
desired_z_buf$ = 472
desired_z_buf_size$ = 480
TEST_PMC_Pow_X_I PROC					; COMDAT

; 40   : {

$LN14:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	lea	rcx, OFFSET FLAT:__F2CD1EB2_test_op_pow@c
	call	__CheckForDebuggerJustMyCode

; 41   :     HANDLE x;
; 42   :     HANDLE z;
; 43   :     static unsigned char actual_z_buf[0x10000];
; 44   :     size_t actual_z_buf_size;
; 45   :     PMC_STATUS_CODE result;
; 46   :     PMC_STATUS_CODE x_result;
; 47   :     PMC_STATUS_CODE z_result;
; 48   :     TEST_Assert(env, FormatTestLabel("PMC_Pow_X_I (%d.%d)", no, 1), (x_result = ep->PMC_FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	lea	r8, QWORD PTR x$[rbp]
	mov	rdx, QWORD PTR x_buf_size$[rbp]
	mov	rcx, QWORD PTR x_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR x_result$[rbp], eax
	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN6@TEST_PMC_P
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN7@TEST_PMC_P
$LN6@TEST_PMC_P:
	mov	DWORD PTR tv74[rbp], 0
$LN7@TEST_PMC_P:
	mov	edx, DWORD PTR x_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DE@FOPJPKJE@PMC_FromByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BE@LIHHPOA@PMC_Pow_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 49   :     TEST_Assert(env, FormatTestLabel("PMC_Pow_X_I (%d.%d)", no, 2), (z_result = ep->PMC_Pow_X_I(x, y, &z)) == desired_result_code, FormatTestMesssage("PMC_Pow_X_Iの復帰コードが期待通りではない(%d)", z_result));

	lea	r8, QWORD PTR z$[rbp]
	mov	edx, DWORD PTR y$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+528]
	mov	DWORD PTR z_result$[rbp], eax
	mov	eax, DWORD PTR desired_result_code$[rbp]
	cmp	DWORD PTR z_result$[rbp], eax
	jne	SHORT $LN8@TEST_PMC_P
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN9@TEST_PMC_P
$LN8@TEST_PMC_P:
	mov	DWORD PTR tv92[rbp], 0
$LN9@TEST_PMC_P:
	mov	edx, DWORD PTR z_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0CO@KAEHCBLI@PMC_Pow_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BE@LIHHPOA@PMC_Pow_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 50   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_result_code$[rbp], 0
	jne	$LN2@TEST_PMC_P

; 51   :     {
; 52   :         TEST_Assert(env, FormatTestLabel("PMC_Pow_X_I (%d.%d)", no, 3), (result = ep->PMC_ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_z_buf_size$[rbp]
	mov	r8d, 65536				; 00010000H
	lea	rdx, OFFSET FLAT:?actual_z_buf@?1??TEST_PMC_Pow_X_I@@9@9
	mov	rcx, QWORD PTR z$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+56]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN10@TEST_PMC_P
	mov	DWORD PTR tv144[rbp], 1
	jmp	SHORT $LN11@TEST_PMC_P
$LN10@TEST_PMC_P:
	mov	DWORD PTR tv144[rbp], 0
$LN11@TEST_PMC_P:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DC@JBMEDBHF@PMC_ToByteArray?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
	call	FormatTestMesssage
	mov	QWORD PTR tv133[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BE@LIHHPOA@PMC_Pow_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv133[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv144[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 53   :         TEST_Assert(env, FormatTestLabel("PMC_Pow_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	r9, QWORD PTR desired_z_buf_size$[rbp]
	mov	r8, QWORD PTR desired_z_buf$[rbp]
	mov	rdx, QWORD PTR actual_z_buf_size$[rbp]
	lea	rcx, OFFSET FLAT:?actual_z_buf@?1??TEST_PMC_Pow_X_I@@9@9
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_P
	mov	DWORD PTR tv159[rbp], 1
	jmp	SHORT $LN13@TEST_PMC_P
$LN12@TEST_PMC_P:
	mov	DWORD PTR tv159[rbp], 0
$LN13@TEST_PMC_P:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BE@LIHHPOA@PMC_Pow_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, DWORD PTR tv159[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert
$LN2@TEST_PMC_P:

; 54   :     }
; 55   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR z_result$[rbp], 0
	jne	SHORT $LN3@TEST_PMC_P

; 56   :         ep->PMC_Dispose(z);

	mov	rcx, QWORD PTR z$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_PMC_P:

; 57   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN4@TEST_PMC_P

; 58   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN4@TEST_PMC_P:

; 59   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_Pow_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_Pow_X_I ENDP
_TEXT	ENDS
END
