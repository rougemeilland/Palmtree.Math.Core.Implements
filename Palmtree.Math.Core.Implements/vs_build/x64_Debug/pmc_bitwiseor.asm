; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__AC60EF90_pmc_bitwiseor@c DB 01H
msvcjmc	ENDS
PUBLIC	Initialize_BitwiseOr
PUBLIC	PMC_BitwiseOr_I_X
PUBLIC	PMC_BitwiseOr_L_X
PUBLIC	PMC_BitwiseOr_X_I
PUBLIC	PMC_BitwiseOr_X_L
PUBLIC	PMC_BitwiseOr_X_X
PUBLIC	__JustMyCode_Default
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_BitwiseOr DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$Initialize_BitwiseOr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_I_X DD imagerel $LN9
	DD	imagerel $LN9+218
	DD	imagerel $unwind$PMC_BitwiseOr_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_L_X DD imagerel $LN9
	DD	imagerel $LN9+221
	DD	imagerel $unwind$PMC_BitwiseOr_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_I DD imagerel $LN9
	DD	imagerel $LN9+219
	DD	imagerel $unwind$PMC_BitwiseOr_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_L DD imagerel $LN9
	DD	imagerel $LN9+221
	DD	imagerel $unwind$PMC_BitwiseOr_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_X DD imagerel $LN18
	DD	imagerel $LN18+610
	DD	imagerel $unwind$PMC_BitwiseOr_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MAXIMUM_UNIT DD imagerel _MAXIMUM_UNIT
	DD	imagerel _MAXIMUM_UNIT+122
	DD	imagerel $unwind$_MAXIMUM_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BitwiseOr_X_1W DD imagerel BitwiseOr_X_1W
	DD	imagerel BitwiseOr_X_1W+251
	DD	imagerel $unwind$BitwiseOr_X_1W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BitwiseOr_X_2W DD imagerel BitwiseOr_X_2W
	DD	imagerel BitwiseOr_X_2W+447
	DD	imagerel $unwind$BitwiseOr_X_2W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BitwiseOr_X_X DD imagerel BitwiseOr_X_X
	DD	imagerel BitwiseOr_X_X+4562
	DD	imagerel $unwind$BitwiseOr_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_I_Imp DD imagerel PMC_BitwiseOr_X_I_Imp
	DD	imagerel PMC_BitwiseOr_X_I_Imp+438
	DD	imagerel $unwind$PMC_BitwiseOr_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_L_Imp DD imagerel PMC_BitwiseOr_X_L_Imp
	DD	imagerel PMC_BitwiseOr_X_L_Imp+915
	DD	imagerel $unwind$PMC_BitwiseOr_X_L_Imp
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_L_Imp DD 035053401H
	DD	0118331dH
	DD	070110057H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_BitwiseOr_X_L_Imp$rtcName$0 DB 076H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
PMC_BitwiseOr_X_L_Imp$rtcName$1 DB 077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_BitwiseOr_X_L_Imp$rtcName$2 DB 077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_BitwiseOr_X_L_Imp$rtcName$3 DB 06eH
	DB	077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_BitwiseOr_X_L_Imp$rtcVarDesc DD 01d8H
	DD	08H
	DQ	FLAT:PMC_BitwiseOr_X_L_Imp$rtcName$3
	DD	0158H
	DD	08H
	DQ	FLAT:PMC_BitwiseOr_X_L_Imp$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:PMC_BitwiseOr_X_L_Imp$rtcName$1
	DD	074H
	DD	04H
	DQ	FLAT:PMC_BitwiseOr_X_L_Imp$rtcName$0
	ORG $+192
PMC_BitwiseOr_X_L_Imp$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:PMC_BitwiseOr_X_L_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_I_Imp DD 025053301H
	DD	0117231cH
	DD	070100031H
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_BitwiseOr_X_I_Imp$rtcName$0 DB 06eH
	DB	07aH
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+2
PMC_BitwiseOr_X_I_Imp$rtcVarDesc DD 0a8H
	DD	08H
	DQ	FLAT:PMC_BitwiseOr_X_I_Imp$rtcName$0
	ORG $+48
PMC_BitwiseOr_X_I_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_BitwiseOr_X_I_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BitwiseOr_X_X DD 025053901H
	DD	011d2322H
	DD	070160029H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BitwiseOr_X_2W DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BitwiseOr_X_1W DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MAXIMUM_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_X DD 035053401H
	DD	0118331dH
	DD	070110043H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_BitwiseOr_X_X$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+5
PMC_BitwiseOr_X_X$rtcName$1 DB 06eH
	DB	077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_BitwiseOr_X_X$rtcVarDesc DD 0138H
	DD	08H
	DQ	FLAT:PMC_BitwiseOr_X_X$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:PMC_BitwiseOr_X_X$rtcName$0
	ORG $+96
PMC_BitwiseOr_X_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_BitwiseOr_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_L DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_I DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_L_X DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_I_X DD 025053201H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_BitwiseOr DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_L_Imp
_TEXT	SEGMENT
result$ = 4
u_bit_count$7 = 40
v_hi$8 = 68
v_lo$9 = 100
v_bit_count$10 = 136
w_bit_count$11 = 168
w_light_check_code$12 = 200
v_bit_count$13 = 232
w_bit_count$14 = 264
w_light_check_code$15 = 296
u_bit_count$16 = 328
v_bit_count$17 = 360
w_bit_count$18 = 392
nw_light_check_code$19 = 424
u$ = 672
v$ = 680
w$ = 688
PMC_BitwiseOr_X_L_Imp PROC				; COMDAT

; 274  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 696				; 000002b8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 174				; 000000aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+728]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 275  :     PMC_STATUS_CODE result;
; 276  :     if (u->IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 277  :     {
; 278  :         // u が 0 である場合
; 279  :         if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 280  :         {
; 281  :             // v が 0 である場合
; 282  :             *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 283  :         }

	jmp	SHORT $LN5@PMC_Bitwis
$LN4@PMC_Bitwis:

; 284  :         else
; 285  :         {
; 286  :             // v が 0 でない場合
; 287  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	From_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Bitwis

; 288  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN6@PMC_Bitwis:
$LN5@PMC_Bitwis:

; 289  :         }
; 290  :     }

	jmp	$LN3@PMC_Bitwis
$LN2@PMC_Bitwis:

; 291  :     else if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN7@PMC_Bitwis

; 292  :     {
; 293  :         // v が 0 である場合
; 294  :         if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_Bitwis

; 295  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN9@PMC_Bitwis:

; 296  :     }

	jmp	$LN8@PMC_Bitwis
$LN7@PMC_Bitwis:

; 297  :     else
; 298  :     {
; 299  :         // u と v がともに 0 ではない場合
; 300  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	$LN10@PMC_Bitwis

; 301  :         {
; 302  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 303  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$7[rbp], rax

; 304  :             _UINT32_T v_hi;
; 305  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	rdx, QWORD PTR v_hi$8[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR v_lo$9[rbp], eax

; 306  :             if (v_hi == 0)

	cmp	DWORD PTR v_hi$8[rbp], 0
	jne	$LN12@PMC_Bitwis

; 307  :             {
; 308  :                 // v の値が 32bit で表現可能な場合
; 309  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR v_lo$9[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$10[rbp], rax

; 310  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	rdx, QWORD PTR v_bit_count$10[rbp]
	mov	rcx, QWORD PTR u_bit_count$7[rbp]
	call	_MAXIMUM_UNIT
	mov	QWORD PTR w_bit_count$11[rbp], rax

; 311  :                 __UNIT_TYPE w_light_check_code;
; 312  :                 if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$12[rbp]
	mov	rdx, QWORD PTR w_bit_count$11[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Bitwis

; 313  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN14@PMC_Bitwis:

; 314  :                 BitwiseOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, (*w)->BLOCK);

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR v_lo$9[rbp]
	mov	r9, QWORD PTR [rax+48]
	mov	r8d, ecx
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	BitwiseOr_X_1W

; 315  :                 if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR w_light_check_code$12[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_Bitwis

; 316  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN15@PMC_Bitwis:

; 317  :             }

	jmp	$LN13@PMC_Bitwis
$LN12@PMC_Bitwis:

; 318  :             else
; 319  :             {
; 320  :                 // y の値が 32bit では表現できない場合
; 321  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	ecx, DWORD PTR v_hi$8[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$13[rbp], rax

; 322  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	rdx, QWORD PTR v_bit_count$13[rbp]
	mov	rcx, QWORD PTR u_bit_count$7[rbp]
	call	_MAXIMUM_UNIT
	mov	QWORD PTR w_bit_count$14[rbp], rax

; 323  :                 __UNIT_TYPE w_light_check_code;
; 324  :                 if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$15[rbp]
	mov	rdx, QWORD PTR w_bit_count$14[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Bitwis

; 325  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN16@PMC_Bitwis:

; 326  :                 BitwiseOr_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, (*w)->BLOCK);

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR v_lo$9[rbp]
	mov	edx, DWORD PTR v_hi$8[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, ecx
	mov	r8d, edx
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	BitwiseOr_X_2W

; 327  :                 if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR w_light_check_code$15[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN17@PMC_Bitwis

; 328  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN17@PMC_Bitwis:
$LN13@PMC_Bitwis:

; 329  :             }
; 330  :             CommitNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber

; 331  :         }

	jmp	$LN11@PMC_Bitwis
$LN10@PMC_Bitwis:

; 332  :         else
; 333  :         {
; 334  :             // _UINT64_T が 1 ワードで表現できる場合
; 335  : 
; 336  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$16[rbp], rax

; 337  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	rcx, QWORD PTR v$[rbp]
	call	_LZCNT_ALT_UNIT
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$17[rbp], rax

; 338  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	rdx, QWORD PTR v_bit_count$17[rbp]
	mov	rcx, QWORD PTR u_bit_count$16[rbp]
	call	_MAXIMUM_UNIT
	inc	rax
	mov	QWORD PTR w_bit_count$18[rbp], rax

; 339  :             __UNIT_TYPE nw_light_check_code;
; 340  :             if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_light_check_code$19[rbp]
	mov	rdx, QWORD PTR w_bit_count$18[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_Bitwis

; 341  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN18@PMC_Bitwis:

; 342  :             BitwiseOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK);

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	r9, QWORD PTR [rax+48]
	mov	r8, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	BitwiseOr_X_1W

; 343  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR nw_light_check_code$19[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN19@PMC_Bitwis

; 344  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN19@PMC_Bitwis:

; 345  :             CommitNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber
$LN11@PMC_Bitwis:
$LN8@PMC_Bitwis:
$LN3@PMC_Bitwis:

; 346  :         }
; 347  :     }
; 348  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 349  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_BitwiseOr_X_L_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+648]
	pop	rdi
	pop	rbp
	ret	0
PMC_BitwiseOr_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_I_Imp
_TEXT	SEGMENT
result$ = 4
u_bit_count$4 = 40
v_bit_count$5 = 72
w_bit_count$6 = 104
nz_check_code$7 = 136
u$ = 384
v$ = 392
w$ = 400
PMC_BitwiseOr_X_I_Imp PROC				; COMDAT

; 187  : {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 188  :     PMC_STATUS_CODE result;
; 189  :     if (u->IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 190  :     {
; 191  :         // u が 0 である場合
; 192  :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 193  :         {
; 194  :             // v が 0 である場合
; 195  :             *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 196  :         }

	jmp	SHORT $LN5@PMC_Bitwis
$LN4@PMC_Bitwis:

; 197  :         else
; 198  :         {
; 199  :             // v が 0 でない場合
; 200  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	From_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Bitwis

; 201  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN6@PMC_Bitwis:
$LN5@PMC_Bitwis:

; 202  :         }
; 203  :     }

	jmp	$LN3@PMC_Bitwis
$LN2@PMC_Bitwis:

; 204  :     else if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN7@PMC_Bitwis

; 205  :     {
; 206  :         // v が 0 である場合
; 207  :         if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_Bitwis

; 208  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN9@PMC_Bitwis:

; 209  :     }

	jmp	$LN8@PMC_Bitwis
$LN7@PMC_Bitwis:

; 210  :     else
; 211  :     {
; 212  :         // x と y がともに 0 ではない場合
; 213  :         __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$4[rbp], rax

; 214  :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR v$[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$5[rbp], rax

; 215  :         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	rdx, QWORD PTR v_bit_count$5[rbp]
	mov	rcx, QWORD PTR u_bit_count$4[rbp]
	call	_MAXIMUM_UNIT
	inc	rax
	mov	QWORD PTR w_bit_count$6[rbp], rax

; 216  :         __UNIT_TYPE nz_check_code;
; 217  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_check_code$7[rbp]
	mov	rdx, QWORD PTR w_bit_count$6[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_Bitwis

; 218  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN10@PMC_Bitwis:

; 219  :         BitwiseOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, (*w)->BLOCK);

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR v$[rbp]
	mov	r9, QWORD PTR [rax+48]
	mov	r8d, ecx
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	BitwiseOr_X_1W

; 220  :         if ((result = CheckBlockLight((*w)->BLOCK, nz_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR nz_check_code$7[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Bitwis

; 221  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN11@PMC_Bitwis:

; 222  :         CommitNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber
$LN8@PMC_Bitwis:
$LN3@PMC_Bitwis:

; 223  :     }
; 224  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 225  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_BitwiseOr_X_I_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_BitwiseOr_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT BitwiseOr_X_X
_TEXT	SEGMENT
or_count$ = 8
cp_count$ = 40
count$ = 72
u$ = 320
u_count$ = 328
v$ = 336
v_count$ = 344
w$ = 352
BitwiseOr_X_X PROC					; COMDAT

; 72   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 73   :     __UNIT_TYPE or_count = v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	mov	QWORD PTR or_count$[rbp], rax

; 74   :     __UNIT_TYPE cp_count = u_count - v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	mov	rcx, QWORD PTR u_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cp_count$[rbp], rax

; 75   : 
; 76   :     __UNIT_TYPE count = or_count >> 5;

	mov	rax, QWORD PTR or_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@BitwiseOr_:

; 77   :     while (count > 0)

	cmp	QWORD PTR count$[rbp], 0
	jbe	$LN3@BitwiseOr_

; 78   :     {
; 79   :         w[0] = u[0] | v[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 80   :         w[1] = u[1] | v[1];

	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 81   :         w[2] = u[2] | v[2];

	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 82   :         w[3] = u[3] | v[3];

	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 83   :         w[4] = u[4] | v[4];

	mov	eax, 8
	imul	rax, rax, 4
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 84   :         w[5] = u[5] | v[5];

	mov	eax, 8
	imul	rax, rax, 5
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 85   :         w[6] = u[6] | v[6];

	mov	eax, 8
	imul	rax, rax, 6
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 86   :         w[7] = u[7] | v[7];

	mov	eax, 8
	imul	rax, rax, 7
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 87   :         w[8] = u[8] | v[8];

	mov	eax, 8
	imul	rax, rax, 8
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 88   :         w[9] = u[9] | v[9];

	mov	eax, 8
	imul	rax, rax, 9
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 89   :         w[10] = u[10] | v[10];

	mov	eax, 8
	imul	rax, rax, 10
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 90   :         w[11] = u[11] | v[11];

	mov	eax, 8
	imul	rax, rax, 11
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 91   :         w[12] = u[12] | v[12];

	mov	eax, 8
	imul	rax, rax, 12
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 92   :         w[13] = u[13] | v[13];

	mov	eax, 8
	imul	rax, rax, 13
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 93   :         w[14] = u[14] | v[14];

	mov	eax, 8
	imul	rax, rax, 14
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 94   :         w[15] = u[15] | v[15];

	mov	eax, 8
	imul	rax, rax, 15
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 95   :         w[16] = u[16] | v[16];

	mov	eax, 8
	imul	rax, rax, 16
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 96   :         w[17] = u[17] | v[17];

	mov	eax, 8
	imul	rax, rax, 17
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 97   :         w[18] = u[18] | v[18];

	mov	eax, 8
	imul	rax, rax, 18
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 98   :         w[19] = u[19] | v[19];

	mov	eax, 8
	imul	rax, rax, 19
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 99   :         w[20] = u[20] | v[20];

	mov	eax, 8
	imul	rax, rax, 20
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 100  :         w[21] = u[21] | v[21];

	mov	eax, 8
	imul	rax, rax, 21
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 101  :         w[22] = u[22] | v[22];

	mov	eax, 8
	imul	rax, rax, 22
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 102  :         w[23] = u[23] | v[23];

	mov	eax, 8
	imul	rax, rax, 23
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 103  :         w[24] = u[24] | v[24];

	mov	eax, 8
	imul	rax, rax, 24
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 104  :         w[25] = u[25] | v[25];

	mov	eax, 8
	imul	rax, rax, 25
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 105  :         w[26] = u[26] | v[26];

	mov	eax, 8
	imul	rax, rax, 26
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 106  :         w[27] = u[27] | v[27];

	mov	eax, 8
	imul	rax, rax, 27
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 107  :         w[28] = u[28] | v[28];

	mov	eax, 8
	imul	rax, rax, 28
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 108  :         w[29] = u[29] | v[29];

	mov	eax, 8
	imul	rax, rax, 29
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 109  :         w[30] = u[30] | v[30];

	mov	eax, 8
	imul	rax, rax, 30
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 110  :         w[31] = u[31] | v[31];

	mov	eax, 8
	imul	rax, rax, 31
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 111  :         u += 32;

	mov	rax, QWORD PTR u$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR u$[rbp], rax

; 112  :         v += 32;

	mov	rax, QWORD PTR v$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR v$[rbp], rax

; 113  :         w += 32;

	mov	rax, QWORD PTR w$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR w$[rbp], rax

; 114  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 115  :     }

	jmp	$LN2@BitwiseOr_
$LN3@BitwiseOr_:

; 116  : 
; 117  :     if (or_count & 0x10)

	mov	rax, QWORD PTR or_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN4@BitwiseOr_

; 118  :     {
; 119  :         w[0] = u[0] | v[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 120  :         w[1] = u[1] | v[1];

	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 121  :         w[2] = u[2] | v[2];

	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 122  :         w[3] = u[3] | v[3];

	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 123  :         w[4] = u[4] | v[4];

	mov	eax, 8
	imul	rax, rax, 4
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 124  :         w[5] = u[5] | v[5];

	mov	eax, 8
	imul	rax, rax, 5
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 125  :         w[6] = u[6] | v[6];

	mov	eax, 8
	imul	rax, rax, 6
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 126  :         w[7] = u[7] | v[7];

	mov	eax, 8
	imul	rax, rax, 7
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 127  :         w[8] = u[8] | v[8];

	mov	eax, 8
	imul	rax, rax, 8
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 128  :         w[9] = u[9] | v[9];

	mov	eax, 8
	imul	rax, rax, 9
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 129  :         w[10] = u[10] | v[10];

	mov	eax, 8
	imul	rax, rax, 10
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 130  :         w[11] = u[11] | v[11];

	mov	eax, 8
	imul	rax, rax, 11
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 131  :         w[12] = u[12] | v[12];

	mov	eax, 8
	imul	rax, rax, 12
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 132  :         w[13] = u[13] | v[13];

	mov	eax, 8
	imul	rax, rax, 13
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 133  :         w[14] = u[14] | v[14];

	mov	eax, 8
	imul	rax, rax, 14
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 134  :         w[15] = u[15] | v[15];

	mov	eax, 8
	imul	rax, rax, 15
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 135  :         u += 16;

	mov	rax, QWORD PTR u$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR u$[rbp], rax

; 136  :         v += 16;

	mov	rax, QWORD PTR v$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR v$[rbp], rax

; 137  :         w += 16;

	mov	rax, QWORD PTR w$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR w$[rbp], rax
$LN4@BitwiseOr_:

; 138  :     }
; 139  : 
; 140  :     if (or_count & 0x8)

	mov	rax, QWORD PTR or_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN5@BitwiseOr_

; 141  :     {
; 142  :         w[0] = u[0] | v[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 143  :         w[1] = u[1] | v[1];

	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 144  :         w[2] = u[2] | v[2];

	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 145  :         w[3] = u[3] | v[3];

	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 146  :         w[4] = u[4] | v[4];

	mov	eax, 8
	imul	rax, rax, 4
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 147  :         w[5] = u[5] | v[5];

	mov	eax, 8
	imul	rax, rax, 5
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 148  :         w[6] = u[6] | v[6];

	mov	eax, 8
	imul	rax, rax, 6
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 149  :         w[7] = u[7] | v[7];

	mov	eax, 8
	imul	rax, rax, 7
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 150  :         u += 8;

	mov	rax, QWORD PTR u$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR u$[rbp], rax

; 151  :         v += 8;

	mov	rax, QWORD PTR v$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR v$[rbp], rax

; 152  :         w += 8;

	mov	rax, QWORD PTR w$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR w$[rbp], rax
$LN5@BitwiseOr_:

; 153  :     }
; 154  : 
; 155  :     if (or_count & 0x4)

	mov	rax, QWORD PTR or_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN6@BitwiseOr_

; 156  :     {
; 157  :         w[0] = u[0] | v[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 158  :         w[1] = u[1] | v[1];

	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 159  :         w[2] = u[2] | v[2];

	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 160  :         w[3] = u[3] | v[3];

	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 161  :         u += 4;

	mov	rax, QWORD PTR u$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR u$[rbp], rax

; 162  :         v += 4;

	mov	rax, QWORD PTR v$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v$[rbp], rax

; 163  :         w += 4;

	mov	rax, QWORD PTR w$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR w$[rbp], rax
$LN6@BitwiseOr_:

; 164  :     }
; 165  : 
; 166  :     if (or_count & 0x2)

	mov	rax, QWORD PTR or_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN7@BitwiseOr_

; 167  :     {
; 168  :         w[0] = u[0] | v[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 169  :         w[1] = u[1] | v[1];

	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 170  :         u += 2;

	mov	rax, QWORD PTR u$[rbp]
	add	rax, 16
	mov	QWORD PTR u$[rbp], rax

; 171  :         v += 2;

	mov	rax, QWORD PTR v$[rbp]
	add	rax, 16
	mov	QWORD PTR v$[rbp], rax

; 172  :         w += 2;

	mov	rax, QWORD PTR w$[rbp]
	add	rax, 16
	mov	QWORD PTR w$[rbp], rax
$LN7@BitwiseOr_:

; 173  :     }
; 174  : 
; 175  :     if (or_count & 0x1)

	mov	rax, QWORD PTR or_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN8@BitwiseOr_

; 176  :     {
; 177  :         w[0] = u[0] | v[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [r8+rcx]
	mov	rax, QWORD PTR [rdx+rax]
	or	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 178  :         u += 1;

	mov	rax, QWORD PTR u$[rbp]
	add	rax, 8
	mov	QWORD PTR u$[rbp], rax

; 179  :         v += 1;

	mov	rax, QWORD PTR v$[rbp]
	add	rax, 8
	mov	QWORD PTR v$[rbp], rax

; 180  :         w += 1;

	mov	rax, QWORD PTR w$[rbp]
	add	rax, 8
	mov	QWORD PTR w$[rbp], rax
$LN8@BitwiseOr_:

; 181  :     }
; 182  : 
; 183  :     _COPY_MEMORY_UNIT(w, u, cp_count);

	mov	r8, QWORD PTR cp_count$[rbp]
	mov	rdx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	_COPY_MEMORY_UNIT

; 184  : }

	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
BitwiseOr_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT BitwiseOr_X_2W
_TEXT	SEGMENT
tv129 = 192
u$ = 240
u_count$ = 248
v_hi$ = 256
v_lo$ = 264
w$ = 272
BitwiseOr_X_2W PROC					; COMDAT

; 51   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 52   :     if (u_count == 1)

	cmp	QWORD PTR u_count$[rbp], 1
	jne	SHORT $LN2@BitwiseOr_

; 53   :     {
; 54   :         w[0] = u[0] | v_lo;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR v_lo$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	or	rax, rdx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 55   :         w[1] = v_hi;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v_hi$[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 56   :     }

	jmp	$LN3@BitwiseOr_
$LN2@BitwiseOr_:

; 57   :     else if (u_count == 2)

	cmp	QWORD PTR u_count$[rbp], 2
	jne	SHORT $LN4@BitwiseOr_

; 58   :     {
; 59   :         w[0] = u[0] | v_lo;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR v_lo$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	or	rax, rdx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 60   :         w[1] = u[1] | v_hi;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR v_hi$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	or	rax, rdx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 61   :     }

	jmp	$LN5@BitwiseOr_
$LN4@BitwiseOr_:

; 62   :     else
; 63   :     {
; 64   :         w[0] = u[0] | v_lo;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR v_lo$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	or	rax, rdx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 65   :         w[1] = u[1] | v_hi;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR v_hi$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	or	rax, rdx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 66   :         _COPY_MEMORY_UNIT(w + 2, u + 2, u_count - 2);

	mov	rax, QWORD PTR u_count$[rbp]
	sub	rax, 2
	mov	rcx, QWORD PTR u$[rbp]
	add	rcx, 16
	mov	rdx, QWORD PTR w$[rbp]
	add	rdx, 16
	mov	QWORD PTR tv129[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv129[rbp]
	mov	rcx, rax
	call	_COPY_MEMORY_UNIT
$LN5@BitwiseOr_:
$LN3@BitwiseOr_:

; 67   :     }
; 68   : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
BitwiseOr_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT BitwiseOr_X_1W
_TEXT	SEGMENT
tv79 = 192
u$ = 240
u_count$ = 248
v$ = 256
w$ = 264
BitwiseOr_X_1W PROC					; COMDAT

; 39   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 40   :     if (u_count == 1)

	cmp	QWORD PTR u_count$[rbp], 1
	jne	SHORT $LN2@BitwiseOr_

; 41   :         w[0] = u[0] | v;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	or	rax, rdx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax
	jmp	SHORT $LN3@BitwiseOr_
$LN2@BitwiseOr_:

; 42   :     else
; 43   :     {
; 44   :         w[0] = u[0] | v;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	or	rax, rdx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx+rcx], rax

; 45   :         _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	rcx, QWORD PTR u$[rbp]
	add	rcx, 8
	mov	rdx, QWORD PTR w$[rbp]
	add	rdx, 8
	mov	QWORD PTR tv79[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv79[rbp]
	mov	rcx, rax
	call	_COPY_MEMORY_UNIT
$LN3@BitwiseOr_:

; 46   :     }
; 47   : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
BitwiseOr_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 905  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 906  :     if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 907  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 908  : #ifdef _M_IX86
; 909  :     _UINT32_T pos;
; 910  : #ifdef _MSC_VER
; 911  :     _BitScanReverse(&pos, x);
; 912  : #elif defined(__GNUC__)
; 913  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 914  : #else
; 915  : #error unknown compiler
; 916  : #endif
; 917  : #elif defined(_M_X64)
; 918  : #ifdef _MSC_VER
; 919  :     _UINT32_T pos;
; 920  :     _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 921  : #elif defined(__GNUC__)
; 922  :     _UINT64_T pos;
; 923  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 924  : #else
; 925  : #error unknown compiler
; 926  : #endif
; 927  : #else
; 928  : #error unknown platform
; 929  : #endif
; 930  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 931  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 872  : {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 873  :     if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 874  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 875  :     _UINT32_T pos;
; 876  : #ifdef _MSC_VER
; 877  :     _BitScanReverse(&pos, x);

	mov	eax, DWORD PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 878  : #elif defined(__GNUC__)
; 879  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 880  : #else
; 881  : #error unknown compiler
; 882  : #endif
; 883  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 31
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 884  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MAXIMUM_UNIT
_TEXT	SEGMENT
tv65 = 192
x$ = 240
y$ = 248
_MAXIMUM_UNIT PROC					; COMDAT

; 479  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 480  :     return (x >= y ? x : y);

	mov	rax, QWORD PTR y$[rbp]
	cmp	QWORD PTR x$[rbp], rax
	jb	SHORT $LN3@MAXIMUM_UN
	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR tv65[rbp], rax
	jmp	SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
	mov	rax, QWORD PTR y$[rbp]
	mov	QWORD PTR tv65[rbp], rax
$LN4@MAXIMUM_UN:
	mov	rax, QWORD PTR tv65[rbp]

; 481  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
_MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 458  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 459  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, QWORD PTR value$[rbp]
	shr	rax, 32					; 00000020H
	mov	rcx, QWORD PTR result_high$[rbp]
	mov	DWORD PTR [rcx], eax

; 460  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR value$[rbp]

; 461  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 342  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 343  : #ifdef _M_IX86
; 344  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 345  : #elif defined(_M_X64)
; 346  :     __movsq(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsq

; 347  : #else
; 348  : #error unknown platform
; 349  : #endif
; 350  : }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_X
_TEXT	SEGMENT
nu$ = 8
nv$ = 40
result$ = 68
nw$ = 104
t$5 = 136
u_bit_count$6 = 168
v_bit_count$7 = 200
w_bit_count$8 = 232
nw_light_check_code$9 = 264
u$ = 512
v$ = 520
w$ = 528
PMC_BitwiseOr_X_X PROC					; COMDAT

; 398  : {

$LN18:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+568]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 399  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Bitwis

; 400  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 401  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 402  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 403  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 404  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 405  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 406  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 407  :     PMC_STATUS_CODE result;
; 408  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Bitwis

; 409  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 410  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Bitwis

; 411  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 412  :     NUMBER_HEADER* nw;
; 413  :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_Bitwis

; 414  :     {
; 415  :         if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR nv$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_Bitwis

; 416  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN9@PMC_Bitwis:

; 417  :     }

	jmp	$LN8@PMC_Bitwis
$LN7@PMC_Bitwis:

; 418  :     else if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@PMC_Bitwis

; 419  :     {
; 420  :         if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@PMC_Bitwis

; 421  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN12@PMC_Bitwis:

; 422  :     }

	jmp	$LN11@PMC_Bitwis
$LN10@PMC_Bitwis:

; 423  :     else
; 424  :     {
; 425  :         if (nu->UNIT_WORD_COUNT < nv->UNIT_WORD_COUNT)

	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN13@PMC_Bitwis

; 426  :         {
; 427  :             NUMBER_HEADER* t = nu;

	mov	rax, QWORD PTR nu$[rbp]
	mov	QWORD PTR t$5[rbp], rax

; 428  :             nu = nv;

	mov	rax, QWORD PTR nv$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 429  :             nv = t;

	mov	rax, QWORD PTR t$5[rbp]
	mov	QWORD PTR nv$[rbp], rax
$LN13@PMC_Bitwis:

; 430  :         }
; 431  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$6[rbp], rax

; 432  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR v_bit_count$7[rbp], rax

; 433  :         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	rdx, QWORD PTR v_bit_count$7[rbp]
	mov	rcx, QWORD PTR u_bit_count$6[rbp]
	call	_MAXIMUM_UNIT
	mov	QWORD PTR w_bit_count$8[rbp], rax

; 434  :         __UNIT_TYPE nw_light_check_code;
; 435  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_light_check_code$9[rbp]
	mov	rdx, QWORD PTR w_bit_count$8[rbp]
	lea	rcx, QWORD PTR nw$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Bitwis

; 436  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Bitwis
$LN14@PMC_Bitwis:

; 437  :         BitwiseOr_X_X(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK);

	mov	rax, QWORD PTR nw$[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR nv$[rbp]
	mov	r9, QWORD PTR [rax]
	mov	rax, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rax+48]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	BitwiseOr_X_X

; 438  :         if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nw_light_check_code$9[rbp]
	mov	rax, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_Bitwis

; 439  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN15@PMC_Bitwis:

; 440  :         CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp]
	call	CommitNumber
$LN11@PMC_Bitwis:
$LN8@PMC_Bitwis:

; 441  :     }
; 442  :     *w = nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 443  : #ifdef _DEBUG
; 444  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Bitwis

; 445  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN16@PMC_Bitwis:

; 446  : #endif
; 447  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 448  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_BitwiseOr_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
PMC_BitwiseOr_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_L
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_BitwiseOr_X_L PROC					; COMDAT

; 375  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 376  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 377  :     {
; 378  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 379  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 380  :     }
; 381  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 382  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 383  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 384  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 385  :     PMC_STATUS_CODE result;
; 386  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR u$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Bitwis

; 387  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 388  :     if ((result = PMC_BitwiseOr_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	PMC_BitwiseOr_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Bitwis

; 389  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 390  : #ifdef _DEBUG
; 391  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Bitwis

; 392  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:

; 393  : #endif
; 394  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 395  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_BitwiseOr_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_I
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_BitwiseOr_X_I PROC					; COMDAT

; 251  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 252  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 253  :     {
; 254  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 255  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 256  :     }
; 257  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 258  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 259  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 260  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 261  :     PMC_STATUS_CODE result;
; 262  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR u$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Bitwis

; 263  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 264  :     if ((result = PMC_BitwiseOr_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	PMC_BitwiseOr_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Bitwis

; 265  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 266  : #ifdef _DEBUG
; 267  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Bitwis

; 268  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:

; 269  : #endif
; 270  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 271  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_BitwiseOr_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_L_X
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_BitwiseOr_L_X PROC					; COMDAT

; 352  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 353  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 354  :     {
; 355  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 356  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 357  :     }
; 358  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 359  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 360  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 361  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 362  :     PMC_STATUS_CODE result;
; 363  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Bitwis

; 364  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 365  :     if ((result = PMC_BitwiseOr_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_BitwiseOr_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Bitwis

; 366  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 367  : #ifdef _DEBUG
; 368  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Bitwis

; 369  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:

; 370  : #endif
; 371  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 372  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_BitwiseOr_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_I_X
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_BitwiseOr_I_X PROC					; COMDAT

; 228  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 229  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 230  :     {
; 231  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 232  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 233  :     }
; 234  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 235  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 236  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 237  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 238  :     PMC_STATUS_CODE result;
; 239  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Bitwis

; 240  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 241  :     if ((result = PMC_BitwiseOr_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	edx, DWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_BitwiseOr_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Bitwis

; 242  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 243  : #ifdef _DEBUG
; 244  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Bitwis

; 245  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:

; 246  : #endif
; 247  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 248  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_BitwiseOr_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT Initialize_BitwiseOr
_TEXT	SEGMENT
feature$ = 224
Initialize_BitwiseOr PROC				; COMDAT

; 451  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__AC60EF90_pmc_bitwiseor@c
	call	__CheckForDebuggerJustMyCode

; 452  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 453  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_BitwiseOr ENDP
_TEXT	ENDS
END
