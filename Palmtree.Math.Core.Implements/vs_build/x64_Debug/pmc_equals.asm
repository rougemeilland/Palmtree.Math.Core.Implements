; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__3006EDED_pmc_equals@c DB 01H
msvcjmc	ENDS
PUBLIC	Initialize_Equals
PUBLIC	PMC_Equals_X_I
PUBLIC	PMC_Equals_X_L
PUBLIC	PMC_Equals_X_X
PUBLIC	Equals_X_X
PUBLIC	__JustMyCode_Default
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Equals DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$Initialize_Equals
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_I DD imagerel $LN17
	DD	imagerel $LN17+384
	DD	imagerel $unwind$PMC_Equals_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_L DD imagerel $LN29
	DD	imagerel $LN29+758
	DD	imagerel $unwind$PMC_Equals_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_X DD imagerel $LN16
	DD	imagerel $LN16+404
	DD	imagerel $unwind$PMC_Equals_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Equals_X_X DD imagerel $LN6
	DD	imagerel $LN6+170
	DD	imagerel $unwind$Equals_X_X
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Equals_X_X DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_X DD 025053401H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_L DD 025053401H
	DD	0118231dH
	DD	070110041H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Equals_X_L$rtcName$0 DB 076H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+11
PMC_Equals_X_L$rtcVarDesc DD 084H
	DD	04H
	DQ	FLAT:PMC_Equals_X_L$rtcName$0
	ORG $+48
PMC_Equals_X_L$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Equals_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_I DD 025053301H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Equals DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT Equals_X_X
_TEXT	SEGMENT
u$ = 224
v$ = 232
count$ = 240
Equals_X_X PROC						; COMDAT

; 38   : {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__3006EDED_pmc_equals@c
	call	__CheckForDebuggerJustMyCode
$LN2@Equals_X_X:

; 39   :     while (count > 0)

	cmp	QWORD PTR count$[rbp], 0
	jbe	SHORT $LN3@Equals_X_X

; 40   :     {
; 41   :         if (*u != *v)

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN4@Equals_X_X

; 42   :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@Equals_X_X
$LN4@Equals_X_X:

; 43   :         ++u;

	mov	rax, QWORD PTR u$[rbp]
	add	rax, 8
	mov	QWORD PTR u$[rbp], rax

; 44   :         ++v;

	mov	rax, QWORD PTR v$[rbp]
	add	rax, 8
	mov	QWORD PTR v$[rbp], rax

; 45   :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 46   :     }

	jmp	SHORT $LN2@Equals_X_X
$LN3@Equals_X_X:

; 47   :     return (1);

	mov	eax, 1
$LN1@Equals_X_X:

; 48   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 859  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 860  :     if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 861  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 862  : #ifdef _M_IX86
; 863  :     _UINT32_T pos;
; 864  : #ifdef _MSC_VER
; 865  :     _BitScanReverse(&pos, x);
; 866  : #elif defined(__GNUC__)
; 867  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 868  : #else
; 869  : #error unknown compiler
; 870  : #endif
; 871  : #elif defined(_M_X64)
; 872  : #ifdef _MSC_VER
; 873  :     _UINT32_T pos;
; 874  :     _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 875  : #elif defined(__GNUC__)
; 876  :     _UINT64_T pos;
; 877  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 878  : #else
; 879  : #error unknown compiler
; 880  : #endif
; 881  : #else
; 882  : #error unknown platform
; 883  : #endif
; 884  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 885  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 826  : {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 827  :     if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 828  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 829  :     _UINT32_T pos;
; 830  : #ifdef _MSC_VER
; 831  :     _BitScanReverse(&pos, x);

	mov	eax, DWORD PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 832  : #elif defined(__GNUC__)
; 833  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 834  : #else
; 835  : #error unknown compiler
; 836  : #endif
; 837  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 31
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 838  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 412  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 413  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, QWORD PTR value$[rbp]
	shr	rax, 32					; 00000020H
	mov	rcx, QWORD PTR result_high$[rbp]
	mov	DWORD PTR [rcx], eax

; 414  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR value$[rbp]

; 415  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_X
_TEXT	SEGMENT
nu$ = 8
nv$ = 40
result$ = 68
u_bit_count$1 = 104
v_bit_count$2 = 136
tv81 = 340
u$ = 384
v$ = 392
w$ = 400
PMC_Equals_X_X PROC					; COMDAT

; 205  : {

$LN16:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__3006EDED_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 206  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Equals

; 207  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 208  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 209  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 210  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Equals

; 211  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 212  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 213  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 214  :     PMC_STATUS_CODE result;
; 215  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Equals

; 216  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 217  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Equals

; 218  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Equals
$LN6@PMC_Equals:

; 219  :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_Equals

; 220  :     {
; 221  :         *w = nv->IS_ZERO ? 1 : 0;

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN14@PMC_Equals
	mov	DWORD PTR tv81[rbp], 1
	jmp	SHORT $LN15@PMC_Equals
$LN14@PMC_Equals:
	mov	DWORD PTR tv81[rbp], 0
$LN15@PMC_Equals:
	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR tv81[rbp]
	mov	DWORD PTR [rax], ecx

; 222  :     }

	jmp	SHORT $LN8@PMC_Equals
$LN7@PMC_Equals:

; 223  :     else if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@PMC_Equals

; 224  :     {
; 225  :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 226  :     }

	jmp	SHORT $LN10@PMC_Equals
$LN9@PMC_Equals:

; 227  :     else
; 228  :     {
; 229  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$1[rbp], rax

; 230  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR v_bit_count$2[rbp], rax

; 231  :         if (u_bit_count != v_bit_count)

	mov	rax, QWORD PTR v_bit_count$2[rbp]
	cmp	QWORD PTR u_bit_count$1[rbp], rax
	je	SHORT $LN11@PMC_Equals

; 232  :         {
; 233  :             // 明らかに u > v である場合
; 234  :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 235  :         }

	jmp	SHORT $LN12@PMC_Equals
$LN11@PMC_Equals:

; 236  :         else
; 237  :         {
; 238  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 239  :             *w = Equals_X_X(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR nu$[rbp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+48]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	Equals_X_X
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax
$LN12@PMC_Equals:
$LN10@PMC_Equals:
$LN8@PMC_Equals:

; 240  :         }
; 241  :     }
; 242  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 243  : }

	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_L
_TEXT	SEGMENT
nu$ = 8
result$ = 36
u_bit_count$4 = 72
v_hi$5 = 100
v_lo$6 = 132
v_bit_count$7 = 168
v_bit_count$8 = 200
u_bit_count$9 = 232
v_bit_count$10 = 264
tv150 = 468
tv140 = 468
tv92 = 468
u$ = 512
v$ = 520
w$ = 528
PMC_Equals_X_L PROC					; COMDAT

; 106  : {

$LN29:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+552]
	lea	rcx, OFFSET FLAT:__3006EDED_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 107  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Equals

; 108  :     {
; 109  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 110  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 111  :     }
; 112  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 113  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 114  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Equals

; 115  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 116  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 117  :     PMC_STATUS_CODE result;
; 118  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Equals

; 119  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 120  :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_Equals

; 121  :     {
; 122  :         // u が 0 である場合
; 123  :         if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN8@PMC_Equals

; 124  :         {
; 125  :             // v が 0 である場合
; 126  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 127  :         }

	jmp	SHORT $LN9@PMC_Equals
$LN8@PMC_Equals:

; 128  :         else
; 129  :         {
; 130  :             // v が 0 でない場合
; 131  :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
$LN9@PMC_Equals:

; 132  :         }
; 133  :     }

	jmp	$LN7@PMC_Equals
$LN6@PMC_Equals:

; 134  :     else if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN10@PMC_Equals

; 135  :     {
; 136  :         // v が 0 である場合
; 137  :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 138  :     }

	jmp	$LN11@PMC_Equals
$LN10@PMC_Equals:

; 139  :     else
; 140  :     {
; 141  :         // u と v がともに 0 ではない場合
; 142  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	$LN12@PMC_Equals

; 143  :         {
; 144  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 145  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$4[rbp], rax

; 146  :             _UINT32_T v_hi;
; 147  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	rdx, QWORD PTR v_hi$5[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR v_lo$6[rbp], eax

; 148  :             if (v_hi == 0)

	cmp	DWORD PTR v_hi$5[rbp], 0
	jne	$LN14@PMC_Equals

; 149  :             {
; 150  :                 // v の値が 32bit では表現できる場合
; 151  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR v_lo$6[rbp]
	call	_LZCNT_ALT_32
	mov	eax, eax
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$7[rbp], rax

; 152  :                 if (u_bit_count != v_bit_count)

	mov	rax, QWORD PTR v_bit_count$7[rbp]
	cmp	QWORD PTR u_bit_count$4[rbp], rax
	je	SHORT $LN16@PMC_Equals

; 153  :                 {
; 154  :                     // 明らかに u > v である場合
; 155  :                     *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 156  :                 }

	jmp	SHORT $LN17@PMC_Equals
$LN16@PMC_Equals:

; 157  :                 else
; 158  :                 {
; 159  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 160  :                     // ⇒ u と v はともに 1 ワードで表現できる
; 161  :                     *w = nu->BLOCK[0] == v_lo;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, DWORD PTR v_lo$6[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jne	SHORT $LN23@PMC_Equals
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN24@PMC_Equals
$LN23@PMC_Equals:
	mov	DWORD PTR tv92[rbp], 0
$LN24@PMC_Equals:
	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR tv92[rbp]
	mov	DWORD PTR [rax], ecx
$LN17@PMC_Equals:

; 162  :                 }
; 163  :             }

	jmp	$LN15@PMC_Equals
$LN14@PMC_Equals:

; 164  :             else
; 165  :             {
; 166  :                 // v の値が 32bit では表現できない場合
; 167  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	ecx, DWORD PTR v_hi$5[rbp]
	call	_LZCNT_ALT_32
	mov	eax, eax
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$8[rbp], rax

; 168  :                 if (u_bit_count != v_bit_count)

	mov	rax, QWORD PTR v_bit_count$8[rbp]
	cmp	QWORD PTR u_bit_count$4[rbp], rax
	je	SHORT $LN18@PMC_Equals

; 169  :                 {
; 170  :                     // 明らかに u > v である場合
; 171  :                     *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 172  :                 }

	jmp	SHORT $LN19@PMC_Equals
$LN18@PMC_Equals:

; 173  :                 else
; 174  :                 {
; 175  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 176  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 177  :                     *w = nu->BLOCK[1] == v_hi && nu->BLOCK[0] == v_lo;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, DWORD PTR v_hi$5[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jne	SHORT $LN25@PMC_Equals
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, DWORD PTR v_lo$6[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jne	SHORT $LN25@PMC_Equals
	mov	DWORD PTR tv140[rbp], 1
	jmp	SHORT $LN26@PMC_Equals
$LN25@PMC_Equals:
	mov	DWORD PTR tv140[rbp], 0
$LN26@PMC_Equals:
	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR tv140[rbp]
	mov	DWORD PTR [rax], ecx
$LN19@PMC_Equals:
$LN15@PMC_Equals:

; 178  :                 }
; 179  :             }
; 180  :         }

	jmp	$LN13@PMC_Equals
$LN12@PMC_Equals:

; 181  :         else
; 182  :         {
; 183  :             // _UINT64_T が 1 ワードで表現できる場合
; 184  : 
; 185  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$9[rbp], rax

; 186  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	rcx, QWORD PTR v$[rbp]
	call	_LZCNT_ALT_UNIT
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$10[rbp], rax

; 187  :             if (u_bit_count != v_bit_count)

	mov	rax, QWORD PTR v_bit_count$10[rbp]
	cmp	QWORD PTR u_bit_count$9[rbp], rax
	je	SHORT $LN20@PMC_Equals

; 188  :             {
; 189  :                 // 明らかに u > v である場合
; 190  :                 *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 191  :             }

	jmp	SHORT $LN21@PMC_Equals
$LN20@PMC_Equals:

; 192  :             else
; 193  :             {
; 194  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 195  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 196  :                 *w = nu->BLOCK[0] == v;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR v$[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jne	SHORT $LN27@PMC_Equals
	mov	DWORD PTR tv150[rbp], 1
	jmp	SHORT $LN28@PMC_Equals
$LN27@PMC_Equals:
	mov	DWORD PTR tv150[rbp], 0
$LN28@PMC_Equals:
	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR tv150[rbp]
	mov	DWORD PTR [rax], ecx
$LN21@PMC_Equals:
$LN13@PMC_Equals:
$LN11@PMC_Equals:
$LN7@PMC_Equals:

; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 202  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Equals_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_I
_TEXT	SEGMENT
nu$ = 8
result$ = 36
u_bit_count$1 = 72
v_bit_count$2 = 104
tv87 = 308
u$ = 352
v$ = 360
w$ = 368
PMC_Equals_X_I PROC					; COMDAT

; 52   : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	lea	rcx, OFFSET FLAT:__3006EDED_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 53   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Equals

; 54   :     {
; 55   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 56   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 57   :     }
; 58   :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 59   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 60   :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Equals

; 61   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 62   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 63   :     PMC_STATUS_CODE result;
; 64   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Equals

; 65   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 66   :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_Equals

; 67   :     {
; 68   :         // u が 0 である場合
; 69   :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN8@PMC_Equals

; 70   :         {
; 71   :             // v が 0 である場合
; 72   :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 73   :         }

	jmp	SHORT $LN9@PMC_Equals
$LN8@PMC_Equals:

; 74   :         else
; 75   :         {
; 76   :             // v が 0 でない場合
; 77   :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
$LN9@PMC_Equals:

; 78   :         }
; 79   :     }

	jmp	$LN7@PMC_Equals
$LN6@PMC_Equals:

; 80   :     else if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN10@PMC_Equals

; 81   :     {
; 82   :         // v が 0 である場合
; 83   :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 84   :     }

	jmp	$LN11@PMC_Equals
$LN10@PMC_Equals:

; 85   :     else
; 86   :     {
; 87   :         // x と y がともに 0 ではない場合
; 88   :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$1[rbp], rax

; 89   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR v$[rbp]
	call	_LZCNT_ALT_32
	mov	eax, eax
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$2[rbp], rax

; 90   :         if (u_bit_count != v_bit_count)

	mov	rax, QWORD PTR v_bit_count$2[rbp]
	cmp	QWORD PTR u_bit_count$1[rbp], rax
	je	SHORT $LN12@PMC_Equals

; 91   :         {
; 92   :             // 明らかに u != v である場合
; 93   :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 94   :         }

	jmp	SHORT $LN13@PMC_Equals
$LN12@PMC_Equals:

; 95   :         else
; 96   :         {
; 97   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 98   :             // ⇒ u と v はともに 1 ワードで表現できる
; 99   :             *w = nu->BLOCK[0] == v;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, DWORD PTR v$[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jne	SHORT $LN15@PMC_Equals
	mov	DWORD PTR tv87[rbp], 1
	jmp	SHORT $LN16@PMC_Equals
$LN15@PMC_Equals:
	mov	DWORD PTR tv87[rbp], 0
$LN16@PMC_Equals:
	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR tv87[rbp]
	mov	DWORD PTR [rax], ecx
$LN13@PMC_Equals:
$LN11@PMC_Equals:
$LN7@PMC_Equals:

; 100  :         }
; 101  :     }
; 102  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 103  : }

	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT Initialize_Equals
_TEXT	SEGMENT
feature$ = 224
Initialize_Equals PROC					; COMDAT

; 246  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__3006EDED_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 247  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 248  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Equals ENDP
_TEXT	ENDS
END
