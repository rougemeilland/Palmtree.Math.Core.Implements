; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__C53FCF4E_pmc_multiply@c DB 01H
msvcjmc	ENDS
PUBLIC	Initialize_Multiply
PUBLIC	PMC_Multiply_I_X
PUBLIC	PMC_Multiply_L_X
PUBLIC	PMC_Multiply_X_I
PUBLIC	PMC_Multiply_X_L
PUBLIC	PMC_Multiply_X_X
PUBLIC	__JustMyCode_Default
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	number_zero:BYTE
EXTRN	statistics_info:BYTE
_BSS	SEGMENT
fp_Multiply_X_1W DQ 01H DUP (?)
fp_Multiply_X_2W DQ 01H DUP (?)
fp_Multiply_X_X DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Multiply DD imagerel $LN5
	DD	imagerel $LN5+189
	DD	imagerel $unwind$Initialize_Multiply
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_I_X DD imagerel $LN9
	DD	imagerel $LN9+218
	DD	imagerel $unwind$PMC_Multiply_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_L_X DD imagerel $LN9
	DD	imagerel $LN9+221
	DD	imagerel $unwind$PMC_Multiply_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_I DD imagerel $LN9
	DD	imagerel $LN9+219
	DD	imagerel $unwind$PMC_Multiply_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_L DD imagerel $LN9
	DD	imagerel $LN9+221
	DD	imagerel $unwind$PMC_Multiply_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_X DD imagerel $LN24
	DD	imagerel $LN24+679
	DD	imagerel $unwind$PMC_Multiply_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_UNIT DD imagerel _ADD_UNIT
	DD	imagerel _ADD_UNIT+118
	DD	imagerel $unwind$_ADD_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADDX_UNIT DD imagerel _ADDX_UNIT
	DD	imagerel _ADDX_UNIT+121
	DD	imagerel $unwind$_ADDX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_UNIT DD imagerel _MULTIPLY_UNIT
	DD	imagerel _MULTIPLY_UNIT+118
	DD	imagerel $unwind$_MULTIPLY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_UNIT DD imagerel _MULTIPLYX_UNIT
	DD	imagerel _MULTIPLYX_UNIT+103
	DD	imagerel $unwind$_MULTIPLYX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IncrementMULTI32Counter DD imagerel IncrementMULTI32Counter
	DD	imagerel IncrementMULTI32Counter+62
	DD	imagerel $unwind$IncrementMULTI32Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IncrementMULTI64Counter DD imagerel IncrementMULTI64Counter
	DD	imagerel IncrementMULTI64Counter+62
	DD	imagerel $unwind$IncrementMULTI64Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddToMULTI32Counter DD imagerel AddToMULTI32Counter
	DD	imagerel AddToMULTI32Counter+78
	DD	imagerel $unwind$AddToMULTI32Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddToMULTI64Counter DD imagerel AddToMULTI64Counter
	DD	imagerel AddToMULTI64Counter+78
	DD	imagerel $unwind$AddToMULTI64Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_DIGIT_UNIT DD imagerel _MULTIPLY_DIGIT_UNIT
	DD	imagerel _MULTIPLY_DIGIT_UNIT+248
	DD	imagerel $unwind$_MULTIPLY_DIGIT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_DIGIT_UNIT DD imagerel _MULTIPLYX_DIGIT_UNIT
	DD	imagerel _MULTIPLYX_DIGIT_UNIT+248
	DD	imagerel $unwind$_MULTIPLYX_DIGIT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_WORD_using_MUL_ADC DD imagerel Multiply_WORD_using_MUL_ADC
	DD	imagerel Multiply_WORD_using_MUL_ADC+5040
	DD	imagerel $unwind$Multiply_WORD_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_WORD_using_MULX_ADCX DD imagerel Multiply_WORD_using_MULX_ADCX
	DD	imagerel Multiply_WORD_using_MULX_ADCX+5040
	DD	imagerel $unwind$Multiply_WORD_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_1W_using_MUL_ADC DD imagerel Multiply_X_1W_using_MUL_ADC
	DD	imagerel Multiply_X_1W_using_MUL_ADC+141
	DD	imagerel $unwind$Multiply_X_1W_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_1W_using_MULX_ADCX DD imagerel Multiply_X_1W_using_MULX_ADCX
	DD	imagerel Multiply_X_1W_using_MULX_ADCX+141
	DD	imagerel $unwind$Multiply_X_1W_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_2W_using_MUL_ADC DD imagerel Multiply_X_2W_using_MUL_ADC
	DD	imagerel Multiply_X_2W_using_MUL_ADC+211
	DD	imagerel $unwind$Multiply_X_2W_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_2W_using_MULX_ADCX DD imagerel Multiply_X_2W_using_MULX_ADCX
	DD	imagerel Multiply_X_2W_using_MULX_ADCX+211
	DD	imagerel $unwind$Multiply_X_2W_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_X_using_MUL_ADC DD imagerel Multiply_X_X_using_MUL_ADC
	DD	imagerel Multiply_X_X_using_MUL_ADC+345
	DD	imagerel $unwind$Multiply_X_X_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_X_using_MULX_ADCX DD imagerel Multiply_X_X_using_MULX_ADCX
	DD	imagerel Multiply_X_X_using_MULX_ADCX+345
	DD	imagerel $unwind$Multiply_X_X_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_I_Imp DD imagerel PMC_Multiply_X_I_Imp
	DD	imagerel PMC_Multiply_X_I_Imp+520
	DD	imagerel $unwind$PMC_Multiply_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_L_Imp DD imagerel PMC_Multiply_X_L_Imp
	DD	imagerel PMC_Multiply_X_L_Imp+1022
	DD	imagerel $unwind$PMC_Multiply_X_L_Imp
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_L_Imp DD 025053401H
	DD	0118231dH
	DD	070110055H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_X_L_Imp$rtcName$0 DB 079H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
PMC_Multiply_X_L_Imp$rtcName$1 DB 06eH
	DB	07aH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_Multiply_X_L_Imp$rtcName$2 DB 06eH
	DB	07aH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_Multiply_X_L_Imp$rtcName$3 DB 06eH
	DB	07aH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_Multiply_X_L_Imp$rtcVarDesc DD 01c8H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_L_Imp$rtcName$3
	DD	0148H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_L_Imp$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_L_Imp$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:PMC_Multiply_X_L_Imp$rtcName$0
	ORG $+192
PMC_Multiply_X_L_Imp$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:PMC_Multiply_X_L_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_I_Imp DD 025053301H
	DD	0117231cH
	DD	070100031H
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_X_I_Imp$rtcName$0 DB 077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+13
PMC_Multiply_X_I_Imp$rtcVarDesc DD 0a8H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_I_Imp$rtcName$0
	ORG $+48
PMC_Multiply_X_I_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Multiply_X_I_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_X_using_MULX_ADCX DD 025053401H
	DD	0118231dH
	DD	070110039H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_X_using_MUL_ADC DD 025053401H
	DD	0118231dH
	DD	070110039H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_2W_using_MULX_ADCX DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_2W_using_MUL_ADC DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_1W_using_MULX_ADCX DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_1W_using_MUL_ADC DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_WORD_using_MULX_ADCX DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_WORD_using_MUL_ADC DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_DIGIT_UNIT DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_MULTIPLYX_DIGIT_UNIT$rtcName$0 DB 074H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
_MULTIPLYX_DIGIT_UNIT$rtcName$1 DB 074H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	00H
	ORG $+3
_MULTIPLYX_DIGIT_UNIT$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:_MULTIPLYX_DIGIT_UNIT$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:_MULTIPLYX_DIGIT_UNIT$rtcName$0
	ORG $+96
_MULTIPLYX_DIGIT_UNIT$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:_MULTIPLYX_DIGIT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_DIGIT_UNIT DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_MULTIPLY_DIGIT_UNIT$rtcName$0 DB 074H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
_MULTIPLY_DIGIT_UNIT$rtcName$1 DB 074H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	00H
	ORG $+3
_MULTIPLY_DIGIT_UNIT$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:_MULTIPLY_DIGIT_UNIT$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:_MULTIPLY_DIGIT_UNIT$rtcName$0
	ORG $+96
_MULTIPLY_DIGIT_UNIT$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:_MULTIPLY_DIGIT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddToMULTI64Counter DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddToMULTI32Counter DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IncrementMULTI64Counter DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IncrementMULTI32Counter DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADDX_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_X DD 025053401H
	DD	0118231dH
	DD	07011003dH
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_X_X$rtcName$0 DB 06eH
	DB	07aH
	DB	00H
	ORG $+5
PMC_Multiply_X_X$rtcName$1 DB 06eH
	DB	07aH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_Multiply_X_X$rtcVarDesc DD 0108H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_X$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_X$rtcName$0
	ORG $+96
PMC_Multiply_X_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Multiply_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_L DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_I DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_L_X DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_I_X DD 025053201H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Multiply DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_X_L_Imp
_TEXT	SEGMENT
result$ = 4
x_bit_count$7 = 40
y_hi$8 = 68
y_lo$9 = 100
y_bit_count$10 = 136
z_bit_count$11 = 168
nz_light_check_code$12 = 200
y_bit_count$13 = 232
z_bit_count$14 = 264
nz_light_check_code$15 = 296
x_bit_count$16 = 328
y_bit_count$17 = 360
z_bit_count$18 = 392
nz_light_check_code$19 = 424
u$ = 672
v$ = 680
w$ = 688
PMC_Multiply_X_L_Imp PROC				; COMDAT

; 560  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 680				; 000002a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 170				; 000000aaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+712]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 561  :     PMC_STATUS_CODE result;
; 562  :     if (u->IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_Multip

; 563  :     {
; 564  :         // x が 0 である場合
; 565  : 
; 566  :         // y の値にかかわらず 0 を返す。
; 567  :         *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 568  :     }

	jmp	$LN3@PMC_Multip
$LN2@PMC_Multip:

; 569  :     else if (u->IS_ONE)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@PMC_Multip

; 570  :     {
; 571  :         // x が 1 である場合
; 572  :         if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN6@PMC_Multip

; 573  :         {
; 574  :             // y が 0 である場合
; 575  : 
; 576  :             //  0  を返す。
; 577  :             *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 578  :         }

	jmp	SHORT $LN7@PMC_Multip
$LN6@PMC_Multip:

; 579  :         else
; 580  :         {
; 581  :             // y が 0 ではない場合
; 582  : 
; 583  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 584  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	From_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN8@PMC_Multip

; 585  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN8@PMC_Multip:
$LN7@PMC_Multip:

; 586  :         }
; 587  :     }

	jmp	$LN5@PMC_Multip
$LN4@PMC_Multip:

; 588  :     else
; 589  :     {
; 590  :         // x が 0 と 1 のどちらでもない場合
; 591  : 
; 592  :         if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN9@PMC_Multip

; 593  :         {
; 594  :             // y が 0 である場合
; 595  : 
; 596  :             //  0  を返す。
; 597  :             *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 598  :         }

	jmp	$LN10@PMC_Multip
$LN9@PMC_Multip:

; 599  :         else if (v == 1)

	cmp	QWORD PTR v$[rbp], 1
	jne	SHORT $LN11@PMC_Multip

; 600  :         {
; 601  :             // y が 1 である場合
; 602  : 
; 603  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 604  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_Multip

; 605  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN13@PMC_Multip:

; 606  :         }

	jmp	$LN12@PMC_Multip
$LN11@PMC_Multip:

; 607  :         else
; 608  :         {
; 609  :             // x と y がともに 0 、1 のどちらでもない場合
; 610  : 
; 611  :             // x と y の積を計算する
; 612  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	$LN14@PMC_Multip

; 613  :             {
; 614  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 615  : 
; 616  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR x_bit_count$7[rbp], rax

; 617  :                 _UINT32_T y_hi;
; 618  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(v, &y_hi);

	lea	rdx, QWORD PTR y_hi$8[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR y_lo$9[rbp], eax

; 619  :                 if (y_hi == 0)

	cmp	DWORD PTR y_hi$8[rbp], 0
	jne	$LN16@PMC_Multip

; 620  :                 {
; 621  :                     // y の値が 32bit で表現可能な場合
; 622  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);

	mov	ecx, DWORD PTR y_lo$9[rbp]
	call	_LZCNT_ALT_32
	mov	eax, eax
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR y_bit_count$10[rbp], rax

; 623  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	rax, QWORD PTR y_bit_count$10[rbp]
	mov	rcx, QWORD PTR x_bit_count$7[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z_bit_count$11[rbp], rax

; 624  :                     __UNIT_TYPE nz_light_check_code;
; 625  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$12[rbp]
	mov	rdx, QWORD PTR z_bit_count$11[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_Multip

; 626  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN18@PMC_Multip:

; 627  :                     if ((result = (*fp_Multiply_X_1W)(u, y_lo, *w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR y_lo$9[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	r8, QWORD PTR [rcx]
	mov	edx, eax
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR fp_Multiply_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN19@PMC_Multip

; 628  :                     {
; 629  :                         DeallocateNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 630  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN19@PMC_Multip:

; 631  :                     }
; 632  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR nz_light_check_code$12[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN20@PMC_Multip

; 633  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN20@PMC_Multip:

; 634  :                 }

	jmp	$LN17@PMC_Multip
$LN16@PMC_Multip:

; 635  :                 else
; 636  :                 {
; 637  :                     // y の値が 32bit では表現できない場合
; 638  :                     __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(y_hi);

	mov	ecx, DWORD PTR y_hi$8[rbp]
	call	_LZCNT_ALT_32
	mov	eax, eax
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR y_bit_count$13[rbp], rax

; 639  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	rax, QWORD PTR y_bit_count$13[rbp]
	mov	rcx, QWORD PTR x_bit_count$7[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z_bit_count$14[rbp], rax

; 640  :                     __UNIT_TYPE nz_light_check_code;
; 641  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$15[rbp]
	mov	rdx, QWORD PTR z_bit_count$14[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN21@PMC_Multip

; 642  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN21@PMC_Multip:

; 643  :                     if ((result = (*fp_Multiply_X_2W)(u, y_hi, y_lo, *w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR y_lo$9[rbp]
	mov	ecx, DWORD PTR y_hi$8[rbp]
	mov	rdx, QWORD PTR w$[rbp]
	mov	r9, QWORD PTR [rdx]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR fp_Multiply_X_2W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN22@PMC_Multip

; 644  :                     {
; 645  :                         DeallocateNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 646  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN22@PMC_Multip:

; 647  :                     }
; 648  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR nz_light_check_code$15[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN23@PMC_Multip

; 649  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN23@PMC_Multip:
$LN17@PMC_Multip:

; 650  :                 }
; 651  :                 CommitNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber

; 652  :             }

	jmp	$LN15@PMC_Multip
$LN14@PMC_Multip:

; 653  :             else
; 654  :             {
; 655  :                 // _UINT64_T が 1 ワードで表現できる場合
; 656  : 
; 657  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR x_bit_count$16[rbp], rax

; 658  :                 __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	rcx, QWORD PTR v$[rbp]
	call	_LZCNT_ALT_UNIT
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR y_bit_count$17[rbp], rax

; 659  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	rax, QWORD PTR y_bit_count$17[rbp]
	mov	rcx, QWORD PTR x_bit_count$16[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z_bit_count$18[rbp], rax

; 660  :                 __UNIT_TYPE nz_light_check_code;
; 661  :                 if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$19[rbp]
	mov	rdx, QWORD PTR z_bit_count$18[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN24@PMC_Multip

; 662  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN24@PMC_Multip:

; 663  :                 if ((result = (*fp_Multiply_X_1W)(u, (__UNIT_TYPE)v, *w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR fp_Multiply_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN25@PMC_Multip

; 664  :                 {
; 665  :                     DeallocateNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 666  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN25@PMC_Multip:

; 667  :                 }
; 668  :                 if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR nz_light_check_code$19[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN26@PMC_Multip

; 669  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN26@PMC_Multip:

; 670  :                 CommitNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber
$LN15@PMC_Multip:
$LN12@PMC_Multip:
$LN10@PMC_Multip:
$LN5@PMC_Multip:
$LN3@PMC_Multip:

; 671  :             }
; 672  :         }
; 673  :     }
; 674  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 675  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_X_L_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+648]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_X_I_Imp
_TEXT	SEGMENT
result$ = 4
u_bit_count$4 = 40
v_bit_count$5 = 72
w_bit_count$6 = 104
w_light_check_code$7 = 136
u$ = 384
v$ = 392
w$ = 400
PMC_Multiply_X_I_Imp PROC				; COMDAT

; 442  : {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 443  :     PMC_STATUS_CODE result;
; 444  :     if (u->IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_Multip

; 445  :     {
; 446  :         // u が 0 である場合
; 447  : 
; 448  :         // v の値にかかわらず 0 を返す。
; 449  :         *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 450  :     }

	jmp	$LN3@PMC_Multip
$LN2@PMC_Multip:

; 451  :     else if (u->IS_ONE)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@PMC_Multip

; 452  :     {
; 453  :         // u が 1 である場合
; 454  :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN6@PMC_Multip

; 455  :         {
; 456  :             // v が 0 である場合
; 457  : 
; 458  :             //  0  を返す。
; 459  :             *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 460  :         }

	jmp	SHORT $LN7@PMC_Multip
$LN6@PMC_Multip:

; 461  :         else
; 462  :         {
; 463  :             // y が 0 ではない場合
; 464  : 
; 465  :             // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 466  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	From_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN8@PMC_Multip

; 467  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN8@PMC_Multip:
$LN7@PMC_Multip:

; 468  :         }
; 469  :     }

	jmp	$LN5@PMC_Multip
$LN4@PMC_Multip:

; 470  :     else
; 471  :     {
; 472  :         // u が 0 と 1 のどちらでもない場合
; 473  : 
; 474  :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN9@PMC_Multip

; 475  :         {
; 476  :             // v が 0 である場合
; 477  : 
; 478  :             //  0  を返す。
; 479  :             *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 480  :         }

	jmp	$LN10@PMC_Multip
$LN9@PMC_Multip:

; 481  :         else if (v == 1)

	cmp	DWORD PTR v$[rbp], 1
	jne	SHORT $LN11@PMC_Multip

; 482  :         {
; 483  :             // v が 1 である場合
; 484  : 
; 485  :             // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 486  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_Multip

; 487  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN13@PMC_Multip:

; 488  :         }

	jmp	$LN12@PMC_Multip
$LN11@PMC_Multip:

; 489  :         else
; 490  :         {
; 491  :             // u と v がともに 0 、1 のどちらでもない場合
; 492  : 
; 493  :             // u と v の積を計算する
; 494  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR u_bit_count$4[rbp], rax

; 495  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR v$[rbp]
	call	_LZCNT_ALT_32
	mov	eax, eax
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$5[rbp], rax

; 496  :             __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

	mov	rax, QWORD PTR v_bit_count$5[rbp]
	mov	rcx, QWORD PTR u_bit_count$4[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR w_bit_count$6[rbp], rax

; 497  :             __UNIT_TYPE w_light_check_code;
; 498  :             if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$7[rbp]
	mov	rdx, QWORD PTR w_bit_count$6[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Multip

; 499  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN14@PMC_Multip:

; 500  :             if ((result = (*fp_Multiply_X_1W)(u, v, *w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	r8, QWORD PTR [rcx]
	mov	edx, eax
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR fp_Multiply_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_Multip

; 501  :             {
; 502  :                 DeallocateNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 503  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN15@PMC_Multip:

; 504  :             }
; 505  :             if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR w_light_check_code$7[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Multip

; 506  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN16@PMC_Multip:

; 507  :             CommitNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber
$LN12@PMC_Multip:
$LN10@PMC_Multip:
$LN5@PMC_Multip:
$LN3@PMC_Multip:

; 508  :         }
; 509  :     }
; 510  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 511  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_X_I_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_X_using_MULX_ADCX
_TEXT	SEGMENT
t$1 = 8
u_count$ = 40
v_count$ = 72
w_count$ = 104
up$ = 136
vp$ = 168
wp$ = 200
u$ = 448
v$ = 456
w$ = 464
Multiply_X_X_using_MULX_ADCX PROC			; COMDAT

; 415  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 416  :     // x のワード長が y のワード長以上であるようにする
; 417  :     if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN5@Multiply_X

; 418  :     {
; 419  :         NUMBER_HEADER* t = u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR t$1[rbp], rax

; 420  :         u = v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR u$[rbp], rax

; 421  :         v = t;

	mov	rax, QWORD PTR t$1[rbp]
	mov	QWORD PTR v$[rbp], rax
$LN5@Multiply_X:

; 422  :     }
; 423  :     __UNIT_TYPE u_count = u->UNIT_WORD_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR u_count$[rbp], rax

; 424  :     __UNIT_TYPE v_count = v->UNIT_WORD_COUNT;

	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR v_count$[rbp], rax

; 425  :     __UNIT_TYPE w_count = w->BLOCK_COUNT;

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR w_count$[rbp], rax

; 426  :     __UNIT_TYPE* up = &u->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR up$[rbp], rax

; 427  :     __UNIT_TYPE* vp = &v->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR vp$[rbp], rax

; 428  :     __UNIT_TYPE* wp = &w->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR w$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR wp$[rbp], rax
$LN4@Multiply_X:

; 429  : 
; 430  :     do
; 431  :     {
; 432  :         Multiply_WORD_using_MULX_ADCX(up, u_count, *vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	rax, QWORD PTR vp$[rbp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR u_count$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	call	Multiply_WORD_using_MULX_ADCX

; 433  :         ++vp;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 8
	mov	QWORD PTR vp$[rbp], rax

; 434  :         ++wp;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax

; 435  :         --v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	dec	rax
	mov	QWORD PTR v_count$[rbp], rax

; 436  :     } while (v_count != 0);

	cmp	QWORD PTR v_count$[rbp], 0
	jne	SHORT $LN4@Multiply_X

; 437  : 
; 438  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 439  : }

	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
Multiply_X_X_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_X_using_MUL_ADC
_TEXT	SEGMENT
t$1 = 8
u_count$ = 40
v_count$ = 72
w_count$ = 104
up$ = 136
vp$ = 168
wp$ = 200
u$ = 448
v$ = 456
w$ = 464
Multiply_X_X_using_MUL_ADC PROC				; COMDAT

; 388  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 389  :     // x のワード長が y のワード長以上であるようにする
; 390  :     if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN5@Multiply_X

; 391  :     {
; 392  :         NUMBER_HEADER* t = u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR t$1[rbp], rax

; 393  :         u = v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR u$[rbp], rax

; 394  :         v = t;

	mov	rax, QWORD PTR t$1[rbp]
	mov	QWORD PTR v$[rbp], rax
$LN5@Multiply_X:

; 395  :     }
; 396  :     __UNIT_TYPE u_count = u->UNIT_WORD_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR u_count$[rbp], rax

; 397  :     __UNIT_TYPE v_count = v->UNIT_WORD_COUNT;

	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR v_count$[rbp], rax

; 398  :     __UNIT_TYPE w_count = w->BLOCK_COUNT;

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR w_count$[rbp], rax

; 399  :     __UNIT_TYPE* up = &u->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR up$[rbp], rax

; 400  :     __UNIT_TYPE* vp = &v->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR vp$[rbp], rax

; 401  :     __UNIT_TYPE* wp = &w->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR w$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR wp$[rbp], rax
$LN4@Multiply_X:

; 402  : 
; 403  :     do
; 404  :     {
; 405  :         Multiply_WORD_using_MUL_ADC(up, u_count, *vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	rax, QWORD PTR vp$[rbp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR u_count$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	call	Multiply_WORD_using_MUL_ADC

; 406  :         ++vp;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 8
	mov	QWORD PTR vp$[rbp], rax

; 407  :         ++wp;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax

; 408  :         --v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	dec	rax
	mov	QWORD PTR v_count$[rbp], rax

; 409  :     } while (v_count != 0);

	cmp	QWORD PTR v_count$[rbp], 0
	jne	SHORT $LN4@Multiply_X

; 410  : 
; 411  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 412  : }

	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
Multiply_X_X_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_2W_using_MULX_ADCX
_TEXT	SEGMENT
u$ = 224
v_hi$ = 232
w_lo$ = 240
z$ = 248
Multiply_X_2W_using_MULX_ADCX PROC			; COMDAT

; 381  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 382  :     Multiply_WORD_using_MULX_ADCX(&u->BLOCK[0], u->UNIT_WORD_COUNT, w_lo, &z->BLOCK[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	add	rcx, QWORD PTR [rdx+48]
	mov	r9, rax
	mov	r8, QWORD PTR w_lo$[rbp]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	call	Multiply_WORD_using_MULX_ADCX

; 383  :     Multiply_WORD_using_MULX_ADCX(&u->BLOCK[0], u->UNIT_WORD_COUNT, v_hi, &z->BLOCK[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR z$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	add	rcx, QWORD PTR [rdx+48]
	mov	r9, rax
	mov	r8, QWORD PTR v_hi$[rbp]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	call	Multiply_WORD_using_MULX_ADCX

; 384  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 385  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Multiply_X_2W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_2W_using_MUL_ADC
_TEXT	SEGMENT
u$ = 224
v_hi$ = 232
v_lo$ = 240
w$ = 248
Multiply_X_2W_using_MUL_ADC PROC			; COMDAT

; 374  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 375  :     Multiply_WORD_using_MUL_ADC(&u->BLOCK[0], u->UNIT_WORD_COUNT, v_lo, &w->BLOCK[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR w$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	add	rcx, QWORD PTR [rdx+48]
	mov	r9, rax
	mov	r8, QWORD PTR v_lo$[rbp]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	call	Multiply_WORD_using_MUL_ADC

; 376  :     Multiply_WORD_using_MUL_ADC(&u->BLOCK[0], u->UNIT_WORD_COUNT, v_hi, &w->BLOCK[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR w$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	add	rcx, QWORD PTR [rdx+48]
	mov	r9, rax
	mov	r8, QWORD PTR v_hi$[rbp]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	call	Multiply_WORD_using_MUL_ADC

; 377  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 378  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Multiply_X_2W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_1W_using_MULX_ADCX
_TEXT	SEGMENT
u$ = 224
v$ = 232
w$ = 240
Multiply_X_1W_using_MULX_ADCX PROC			; COMDAT

; 368  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 369  :     Multiply_WORD_using_MULX_ADCX(&u->BLOCK[0], u->UNIT_WORD_COUNT, v, &w->BLOCK[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR w$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	add	rcx, QWORD PTR [rdx+48]
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	call	Multiply_WORD_using_MULX_ADCX

; 370  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 371  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Multiply_X_1W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_1W_using_MUL_ADC
_TEXT	SEGMENT
u$ = 224
v$ = 232
w$ = 240
Multiply_X_1W_using_MUL_ADC PROC			; COMDAT

; 362  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 363  :     Multiply_WORD_using_MUL_ADC(&u->BLOCK[0], u->UNIT_WORD_COUNT, v, &w->BLOCK[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR w$[rbp]
	add	rax, QWORD PTR [rcx+48]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$[rbp]
	add	rcx, QWORD PTR [rdx+48]
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax]
	call	Multiply_WORD_using_MUL_ADC

; 364  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 365  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Multiply_X_1W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_WORD_using_MULX_ADCX
_TEXT	SEGMENT
k$ = 8
count$ = 40
up$ = 288
u_count$ = 296
v$ = 304
wp$ = 312
Multiply_WORD_using_MULX_ADCX PROC			; COMDAT

; 214  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 215  :     __UNIT_TYPE k = 0;

	mov	QWORD PTR k$[rbp], 0

; 216  :     __UNIT_TYPE count = u_count >> 5;

	mov	rax, QWORD PTR u_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@Multiply_W:

; 217  : 
; 218  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	$LN3@Multiply_W

; 219  :     {
; 220  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 221  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 222  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 223  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 224  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 225  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 226  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 227  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 228  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[8], v, &wp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 229  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[9], v, &wp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 230  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[10], v, &wp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 231  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[11], v, &wp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 232  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[12], v, &wp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 233  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[13], v, &wp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 234  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[14], v, &wp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 235  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[15], v, &wp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 236  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[16], v, &wp[16]);

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 237  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[17], v, &wp[17]);

	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 238  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[18], v, &wp[18]);

	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 239  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[19], v, &wp[19]);

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 240  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[20], v, &wp[20]);

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 241  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[21], v, &wp[21]);

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 242  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[22], v, &wp[22]);

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 243  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[23], v, &wp[23]);

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 244  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[24], v, &wp[24]);

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 245  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[25], v, &wp[25]);

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 246  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[26], v, &wp[26]);

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 247  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[27], v, &wp[27]);

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 248  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[28], v, &wp[28]);

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 249  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[29], v, &wp[29]);

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 250  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[30], v, &wp[30]);

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 251  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[31], v, &wp[31]);

	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 252  :         up += 32;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR up$[rbp], rax

; 253  :         wp += 32;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR wp$[rbp], rax

; 254  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 255  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 256  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN4@Multiply_W

; 257  :             AddToMULTI32Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToMULTI32Counter
	jmp	SHORT $LN5@Multiply_W
$LN4@Multiply_W:

; 258  :         else
; 259  :             AddToMULTI64Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToMULTI64Counter
$LN5@Multiply_W:

; 260  : #endif
; 261  :     }

	jmp	$LN2@Multiply_W
$LN3@Multiply_W:

; 262  : 
; 263  :     if (u_count & 0x10)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN6@Multiply_W

; 264  :     {
; 265  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 266  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 267  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 268  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 269  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 270  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 271  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 272  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 273  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[8], v, &wp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 274  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[9], v, &wp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 275  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[10], v, &wp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 276  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[11], v, &wp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 277  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[12], v, &wp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 278  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[13], v, &wp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 279  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[14], v, &wp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 280  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[15], v, &wp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 281  :         up += 16;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR up$[rbp], rax

; 282  :         wp += 16;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR wp$[rbp], rax

; 283  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 284  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN7@Multiply_W

; 285  :             AddToMULTI32Counter(16);

	mov	ecx, 16
	call	AddToMULTI32Counter
	jmp	SHORT $LN8@Multiply_W
$LN7@Multiply_W:

; 286  :         else
; 287  :             AddToMULTI64Counter(16);

	mov	ecx, 16
	call	AddToMULTI64Counter
$LN8@Multiply_W:
$LN6@Multiply_W:

; 288  : #endif
; 289  :     }
; 290  : 
; 291  :     if (u_count & 0x8)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN9@Multiply_W

; 292  :     {
; 293  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 294  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 295  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 296  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 297  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 298  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 299  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 300  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 301  :         up += 8;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR up$[rbp], rax

; 302  :         wp += 8;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR wp$[rbp], rax

; 303  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 304  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN10@Multiply_W

; 305  :             AddToMULTI32Counter(8);

	mov	ecx, 8
	call	AddToMULTI32Counter
	jmp	SHORT $LN11@Multiply_W
$LN10@Multiply_W:

; 306  :         else
; 307  :             AddToMULTI64Counter(8);

	mov	ecx, 8
	call	AddToMULTI64Counter
$LN11@Multiply_W:
$LN9@Multiply_W:

; 308  : #endif
; 309  :     }
; 310  : 
; 311  :     if (u_count & 0x4)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN12@Multiply_W

; 312  :     {
; 313  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 314  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 315  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 316  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 317  :         up += 4;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR up$[rbp], rax

; 318  :         wp += 4;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR wp$[rbp], rax

; 319  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 320  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN13@Multiply_W

; 321  :             AddToMULTI32Counter(4);

	mov	ecx, 4
	call	AddToMULTI32Counter
	jmp	SHORT $LN14@Multiply_W
$LN13@Multiply_W:

; 322  :         else
; 323  :             AddToMULTI64Counter(4);

	mov	ecx, 4
	call	AddToMULTI64Counter
$LN14@Multiply_W:
$LN12@Multiply_W:

; 324  : #endif
; 325  :     }
; 326  : 
; 327  :     if (u_count & 0x2)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN15@Multiply_W

; 328  :     {
; 329  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 330  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 331  :         up += 2;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 16
	mov	QWORD PTR up$[rbp], rax

; 332  :         wp += 2;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 16
	mov	QWORD PTR wp$[rbp], rax

; 333  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 334  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@Multiply_W

; 335  :             AddToMULTI32Counter(2);

	mov	ecx, 2
	call	AddToMULTI32Counter
	jmp	SHORT $LN17@Multiply_W
$LN16@Multiply_W:

; 336  :         else
; 337  :             AddToMULTI64Counter(2);

	mov	ecx, 2
	call	AddToMULTI64Counter
$LN17@Multiply_W:
$LN15@Multiply_W:

; 338  : #endif
; 339  :     }
; 340  : 
; 341  :     if (u_count & 0x1)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN18@Multiply_W

; 342  :     {
; 343  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 344  :         up += 1;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax

; 345  :         wp += 1;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax

; 346  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 347  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN19@Multiply_W

; 348  :             IncrementMULTI32Counter();

	call	IncrementMULTI32Counter
	jmp	SHORT $LN20@Multiply_W
$LN19@Multiply_W:

; 349  :         else
; 350  :             IncrementMULTI64Counter();

	call	IncrementMULTI64Counter
$LN20@Multiply_W:
$LN18@Multiply_W:

; 351  : #endif
; 352  :     }
; 353  : 
; 354  :     if (k != 0)

	cmp	QWORD PTR k$[rbp], 0
	je	SHORT $LN21@Multiply_W

; 355  :         *wp = k;

	mov	rax, QWORD PTR wp$[rbp]
	mov	rcx, QWORD PTR k$[rbp]
	mov	QWORD PTR [rax], rcx
$LN21@Multiply_W:

; 356  : 
; 357  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 358  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
Multiply_WORD_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_WORD_using_MUL_ADC
_TEXT	SEGMENT
k$ = 8
count$ = 40
up$ = 288
u_count$ = 296
v$ = 304
wp$ = 312
Multiply_WORD_using_MUL_ADC PROC			; COMDAT

; 67   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 68   :     __UNIT_TYPE k = 0;

	mov	QWORD PTR k$[rbp], 0

; 69   :     __UNIT_TYPE count = u_count >> 5;

	mov	rax, QWORD PTR u_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@Multiply_W:

; 70   : 
; 71   :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	$LN3@Multiply_W

; 72   :     {
; 73   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 74   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 75   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 76   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 77   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 78   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 79   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 80   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 81   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[8], v, &wp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 82   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[9], v, &wp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 83   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[10], v, &wp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 84   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[11], v, &wp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 85   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[12], v, &wp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 86   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[13], v, &wp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 87   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[14], v, &wp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 88   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[15], v, &wp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 89   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[16], v, &wp[16]);

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 90   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[17], v, &wp[17]);

	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 91   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[18], v, &wp[18]);

	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 92   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[19], v, &wp[19]);

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 93   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[20], v, &wp[20]);

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 94   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[21], v, &wp[21]);

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 95   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[22], v, &wp[22]);

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 96   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[23], v, &wp[23]);

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 97   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[24], v, &wp[24]);

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 98   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[25], v, &wp[25]);

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 99   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[26], v, &wp[26]);

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 100  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[27], v, &wp[27]);

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 101  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[28], v, &wp[28]);

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 102  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[29], v, &wp[29]);

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 103  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[30], v, &wp[30]);

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 104  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[31], v, &wp[31]);

	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 105  :         up += 32;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR up$[rbp], rax

; 106  :         wp += 32;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR wp$[rbp], rax

; 107  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 108  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 109  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN4@Multiply_W

; 110  :             AddToMULTI32Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToMULTI32Counter
	jmp	SHORT $LN5@Multiply_W
$LN4@Multiply_W:

; 111  :         else
; 112  :             AddToMULTI64Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToMULTI64Counter
$LN5@Multiply_W:

; 113  : #endif
; 114  :     }

	jmp	$LN2@Multiply_W
$LN3@Multiply_W:

; 115  : 
; 116  :     if (u_count & 0x10)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN6@Multiply_W

; 117  :     {
; 118  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 119  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 120  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 121  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 122  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 123  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 124  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 125  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 126  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[8], v, &wp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 127  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[9], v, &wp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 128  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[10], v, &wp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 129  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[11], v, &wp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 130  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[12], v, &wp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 131  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[13], v, &wp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 132  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[14], v, &wp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 133  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[15], v, &wp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 134  :         up += 16;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR up$[rbp], rax

; 135  :         wp += 16;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR wp$[rbp], rax

; 136  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 137  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN7@Multiply_W

; 138  :             AddToMULTI32Counter(16);

	mov	ecx, 16
	call	AddToMULTI32Counter
	jmp	SHORT $LN8@Multiply_W
$LN7@Multiply_W:

; 139  :         else
; 140  :             AddToMULTI64Counter(16);

	mov	ecx, 16
	call	AddToMULTI64Counter
$LN8@Multiply_W:
$LN6@Multiply_W:

; 141  : #endif
; 142  :     }
; 143  : 
; 144  :     if (u_count & 0x8)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN9@Multiply_W

; 145  :     {
; 146  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 147  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 148  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 149  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 150  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 151  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 152  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 153  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 154  :         up += 8;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR up$[rbp], rax

; 155  :         wp += 8;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR wp$[rbp], rax

; 156  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 157  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN10@Multiply_W

; 158  :             AddToMULTI32Counter(8);

	mov	ecx, 8
	call	AddToMULTI32Counter
	jmp	SHORT $LN11@Multiply_W
$LN10@Multiply_W:

; 159  :         else
; 160  :             AddToMULTI64Counter(8);

	mov	ecx, 8
	call	AddToMULTI64Counter
$LN11@Multiply_W:
$LN9@Multiply_W:

; 161  : #endif
; 162  :     }
; 163  : 
; 164  :     if (u_count & 0x4)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN12@Multiply_W

; 165  :     {
; 166  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 167  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 168  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 169  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 170  :         up += 4;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR up$[rbp], rax

; 171  :         wp += 4;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR wp$[rbp], rax

; 172  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 173  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN13@Multiply_W

; 174  :             AddToMULTI32Counter(4);

	mov	ecx, 4
	call	AddToMULTI32Counter
	jmp	SHORT $LN14@Multiply_W
$LN13@Multiply_W:

; 175  :         else
; 176  :             AddToMULTI64Counter(4);

	mov	ecx, 4
	call	AddToMULTI64Counter
$LN14@Multiply_W:
$LN12@Multiply_W:

; 177  : #endif
; 178  :     }
; 179  : 
; 180  :     if (u_count & 0x2)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN15@Multiply_W

; 181  :     {
; 182  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 183  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 184  :         up += 2;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 16
	mov	QWORD PTR up$[rbp], rax

; 185  :         wp += 2;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 16
	mov	QWORD PTR wp$[rbp], rax

; 186  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 187  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@Multiply_W

; 188  :             AddToMULTI32Counter(2);

	mov	ecx, 2
	call	AddToMULTI32Counter
	jmp	SHORT $LN17@Multiply_W
$LN16@Multiply_W:

; 189  :         else
; 190  :             AddToMULTI64Counter(2);

	mov	ecx, 2
	call	AddToMULTI64Counter
$LN17@Multiply_W:
$LN15@Multiply_W:

; 191  : #endif
; 192  :     }
; 193  : 
; 194  :     if (u_count & 0x1)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN18@Multiply_W

; 195  :     {
; 196  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR up$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r9, rax
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR k$[rbp]
	call	_MULTIPLY_DIGIT_UNIT
	mov	QWORD PTR k$[rbp], rax

; 197  :         up += 1;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax

; 198  :         wp += 1;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax

; 199  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 200  :         if (sizeof(k) == sizeof(_UINT32_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN19@Multiply_W

; 201  :             IncrementMULTI32Counter();

	call	IncrementMULTI32Counter
	jmp	SHORT $LN20@Multiply_W
$LN19@Multiply_W:

; 202  :         else
; 203  :             IncrementMULTI64Counter();

	call	IncrementMULTI64Counter
$LN20@Multiply_W:
$LN18@Multiply_W:

; 204  : #endif
; 205  :     }
; 206  : 
; 207  :     if (k != 0)

	cmp	QWORD PTR k$[rbp], 0
	je	SHORT $LN21@Multiply_W

; 208  :         *wp = k;

	mov	rax, QWORD PTR wp$[rbp]
	mov	rcx, QWORD PTR k$[rbp]
	mov	QWORD PTR [rax], rcx
$LN21@Multiply_W:

; 209  : 
; 210  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 211  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
Multiply_WORD_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _MULTIPLYX_DIGIT_UNIT
_TEXT	SEGMENT
t_hi$ = 8
t_lo$ = 40
k$ = 288
up$ = 296
v$ = 304
wp$ = 312
_MULTIPLYX_DIGIT_UNIT PROC				; COMDAT

; 55   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 56   :     __UNIT_TYPE t_hi;
; 57   :     __UNIT_TYPE t_lo;
; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	lea	r8, QWORD PTR t_hi$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	_MULTIPLYX_UNIT
	mov	QWORD PTR t_lo$[rbp], rax

; 59   :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	lea	r9, QWORD PTR t_lo$[rbp]
	mov	rax, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR t_lo$[rbp]
	xor	ecx, ecx
	call	_ADDX_UNIT
	lea	r9, QWORD PTR t_hi$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t_hi$[rbp]
	movzx	ecx, al
	call	_ADDX_UNIT

; 60   :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, &t_lo), t_hi, 0, &t_hi);

	lea	r9, QWORD PTR t_lo$[rbp]
	mov	r8, QWORD PTR k$[rbp]
	mov	rdx, QWORD PTR t_lo$[rbp]
	xor	ecx, ecx
	call	_ADDX_UNIT
	lea	r9, QWORD PTR t_hi$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t_hi$[rbp]
	movzx	ecx, al
	call	_ADDX_UNIT

; 61   :     *wp = t_lo;

	mov	rax, QWORD PTR wp$[rbp]
	mov	rcx, QWORD PTR t_lo$[rbp]
	mov	QWORD PTR [rax], rcx

; 62   :     k = t_hi;

	mov	rax, QWORD PTR t_hi$[rbp]
	mov	QWORD PTR k$[rbp], rax

; 63   :     return (k);

	mov	rax, QWORD PTR k$[rbp]

; 64   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_MULTIPLYX_DIGIT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLYX_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _MULTIPLY_DIGIT_UNIT
_TEXT	SEGMENT
t_hi$ = 8
t_lo$ = 40
k$ = 288
up$ = 296
v$ = 304
wp$ = 312
_MULTIPLY_DIGIT_UNIT PROC				; COMDAT

; 43   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 44   :     __UNIT_TYPE t_hi;
; 45   :     __UNIT_TYPE t_lo;
; 46   :     t_lo = _MULTIPLY_UNIT(*up, v, &t_hi);

	lea	r8, QWORD PTR t_hi$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	_MULTIPLY_UNIT
	mov	QWORD PTR t_lo$[rbp], rax

; 47   :     _ADD_UNIT(_ADD_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	lea	r9, QWORD PTR t_lo$[rbp]
	mov	rax, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR t_lo$[rbp]
	xor	ecx, ecx
	call	_ADD_UNIT
	lea	r9, QWORD PTR t_hi$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t_hi$[rbp]
	movzx	ecx, al
	call	_ADD_UNIT

; 48   :     _ADD_UNIT(_ADD_UNIT(0, t_lo, k, &t_lo), t_hi, 0, &t_hi);

	lea	r9, QWORD PTR t_lo$[rbp]
	mov	r8, QWORD PTR k$[rbp]
	mov	rdx, QWORD PTR t_lo$[rbp]
	xor	ecx, ecx
	call	_ADD_UNIT
	lea	r9, QWORD PTR t_hi$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t_hi$[rbp]
	movzx	ecx, al
	call	_ADD_UNIT

; 49   :     *wp = t_lo;

	mov	rax, QWORD PTR wp$[rbp]
	mov	rcx, QWORD PTR t_lo$[rbp]
	mov	QWORD PTR [rax], rcx

; 50   :     k = t_hi;

	mov	rax, QWORD PTR t_hi$[rbp]
	mov	QWORD PTR k$[rbp], rax

; 51   :     return (k);

	mov	rax, QWORD PTR k$[rbp]

; 52   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_MULTIPLY_DIGIT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLY_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT AddToMULTI64Counter
_TEXT	SEGMENT
value$ = 224
AddToMULTI64Counter PROC				; COMDAT

; 1029 : {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 1030 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lea	rax, OFFSET FLAT:statistics_info
	mov	ecx, DWORD PTR value$[rbp]
	lock add DWORD PTR [rax], ecx

; 1031 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT AddToMULTI32Counter
_TEXT	SEGMENT
value$ = 224
AddToMULTI32Counter PROC				; COMDAT

; 1023 : {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lea	rax, OFFSET FLAT:statistics_info+4
	mov	ecx, DWORD PTR value$[rbp]
	lock add DWORD PTR [rax], ecx

; 1025 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT IncrementMULTI64Counter
_TEXT	SEGMENT
IncrementMULTI64Counter PROC				; COMDAT

; 1006 : {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 1007 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lea	rax, OFFSET FLAT:statistics_info
	lock inc DWORD PTR [rax]

; 1008 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT IncrementMULTI32Counter
_TEXT	SEGMENT
IncrementMULTI32Counter PROC				; COMDAT

; 1000 : {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 1001 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lea	rax, OFFSET FLAT:statistics_info+4
	lock inc DWORD PTR [rax]

; 1002 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 879  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 880  :     if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 881  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 882  : #ifdef _M_IX86
; 883  :     _UINT32_T pos;
; 884  : #ifdef _MSC_VER
; 885  :     _BitScanReverse(&pos, x);
; 886  : #elif defined(__GNUC__)
; 887  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 888  : #else
; 889  : #error unknown compiler
; 890  : #endif
; 891  : #elif defined(_M_X64)
; 892  : #ifdef _MSC_VER
; 893  :     _UINT32_T pos;
; 894  :     _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 895  : #elif defined(__GNUC__)
; 896  :     _UINT64_T pos;
; 897  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 898  : #else
; 899  : #error unknown compiler
; 900  : #endif
; 901  : #else
; 902  : #error unknown platform
; 903  : #endif
; 904  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 905  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 846  : {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 847  :     if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 848  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 849  :     _UINT32_T pos;
; 850  : #ifdef _MSC_VER
; 851  :     _BitScanReverse(&pos, x);

	mov	eax, DWORD PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 852  : #elif defined(__GNUC__)
; 853  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 854  : #else
; 855  : #error unknown compiler
; 856  : #endif
; 857  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 31
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 858  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 224
v$ = 232
w_hi$ = 240
_MULTIPLYX_UNIT PROC					; COMDAT

; 585  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 586  : #ifdef _MSC_VER
; 587  : #ifdef _M_IX86
; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 589  : #elif defined(_M_X64)
; 590  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, QWORD PTR v$[rbp]
	mulx	rax, rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR w_hi$[rbp]
	mov	QWORD PTR [rdx], rax
	mov	rax, rcx

; 591  : #else
; 592  : #error unknown platform
; 593  : #endif
; 594  : #elif defined(__GNUC__)
; 595  : #ifdef _M_IX86
; 596  :     _UINT32_T w_lo;
; 597  :     __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 598  :     return (w_lo);
; 599  : #elif defined(_M_X64)
; 600  :     _UINT64_T w_lo;
; 601  :     __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 602  :     return (w_lo);
; 603  : #else
; 604  : #error unknown platform
; 605  : #endif
; 606  : #else
; 607  : #error unknown compiler
; 608  : #endif
; 609  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
tv69 = 192
u$ = 240
v$ = 248
w_hi$ = 256
_MULTIPLY_UNIT PROC					; COMDAT

; 547  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 548  : #ifdef _M_IX86
; 549  : #ifdef _MSC_VER
; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 551  : #elif defined(__GNUC__)
; 552  :     _UINT32_T w_lo;
; 553  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 554  :     return (w_lo);
; 555  : #else
; 556  : #error unknown compiler
; 557  : #endif
; 558  : #elif defined(_M_X64)
; 559  :     return (_umul128(u, v, w_hi));

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, rcx
	mov	rcx, QWORD PTR tv69[rbp]
	mul	rcx
	mov	rcx, QWORD PTR w_hi$[rbp]
	mov	QWORD PTR [rcx], rdx

; 560  : #else
; 561  : #error unknown platform
; 562  : #endif
; 563  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADDX_UNIT PROC						; COMDAT

; 491  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 492  : #ifdef _M_IX86
; 493  :     return (_addcarryx_u32(carry, u, v, w));
; 494  : #elif defined(_M_X64)
; 495  :     return (_addcarryx_u64(carry, u, v, w));

	mov	rax, QWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR carry$[rbp]
	add	cl, -1
	adcx	rax, QWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx], rax
	movzx	eax, cl

; 496  : #else
; 497  : #error unknown platform
; 498  : #endif
; 499  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADD_UNIT PROC						; COMDAT

; 463  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 464  : #ifdef _M_IX86
; 465  :     return (_addcarry_u32(carry, u, v, w));
; 466  : #elif defined(_M_X64)
; 467  :     return (_addcarry_u64(carry, u, v, w));

	mov	rax, QWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR carry$[rbp]
	add	cl, -1
	adc	rax, QWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx], rax
	movzx	eax, cl

; 468  : #else
; 469  : #error unknown platform
; 470  : #endif
; 471  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 432  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 433  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, QWORD PTR value$[rbp]
	shr	rax, 32					; 00000020H
	mov	rcx, QWORD PTR result_high$[rbp]
	mov	DWORD PTR [rcx], eax

; 434  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR value$[rbp]

; 435  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_X_X
_TEXT	SEGMENT
nx$ = 8
ny$ = 40
result$ = 68
nz$ = 104
x_bit_count$5 = 136
y_bit_count$6 = 168
z_bit_count$7 = 200
nz_light_check_code$8 = 232
x$ = 480
y$ = 488
o$ = 496
PMC_Multiply_X_X PROC					; COMDAT

; 724  : {

$LN24:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 488				; 000001e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+520]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 725  :     if (x == NULL)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@PMC_Multip

; 726  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 727  :     if (y == NULL)

	cmp	QWORD PTR y$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 728  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 729  :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN4@PMC_Multip

; 730  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 731  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR nx$[rbp], rax

; 732  :     NUMBER_HEADER* ny = (NUMBER_HEADER*)y;

	mov	rax, QWORD PTR y$[rbp]
	mov	QWORD PTR ny$[rbp], rax

; 733  :     PMC_STATUS_CODE result;
; 734  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nx$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Multip

; 735  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN5@PMC_Multip:

; 736  :     if ((result = CheckNumber(ny)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR ny$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Multip

; 737  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN6@PMC_Multip:

; 738  :     NUMBER_HEADER* nz;
; 739  :     if (nx->IS_ZERO)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_Multip

; 740  :     {
; 741  :         // x が 0 である場合
; 742  : 
; 743  :         // y の値にかかわらず 0 を返す。
; 744  :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 745  :     }

	jmp	$LN8@PMC_Multip
$LN7@PMC_Multip:

; 746  :     else if (nx->IS_ONE)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@PMC_Multip

; 747  :     {
; 748  :         // x が 1 である場合
; 749  :         if (ny->IS_ZERO)

	mov	rax, QWORD PTR ny$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN11@PMC_Multip

; 750  :         {
; 751  :             // y が 0 である場合
; 752  : 
; 753  :             //  0  を返す。
; 754  :             *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 755  :         }

	jmp	SHORT $LN12@PMC_Multip
$LN11@PMC_Multip:

; 756  :         else
; 757  :         {
; 758  :             // y が 0 ではない場合
; 759  : 
; 760  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 761  :             if ((result = DuplicateNumber(ny, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR ny$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_Multip

; 762  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN13@PMC_Multip:

; 763  :             *o = nz;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR nz$[rbp]
	mov	QWORD PTR [rax], rcx
$LN12@PMC_Multip:

; 764  :         }
; 765  :     }

	jmp	$LN10@PMC_Multip
$LN9@PMC_Multip:

; 766  :     else
; 767  :     {
; 768  :         // x が 0 と 1 のどちらでもない場合
; 769  : 
; 770  :         if (ny->IS_ZERO)

	mov	rax, QWORD PTR ny$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN14@PMC_Multip

; 771  :         {
; 772  :             // y が 0 である場合
; 773  : 
; 774  :             //  0  を返す。
; 775  :             nz = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nz$[rbp], rax

; 776  :         }

	jmp	$LN15@PMC_Multip
$LN14@PMC_Multip:

; 777  :         else if (ny->IS_ONE)

	mov	rax, QWORD PTR ny$[rbp]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN16@PMC_Multip

; 778  :         {
; 779  :             // y が 1 である場合
; 780  : 
; 781  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 782  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR nx$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_Multip

; 783  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN18@PMC_Multip:

; 784  :         }

	jmp	$LN17@PMC_Multip
$LN16@PMC_Multip:

; 785  :         else
; 786  :         {
; 787  :             // x と y がともに 0 、1 のどちらでもない場合
; 788  : 
; 789  :             // x と y の積を計算する
; 790  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nx$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR x_bit_count$5[rbp], rax

; 791  :             __UNIT_TYPE y_bit_count = ny->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR ny$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR y_bit_count$6[rbp], rax

; 792  :             __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	rax, QWORD PTR y_bit_count$6[rbp]
	mov	rcx, QWORD PTR x_bit_count$5[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z_bit_count$7[rbp], rax

; 793  :             __UNIT_TYPE nz_light_check_code;
; 794  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$8[rbp]
	mov	rdx, QWORD PTR z_bit_count$7[rbp]
	lea	rcx, QWORD PTR nz$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN19@PMC_Multip

; 795  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN19@PMC_Multip:

; 796  :             if ((result = (*fp_Multiply_X_X)(nx, ny, nz)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR nz$[rbp]
	mov	rdx, QWORD PTR ny$[rbp]
	mov	rcx, QWORD PTR nx$[rbp]
	call	QWORD PTR fp_Multiply_X_X
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN20@PMC_Multip

; 797  :             {
; 798  :                 DeallocateNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	DeallocateNumber

; 799  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN20@PMC_Multip:

; 800  :             }
; 801  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nz_light_check_code$8[rbp]
	mov	rax, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN21@PMC_Multip

; 802  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN21@PMC_Multip:

; 803  :             CommitNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	CommitNumber
$LN17@PMC_Multip:
$LN15@PMC_Multip:

; 804  :         }
; 805  :         *o = nz;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR nz$[rbp]
	mov	QWORD PTR [rax], rcx
$LN10@PMC_Multip:
$LN8@PMC_Multip:

; 806  :     }
; 807  : #ifdef _DEBUG
; 808  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN22@PMC_Multip

; 809  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN22@PMC_Multip:

; 810  : #endif
; 811  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 812  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_X_L
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_Multiply_X_L PROC					; COMDAT

; 701  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 702  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Multip

; 703  :     {
; 704  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 705  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 706  :     }
; 707  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 708  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN3@PMC_Multip:

; 709  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Multip

; 710  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN4@PMC_Multip:

; 711  :     PMC_STATUS_CODE result;
; 712  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR u$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Multip

; 713  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN5@PMC_Multip:

; 714  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	PMC_Multiply_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Multip

; 715  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 716  : #ifdef _DEBUG
; 717  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Multip

; 718  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN7@PMC_Multip:

; 719  : #endif
; 720  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 721  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_X_I
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_Multiply_X_I PROC					; COMDAT

; 537  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 538  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Multip

; 539  :     {
; 540  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 541  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 542  :     }
; 543  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 544  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN3@PMC_Multip:

; 545  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Multip

; 546  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN4@PMC_Multip:

; 547  :     PMC_STATUS_CODE result;
; 548  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR u$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Multip

; 549  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN5@PMC_Multip:

; 550  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	PMC_Multiply_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Multip

; 551  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 552  : #ifdef _DEBUG
; 553  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Multip

; 554  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN7@PMC_Multip:

; 555  : #endif
; 556  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 557  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_L_X
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_Multiply_L_X PROC					; COMDAT

; 678  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 679  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Multip

; 680  :     {
; 681  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 682  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 683  :     }
; 684  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 685  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN3@PMC_Multip:

; 686  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Multip

; 687  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN4@PMC_Multip:

; 688  :     PMC_STATUS_CODE result;
; 689  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Multip

; 690  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN5@PMC_Multip:

; 691  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_Multiply_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Multip

; 692  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 693  : #ifdef _DEBUG
; 694  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Multip

; 695  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN7@PMC_Multip:

; 696  : #endif
; 697  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 698  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_I_X
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_Multiply_I_X PROC					; COMDAT

; 514  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 515  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Multip

; 516  :     {
; 517  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 518  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 519  :     }
; 520  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 521  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN3@PMC_Multip:

; 522  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Multip

; 523  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN4@PMC_Multip:

; 524  :     PMC_STATUS_CODE result;
; 525  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Multip

; 526  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN5@PMC_Multip:

; 527  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	edx, DWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_Multiply_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Multip

; 528  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 529  : #ifdef _DEBUG
; 530  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Multip

; 531  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN7@PMC_Multip:

; 532  : #endif
; 533  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 534  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Initialize_Multiply
_TEXT	SEGMENT
feature$ = 224
Initialize_Multiply PROC				; COMDAT

; 815  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C53FCF4E_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 816  :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

	mov	rax, QWORD PTR feature$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@Initialize
	mov	rax, QWORD PTR feature$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 3
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@Initialize

; 817  :     {
; 818  :         fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;

	lea	rax, OFFSET FLAT:Multiply_X_1W_using_MULX_ADCX
	mov	QWORD PTR fp_Multiply_X_1W, rax

; 819  :         fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;

	lea	rax, OFFSET FLAT:Multiply_X_2W_using_MULX_ADCX
	mov	QWORD PTR fp_Multiply_X_2W, rax

; 820  :         fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;

	lea	rax, OFFSET FLAT:Multiply_X_X_using_MULX_ADCX
	mov	QWORD PTR fp_Multiply_X_X, rax

; 821  :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 822  :     else
; 823  :     {
; 824  :         fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;

	lea	rax, OFFSET FLAT:Multiply_X_1W_using_MUL_ADC
	mov	QWORD PTR fp_Multiply_X_1W, rax

; 825  :         fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;

	lea	rax, OFFSET FLAT:Multiply_X_2W_using_MUL_ADC
	mov	QWORD PTR fp_Multiply_X_2W, rax

; 826  :         fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;

	lea	rax, OFFSET FLAT:Multiply_X_X_using_MUL_ADC
	mov	QWORD PTR fp_Multiply_X_X, rax
$LN3@Initialize:

; 827  :     }
; 828  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 829  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Multiply ENDP
_TEXT	ENDS
END
