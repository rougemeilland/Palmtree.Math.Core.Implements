; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__C5BBD3C1_pmc_parse@c DB 01H
msvcjmc	ENDS
PUBLIC	Initialize_Parse
PUBLIC	PMC_TryParse
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_13DEFPDAGF@?$AA?0@			; `string'
PUBLIC	??_C@_13JOFGPIOO@?$AA?4@			; `string'
PUBLIC	??_C@_01EKENIIDA@3@				; `string'
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL@			; `string'
PUBLIC	??_C@_13IMODFHAA@?$AA?9@			; `string'
EXTRN	__imp_lstrcpyA:PROC
EXTRN	__imp_lstrcpyW:PROC
EXTRN	__imp_lstrlenW:PROC
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	number_zero:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
default_number_format_option DB 028H DUP (?)
fp_MultiplyAndAdd DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Parse DD imagerel $LN5
	DD	imagerel $LN5+243
	DD	imagerel $unwind$Initialize_Parse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_TryParse DD imagerel $LN12
	DD	imagerel $LN12+348
	DD	imagerel $unwind$PMC_TryParse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVIDE_CEILING_UNIT DD imagerel _DIVIDE_CEILING_UNIT
	DD	imagerel _DIVIDE_CEILING_UNIT+97
	DD	imagerel $unwind$_DIVIDE_CEILING_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVIDE_CEILING_SIZE DD imagerel _DIVIDE_CEILING_SIZE
	DD	imagerel _DIVIDE_CEILING_SIZE+97
	DD	imagerel $unwind$_DIVIDE_CEILING_SIZE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_UNIT DD imagerel _ADD_UNIT
	DD	imagerel _ADD_UNIT+118
	DD	imagerel $unwind$_ADD_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADDX_UNIT DD imagerel _ADDX_UNIT
	DD	imagerel _ADDX_UNIT+121
	DD	imagerel $unwind$_ADDX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_UNIT DD imagerel _MULTIPLY_UNIT
	DD	imagerel _MULTIPLY_UNIT+118
	DD	imagerel $unwind$_MULTIPLY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_UNIT DD imagerel _MULTIPLYX_UNIT
	DD	imagerel _MULTIPLYX_UNIT+103
	DD	imagerel $unwind$_MULTIPLYX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$StartsWith DD imagerel StartsWith
	DD	imagerel StartsWith+154
	DD	imagerel $unwind$StartsWith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$InitializeParserState DD imagerel InitializeParserState
	DD	imagerel InitializeParserState+561
	DD	imagerel $unwind$InitializeParserState
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FinalizeParserState DD imagerel FinalizeParserState
	DD	imagerel FinalizeParserState+113
	DD	imagerel $unwind$FinalizeParserState
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SkipSpace DD imagerel SkipSpace
	DD	imagerel SkipSpace+142
	DD	imagerel $unwind$SkipSpace
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseAsIntegerPartNumberSequence DD imagerel ParseAsIntegerPartNumberSequence
	DD	imagerel ParseAsIntegerPartNumberSequence+650
	DD	imagerel $unwind$ParseAsIntegerPartNumberSequence
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseAsFractionPartNumberSequence DD imagerel ParseAsFractionPartNumberSequence
	DD	imagerel ParseAsFractionPartNumberSequence+460
	DD	imagerel $unwind$ParseAsFractionPartNumberSequence
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseAsDecimalNumberString DD imagerel ParseAsDecimalNumberString
	DD	imagerel ParseAsDecimalNumberString+1133
	DD	imagerel $unwind$ParseAsDecimalNumberString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseAsHexNumberString DD imagerel ParseAsHexNumberString
	DD	imagerel ParseAsHexNumberString+265
	DD	imagerel $unwind$ParseAsHexNumberString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildLeading1WordFromDecimalString DD imagerel BuildLeading1WordFromDecimalString
	DD	imagerel BuildLeading1WordFromDecimalString+156
	DD	imagerel $unwind$BuildLeading1WordFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Build1WordFromDecimalString DD imagerel Build1WordFromDecimalString
	DD	imagerel Build1WordFromDecimalString+969
	DD	imagerel $unwind$Build1WordFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildBinaryFromDecimalString DD imagerel BuildBinaryFromDecimalString
	DD	imagerel BuildBinaryFromDecimalString+347
	DD	imagerel $unwind$BuildBinaryFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyAndAdd1Word_using_ADC_MUL DD imagerel MultiplyAndAdd1Word_using_ADC_MUL
	DD	imagerel MultiplyAndAdd1Word_using_ADC_MUL+188
	DD	imagerel $unwind$MultiplyAndAdd1Word_using_ADC_MUL
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyAndAdd1Word_using_ADCX_MULX DD imagerel MultiplyAndAdd1Word_using_ADCX_MULX
	DD	imagerel MultiplyAndAdd1Word_using_ADCX_MULX+188
	DD	imagerel $unwind$MultiplyAndAdd1Word_using_ADCX_MULX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyAndAdd_using_ADC_MUL DD imagerel MultiplyAndAdd_using_ADC_MUL
	DD	imagerel MultiplyAndAdd_using_ADC_MUL+4045
	DD	imagerel $unwind$MultiplyAndAdd_using_ADC_MUL
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyAndAdd_using_ADCX_MULX DD imagerel MultiplyAndAdd_using_ADCX_MULX
	DD	imagerel MultiplyAndAdd_using_ADCX_MULX+4045
	DD	imagerel $unwind$MultiplyAndAdd_using_ADCX_MULX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ConvertCardinalNumber DD imagerel ConvertCardinalNumber
	DD	imagerel ConvertCardinalNumber+404
	DD	imagerel $unwind$ConvertCardinalNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TryParseDN DD imagerel TryParseDN
	DD	imagerel TryParseDN+1565
	DD	imagerel $unwind$TryParseDN
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Parse1DigitFromHexChar DD imagerel Parse1DigitFromHexChar
	DD	imagerel Parse1DigitFromHexChar+247
	DD	imagerel $unwind$Parse1DigitFromHexChar
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildLeading1WordFromHexString DD imagerel BuildLeading1WordFromHexString
	DD	imagerel BuildLeading1WordFromHexString+222
	DD	imagerel $unwind$BuildLeading1WordFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Build1WordFromHexString DD imagerel Build1WordFromHexString
	DD	imagerel Build1WordFromHexString+1121
	DD	imagerel $unwind$Build1WordFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString
	DD	imagerel BuildBinaryFromHexString+332
	DD	imagerel $unwind$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TryParseX DD imagerel TryParseX
	DD	imagerel TryParseX+485
	DD	imagerel $unwind$TryParseX
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_13IMODFHAA@?$AA?9@
CONST	SEGMENT
??_C@_13IMODFHAA@?$AA?9@ DB '-', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL@ DB '+', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3@
CONST	SEGMENT
??_C@_01EKENIIDA@3@ DB '3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13JOFGPIOO@?$AA?4@
CONST	SEGMENT
??_C@_13JOFGPIOO@?$AA?4@ DB '.', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13DEFPDAGF@?$AA?0@
CONST	SEGMENT
??_C@_13DEFPDAGF@?$AA?0@ DB ',', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TryParseX DD 025053801H
	DD	011c2321H
	DD	07015003dH
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TryParseX$rtcName$0 DB 069H
	DB	06eH
	DB	074H
	DB	05fH
	DB	070H
	DB	061H
	DB	072H
	DB	074H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+6
TryParseX$rtcName$1 DB 069H
	DB	06eH
	DB	074H
	DB	05fH
	DB	070H
	DB	061H
	DB	072H
	DB	074H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+5
TryParseX$rtcName$2 DB 06fH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+13
TryParseX$rtcVarDesc DD 0108H
	DD	08H
	DQ	FLAT:TryParseX$rtcName$2
	DD	088H
	DD	08H
	DQ	FLAT:TryParseX$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:TryParseX$rtcName$0
	ORG $+144
TryParseX$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TryParseX$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildBinaryFromHexString DD 025052f01H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Build1WordFromHexString DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildLeading1WordFromHexString DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Parse1DigitFromHexChar DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TryParseDN DD 035053801H
	DD	011c3321H
	DD	070150087H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TryParseDN$rtcName$0 DB 069H
	DB	06eH
	DB	074H
	DB	05fH
	DB	070H
	DB	061H
	DB	072H
	DB	074H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+6
TryParseDN$rtcName$1 DB 069H
	DB	06eH
	DB	074H
	DB	05fH
	DB	070H
	DB	061H
	DB	072H
	DB	074H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+5
TryParseDN$rtcName$2 DB 066H
	DB	072H
	DB	061H
	DB	063H
	DB	05fH
	DB	070H
	DB	061H
	DB	072H
	DB	074H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
TryParseDN$rtcName$3 DB 066H
	DB	072H
	DB	061H
	DB	063H
	DB	05fH
	DB	070H
	DB	061H
	DB	072H
	DB	074H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
TryParseDN$rtcName$4 DB 073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+7
TryParseDN$rtcName$5 DB 062H
	DB	069H
	DB	06eH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+3
TryParseDN$rtcName$6 DB 062H
	DB	069H
	DB	06eH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+2
TryParseDN$rtcName$7 DB 062H
	DB	069H
	DB	06eH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+2
TryParseDN$rtcName$8 DB 06eH
	DB	06fH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
TryParseDN$rtcVarDesc DD 0298H
	DD	08H
	DQ	FLAT:TryParseDN$rtcName$8
	DD	0258H
	DD	08H
	DQ	FLAT:TryParseDN$rtcName$7
	DD	0218H
	DD	08H
	DQ	FLAT:TryParseDN$rtcName$6
	DD	01f8H
	DD	08H
	DQ	FLAT:TryParseDN$rtcName$5
	DD	0154H
	DD	04H
	DQ	FLAT:TryParseDN$rtcName$4
	DD	0118H
	DD	08H
	DQ	FLAT:TryParseDN$rtcName$3
	DD	0f8H
	DD	08H
	DQ	FLAT:TryParseDN$rtcName$2
	DD	0b8H
	DD	08H
	DQ	FLAT:TryParseDN$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:TryParseDN$rtcName$0
	ORG $+432
TryParseDN$rtcFrameData DD 09H
	DD	00H
	DQ	FLAT:TryParseDN$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ConvertCardinalNumber DD 025053401H
	DD	0118231dH
	DD	070110035H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
ConvertCardinalNumber$rtcName$0 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+2
ConvertCardinalNumber$rtcName$1 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+1
ConvertCardinalNumber$rtcVarDesc DD 068H
	DD	08H
	DQ	FLAT:ConvertCardinalNumber$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:ConvertCardinalNumber$rtcName$0
	ORG $+96
ConvertCardinalNumber$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:ConvertCardinalNumber$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyAndAdd_using_ADCX_MULX DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyAndAdd_using_ADC_MUL DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyAndAdd1Word_using_ADCX_MULX DD 025053401H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
MultiplyAndAdd1Word_using_ADCX_MULX$rtcName$0 DB 074H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+11
MultiplyAndAdd1Word_using_ADCX_MULX$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:MultiplyAndAdd1Word_using_ADCX_MULX$rtcName$0
	ORG $+48
MultiplyAndAdd1Word_using_ADCX_MULX$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:MultiplyAndAdd1Word_using_ADCX_MULX$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyAndAdd1Word_using_ADC_MUL DD 025053401H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
MultiplyAndAdd1Word_using_ADC_MUL$rtcName$0 DB 074H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+11
MultiplyAndAdd1Word_using_ADC_MUL$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:MultiplyAndAdd1Word_using_ADC_MUL$rtcName$0
	ORG $+48
MultiplyAndAdd1Word_using_ADC_MUL$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:MultiplyAndAdd1Word_using_ADC_MUL$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildBinaryFromDecimalString DD 025053401H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Build1WordFromDecimalString DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildLeading1WordFromDecimalString DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseAsHexNumberString DD 035054919H
	DD	011c3321H
	DD	07015002fH
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
ParseAsHexNumberString$rtcName$0 DB 073H
	DB	074H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+10
ParseAsHexNumberString$rtcVarDesc DD 040H
	DD	060H
	DQ	FLAT:ParseAsHexNumberString$rtcName$0
	ORG $+48
ParseAsHexNumberString$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:ParseAsHexNumberString$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseAsDecimalNumberString DD 035054919H
	DD	011c3321H
	DD	07015002fH
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
ParseAsDecimalNumberString$rtcName$0 DB 073H
	DB	074H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+10
ParseAsDecimalNumberString$rtcVarDesc DD 040H
	DD	060H
	DQ	FLAT:ParseAsDecimalNumberString$rtcName$0
	ORG $+48
ParseAsDecimalNumberString$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:ParseAsDecimalNumberString$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseAsFractionPartNumberSequence DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseAsIntegerPartNumberSequence DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SkipSpace DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FinalizeParserState DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$InitializeParserState DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$StartsWith DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADDX_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVIDE_CEILING_SIZE DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVIDE_CEILING_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_TryParse DD 025053801H
	DD	011c2321H
	DD	070150029H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_TryParse$rtcName$0 DB 06eH
	DB	06fH
	DB	00H
	ORG $+13
PMC_TryParse$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:PMC_TryParse$rtcName$0
	ORG $+48
PMC_TryParse$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_TryParse$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Parse DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT TryParseX
_TEXT	SEGMENT
result$ = 4
source_len$ = 40
int_part_buf_code$ = 72
int_part_buf_words$ = 104
int_part_buf$ = 136
result_parsing$ = 164
o_bit_count$ = 200
o_light_check_code$ = 232
source$ = 480
number_styles$ = 488
format_option$ = 496
o$ = 504
TryParseX PROC						; COMDAT

; 895  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 488				; 000001e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+520]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 896  :     PMC_STATUS_CODE result;
; 897  :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	rcx, QWORD PTR source$[rbp]
	call	QWORD PTR __imp_lstrlenW
	cdqe
	mov	QWORD PTR source_len$[rbp], rax

; 898  :     __UNIT_TYPE int_part_buf_code;
; 899  :     __UNIT_TYPE int_part_buf_words;
; 900  :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	mov	rax, QWORD PTR source_len$[rbp]
	lea	rax, QWORD PTR [rax+rax+2]
	shl	rax, 3
	lea	r8, QWORD PTR int_part_buf_code$[rbp]
	lea	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, rax
	call	AllocateBlock
	mov	QWORD PTR int_part_buf$[rbp], rax

; 901  :     if (int_part_buf == NULL)

	cmp	QWORD PTR int_part_buf$[rbp], 0
	jne	SHORT $LN2@TryParseX

; 902  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@TryParseX
$LN2@TryParseX:

; 903  :     int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf);

	mov	r9, QWORD PTR int_part_buf$[rbp]
	mov	r8, QWORD PTR format_option$[rbp]
	mov	edx, DWORD PTR number_styles$[rbp]
	mov	rcx, QWORD PTR source$[rbp]
	call	ParseAsHexNumberString
	mov	DWORD PTR result_parsing$[rbp], eax

; 904  :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR int_part_buf_code$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@TryParseX

; 905  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@TryParseX
$LN3@TryParseX:

; 906  :     if (!result_parsing || int_part_buf[0] == L'\0')

	cmp	DWORD PTR result_parsing$[rbp], 0
	je	SHORT $LN5@TryParseX
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN4@TryParseX
$LN5@TryParseX:

; 907  :     {
; 908  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 909  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseX
$LN4@TryParseX:

; 910  :     }
; 911  :     __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	QWORD PTR __imp_lstrlenW
	shl	eax, 2
	cdqe
	mov	QWORD PTR o_bit_count$[rbp], rax

; 912  :     __UNIT_TYPE o_light_check_code;
; 913  :     if ((result = AllocateNumber(o, o_bit_count, &o_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR o_light_check_code$[rbp]
	mov	rdx, QWORD PTR o_bit_count$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@TryParseX

; 914  :     {
; 915  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 916  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@TryParseX
$LN6@TryParseX:

; 917  :     }
; 918  :     BuildBinaryFromHexString(int_part_buf, (*o)->BLOCK);

	mov	rax, QWORD PTR o$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR [rax+48]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	BuildBinaryFromHexString

; 919  :     if ((result = CheckBlockLight((*o)->BLOCK, o_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR o_light_check_code$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@TryParseX

; 920  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@TryParseX
$LN7@TryParseX:

; 921  :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 922  :     CommitNumber(*o);

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber

; 923  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseX:

; 924  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TryParseX$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
TryParseX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT BuildBinaryFromHexString
_TEXT	SEGMENT
word_digit_count$ = 4
source_count$ = 40
in_ptr$ = 72
out_ptr$ = 104
r$ = 132
tv74 = 344
source$ = 384
out_buf$ = 392
BuildBinaryFromHexString PROC				; COMDAT

; 874  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 875  :     int word_digit_count = __UNIT_TYPE_BIT_COUNT / 4;

	mov	DWORD PTR word_digit_count$[rbp], 16

; 876  :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	rcx, QWORD PTR source$[rbp]
	call	QWORD PTR __imp_lstrlenW
	cdqe
	mov	QWORD PTR source_count$[rbp], rax

; 877  :     wchar_t* in_ptr = source;

	mov	rax, QWORD PTR source$[rbp]
	mov	QWORD PTR in_ptr$[rbp], rax

; 878  :     __UNIT_TYPE* out_ptr = out_buf + _DIVIDE_CEILING_UNIT(source_count, word_digit_count) - 1;

	movsxd	rax, DWORD PTR word_digit_count$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR source_count$[rbp]
	call	_DIVIDE_CEILING_UNIT
	mov	rcx, QWORD PTR out_buf$[rbp]
	lea	rax, QWORD PTR [rcx+rax*8-8]
	mov	QWORD PTR out_ptr$[rbp], rax

; 879  :     int r = source_count % word_digit_count;

	movsxd	rax, DWORD PTR word_digit_count$[rbp]
	mov	QWORD PTR tv74[rbp], rax
	xor	edx, edx
	mov	rax, QWORD PTR source_count$[rbp]
	mov	rcx, QWORD PTR tv74[rbp]
	div	rcx
	mov	rax, rdx
	mov	DWORD PTR r$[rbp], eax

; 880  :     if (r > 0)

	cmp	DWORD PTR r$[rbp], 0
	jle	SHORT $LN4@BuildBinar

; 881  :     {
; 882  :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	movsxd	rax, DWORD PTR r$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR in_ptr$[rbp]
	call	BuildLeading1WordFromHexString
	mov	rcx, QWORD PTR out_ptr$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR out_ptr$[rbp]
	sub	rax, 8
	mov	QWORD PTR out_ptr$[rbp], rax

; 883  :         in_ptr += r;

	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR in_ptr$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR in_ptr$[rbp], rax

; 884  :         source_count -= r;

	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR source_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR source_count$[rbp], rax
$LN4@BuildBinar:
$LN2@BuildBinar:

; 885  :     }
; 886  :     while (source_count > 0)

	cmp	QWORD PTR source_count$[rbp], 0
	jbe	SHORT $LN3@BuildBinar

; 887  :     {
; 888  :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	mov	rcx, QWORD PTR in_ptr$[rbp]
	call	Build1WordFromHexString
	mov	rcx, QWORD PTR out_ptr$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR out_ptr$[rbp]
	sub	rax, 8
	mov	QWORD PTR out_ptr$[rbp], rax

; 889  :         in_ptr += word_digit_count;

	movsxd	rax, DWORD PTR word_digit_count$[rbp]
	mov	rcx, QWORD PTR in_ptr$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR in_ptr$[rbp], rax

; 890  :         source_count -= word_digit_count;

	movsxd	rax, DWORD PTR word_digit_count$[rbp]
	mov	rcx, QWORD PTR source_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR source_count$[rbp], rax

; 891  :     }

	jmp	SHORT $LN2@BuildBinar
$LN3@BuildBinar:

; 892  : }

	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
BuildBinaryFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT Build1WordFromHexString
_TEXT	SEGMENT
x$ = 8
tv206 = 212
tv198 = 212
tv191 = 212
tv183 = 212
tv176 = 212
tv169 = 212
tv162 = 212
tv154 = 212
tv147 = 212
tv140 = 212
tv133 = 212
tv94 = 212
tv87 = 212
tv80 = 212
tv73 = 212
tv66 = 212
in_ptr$ = 256
Build1WordFromHexString PROC				; COMDAT

; 841  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 842  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv66[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv66[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	mov	QWORD PTR x$[rbp], rax

; 843  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

	xor	eax, eax
	cmp	eax, 1
	je	$LN2@Build1Word

; 844  :     {
; 845  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv73[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv73[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 846  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv80[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv80[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 847  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv87[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv87[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 848  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv94[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv94[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 849  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv133[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv133[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 850  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv140[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv140[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 851  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv147[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv147[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 852  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv154[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv154[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax
$LN2@Build1Word:

; 853  :     }
; 854  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

	xor	eax, eax
	cmp	eax, 1
	je	$LN3@Build1Word

; 855  :     {
; 856  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv162[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv162[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 857  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv169[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv169[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 858  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv176[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv176[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 859  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv183[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv183[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax
$LN3@Build1Word:

; 860  :     }
; 861  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

	xor	eax, eax
	cmp	eax, 1
	je	$LN4@Build1Word

; 862  :     {
; 863  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv191[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv191[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 864  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv198[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv198[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax
$LN4@Build1Word:

; 865  :     }
; 866  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@Build1Word

; 867  :     {
; 868  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv206[rbp], ax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
	movzx	ecx, WORD PTR tv206[rbp]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	imul	rcx, QWORD PTR x$[rbp], 16
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax
$LN5@Build1Word:

; 869  :     }
; 870  :     return (x);

	mov	rax, QWORD PTR x$[rbp]

; 871  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
Build1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT BuildLeading1WordFromHexString
_TEXT	SEGMENT
x$ = 8
tv70 = 216
in_ptr$ = 256
count$ = 264
BuildLeading1WordFromHexString PROC			; COMDAT

; 827  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 828  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr);

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rax]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	mov	QWORD PTR x$[rbp], rax

; 829  :     ++in_ptr;

	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 830  :     --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax
$LN2@BuildLeadi:

; 831  :     while (count > 0)

	cmp	QWORD PTR count$[rbp], 0
	jbe	SHORT $LN3@BuildLeadi

; 832  :     {
; 833  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	imul	rax, QWORD PTR x$[rbp], 16
	mov	QWORD PTR tv70[rbp], rax
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	call	Parse1DigitFromHexChar
	mov	eax, eax
	mov	rcx, QWORD PTR tv70[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR x$[rbp], rax

; 834  :         ++in_ptr;

	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 835  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 836  :     }

	jmp	SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 837  :     return (x);

	mov	rax, QWORD PTR x$[rbp]

; 838  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
BuildLeading1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT Parse1DigitFromHexChar
_TEXT	SEGMENT
tv65 = 192
c$ = 240
Parse1DigitFromHexChar PROC				; COMDAT

; 793  : {

	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 794  :     switch (c)

	movzx	eax, WORD PTR c$[rbp]
	mov	DWORD PTR tv65[rbp], eax
	mov	eax, DWORD PTR tv65[rbp]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR tv65[rbp], eax
	cmp	DWORD PTR tv65[rbp], 54			; 00000036H
	ja	SHORT $LN7@Parse1Digi
	movsxd	rax, DWORD PTR tv65[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN9@Parse1Digi[rcx+rax]
	mov	eax, DWORD PTR $LN10@Parse1Digi[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@Parse1Digi:

; 795  :     {
; 796  :     case L'0':
; 797  :     case L'1':
; 798  :     case L'2':
; 799  :     case L'3':
; 800  :     case L'4':
; 801  :     case L'5':
; 802  :     case L'6':
; 803  :     case L'7':
; 804  :     case L'8':
; 805  :     case L'9':
; 806  :         return (c - L'0');

	movzx	eax, WORD PTR c$[rbp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN1@Parse1Digi
$LN5@Parse1Digi:

; 807  :     case L'a':
; 808  :     case L'b':
; 809  :     case L'c':
; 810  :     case L'd':
; 811  :     case L'e':
; 812  :     case L'f':
; 813  :         return (c - L'a' + 10);

	movzx	eax, WORD PTR c$[rbp]
	sub	eax, 87					; 00000057H
	jmp	SHORT $LN1@Parse1Digi
$LN6@Parse1Digi:

; 814  :     case L'A':
; 815  :     case L'B':
; 816  :     case L'C':
; 817  :     case L'D':
; 818  :     case L'E':
; 819  :     case L'F':
; 820  :         return (c - L'A' + 10);

	movzx	eax, WORD PTR c$[rbp]
	sub	eax, 55					; 00000037H
	jmp	SHORT $LN1@Parse1Digi
$LN7@Parse1Digi:

; 821  :     default:
; 822  :         return ((_UINT32_T)-1);

	mov	eax, -1					; ffffffffH
$LN1@Parse1Digi:

; 823  :     }
; 824  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
$LN10@Parse1Digi:
	DD	$LN4@Parse1Digi
	DD	$LN6@Parse1Digi
	DD	$LN5@Parse1Digi
	DD	$LN7@Parse1Digi
$LN9@Parse1Digi:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
Parse1DigitFromHexChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT TryParseDN
_TEXT	SEGMENT
result$ = 4
word_digit_count$ = 36
source_len$ = 72
int_part_buf_code$ = 104
int_part_buf_words$ = 136
int_part_buf$ = 168
frac_part_buf_code$ = 200
frac_part_buf_words$ = 232
frac_part_buf$ = 264
sign$ = 292
result_parsing$ = 324
s_ptr$12 = 360
d_ptr$13 = 392
frac_ptr$ = 424
bin_buf_code$ = 456
bin_buf_words$ = 488
bin_buf$ = 520
bin_buf_count$ = 552
o_bit_count$ = 584
no_light_check_code$ = 616
tv202 = 1016
source$ = 1056
number_styles$ = 1064
format_option$ = 1072
o$ = 1080
TryParseDN PROC						; COMDAT

; 649  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1080				; 00000438H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 270				; 0000010eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1112]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 650  :     PMC_STATUS_CODE result;
; 651  : #ifdef _M_IX86
; 652  :     int word_digit_count = 9;
; 653  : #elif defined(_M_IX64)
; 654  :     int word_digit_count = 19;

	mov	DWORD PTR word_digit_count$[rbp], 19

; 655  : #else
; 656  : #error unknown platform
; 657  : #endif
; 658  :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	rcx, QWORD PTR source$[rbp]
	call	QWORD PTR __imp_lstrlenW
	cdqe
	mov	QWORD PTR source_len$[rbp], rax

; 659  : 
; 660  :     __UNIT_TYPE int_part_buf_code;
; 661  :     __UNIT_TYPE int_part_buf_words;
; 662  :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	mov	rax, QWORD PTR source_len$[rbp]
	lea	rax, QWORD PTR [rax+rax+2]
	shl	rax, 3
	lea	r8, QWORD PTR int_part_buf_code$[rbp]
	lea	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, rax
	call	AllocateBlock
	mov	QWORD PTR int_part_buf$[rbp], rax

; 663  :     if (int_part_buf == NULL)

	cmp	QWORD PTR int_part_buf$[rbp], 0
	jne	SHORT $LN9@TryParseDN

; 664  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@TryParseDN
$LN9@TryParseDN:

; 665  : 
; 666  :     __UNIT_TYPE frac_part_buf_code;
; 667  :     __UNIT_TYPE frac_part_buf_words;
; 668  :     wchar_t* frac_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &frac_part_buf_words, &frac_part_buf_code);

	mov	rax, QWORD PTR source_len$[rbp]
	lea	rax, QWORD PTR [rax+rax+2]
	shl	rax, 3
	lea	r8, QWORD PTR frac_part_buf_code$[rbp]
	lea	rdx, QWORD PTR frac_part_buf_words$[rbp]
	mov	rcx, rax
	call	AllocateBlock
	mov	QWORD PTR frac_part_buf$[rbp], rax

; 669  :     if (frac_part_buf == NULL)

	cmp	QWORD PTR frac_part_buf$[rbp], 0
	jne	SHORT $LN10@TryParseDN

; 670  :     {
; 671  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 672  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@TryParseDN
$LN10@TryParseDN:

; 673  :     }
; 674  :     int sign;
; 675  :     int result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, &sign, int_part_buf, frac_part_buf);

	mov	rax, QWORD PTR frac_part_buf$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR int_part_buf$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR sign$[rbp]
	mov	r8, QWORD PTR format_option$[rbp]
	mov	edx, DWORD PTR number_styles$[rbp]
	mov	rcx, QWORD PTR source$[rbp]
	call	ParseAsDecimalNumberString
	mov	DWORD PTR result_parsing$[rbp], eax

; 676  :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR int_part_buf_code$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@TryParseDN

; 677  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@TryParseDN
$LN11@TryParseDN:

; 678  :     if ((result = CheckBlockLight((__UNIT_TYPE*)frac_part_buf, frac_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR frac_part_buf_code$[rbp]
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@TryParseDN

; 679  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@TryParseDN
$LN12@TryParseDN:

; 680  :     if (!result_parsing)

	cmp	DWORD PTR result_parsing$[rbp], 0
	jne	SHORT $LN13@TryParseDN

; 681  :     {
; 682  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp]
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	call	DeallocateBlock

; 683  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 684  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN13@TryParseDN:

; 685  :     }
; 686  :     // 整数部と小数部がともに空ならばエラーとする
; 687  :     if (int_part_buf[0] == L'\0' && frac_part_buf[0] == L'\0')

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN14@TryParseDN
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN14@TryParseDN

; 688  :     {
; 689  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp]
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	call	DeallocateBlock

; 690  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 691  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN14@TryParseDN:

; 692  :     }
; 693  : 
; 694  :     if (int_part_buf[0] == L'0')

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	$LN15@TryParseDN

; 695  :     {
; 696  :         // 整数部の先行する 0 を削除する
; 697  :         wchar_t* s_ptr = int_part_buf;

	mov	rax, QWORD PTR int_part_buf$[rbp]
	mov	QWORD PTR s_ptr$12[rbp], rax

; 698  :         wchar_t* d_ptr = int_part_buf;

	mov	rax, QWORD PTR int_part_buf$[rbp]
	mov	QWORD PTR d_ptr$13[rbp], rax
$LN2@TryParseDN:

; 699  :         while (*s_ptr == L'0')

	mov	rax, QWORD PTR s_ptr$12[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN3@TryParseDN

; 700  :             ++s_ptr;

	mov	rax, QWORD PTR s_ptr$12[rbp]
	add	rax, 2
	mov	QWORD PTR s_ptr$12[rbp], rax
	jmp	SHORT $LN2@TryParseDN
$LN3@TryParseDN:
$LN4@TryParseDN:

; 701  :         for (;;)
; 702  :         {
; 703  :             *d_ptr = *s_ptr;

	mov	rax, QWORD PTR d_ptr$13[rbp]
	mov	rcx, QWORD PTR s_ptr$12[rbp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx

; 704  :             if (*s_ptr == L'\0')

	mov	rax, QWORD PTR s_ptr$12[rbp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	jne	SHORT $LN16@TryParseDN

; 705  :                 break;

	jmp	SHORT $LN5@TryParseDN
$LN16@TryParseDN:

; 706  :             ++s_ptr;

	mov	rax, QWORD PTR s_ptr$12[rbp]
	add	rax, 2
	mov	QWORD PTR s_ptr$12[rbp], rax

; 707  :             ++d_ptr;

	mov	rax, QWORD PTR d_ptr$13[rbp]
	add	rax, 2
	mov	QWORD PTR d_ptr$13[rbp], rax

; 708  :         }

	jmp	SHORT $LN4@TryParseDN
$LN5@TryParseDN:
$LN15@TryParseDN:

; 709  :     }
; 710  : 
; 711  :     // 小数部の末尾の 0 を削除する
; 712  :     wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	call	QWORD PTR __imp_lstrlenW
	cdqe
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR frac_ptr$[rbp], rax
$LN7@TryParseDN:

; 713  :     while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

	mov	rax, QWORD PTR frac_part_buf$[rbp]
	cmp	QWORD PTR frac_ptr$[rbp], rax
	jbe	SHORT $LN8@TryParseDN
	mov	eax, 2
	imul	rax, rax, -1
	mov	rcx, QWORD PTR frac_ptr$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN8@TryParseDN

; 714  :         --frac_ptr;

	mov	rax, QWORD PTR frac_ptr$[rbp]
	sub	rax, 2
	mov	QWORD PTR frac_ptr$[rbp], rax
	jmp	SHORT $LN7@TryParseDN
$LN8@TryParseDN:

; 715  :     *frac_ptr = L'\0';

	xor	eax, eax
	mov	rcx, QWORD PTR frac_ptr$[rbp]
	mov	WORD PTR [rcx], ax

; 716  : 
; 717  :     // 小数部が 0 ではない場合、エラーとする
; 718  :     if (frac_part_buf[0] != L'\0')

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN17@TryParseDN

; 719  :     {
; 720  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp]
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	call	DeallocateBlock

; 721  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 722  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN17@TryParseDN:

; 723  :     }
; 724  : 
; 725  :     if (sign < 0)

	cmp	DWORD PTR sign$[rbp], 0
	jge	SHORT $LN18@TryParseDN

; 726  :     {
; 727  :         if (int_part_buf[0] == L'\0')

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN19@TryParseDN

; 728  :         {
; 729  :             // - 符号が与えられていてかつ整数部が 0 であるなら符号を修正する
; 730  :             sign = 0;

	mov	DWORD PTR sign$[rbp], 0

; 731  :         }

	jmp	SHORT $LN20@TryParseDN
$LN19@TryParseDN:

; 732  :         else
; 733  :         {
; 734  :             // - 符号が与えられていてかつ整数部が 0 ではないなら、エラーとする
; 735  :             DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp]
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	call	DeallocateBlock

; 736  :             DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 737  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@TryParseDN
$LN20@TryParseDN:
$LN18@TryParseDN:

; 738  :         }
; 739  :     }
; 740  : 
; 741  :     // 整数部が空である場合、1桁の 0 を設定する
; 742  :     if (int_part_buf[0] == L'\0')

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN21@TryParseDN

; 743  :     {
; 744  :         int_part_buf[0] = L'0';

	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 48					; 00000030H
	mov	rdx, QWORD PTR int_part_buf$[rbp]
	mov	WORD PTR [rdx+rax], cx

; 745  :         int_part_buf[1] = L'\0';

	mov	eax, 2
	imul	rax, rax, 1
	xor	ecx, ecx
	mov	rdx, QWORD PTR int_part_buf$[rbp]
	mov	WORD PTR [rdx+rax], cx
$LN21@TryParseDN:

; 746  :     }
; 747  : 
; 748  :     // 小数部は捨てる
; 749  :     DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp]
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	call	DeallocateBlock

; 750  : 
; 751  :     __UNIT_TYPE bin_buf_code;
; 752  :     __UNIT_TYPE bin_buf_words;
; 753  :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	movsxd	rax, DWORD PTR word_digit_count$[rbp]
	mov	QWORD PTR tv202[rbp], rax
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	QWORD PTR __imp_lstrlenW
	cdqe
	mov	rcx, QWORD PTR tv202[rbp]
	mov	rdx, rcx
	mov	rcx, rax
	call	_DIVIDE_CEILING_SIZE
	imul	rax, rax, 64				; 00000040H
	lea	r8, QWORD PTR bin_buf_code$[rbp]
	lea	rdx, QWORD PTR bin_buf_words$[rbp]
	mov	rcx, rax
	call	AllocateBlock
	mov	QWORD PTR bin_buf$[rbp], rax

; 754  :     if (bin_buf == NULL)

	cmp	QWORD PTR bin_buf$[rbp], 0
	jne	SHORT $LN22@TryParseDN

; 755  :     {
; 756  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 757  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@TryParseDN
$LN22@TryParseDN:

; 758  :     }
; 759  :     __UNIT_TYPE bin_buf_count;
; 760  :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);

	lea	r8, QWORD PTR bin_buf_count$[rbp]
	mov	rdx, QWORD PTR bin_buf$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	BuildBinaryFromDecimalString

; 761  :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR bin_buf_code$[rbp]
	mov	rcx, QWORD PTR bin_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN23@TryParseDN

; 762  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@TryParseDN
$LN23@TryParseDN:

; 763  :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	call	DeallocateBlock

; 764  : 
; 765  :     __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

	imul	rax, QWORD PTR bin_buf_count$[rbp], 64	; 00000040H
	mov	QWORD PTR o_bit_count$[rbp], rax

; 766  :     __UNIT_TYPE no_light_check_code;
; 767  :     if ((result = AllocateNumber(o, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$[rbp]
	mov	rdx, QWORD PTR o_bit_count$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN24@TryParseDN

; 768  :     {
; 769  :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp]
	mov	rcx, QWORD PTR bin_buf$[rbp]
	call	DeallocateBlock

; 770  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@TryParseDN
$LN24@TryParseDN:

; 771  :     }
; 772  : 
; 773  :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o)->BLOCK)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR [rax+48]
	mov	rdx, QWORD PTR bin_buf_count$[rbp]
	mov	rcx, QWORD PTR bin_buf$[rbp]
	call	ConvertCardinalNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN25@TryParseDN

; 774  :     {
; 775  :         DeallocateNumber(*o);

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 776  :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp]
	mov	rcx, QWORD PTR bin_buf$[rbp]
	call	DeallocateBlock

; 777  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@TryParseDN
$LN25@TryParseDN:

; 778  :     }
; 779  :     if ((result = CheckBlockLight((*o)->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR no_light_check_code$[rbp]
	mov	rcx, QWORD PTR [rax+48]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN26@TryParseDN

; 780  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@TryParseDN
$LN26@TryParseDN:

; 781  :     DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp]
	mov	rcx, QWORD PTR bin_buf$[rbp]
	call	DeallocateBlock

; 782  :     CommitNumber(*o);

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber

; 783  :     if ((*o)->IS_ZERO)

	mov	rax, QWORD PTR o$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+32]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN27@TryParseDN

; 784  :     {
; 785  :         DeallocateNumber(*o);

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 786  :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
$LN27@TryParseDN:

; 787  :     }
; 788  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseDN:

; 789  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:TryParseDN$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+1032]
	pop	rdi
	pop	rbp
	ret	0
TryParseDN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT ConvertCardinalNumber
_TEXT	SEGMENT
result$ = 4
work_buf_code$ = 40
work_buf_words$ = 72
work_buf$ = 104
work_buf_count$ = 136
w_tail$5 = 168
in_buf$ = 416
in_buf_count$ = 424
out_buf$ = 432
ConvertCardinalNumber PROC				; COMDAT

; 621  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 622  :     PMC_STATUS_CODE result;
; 623  :     __UNIT_TYPE work_buf_code;
; 624  :     __UNIT_TYPE work_buf_words;
; 625  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	mov	rax, QWORD PTR in_buf_count$[rbp]
	inc	rax
	imul	rax, rax, 64				; 00000040H
	lea	r8, QWORD PTR work_buf_code$[rbp]
	lea	rdx, QWORD PTR work_buf_words$[rbp]
	mov	rcx, rax
	call	AllocateBlock
	mov	QWORD PTR work_buf$[rbp], rax

; 626  :     if (work_buf == NULL)

	cmp	QWORD PTR work_buf$[rbp], 0
	jne	SHORT $LN4@ConvertCar

; 627  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@ConvertCar
$LN4@ConvertCar:

; 628  : 
; 629  :     __UNIT_TYPE work_buf_count = 1;

	mov	QWORD PTR work_buf_count$[rbp], 1

; 630  :     work_buf[0] = in_buf[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR work_buf$[rbp]
	mov	r8, QWORD PTR in_buf$[rbp]
	mov	rax, QWORD PTR [r8+rax]
	mov	QWORD PTR [rdx+rcx], rax

; 631  :     ++in_buf;

	mov	rax, QWORD PTR in_buf$[rbp]
	add	rax, 8
	mov	QWORD PTR in_buf$[rbp], rax

; 632  :     --in_buf_count;

	mov	rax, QWORD PTR in_buf_count$[rbp]
	dec	rax
	mov	QWORD PTR in_buf_count$[rbp], rax
$LN2@ConvertCar:

; 633  : 
; 634  :     while (in_buf_count > 0)

	cmp	QWORD PTR in_buf_count$[rbp], 0
	jbe	SHORT $LN3@ConvertCar

; 635  :     {
; 636  :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	mov	rax, QWORD PTR in_buf$[rbp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR work_buf_count$[rbp]
	mov	rcx, QWORD PTR work_buf$[rbp]
	call	QWORD PTR fp_MultiplyAndAdd
	mov	QWORD PTR w_tail$5[rbp], rax

; 637  :         work_buf_count = w_tail - work_buf;

	mov	rax, QWORD PTR work_buf$[rbp]
	mov	rcx, QWORD PTR w_tail$5[rbp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	QWORD PTR work_buf_count$[rbp], rax

; 638  :         ++in_buf;

	mov	rax, QWORD PTR in_buf$[rbp]
	add	rax, 8
	mov	QWORD PTR in_buf$[rbp], rax

; 639  :         --in_buf_count;

	mov	rax, QWORD PTR in_buf_count$[rbp]
	dec	rax
	mov	QWORD PTR in_buf_count$[rbp], rax

; 640  :     }

	jmp	SHORT $LN2@ConvertCar
$LN3@ConvertCar:

; 641  :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_buf_code$[rbp]
	mov	rcx, QWORD PTR work_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@ConvertCar

; 642  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@ConvertCar
$LN5@ConvertCar:

; 643  :     _COPY_MEMORY_UNIT(out_buf, work_buf, work_buf_count);

	mov	r8, QWORD PTR work_buf_count$[rbp]
	mov	rdx, QWORD PTR work_buf$[rbp]
	mov	rcx, QWORD PTR out_buf$[rbp]
	call	_COPY_MEMORY_UNIT

; 644  :     DeallocateBlock(work_buf, work_buf_words);

	mov	rdx, QWORD PTR work_buf_words$[rbp]
	mov	rcx, QWORD PTR work_buf$[rbp]
	call	DeallocateBlock

; 645  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ConvertCar:

; 646  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:ConvertCardinalNumber$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT MultiplyAndAdd_using_ADCX_MULX
_TEXT	SEGMENT
k$ = 8
count$ = 40
u_buf$ = 288
u_count$ = 296
x$ = 304
MultiplyAndAdd_using_ADCX_MULX PROC			; COMDAT

; 514  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 515  :     __UNIT_TYPE k = x;

	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR k$[rbp], rax

; 516  :     __UNIT_TYPE count = u_count >> 5;

	mov	rax, QWORD PTR u_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@MultiplyAn:

; 517  :     while (count > 0)

	cmp	QWORD PTR count$[rbp], 0
	jbe	$LN3@MultiplyAn

; 518  :     {
; 519  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 520  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 521  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 522  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 523  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 524  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 525  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 526  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 527  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 528  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 529  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 530  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 531  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 532  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 533  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 534  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 535  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 536  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 537  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 538  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 539  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 540  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 541  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 542  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 543  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 544  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 545  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 546  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 547  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 548  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 549  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 550  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 551  :         u_buf += 32;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR u_buf$[rbp], rax

; 552  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 553  :     }

	jmp	$LN2@MultiplyAn
$LN3@MultiplyAn:

; 554  : 
; 555  :     if (u_count & 0x10)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN4@MultiplyAn

; 556  :     {
; 557  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 558  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 559  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 560  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 561  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 562  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 563  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 564  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 565  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 566  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 567  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 568  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 569  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 570  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 571  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 572  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 573  :         u_buf += 16;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR u_buf$[rbp], rax
$LN4@MultiplyAn:

; 574  :     }
; 575  : 
; 576  :     if (u_count & 0x8)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN5@MultiplyAn

; 577  :     {
; 578  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 579  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 580  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 581  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 582  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 583  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 584  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 585  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 586  :         u_buf += 8;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR u_buf$[rbp], rax
$LN5@MultiplyAn:

; 587  :     }
; 588  : 
; 589  :     if (u_count & 0x4)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN6@MultiplyAn

; 590  :     {
; 591  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 592  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 593  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 594  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 595  :         u_buf += 4;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR u_buf$[rbp], rax
$LN6@MultiplyAn:

; 596  :     }
; 597  : 
; 598  :     if (u_count & 0x2)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN7@MultiplyAn

; 599  :     {
; 600  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 601  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 602  :         u_buf += 2;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 16
	mov	QWORD PTR u_buf$[rbp], rax
$LN7@MultiplyAn:

; 603  :     }
; 604  : 
; 605  :     if (u_count & 0x1)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN8@MultiplyAn

; 606  :     {
; 607  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADCX_MULX
	mov	QWORD PTR k$[rbp], rax

; 608  :         u_buf += 1;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 8
	mov	QWORD PTR u_buf$[rbp], rax
$LN8@MultiplyAn:

; 609  :     }
; 610  : 
; 611  :     if (k > 0)

	cmp	QWORD PTR k$[rbp], 0
	jbe	SHORT $LN9@MultiplyAn

; 612  :     {
; 613  :         u_buf[0] = k;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR k$[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 614  :         u_buf += 1;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 8
	mov	QWORD PTR u_buf$[rbp], rax
$LN9@MultiplyAn:

; 615  :     }
; 616  : 
; 617  :     return (u_buf);

	mov	rax, QWORD PTR u_buf$[rbp]

; 618  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
MultiplyAndAdd_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT MultiplyAndAdd_using_ADC_MUL
_TEXT	SEGMENT
k$ = 8
count$ = 40
u_buf$ = 288
u_count$ = 296
x$ = 304
MultiplyAndAdd_using_ADC_MUL PROC			; COMDAT

; 407  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 408  :     __UNIT_TYPE k = x;

	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR k$[rbp], rax

; 409  :     __UNIT_TYPE count = u_count >> 5;

	mov	rax, QWORD PTR u_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@MultiplyAn:

; 410  :     while (count > 0)

	cmp	QWORD PTR count$[rbp], 0
	jbe	$LN3@MultiplyAn

; 411  :     {
; 412  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 413  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 414  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 415  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 416  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 417  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 418  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 419  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 420  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 421  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 422  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 423  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 424  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 425  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 426  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 427  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 428  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[16], &u_buf[16]);

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 429  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[17], &u_buf[17]);

	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 430  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[18], &u_buf[18]);

	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 431  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[19], &u_buf[19]);

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 432  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[20], &u_buf[20]);

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 433  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[21], &u_buf[21]);

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 434  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[22], &u_buf[22]);

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 435  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[23], &u_buf[23]);

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 436  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[24], &u_buf[24]);

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 437  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[25], &u_buf[25]);

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 438  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[26], &u_buf[26]);

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 439  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[27], &u_buf[27]);

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 440  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[28], &u_buf[28]);

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 441  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[29], &u_buf[29]);

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 442  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[30], &u_buf[30]);

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 443  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[31], &u_buf[31]);

	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 444  :         u_buf += 32;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR u_buf$[rbp], rax

; 445  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 446  :     }

	jmp	$LN2@MultiplyAn
$LN3@MultiplyAn:

; 447  : 
; 448  :     if (u_count & 0x10)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN4@MultiplyAn

; 449  :     {
; 450  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 451  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 452  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 453  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 454  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 455  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 456  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 457  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 458  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 459  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 460  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 461  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 462  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 463  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 464  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 465  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 466  :         u_buf += 16;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR u_buf$[rbp], rax
$LN4@MultiplyAn:

; 467  :     }
; 468  : 
; 469  :     if (u_count & 0x8)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN5@MultiplyAn

; 470  :     {
; 471  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 472  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 473  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 474  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 475  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 476  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 477  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 478  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 479  :         u_buf += 8;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR u_buf$[rbp], rax
$LN5@MultiplyAn:

; 480  :     }
; 481  : 
; 482  :     if (u_count & 0x4)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN6@MultiplyAn

; 483  :     {
; 484  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 485  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 486  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 487  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 488  :         u_buf += 4;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR u_buf$[rbp], rax
$LN6@MultiplyAn:

; 489  :     }
; 490  : 
; 491  :     if (u_count & 0x2)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN7@MultiplyAn

; 492  :     {
; 493  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 494  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 495  :         u_buf += 2;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 16
	mov	QWORD PTR u_buf$[rbp], rax
$LN7@MultiplyAn:

; 496  :     }
; 497  : 
; 498  :     if (u_count & 0x1)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN8@MultiplyAn

; 499  :     {
; 500  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR k$[rbp]
	call	MultiplyAndAdd1Word_using_ADC_MUL
	mov	QWORD PTR k$[rbp], rax

; 501  :         u_buf += 1;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 8
	mov	QWORD PTR u_buf$[rbp], rax
$LN8@MultiplyAn:

; 502  :     }
; 503  : 
; 504  :     if (k > 0)

	cmp	QWORD PTR k$[rbp], 0
	jbe	SHORT $LN9@MultiplyAn

; 505  :     {
; 506  :         u_buf[0] = k;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rdx, QWORD PTR k$[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 507  :         u_buf += 1;

	mov	rax, QWORD PTR u_buf$[rbp]
	add	rax, 8
	mov	QWORD PTR u_buf$[rbp], rax
$LN9@MultiplyAn:

; 508  :     }
; 509  : 
; 510  :     return (u_buf);

	mov	rax, QWORD PTR u_buf$[rbp]

; 511  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
MultiplyAndAdd_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT MultiplyAndAdd1Word_using_ADCX_MULX
_TEXT	SEGMENT
base_value$ = 8
t_hi$ = 40
t_lo$ = 72
k$ = 320
u$ = 328
w_buf$ = 336
MultiplyAndAdd1Word_using_ADCX_MULX PROC		; COMDAT

; 392  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 393  : #ifdef _M_IX86
; 394  :     __UNIT_TYPE base_value = 1000000000U; // 10^9
; 395  : #elif defined(_M_IX64)
; 396  :     __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19

	mov	rax, -8446744073709551616		; 8ac7230489e80000H
	mov	QWORD PTR base_value$[rbp], rax

; 397  : #else
; 398  : #error unknown platform
; 399  : #endif
; 400  :     __UNIT_TYPE t_hi;
; 401  :     __UNIT_TYPE t_lo = _MULTIPLYX_UNIT(u, base_value, &t_hi);

	lea	r8, QWORD PTR t_hi$[rbp]
	mov	rdx, QWORD PTR base_value$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	_MULTIPLYX_UNIT
	mov	QWORD PTR t_lo$[rbp], rax

; 402  :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

	mov	r9, QWORD PTR w_buf$[rbp]
	mov	r8, QWORD PTR k$[rbp]
	mov	rdx, QWORD PTR t_lo$[rbp]
	xor	ecx, ecx
	call	_ADDX_UNIT
	lea	r9, QWORD PTR k$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t_hi$[rbp]
	movzx	ecx, al
	call	_ADDX_UNIT

; 403  :     return (k);

	mov	rax, QWORD PTR k$[rbp]

; 404  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:MultiplyAndAdd1Word_using_ADCX_MULX$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
MultiplyAndAdd1Word_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT MultiplyAndAdd1Word_using_ADC_MUL
_TEXT	SEGMENT
base_value$ = 8
t_hi$ = 40
t_lo$ = 72
k$ = 320
u$ = 328
w_buf$ = 336
MultiplyAndAdd1Word_using_ADC_MUL PROC			; COMDAT

; 377  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 378  : #ifdef _M_IX86
; 379  :     __UNIT_TYPE base_value = 1000000000U; // 10^9
; 380  : #elif defined(_M_IX64)
; 381  :     __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19

	mov	rax, -8446744073709551616		; 8ac7230489e80000H
	mov	QWORD PTR base_value$[rbp], rax

; 382  : #else
; 383  : #error unknown platform
; 384  : #endif
; 385  :     __UNIT_TYPE t_hi;
; 386  :     __UNIT_TYPE t_lo = _MULTIPLY_UNIT(u, base_value, &t_hi);

	lea	r8, QWORD PTR t_hi$[rbp]
	mov	rdx, QWORD PTR base_value$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	_MULTIPLY_UNIT
	mov	QWORD PTR t_lo$[rbp], rax

; 387  :     _ADD_UNIT(_ADD_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

	mov	r9, QWORD PTR w_buf$[rbp]
	mov	r8, QWORD PTR k$[rbp]
	mov	rdx, QWORD PTR t_lo$[rbp]
	xor	ecx, ecx
	call	_ADD_UNIT
	lea	r9, QWORD PTR k$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t_hi$[rbp]
	movzx	ecx, al
	call	_ADD_UNIT

; 388  :     return (k);

	mov	rax, QWORD PTR k$[rbp]

; 389  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:MultiplyAndAdd1Word_using_ADC_MUL$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
MultiplyAndAdd1Word_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT BuildBinaryFromDecimalString
_TEXT	SEGMENT
word_digit_count$ = 4
in_ptr$ = 40
out_ptr$ = 72
source_count$ = 104
r$ = 132
tv67 = 344
source$ = 384
out_buf$ = 392
out_buf_count$ = 400
BuildBinaryFromDecimalString PROC			; COMDAT

; 349  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 350  : #ifdef _M_IX86
; 351  :     int word_digit_count = 9;
; 352  : #elif defined(_M_IX64)
; 353  :     int word_digit_count = 19;

	mov	DWORD PTR word_digit_count$[rbp], 19

; 354  : #else
; 355  : #error unknown platform
; 356  : #endif
; 357  :     wchar_t* in_ptr = source;

	mov	rax, QWORD PTR source$[rbp]
	mov	QWORD PTR in_ptr$[rbp], rax

; 358  :     __UNIT_TYPE* out_ptr = out_buf;

	mov	rax, QWORD PTR out_buf$[rbp]
	mov	QWORD PTR out_ptr$[rbp], rax

; 359  :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	rcx, QWORD PTR source$[rbp]
	call	QWORD PTR __imp_lstrlenW
	cdqe
	mov	QWORD PTR source_count$[rbp], rax

; 360  :     int r = source_count % word_digit_count;

	movsxd	rax, DWORD PTR word_digit_count$[rbp]
	mov	QWORD PTR tv67[rbp], rax
	xor	edx, edx
	mov	rax, QWORD PTR source_count$[rbp]
	mov	rcx, QWORD PTR tv67[rbp]
	div	rcx
	mov	rax, rdx
	mov	DWORD PTR r$[rbp], eax

; 361  :     if (r > 0)

	cmp	DWORD PTR r$[rbp], 0
	jle	SHORT $LN4@BuildBinar

; 362  :     {
; 363  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	movsxd	rax, DWORD PTR r$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR in_ptr$[rbp]
	call	BuildLeading1WordFromDecimalString
	mov	rcx, QWORD PTR out_ptr$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR out_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR out_ptr$[rbp], rax

; 364  :         in_ptr += r;

	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR in_ptr$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR in_ptr$[rbp], rax

; 365  :         source_count -= r;

	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR source_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR source_count$[rbp], rax
$LN4@BuildBinar:
$LN2@BuildBinar:

; 366  :     }
; 367  :     while (source_count > 0)

	cmp	QWORD PTR source_count$[rbp], 0
	jbe	SHORT $LN3@BuildBinar

; 368  :     {
; 369  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr);

	mov	rcx, QWORD PTR in_ptr$[rbp]
	call	Build1WordFromDecimalString
	mov	rcx, QWORD PTR out_ptr$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR out_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR out_ptr$[rbp], rax

; 370  :         in_ptr += word_digit_count;

	movsxd	rax, DWORD PTR word_digit_count$[rbp]
	mov	rcx, QWORD PTR in_ptr$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR in_ptr$[rbp], rax

; 371  :         source_count -= word_digit_count;

	movsxd	rax, DWORD PTR word_digit_count$[rbp]
	mov	rcx, QWORD PTR source_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR source_count$[rbp], rax

; 372  :     }

	jmp	SHORT $LN2@BuildBinar
$LN3@BuildBinar:

; 373  :     *out_buf_count = out_ptr - out_buf;

	mov	rax, QWORD PTR out_buf$[rbp]
	mov	rcx, QWORD PTR out_ptr$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	rcx, QWORD PTR out_buf_count$[rbp]
	mov	QWORD PTR [rcx], rax

; 374  : }

	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
BuildBinaryFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT Build1WordFromDecimalString
_TEXT	SEGMENT
x$ = 8
in_ptr$ = 256
Build1WordFromDecimalString PROC			; COMDAT

; 312  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 313  :     __UNIT_TYPE x = (*in_ptr++ - L'0');

	mov	rax, QWORD PTR in_ptr$[rbp]
	movzx	eax, WORD PTR [rax]
	sub	eax, 48					; 00000030H
	cdqe
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 314  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

	xor	eax, eax
	cmp	eax, 1
	je	$LN2@Build1Word

; 315  :     {
; 316  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 317  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 318  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 319  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 320  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 321  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 322  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 323  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 324  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 325  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
$LN2@Build1Word:

; 326  :     }
; 327  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

	xor	eax, eax
	cmp	eax, 1
	je	$LN3@Build1Word

; 328  :     {
; 329  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 330  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 331  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 332  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 333  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
$LN3@Build1Word:

; 334  :     }
; 335  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN4@Build1Word

; 336  :     {
; 337  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 338  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
$LN4@Build1Word:

; 339  :     }
; 340  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@Build1Word

; 341  :     {
; 342  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax
$LN5@Build1Word:

; 343  :     }
; 344  :     return (x);

	mov	rax, QWORD PTR x$[rbp]

; 345  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
Build1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT BuildLeading1WordFromDecimalString
_TEXT	SEGMENT
x$ = 8
in_ptr$ = 256
count$ = 264
BuildLeading1WordFromDecimalString PROC			; COMDAT

; 301  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 302  :     __UNIT_TYPE x = 0;

	mov	QWORD PTR x$[rbp], 0
$LN2@BuildLeadi:

; 303  :     while (count > 0)

	cmp	QWORD PTR count$[rbp], 0
	jbe	SHORT $LN3@BuildLeadi

; 304  :     {
; 305  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	rax, QWORD PTR x$[rbp], 10
	mov	rcx, QWORD PTR in_ptr$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR x$[rbp], rax
	mov	rax, QWORD PTR in_ptr$[rbp]
	add	rax, 2
	mov	QWORD PTR in_ptr$[rbp], rax

; 306  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 307  :     }

	jmp	SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 308  :     return (x);

	mov	rax, QWORD PTR x$[rbp]

; 309  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
BuildLeading1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT ParseAsHexNumberString
_TEXT	SEGMENT
state$ = 16
__$ArrayPad$ = 312
in_ptr$ = 352
number_styles$ = 360
format_option$ = 368
int_part_buf$ = 376
ParseAsHexNumberString PROC				; COMDAT

; 286  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 287  :     struct __tag_PARSER_STATE state;
; 288  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	mov	QWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR int_part_buf$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR format_option$[rbp]
	mov	r8d, DWORD PTR number_styles$[rbp]
	mov	rdx, QWORD PTR in_ptr$[rbp]
	lea	rcx, QWORD PTR state$[rbp]
	call	InitializeParserState

; 289  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@ParseAsHex

; 290  :         SkipSpace(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	SkipSpace
$LN2@ParseAsHex:

; 291  :     ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsIntegerPartNumberSequence

; 292  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN3@ParseAsHex

; 293  :         SkipSpace(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	SkipSpace
$LN3@ParseAsHex:

; 294  :     if (*state.IN_PTR != L'\0')

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN4@ParseAsHex

; 295  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsHex
$LN4@ParseAsHex:

; 296  :     FinalizeParserState(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	FinalizeParserState

; 297  :     return (1);

	mov	eax, 1
$LN1@ParseAsHex:

; 298  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:ParseAsHexNumberString$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
ParseAsHexNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT ParseAsDecimalNumberString
_TEXT	SEGMENT
state$ = 16
__$ArrayPad$ = 312
in_ptr$ = 352
number_styles$ = 360
format_option$ = 368
sign$ = 376
int_part_buf$ = 384
frac_part_buf$ = 392
ParseAsDecimalNumberString PROC				; COMDAT

; 189  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 190  :     struct __tag_PARSER_STATE state;
; 191  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, frac_part_buf);

	mov	rax, QWORD PTR frac_part_buf$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR int_part_buf$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR format_option$[rbp]
	mov	r8d, DWORD PTR number_styles$[rbp]
	mov	rdx, QWORD PTR in_ptr$[rbp]
	lea	rcx, QWORD PTR state$[rbp]
	call	InitializeParserState

; 192  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@ParseAsDec

; 193  :         SkipSpace(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	SkipSpace
$LN2@ParseAsDec:

; 194  :     if ((number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && *state.IN_PTR == L'(')

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 16
	test	eax, eax
	je	$LN3@ParseAsDec
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 40					; 00000028H
	jne	$LN3@ParseAsDec

; 195  :     {
; 196  :         state.SIGN = -1;

	mov	DWORD PTR state$[rbp+12], -1

; 197  :         state.IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	add	rax, 2
	mov	QWORD PTR state$[rbp], rax

; 198  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN5@ParseAsDec
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN5@ParseAsDec

; 199  :             ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsIntegerPartNumberSequence
$LN5@ParseAsDec:

; 200  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN6@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+40]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN6@ParseAsDec

; 201  :         {
; 202  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+48]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 203  :             ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsFractionPartNumberSequence
$LN6@ParseAsDec:

; 204  :         }
; 205  :         if (*state.IN_PTR != L')')

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 41					; 00000029H
	je	SHORT $LN7@ParseAsDec

; 206  :             return (0);

	xor	eax, eax
	jmp	$LN1@ParseAsDec
$LN7@ParseAsDec:

; 207  :         state.IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	add	rax, 2
	mov	QWORD PTR state$[rbp], rax

; 208  :     }

	jmp	$LN4@ParseAsDec
$LN3@ParseAsDec:

; 209  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 4
	test	eax, eax
	je	$LN8@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+16]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN8@ParseAsDec

; 210  :     {
; 211  :         state.SIGN = 1;

	mov	DWORD PTR state$[rbp+12], 1

; 212  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+24]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 213  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN10@ParseAsDec
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN10@ParseAsDec

; 214  :             ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsIntegerPartNumberSequence
$LN10@ParseAsDec:

; 215  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN11@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+40]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN11@ParseAsDec

; 216  :         {
; 217  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+48]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 218  :             ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsFractionPartNumberSequence
$LN11@ParseAsDec:

; 219  :         }
; 220  :     }

	jmp	$LN9@ParseAsDec
$LN8@ParseAsDec:

; 221  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 4
	test	eax, eax
	je	$LN12@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+28]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN12@ParseAsDec

; 222  :     {
; 223  :         state.SIGN = -1;

	mov	DWORD PTR state$[rbp+12], -1

; 224  :         state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+36]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 225  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN14@ParseAsDec
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN14@ParseAsDec

; 226  :             ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsIntegerPartNumberSequence
$LN14@ParseAsDec:

; 227  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN15@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+40]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN15@ParseAsDec

; 228  :         {
; 229  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+48]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 230  :             ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsFractionPartNumberSequence
$LN15@ParseAsDec:

; 231  :         }
; 232  :     }

	jmp	$LN13@ParseAsDec
$LN12@ParseAsDec:

; 233  :     else if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	$LN16@ParseAsDec
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	$LN16@ParseAsDec

; 234  :     {
; 235  :         ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsIntegerPartNumberSequence

; 236  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN18@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+40]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN18@ParseAsDec

; 237  :         {
; 238  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+48]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 239  :             ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsFractionPartNumberSequence
$LN18@ParseAsDec:

; 240  :         }
; 241  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN19@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+16]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN19@ParseAsDec

; 242  :         {
; 243  :             state.SIGN = 1;

	mov	DWORD PTR state$[rbp+12], 1

; 244  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+24]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 245  :         }

	jmp	SHORT $LN20@ParseAsDec
$LN19@ParseAsDec:

; 246  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN21@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+28]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN21@ParseAsDec

; 247  :         {
; 248  :             state.SIGN = -1;

	mov	DWORD PTR state$[rbp+12], -1

; 249  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+36]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax
$LN21@ParseAsDec:
$LN20@ParseAsDec:

; 250  :         }
; 251  :         else
; 252  :         {
; 253  :         }
; 254  :     }

	jmp	$LN17@ParseAsDec
$LN16@ParseAsDec:

; 255  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	$LN23@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+40]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	$LN23@ParseAsDec

; 256  :     {
; 257  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+48]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 258  :         ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	ParseAsFractionPartNumberSequence

; 259  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN25@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+16]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN25@ParseAsDec

; 260  :         {
; 261  :             state.SIGN = 1;

	mov	DWORD PTR state$[rbp+12], 1

; 262  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+24]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax

; 263  :         }

	jmp	SHORT $LN26@ParseAsDec
$LN25@ParseAsDec:

; 264  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN27@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp+28]
	mov	rcx, QWORD PTR state$[rbp]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN27@ParseAsDec

; 265  :         {
; 266  :             state.SIGN = -1;

	mov	DWORD PTR state$[rbp+12], -1

; 267  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp+36]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp], rax
$LN27@ParseAsDec:
$LN26@ParseAsDec:

; 268  :         }
; 269  :         else
; 270  :         {
; 271  :         }
; 272  :     }

	jmp	SHORT $LN24@ParseAsDec
$LN23@ParseAsDec:

; 273  :     else
; 274  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsDec
$LN24@ParseAsDec:
$LN17@ParseAsDec:
$LN13@ParseAsDec:
$LN9@ParseAsDec:
$LN4@ParseAsDec:

; 275  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN29@ParseAsDec

; 276  :         SkipSpace(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	SkipSpace
$LN29@ParseAsDec:

; 277  :     if (*state.IN_PTR != L'\0')

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN30@ParseAsDec

; 278  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsDec
$LN30@ParseAsDec:

; 279  :     FinalizeParserState(&state);

	lea	rcx, QWORD PTR state$[rbp]
	call	FinalizeParserState

; 280  :     *sign = state.SIGN;

	mov	rax, QWORD PTR sign$[rbp]
	mov	ecx, DWORD PTR state$[rbp+12]
	mov	DWORD PTR [rax], ecx

; 281  :     return (1);

	mov	eax, 1
$LN1@ParseAsDec:

; 282  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:ParseAsDecimalNumberString$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
ParseAsDecimalNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT ParseAsFractionPartNumberSequence
_TEXT	SEGMENT
state$ = 224
ParseAsFractionPartNumberSequence PROC			; COMDAT

; 161  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode
$LN2@ParseAsFra:

; 162  :     for (;;)
; 163  :     {
; 164  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN5@ParseAsFra
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN5@ParseAsFra

; 165  :         {
; 166  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+88]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR [rcx], ax

; 167  :             state->FRAC_PART_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+88]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx+88], rax

; 168  :             state->IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax

; 169  :         }

	jmp	$LN6@ParseAsFra
$LN5@ParseAsFra:

; 170  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN7@ParseAsFra
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN7@ParseAsFra
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN7@ParseAsFra

; 171  :         {
; 172  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+88]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR [rcx], ax

; 173  :             state->FRAC_PART_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+88]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx+88], rax

; 174  :             state->IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax

; 175  :         }

	jmp	$LN8@ParseAsFra
$LN7@ParseAsFra:

; 176  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN9@ParseAsFra
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN9@ParseAsFra
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN9@ParseAsFra

; 177  :         {
; 178  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+88]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR [rcx], ax

; 179  :             state->FRAC_PART_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+88]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx+88], rax

; 180  :             state->IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax

; 181  :         }

	jmp	SHORT $LN10@ParseAsFra
$LN9@ParseAsFra:

; 182  :         else
; 183  :             break;

	jmp	SHORT $LN3@ParseAsFra
$LN10@ParseAsFra:
$LN8@ParseAsFra:
$LN6@ParseAsFra:

; 184  :     }

	jmp	$LN2@ParseAsFra
$LN3@ParseAsFra:

; 185  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
ParseAsFractionPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT ParseAsIntegerPartNumberSequence
_TEXT	SEGMENT
state$ = 224
ParseAsIntegerPartNumberSequence PROC			; COMDAT

; 130  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode
$LN2@ParseAsInt:

; 131  :     for (;;)
; 132  :     {
; 133  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN5@ParseAsInt
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN5@ParseAsInt

; 134  :         {
; 135  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR [rcx], ax

; 136  :             state->INT_PART_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx+80], rax

; 137  :             state->IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax

; 138  :         }

	jmp	$LN6@ParseAsInt
$LN5@ParseAsInt:

; 139  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN7@ParseAsInt
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN7@ParseAsInt
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN7@ParseAsInt

; 140  :         {
; 141  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR [rcx], ax

; 142  :             state->INT_PART_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx+80], rax

; 143  :             state->IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax

; 144  :         }

	jmp	$LN8@ParseAsInt
$LN7@ParseAsInt:

; 145  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN9@ParseAsInt
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN9@ParseAsInt
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN9@ParseAsInt

; 146  :         {
; 147  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR [rcx], ax

; 148  :             state->INT_PART_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx+80], rax

; 149  :             state->IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax

; 150  :         }

	jmp	$LN10@ParseAsInt
$LN9@ParseAsInt:

; 151  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN11@ParseAsInt
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 52					; 00000034H
	mov	rdx, rax
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN11@ParseAsInt

; 152  :             state->IN_PTR += state->GROUP_SEPARATOR_LENGTH;

	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+60]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax
	jmp	SHORT $LN12@ParseAsInt
$LN11@ParseAsInt:

; 153  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN13@ParseAsInt
	mov	rax, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rax+72], 0
	jle	SHORT $LN13@ParseAsInt
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 64					; 00000040H
	mov	rdx, rax
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	StartsWith
	test	eax, eax
	je	SHORT $LN13@ParseAsInt

; 154  :             state->IN_PTR += state->SECONDARY_GROUP_SEPARATOR_LENGTH;

	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+72]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax
	jmp	SHORT $LN14@ParseAsInt
$LN13@ParseAsInt:

; 155  :         else
; 156  :             break;

	jmp	SHORT $LN3@ParseAsInt
$LN14@ParseAsInt:
$LN12@ParseAsInt:
$LN10@ParseAsInt:
$LN8@ParseAsInt:
$LN6@ParseAsInt:

; 157  :     }

	jmp	$LN2@ParseAsInt
$LN3@ParseAsInt:

; 158  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
ParseAsIntegerPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT SkipSpace
_TEXT	SEGMENT
tv67 = 192
state$ = 240
SkipSpace PROC						; COMDAT

; 109  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode
$LN2@SkipSpace:

; 110  :     for (;;)
; 111  :     {
; 112  :         switch (*state->IN_PTR)

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv67[rbp], eax
	cmp	DWORD PTR tv67[rbp], 9
	jl	SHORT $LN8@SkipSpace
	cmp	DWORD PTR tv67[rbp], 13
	jle	SHORT $LN7@SkipSpace
	cmp	DWORD PTR tv67[rbp], 32			; 00000020H
	je	SHORT $LN7@SkipSpace
	jmp	SHORT $LN8@SkipSpace
$LN7@SkipSpace:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;

	jmp	SHORT $LN5@SkipSpace
$LN8@SkipSpace:

; 121  : 
; 122  :         default:
; 123  :             return;

	jmp	SHORT $LN1@SkipSpace
$LN5@SkipSpace:

; 124  :         }
; 125  :         state->IN_PTR += 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax]
	add	rax, 2
	mov	rcx, QWORD PTR state$[rbp]
	mov	QWORD PTR [rcx], rax

; 126  :     }

	jmp	SHORT $LN2@SkipSpace
$LN1@SkipSpace:

; 127  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
SkipSpace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT FinalizeParserState
_TEXT	SEGMENT
state$ = 224
FinalizeParserState PROC				; COMDAT

; 101  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 102  :     *state->INT_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+80]
	xor	ecx, ecx
	mov	WORD PTR [rax], cx

; 103  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN2@FinalizePa

; 104  :         *state->FRAC_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+88]
	xor	ecx, ecx
	mov	WORD PTR [rax], cx
$LN2@FinalizePa:

; 105  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
FinalizeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT InitializeParserState
_TEXT	SEGMENT
state$ = 224
in_ptr$ = 232
number_styles$ = 240
format_option$ = 248
int_part_buf$ = 256
frac_part_buf$ = 264
InitializeParserState PROC				; COMDAT

; 73   : {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 74   :     state->IN_PTR = in_ptr;

	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR in_ptr$[rbp]
	mov	QWORD PTR [rax], rcx

; 75   :     state->NUMBER_STYLES = number_styles;

	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR number_styles$[rbp]
	mov	DWORD PTR [rax+8], ecx

; 76   :     state->SIGN = 0;

	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+12], 0

; 77   :     lstrcpyW(state->POSITIVE_SIGN, format_option->PositiveSign);

	mov	rax, QWORD PTR format_option$[rbp]
	add	rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	add	rcx, 16
	mov	rdx, rax
	call	QWORD PTR __imp_lstrcpyW

; 78   :     state->POSITIVE_SIGN_LENGTH = lstrlenW(state->POSITIVE_SIGN);

	mov	rax, QWORD PTR state$[rbp]
	add	rax, 16
	mov	rcx, rax
	call	QWORD PTR __imp_lstrlenW
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+24], eax

; 79   :     lstrcpyW(state->NEGATIVE_SIGN, format_option->NegativeSign);

	mov	rax, QWORD PTR format_option$[rbp]
	add	rax, 22
	mov	rcx, QWORD PTR state$[rbp]
	add	rcx, 28
	mov	rdx, rax
	call	QWORD PTR __imp_lstrcpyW

; 80   :     state->NEGATIVE_SIGN_LENGTH = lstrlenW(state->NEGATIVE_SIGN);

	mov	rax, QWORD PTR state$[rbp]
	add	rax, 28
	mov	rcx, rax
	call	QWORD PTR __imp_lstrlenW
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+36], eax

; 81   :     lstrcpyW(state->DECIMAL_SEPARATOR, format_option->DecimalSeparator);

	mov	rax, QWORD PTR format_option$[rbp]
	add	rax, 10
	mov	rcx, QWORD PTR state$[rbp]
	add	rcx, 40					; 00000028H
	mov	rdx, rax
	call	QWORD PTR __imp_lstrcpyW

; 82   :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(state->DECIMAL_SEPARATOR);

	mov	rax, QWORD PTR state$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	QWORD PTR __imp_lstrlenW
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+48], eax

; 83   :     lstrcpyW(state->GROUP_SEPARATOR, format_option->GroupSeparator);

	mov	rax, QWORD PTR format_option$[rbp]
	add	rax, 4
	mov	rcx, QWORD PTR state$[rbp]
	add	rcx, 52					; 00000034H
	mov	rdx, rax
	call	QWORD PTR __imp_lstrcpyW

; 84   :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(state->GROUP_SEPARATOR);

	mov	rax, QWORD PTR state$[rbp]
	add	rax, 52					; 00000034H
	mov	rcx, rax
	call	QWORD PTR __imp_lstrlenW
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+60], eax

; 85   :     if (state->GROUP_SEPARATOR[0] == L'\xa0' && state->GROUP_SEPARATOR[1] == L'\0')

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rcx+rax+52]
	cmp	eax, 160				; 000000a0H
	jne	SHORT $LN2@Initialize
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rcx+rax+52]
	test	eax, eax
	jne	SHORT $LN2@Initialize

; 86   :     {
; 87   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\x20';

	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 32					; 00000020H
	mov	rdx, QWORD PTR state$[rbp]
	mov	WORD PTR [rdx+rax+64], cx

; 88   :         state->SECONDARY_GROUP_SEPARATOR[1] = L'\0';

	mov	eax, 2
	imul	rax, rax, 1
	xor	ecx, ecx
	mov	rdx, QWORD PTR state$[rbp]
	mov	WORD PTR [rdx+rax+64], cx

; 89   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 1;

	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+72], 1

; 90   :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 91   :     else
; 92   :     {
; 93   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\0';

	mov	eax, 2
	imul	rax, rax, 0
	xor	ecx, ecx
	mov	rdx, QWORD PTR state$[rbp]
	mov	WORD PTR [rdx+rax+64], cx

; 94   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 0;

	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+72], 0
$LN3@Initialize:

; 95   :     }
; 96   :     state->INT_PART_PTR = int_part_buf;

	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR int_part_buf$[rbp]
	mov	QWORD PTR [rax+80], rcx

; 97   :     state->FRAC_PART_PTR = frac_part_buf;

	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR frac_part_buf$[rbp]
	mov	QWORD PTR [rax+88], rcx

; 98   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
InitializeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT StartsWith
_TEXT	SEGMENT
a$ = 224
b$ = 232
StartsWith PROC						; COMDAT

; 61   : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode
$LN2@StartsWith:

; 62   :     while (*b != L'\0')

	mov	rax, QWORD PTR b$[rbp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN3@StartsWith

; 63   :     {
; 64   :         if (*a != *b)

	mov	rax, QWORD PTR a$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR b$[rbp]
	movzx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN4@StartsWith

; 65   :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@StartsWith
$LN4@StartsWith:

; 66   :         ++a;

	mov	rax, QWORD PTR a$[rbp]
	add	rax, 2
	mov	QWORD PTR a$[rbp], rax

; 67   :         ++b;

	mov	rax, QWORD PTR b$[rbp]
	add	rax, 2
	mov	QWORD PTR b$[rbp], rax

; 68   :     }

	jmp	SHORT $LN2@StartsWith
$LN3@StartsWith:

; 69   :     return (1);

	mov	eax, 1
$LN1@StartsWith:

; 70   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
StartsWith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 224
v$ = 232
w_hi$ = 240
_MULTIPLYX_UNIT PROC					; COMDAT

; 546  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 547  : #ifdef _MSC_VER
; 548  : #ifdef _M_IX86
; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 550  : #elif defined(_M_X64)
; 551  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, QWORD PTR v$[rbp]
	mulx	rax, rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR w_hi$[rbp]
	mov	QWORD PTR [rdx], rax
	mov	rax, rcx

; 552  : #else
; 553  : #error unknown platform
; 554  : #endif
; 555  : #elif defined(__GNUC__)
; 556  : #ifdef _M_IX86
; 557  :     _UINT32_T w_lo;
; 558  :     __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 559  :     return (w_lo);
; 560  : #elif defined(_M_X64)
; 561  :     _UINT64_T w_lo;
; 562  :     __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 563  :     return (w_lo);
; 564  : #else
; 565  : #error unknown platform
; 566  : #endif
; 567  : #else
; 568  : #error unknown compiler
; 569  : #endif
; 570  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
tv69 = 192
u$ = 240
v$ = 248
w_hi$ = 256
_MULTIPLY_UNIT PROC					; COMDAT

; 508  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 509  : #ifdef _M_IX86
; 510  : #ifdef _MSC_VER
; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 512  : #elif defined(__GNUC__)
; 513  :     _UINT32_T w_lo;
; 514  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 515  :     return (w_lo);
; 516  : #else
; 517  : #error unknown compiler
; 518  : #endif
; 519  : #elif defined(_M_X64)
; 520  :     return (_umul128(u, v, w_hi));

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, rcx
	mov	rcx, QWORD PTR tv69[rbp]
	mul	rcx
	mov	rcx, QWORD PTR w_hi$[rbp]
	mov	QWORD PTR [rcx], rdx

; 521  : #else
; 522  : #error unknown platform
; 523  : #endif
; 524  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADDX_UNIT PROC						; COMDAT

; 452  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 453  : #ifdef _M_IX86
; 454  :     return (_addcarryx_u32(carry, u, v, w));
; 455  : #elif defined(_M_X64)
; 456  :     return (_addcarryx_u64(carry, u, v, w));

	mov	rax, QWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR carry$[rbp]
	add	cl, -1
	adcx	rax, QWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx], rax
	movzx	eax, cl

; 457  : #else
; 458  : #error unknown platform
; 459  : #endif
; 460  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADD_UNIT PROC						; COMDAT

; 424  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 425  : #ifdef _M_IX86
; 426  :     return (_addcarry_u32(carry, u, v, w));
; 427  : #elif defined(_M_X64)
; 428  :     return (_addcarry_u64(carry, u, v, w));

	mov	rax, QWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR carry$[rbp]
	add	cl, -1
	adc	rax, QWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx], rax
	movzx	eax, cl

; 429  : #else
; 430  : #error unknown platform
; 431  : #endif
; 432  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 224
v$ = 232
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 409  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 410  :     return ((u + v - 1) / v);

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	lea	rax, QWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	QWORD PTR v$[rbp]

; 411  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 224
v$ = 232
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 404  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 405  :     return ((u + v - 1) / v);

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	lea	rax, QWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	QWORD PTR v$[rbp]

; 406  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 277  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 278  : #ifdef _M_IX86
; 279  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 280  : #elif defined(_M_X64)
; 281  :     __movsq(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsq

; 282  : #else
; 283  : #error unknown platform
; 284  : #endif
; 285  : }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT PMC_TryParse
_TEXT	SEGMENT
result$ = 4
no$ = 40
mask$4 = 68
source$ = 320
number_styles$ = 328
format_option$ = 336
o$ = 344
PMC_TryParse PROC					; COMDAT

; 927  : {

$LN12:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 928  :     PMC_STATUS_CODE result;
; 929  :     if (source == NULL)

	cmp	QWORD PTR source$[rbp], 0
	jne	SHORT $LN2@PMC_TryPar

; 930  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_TryPar
$LN2@PMC_TryPar:

; 931  :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN3@PMC_TryPar

; 932  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_TryPar
$LN3@PMC_TryPar:

; 933  :     if (format_option == NULL)

	cmp	QWORD PTR format_option$[rbp], 0
	jne	SHORT $LN4@PMC_TryPar

; 934  :         format_option = &default_number_format_option;

	lea	rax, OFFSET FLAT:default_number_format_option
	mov	QWORD PTR format_option$[rbp], rax
$LN4@PMC_TryPar:

; 935  :     NUMBER_HEADER* no;
; 936  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	mov	eax, DWORD PTR number_styles$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN5@PMC_TryPar

; 937  :     {
; 938  :         // 許可されている組み合わせのフラグ
; 939  :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;

	mov	DWORD PTR mask$4[rbp], 515		; 00000203H

; 940  : 
; 941  :         // 許可されていないフラグが指定されていればエラー
; 942  :         if (number_styles & ~mask)

	mov	eax, DWORD PTR mask$4[rbp]
	not	eax
	mov	ecx, DWORD PTR number_styles$[rbp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN7@PMC_TryPar

; 943  :             return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_TryPar
$LN7@PMC_TryPar:

; 944  : 
; 945  :         if ((result = TryParseX(source, number_styles, format_option, &no)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR no$[rbp]
	mov	r8, QWORD PTR format_option$[rbp]
	mov	edx, DWORD PTR number_styles$[rbp]
	mov	rcx, QWORD PTR source$[rbp]
	call	TryParseX
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN8@PMC_TryPar

; 946  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_TryPar
$LN8@PMC_TryPar:

; 947  :     }

	jmp	SHORT $LN6@PMC_TryPar
$LN5@PMC_TryPar:

; 948  :     else
; 949  :     {
; 950  :         if ((result = TryParseDN(source, number_styles, format_option, &no)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR no$[rbp]
	mov	r8, QWORD PTR format_option$[rbp]
	mov	edx, DWORD PTR number_styles$[rbp]
	mov	rcx, QWORD PTR source$[rbp]
	call	TryParseDN
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_TryPar

; 951  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_TryPar
$LN9@PMC_TryPar:
$LN6@PMC_TryPar:

; 952  :     }
; 953  :     *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx

; 954  : #ifdef _DEBUG
; 955  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_TryPar

; 956  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_TryPar
$LN10@PMC_TryPar:

; 957  : #endif
; 958  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_TryPar:

; 959  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_TryParse$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
PMC_TryParse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
;	COMDAT Initialize_Parse
_TEXT	SEGMENT
feature$ = 224
Initialize_Parse PROC					; COMDAT

; 962  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C5BBD3C1_pmc_parse@c
	call	__CheckForDebuggerJustMyCode

; 963  :     default_number_format_option.DecimalDigits = 2;

	mov	DWORD PTR default_number_format_option, 2

; 964  :     lstrcpyW(default_number_format_option.GroupSeparator, L",");

	lea	rdx, OFFSET FLAT:??_C@_13DEFPDAGF@?$AA?0@
	lea	rcx, OFFSET FLAT:default_number_format_option+4
	call	QWORD PTR __imp_lstrcpyW

; 965  :     lstrcpyW(default_number_format_option.DecimalSeparator, L".");

	lea	rdx, OFFSET FLAT:??_C@_13JOFGPIOO@?$AA?4@
	lea	rcx, OFFSET FLAT:default_number_format_option+10
	call	QWORD PTR __imp_lstrcpyW

; 966  :     lstrcpy(default_number_format_option.GroupSizes, "3");

	lea	rdx, OFFSET FLAT:??_C@_01EKENIIDA@3@
	lea	rcx, OFFSET FLAT:default_number_format_option+28
	call	QWORD PTR __imp_lstrcpyA

; 967  :     lstrcpyW(default_number_format_option.PositiveSign, L"+");

	lea	rdx, OFFSET FLAT:??_C@_13KJIIAINM@?$AA?$CL@
	lea	rcx, OFFSET FLAT:default_number_format_option+16
	call	QWORD PTR __imp_lstrcpyW

; 968  :     lstrcpyW(default_number_format_option.NegativeSign, L"-");

	lea	rdx, OFFSET FLAT:??_C@_13IMODFHAA@?$AA?9@
	lea	rcx, OFFSET FLAT:default_number_format_option+22
	call	QWORD PTR __imp_lstrcpyW

; 969  : 
; 970  :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

	mov	rax, QWORD PTR feature$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@Initialize
	mov	rax, QWORD PTR feature$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 3
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@Initialize

; 971  :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;

	lea	rax, OFFSET FLAT:MultiplyAndAdd_using_ADCX_MULX
	mov	QWORD PTR fp_MultiplyAndAdd, rax
	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 972  :     else
; 973  :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;

	lea	rax, OFFSET FLAT:MultiplyAndAdd_using_ADC_MUL
	mov	QWORD PTR fp_MultiplyAndAdd, rax
$LN3@Initialize:

; 974  : 
; 975  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 976  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Parse ENDP
_TEXT	ENDS
END
