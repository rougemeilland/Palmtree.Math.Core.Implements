; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__89DB6AB9_autogenerated_inline_func@h DB 01H
__1898920A_pmc_subtruct@c DB 01H
msvcjmc	ENDS
PUBLIC	Subtruct_Imp
PUBLIC	Initialize_Subtruct
PUBLIC	PMC_Subtruct_I_X
PUBLIC	PMC_Subtruct_L_X
PUBLIC	PMC_Subtruct_X_I
PUBLIC	PMC_Subtruct_X_L
PUBLIC	PMC_Subtruct_X_X
PUBLIC	__JustMyCode_Default
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$Subtruct_Imp DD imagerel $LN10
	DD	imagerel $LN10+855
	DD	imagerel $unwind$Subtruct_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Subtruct DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$Initialize_Subtruct
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Subtruct_I_X DD imagerel $LN17
	DD	imagerel $LN17+421
	DD	imagerel $unwind$PMC_Subtruct_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Subtruct_L_X DD imagerel $LN31
	DD	imagerel $LN31+910
	DD	imagerel $unwind$PMC_Subtruct_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Subtruct_X_I DD imagerel $LN22
	DD	imagerel $LN22+639
	DD	imagerel $unwind$PMC_Subtruct_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Subtruct_X_L DD imagerel $LN38
	DD	imagerel $LN38+1238
	DD	imagerel $unwind$PMC_Subtruct_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Subtruct_X_X DD imagerel $LN22
	DD	imagerel $LN22+664
	DD	imagerel $unwind$PMC_Subtruct_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMWORDTODWORD DD imagerel _FROMWORDTODWORD
	DD	imagerel _FROMWORDTODWORD+85
	DD	imagerel $unwind$_FROMWORDTODWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_SUBTRUCT_UNIT DD imagerel _SUBTRUCT_UNIT
	DD	imagerel _SUBTRUCT_UNIT+118
	DD	imagerel $unwind$_SUBTRUCT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_SUBTRUCT_32WORDS_SBB DD imagerel _SUBTRUCT_32WORDS_SBB
	DD	imagerel _SUBTRUCT_32WORDS_SBB+2741
	DD	imagerel $unwind$_SUBTRUCT_32WORDS_SBB
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_SUBTRUCT_16WORDS_SBB DD imagerel _SUBTRUCT_16WORDS_SBB
	DD	imagerel _SUBTRUCT_16WORDS_SBB+1413
	DD	imagerel $unwind$_SUBTRUCT_16WORDS_SBB
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_SUBTRUCT_8WORDS_SBB DD imagerel _SUBTRUCT_8WORDS_SBB
	DD	imagerel _SUBTRUCT_8WORDS_SBB+749
	DD	imagerel $unwind$_SUBTRUCT_8WORDS_SBB
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_SUBTRUCT_4WORDS_SBB DD imagerel _SUBTRUCT_4WORDS_SBB
	DD	imagerel _SUBTRUCT_4WORDS_SBB+417
	DD	imagerel $unwind$_SUBTRUCT_4WORDS_SBB
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_SUBTRUCT_2WORDS_SBB DD imagerel _SUBTRUCT_2WORDS_SBB
	DD	imagerel _SUBTRUCT_2WORDS_SBB+251
	DD	imagerel $unwind$_SUBTRUCT_2WORDS_SBB
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DoBorrow DD imagerel DoBorrow
	DD	imagerel DoBorrow+385
	DD	imagerel $unwind$DoBorrow
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Subtruct_X_1W DD imagerel Subtruct_X_1W
	DD	imagerel Subtruct_X_1W+253
	DD	imagerel $unwind$Subtruct_X_1W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Subtruct_X_2W DD imagerel Subtruct_X_2W
	DD	imagerel Subtruct_X_2W+380
	DD	imagerel $unwind$Subtruct_X_2W
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Subtruct_X_2W DD 035053901H
	DD	011d3322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Subtruct_X_1W DD 035053901H
	DD	011d3322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DoBorrow DD 025053801H
	DD	011c2321H
	DD	07015001fH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_SUBTRUCT_2WORDS_SBB DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_SUBTRUCT_4WORDS_SBB DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_SUBTRUCT_8WORDS_SBB DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_SUBTRUCT_16WORDS_SBB DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_SUBTRUCT_32WORDS_SBB DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_SUBTRUCT_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMWORDTODWORD DD 025052c01H
	DD	01112316H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Subtruct_X_X DD 035053401H
	DD	0118331dH
	DD	07011003fH
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Subtruct_X_X$rtcName$0 DB 06eH
	DB	07aH
	DB	00H
	ORG $+5
PMC_Subtruct_X_X$rtcName$1 DB 06eH
	DB	07aH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_Subtruct_X_X$rtcVarDesc DD 0118H
	DD	08H
	DQ	FLAT:PMC_Subtruct_X_X$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:PMC_Subtruct_X_X$rtcName$0
	ORG $+96
PMC_Subtruct_X_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Subtruct_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Subtruct_X_L DD 035053401H
	DD	0118331dH
	DD	07011005fH
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Subtruct_X_L$rtcName$0 DB 06eH
	DB	07aH
	DB	00H
	ORG $+1
PMC_Subtruct_X_L$rtcName$1 DB 079H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+7
PMC_Subtruct_X_L$rtcName$2 DB 06eH
	DB	07aH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_Subtruct_X_L$rtcName$3 DB 06eH
	DB	07aH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_Subtruct_X_L$rtcName$4 DB 06eH
	DB	07aH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+12
PMC_Subtruct_X_L$rtcVarDesc DD 0218H
	DD	08H
	DQ	FLAT:PMC_Subtruct_X_L$rtcName$4
	DD	0198H
	DD	08H
	DQ	FLAT:PMC_Subtruct_X_L$rtcName$3
	DD	0138H
	DD	08H
	DQ	FLAT:PMC_Subtruct_X_L$rtcName$2
	DD	0b4H
	DD	04H
	DQ	FLAT:PMC_Subtruct_X_L$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:PMC_Subtruct_X_L$rtcName$0
	ORG $+240
PMC_Subtruct_X_L$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:PMC_Subtruct_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Subtruct_X_I DD 035053301H
	DD	0117331cH
	DD	07010003bH
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Subtruct_X_I$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+5
PMC_Subtruct_X_I$rtcName$1 DB 077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_Subtruct_X_I$rtcVarDesc DD 0f8H
	DD	08H
	DQ	FLAT:PMC_Subtruct_X_I$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:PMC_Subtruct_X_I$rtcName$0
	ORG $+96
PMC_Subtruct_X_I$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Subtruct_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Subtruct_L_X DD 025053401H
	DD	0118231dH
	DD	070110079H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Subtruct_L_X$rtcName$0 DB 075H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
PMC_Subtruct_L_X$rtcName$1 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	077H
	DB	00H
	ORG $+1
PMC_Subtruct_L_X$rtcName$2 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	077H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+6
PMC_Subtruct_L_X$rtcName$3 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	077H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	00H
	ORG $+2
PMC_Subtruct_L_X$rtcName$4 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	077H
	DB	00H
	ORG $+5
PMC_Subtruct_L_X$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:PMC_Subtruct_L_X$rtcVarDesc
	ORG $+8
PMC_Subtruct_L_X$rtcVarDesc DD 0208H
	DD	08H
	DQ	FLAT:PMC_Subtruct_L_X$rtcName$4
	DD	0188H
	DD	08H
	DQ	FLAT:PMC_Subtruct_L_X$rtcName$3
	DD	0168H
	DD	08H
	DQ	FLAT:PMC_Subtruct_L_X$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:PMC_Subtruct_L_X$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:PMC_Subtruct_L_X$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Subtruct_I_X DD 025053201H
	DD	0117231cH
	DD	070100035H
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Subtruct_I_X$rtcName$0 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	077H
	DB	00H
	ORG $+9
PMC_Subtruct_I_X$rtcVarDesc DD 0a8H
	DD	08H
	DQ	FLAT:PMC_Subtruct_I_X$rtcName$0
	ORG $+48
PMC_Subtruct_I_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Subtruct_I_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Subtruct DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Subtruct_Imp DD 035053901H
	DD	011d3322H
	DD	070160029H
	DD	05015H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT Subtruct_X_2W
_TEXT	SEGMENT
c$1 = 4
tv76 = 216
tv67 = 216
tv80 = 224
tv71 = 224
up$ = 272
u_count$ = 280
v_hi$ = 288
v_lo$ = 296
wp$ = 304
w_count$ = 312
Subtruct_X_2W PROC					; COMDAT

; 97   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 98   :     if (u_count < 2)

	cmp	QWORD PTR u_count$[rbp], 2
	jae	SHORT $LN2@Subtruct_X

; 99   :     {
; 100  :         // u が 1 ワードしかなかった場合
; 101  : 
; 102  :         // 明らかに演算結果が負になるのでエラーを通知する。
; 103  :         return (PMC_STATUS_INTERNAL_BORROW);

	mov	eax, -258				; fffffffffffffefeH
	jmp	$LN1@Subtruct_X

; 104  :     }

	jmp	$LN3@Subtruct_X
$LN2@Subtruct_X:

; 105  :     else
; 106  :     {
; 107  :         // x が 2 ワード以上あった場合
; 108  : 
; 109  :         // 最下位のワードの減算をする
; 110  :         char c = _SUBTRUCT_UNIT(0, *up++, v_lo, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv67[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv71[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv67[rbp]
	mov	r8, QWORD PTR v_lo$[rbp]
	mov	rdx, QWORD PTR tv71[rbp]
	xor	ecx, ecx
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$1[rbp], al

; 111  : 
; 112  :         // 最下位から 2 番目のワードの減算をする。
; 113  :         c = _SUBTRUCT_UNIT(c, *up++, v_hi, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv76[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv76[rbp]
	mov	r8, QWORD PTR v_hi$[rbp]
	mov	rdx, QWORD PTR tv80[rbp]
	movzx	ecx, BYTE PTR c$1[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$1[rbp], al

; 114  :         u_count -= 2;

	mov	rax, QWORD PTR u_count$[rbp]
	sub	rax, 2
	mov	QWORD PTR u_count$[rbp], rax

; 115  :         w_count -= 2;

	mov	rax, QWORD PTR w_count$[rbp]
	sub	rax, 2
	mov	QWORD PTR w_count$[rbp], rax

; 116  : 
; 117  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 118  :         return (DoBorrow(c, up, u_count, wp, w_count));

	mov	rax, QWORD PTR w_count$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR u_count$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$1[rbp]
	call	DoBorrow
$LN3@Subtruct_X:
$LN1@Subtruct_X:

; 119  :     }
; 120  : }

	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
Subtruct_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT Subtruct_X_1W
_TEXT	SEGMENT
c$ = 4
tv66 = 216
tv70 = 224
up$ = 272
u_count$ = 280
v$ = 288
wp$ = 296
w_count$ = 304
Subtruct_X_1W PROC					; COMDAT

; 85   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 86   :     // 最下桁の減算を行う
; 87   :     char c = _SUBTRUCT_UNIT(0, *up++, v, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv70[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv66[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR tv70[rbp]
	xor	ecx, ecx
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 88   :     --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 89   :     --w_count;

	mov	rax, QWORD PTR w_count$[rbp]
	dec	rax
	mov	QWORD PTR w_count$[rbp], rax

; 90   : 
; 91   :     // 残りの桁の繰上りを行い復帰する。
; 92   :     return (DoBorrow(c, up, u_count, wp, w_count));

	mov	rax, QWORD PTR w_count$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR u_count$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoBorrow

; 93   : }

	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
Subtruct_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT DoBorrow
_TEXT	SEGMENT
tv71 = 192
tv75 = 200
c$ = 240
up$ = 248
u_count$ = 256
wp$ = 264
w_count$ = 272
DoBorrow PROC						; COMDAT

; 39   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode
$LN2@DoBorrow:

; 40   :     // 桁借りを続く限り行う
; 41   :     for (;;)
; 42   :     {
; 43   :         if (u_count <= 0)

	cmp	QWORD PTR u_count$[rbp], 0
	ja	SHORT $LN7@DoBorrow

; 44   :         {
; 45   :             // x の最上位まで達してしまった場合
; 46   : 
; 47   :             if (c)

	movsx	eax, BYTE PTR c$[rbp]
	test	eax, eax
	je	SHORT $LN9@DoBorrow

; 48   :             {
; 49   :                 // かつそれでも桁借りを行う必要がある場合
; 50   : 
; 51   :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 52   :                 return (PMC_STATUS_INTERNAL_BORROW);

	mov	eax, -258				; fffffffffffffefeH
	jmp	$LN1@DoBorrow
$LN9@DoBorrow:

; 53   :             }
; 54   : 
; 55   :             // xの最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 56   : 
; 57   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DoBorrow

; 58   :         }

	jmp	$LN8@DoBorrow
$LN7@DoBorrow:

; 59   :         else if (c)

	movsx	eax, BYTE PTR c$[rbp]
	test	eax, eax
	je	$LN10@DoBorrow

; 60   :         {
; 61   :             // xの最上位に達しておらず、かつボローが立っている場合
; 62   : 
; 63   :             // 桁借りを継続する
; 64   :             c = _SUBTRUCT_UNIT(c, *up++, 0, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv71[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv75[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv71[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv75[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 65   :             --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 66   :             --w_count;

	mov	rax, QWORD PTR w_count$[rbp]
	dec	rax
	mov	QWORD PTR w_count$[rbp], rax

; 67   :         }

	jmp	SHORT $LN11@DoBorrow
$LN10@DoBorrow:
$LN5@DoBorrow:

; 68   :         else
; 69   :         {
; 70   :             // xの最上位に達しておらず、かつボローが立っていない場合
; 71   : 
; 72   :             // 桁借りを中断し、xの残りのデータをzにそのまま複写し、正常復帰する。
; 73   :             while (u_count > 0)

	cmp	QWORD PTR u_count$[rbp], 0
	jbe	SHORT $LN6@DoBorrow

; 74   :             {
; 75   :                 *wp++ = *up++;

	mov	rax, QWORD PTR wp$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax

; 76   :                 --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 77   :                 --w_count;

	mov	rax, QWORD PTR w_count$[rbp]
	dec	rax
	mov	QWORD PTR w_count$[rbp], rax

; 78   :             }

	jmp	SHORT $LN5@DoBorrow
$LN6@DoBorrow:

; 79   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DoBorrow
$LN11@DoBorrow:
$LN8@DoBorrow:

; 80   :         }
; 81   :     }

	jmp	$LN2@DoBorrow
$LN1@DoBorrow:

; 82   : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT _SUBTRUCT_2WORDS_SBB
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_SUBTRUCT_2WORDS_SBB PROC				; COMDAT

; 4462 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__89DB6AB9_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 4463 : #ifdef _MSC_VER
; 4464 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 4465 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 4466 : #elif defined(__GNUC__)
; 4467 : #ifdef _M_IX86
; 4468 :     __asm__ volatile (
; 4469 :         "addb\t$-1, %0\n\t"
; 4470 :         "movl\t(%1), %%ecx\n\t"
; 4471 :         "sbbl\t(%2), %%ecx\n\t"
; 4472 :         "movl\t%%ecx, (%3)\n\t"
; 4473 :         "movl\t4(%1), %%ecx\n\t"
; 4474 :         "sbbl\t4(%2), %%ecx\n\t"
; 4475 :         "movl\t%%ecx, 4(%3)\n\t"
; 4476 :         "setc\t%0"
; 4477 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4478 :         :
; 4479 :         : "cc", "memory", "%ecx"
; 4480 : );
; 4481 : #elif defined(_M_IX64)
; 4482 :     __asm__ volatile (
; 4483 :         "addb\t$-1, %0\n\t"
; 4484 :         "movq\t(%1), %%rcx\n\t"
; 4485 :         "sbbq\t(%2), %%rcx\n\t"
; 4486 :         "movq\t%%rcx, (%3)\n\t"
; 4487 :         "movq\t8(%1), %%rcx\n\t"
; 4488 :         "sbbq\t8(%2), %%rcx\n\t"
; 4489 :         "movq\t%%rcx, 8(%3)\n\t"
; 4490 :         "setc\t%0"
; 4491 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4492 :         :
; 4493 :         : "cc", "memory", "%rcx"
; 4494 : );
; 4495 : #else
; 4496 : #error unknown platform
; 4497 : #endif
; 4498 : #else
; 4499 : #error unknown compiler
; 4500 : #endif
; 4501 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 4502 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_SUBTRUCT_2WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT _SUBTRUCT_4WORDS_SBB
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_SUBTRUCT_4WORDS_SBB PROC				; COMDAT

; 4048 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__89DB6AB9_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 4049 : #ifdef _MSC_VER
; 4050 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 4051 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 4052 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 4053 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 4054 : #elif defined(__GNUC__)
; 4055 : #ifdef _M_IX86
; 4056 :     __asm__ volatile (
; 4057 :         "addb\t$-1, %0\n\t"
; 4058 :         "movl\t(%1), %%ecx\n\t"
; 4059 :         "sbbl\t(%2), %%ecx\n\t"
; 4060 :         "movl\t%%ecx, (%3)\n\t"
; 4061 :         "movl\t4(%1), %%ecx\n\t"
; 4062 :         "sbbl\t4(%2), %%ecx\n\t"
; 4063 :         "movl\t%%ecx, 4(%3)\n\t"
; 4064 :         "movl\t8(%1), %%ecx\n\t"
; 4065 :         "sbbl\t8(%2), %%ecx\n\t"
; 4066 :         "movl\t%%ecx, 8(%3)\n\t"
; 4067 :         "movl\t12(%1), %%ecx\n\t"
; 4068 :         "sbbl\t12(%2), %%ecx\n\t"
; 4069 :         "movl\t%%ecx, 12(%3)\n\t"
; 4070 :         "setc\t%0"
; 4071 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4072 :         :
; 4073 :         : "cc", "memory", "%ecx"
; 4074 : );
; 4075 : #elif defined(_M_IX64)
; 4076 :     __asm__ volatile (
; 4077 :         "addb\t$-1, %0\n\t"
; 4078 :         "movq\t(%1), %%rcx\n\t"
; 4079 :         "sbbq\t(%2), %%rcx\n\t"
; 4080 :         "movq\t%%rcx, (%3)\n\t"
; 4081 :         "movq\t8(%1), %%rcx\n\t"
; 4082 :         "sbbq\t8(%2), %%rcx\n\t"
; 4083 :         "movq\t%%rcx, 8(%3)\n\t"
; 4084 :         "movq\t16(%1), %%rcx\n\t"
; 4085 :         "sbbq\t16(%2), %%rcx\n\t"
; 4086 :         "movq\t%%rcx, 16(%3)\n\t"
; 4087 :         "movq\t24(%1), %%rcx\n\t"
; 4088 :         "sbbq\t24(%2), %%rcx\n\t"
; 4089 :         "movq\t%%rcx, 24(%3)\n\t"
; 4090 :         "setc\t%0"
; 4091 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4092 :         :
; 4093 :         : "cc", "memory", "%rcx"
; 4094 : );
; 4095 : #else
; 4096 : #error unknown platform
; 4097 : #endif
; 4098 : #else
; 4099 : #error unknown compiler
; 4100 : #endif
; 4101 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 4102 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_SUBTRUCT_4WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT _SUBTRUCT_8WORDS_SBB
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_SUBTRUCT_8WORDS_SBB PROC				; COMDAT

; 3452 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__89DB6AB9_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 3453 : #ifdef _MSC_VER
; 3454 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 3455 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 3456 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 3457 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 3458 :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 3459 :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 3460 :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 3461 :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 3462 : #elif defined(__GNUC__)
; 3463 : #ifdef _M_IX86
; 3464 :     __asm__ volatile (
; 3465 :         "addb\t$-1, %0\n\t"
; 3466 :         "movl\t(%1), %%ecx\n\t"
; 3467 :         "sbbl\t(%2), %%ecx\n\t"
; 3468 :         "movl\t%%ecx, (%3)\n\t"
; 3469 :         "movl\t4(%1), %%ecx\n\t"
; 3470 :         "sbbl\t4(%2), %%ecx\n\t"
; 3471 :         "movl\t%%ecx, 4(%3)\n\t"
; 3472 :         "movl\t8(%1), %%ecx\n\t"
; 3473 :         "sbbl\t8(%2), %%ecx\n\t"
; 3474 :         "movl\t%%ecx, 8(%3)\n\t"
; 3475 :         "movl\t12(%1), %%ecx\n\t"
; 3476 :         "sbbl\t12(%2), %%ecx\n\t"
; 3477 :         "movl\t%%ecx, 12(%3)\n\t"
; 3478 :         "movl\t16(%1), %%ecx\n\t"
; 3479 :         "sbbl\t16(%2), %%ecx\n\t"
; 3480 :         "movl\t%%ecx, 16(%3)\n\t"
; 3481 :         "movl\t20(%1), %%ecx\n\t"
; 3482 :         "sbbl\t20(%2), %%ecx\n\t"
; 3483 :         "movl\t%%ecx, 20(%3)\n\t"
; 3484 :         "movl\t24(%1), %%ecx\n\t"
; 3485 :         "sbbl\t24(%2), %%ecx\n\t"
; 3486 :         "movl\t%%ecx, 24(%3)\n\t"
; 3487 :         "movl\t28(%1), %%ecx\n\t"
; 3488 :         "sbbl\t28(%2), %%ecx\n\t"
; 3489 :         "movl\t%%ecx, 28(%3)\n\t"
; 3490 :         "setc\t%0"
; 3491 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3492 :         :
; 3493 :         : "cc", "memory", "%ecx"
; 3494 : );
; 3495 : #elif defined(_M_IX64)
; 3496 :     __asm__ volatile (
; 3497 :         "addb\t$-1, %0\n\t"
; 3498 :         "movq\t(%1), %%rcx\n\t"
; 3499 :         "sbbq\t(%2), %%rcx\n\t"
; 3500 :         "movq\t%%rcx, (%3)\n\t"
; 3501 :         "movq\t8(%1), %%rcx\n\t"
; 3502 :         "sbbq\t8(%2), %%rcx\n\t"
; 3503 :         "movq\t%%rcx, 8(%3)\n\t"
; 3504 :         "movq\t16(%1), %%rcx\n\t"
; 3505 :         "sbbq\t16(%2), %%rcx\n\t"
; 3506 :         "movq\t%%rcx, 16(%3)\n\t"
; 3507 :         "movq\t24(%1), %%rcx\n\t"
; 3508 :         "sbbq\t24(%2), %%rcx\n\t"
; 3509 :         "movq\t%%rcx, 24(%3)\n\t"
; 3510 :         "movq\t32(%1), %%rcx\n\t"
; 3511 :         "sbbq\t32(%2), %%rcx\n\t"
; 3512 :         "movq\t%%rcx, 32(%3)\n\t"
; 3513 :         "movq\t40(%1), %%rcx\n\t"
; 3514 :         "sbbq\t40(%2), %%rcx\n\t"
; 3515 :         "movq\t%%rcx, 40(%3)\n\t"
; 3516 :         "movq\t48(%1), %%rcx\n\t"
; 3517 :         "sbbq\t48(%2), %%rcx\n\t"
; 3518 :         "movq\t%%rcx, 48(%3)\n\t"
; 3519 :         "movq\t56(%1), %%rcx\n\t"
; 3520 :         "sbbq\t56(%2), %%rcx\n\t"
; 3521 :         "movq\t%%rcx, 56(%3)\n\t"
; 3522 :         "setc\t%0"
; 3523 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3524 :         :
; 3525 :         : "cc", "memory", "%rcx"
; 3526 : );
; 3527 : #else
; 3528 : #error unknown platform
; 3529 : #endif
; 3530 : #else
; 3531 : #error unknown compiler
; 3532 : #endif
; 3533 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 3534 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_SUBTRUCT_8WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT _SUBTRUCT_16WORDS_SBB
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_SUBTRUCT_16WORDS_SBB PROC				; COMDAT

; 2492 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__89DB6AB9_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 2493 : #ifdef _MSC_VER
; 2494 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2495 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2496 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2497 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2498 :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2499 :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2500 :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2501 :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2502 :     c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	edx, 8
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2503 :     c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	edx, 8
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2504 :     c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	edx, 8
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2505 :     c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	edx, 8
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2506 :     c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	edx, 8
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2507 :     c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	edx, 8
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2508 :     c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	edx, 8
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2509 :     c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	edx, 8
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 2510 : #elif defined(__GNUC__)
; 2511 : #ifdef _M_IX86
; 2512 :     __asm__ volatile (
; 2513 :         "addb\t$-1, %0\n\t"
; 2514 :         "movl\t(%1), %%ecx\n\t"
; 2515 :         "sbbl\t(%2), %%ecx\n\t"
; 2516 :         "movl\t%%ecx, (%3)\n\t"
; 2517 :         "movl\t4(%1), %%ecx\n\t"
; 2518 :         "sbbl\t4(%2), %%ecx\n\t"
; 2519 :         "movl\t%%ecx, 4(%3)\n\t"
; 2520 :         "movl\t8(%1), %%ecx\n\t"
; 2521 :         "sbbl\t8(%2), %%ecx\n\t"
; 2522 :         "movl\t%%ecx, 8(%3)\n\t"
; 2523 :         "movl\t12(%1), %%ecx\n\t"
; 2524 :         "sbbl\t12(%2), %%ecx\n\t"
; 2525 :         "movl\t%%ecx, 12(%3)\n\t"
; 2526 :         "movl\t16(%1), %%ecx\n\t"
; 2527 :         "sbbl\t16(%2), %%ecx\n\t"
; 2528 :         "movl\t%%ecx, 16(%3)\n\t"
; 2529 :         "movl\t20(%1), %%ecx\n\t"
; 2530 :         "sbbl\t20(%2), %%ecx\n\t"
; 2531 :         "movl\t%%ecx, 20(%3)\n\t"
; 2532 :         "movl\t24(%1), %%ecx\n\t"
; 2533 :         "sbbl\t24(%2), %%ecx\n\t"
; 2534 :         "movl\t%%ecx, 24(%3)\n\t"
; 2535 :         "movl\t28(%1), %%ecx\n\t"
; 2536 :         "sbbl\t28(%2), %%ecx\n\t"
; 2537 :         "movl\t%%ecx, 28(%3)\n\t"
; 2538 :         "movl\t32(%1), %%ecx\n\t"
; 2539 :         "sbbl\t32(%2), %%ecx\n\t"
; 2540 :         "movl\t%%ecx, 32(%3)\n\t"
; 2541 :         "movl\t36(%1), %%ecx\n\t"
; 2542 :         "sbbl\t36(%2), %%ecx\n\t"
; 2543 :         "movl\t%%ecx, 36(%3)\n\t"
; 2544 :         "movl\t40(%1), %%ecx\n\t"
; 2545 :         "sbbl\t40(%2), %%ecx\n\t"
; 2546 :         "movl\t%%ecx, 40(%3)\n\t"
; 2547 :         "movl\t44(%1), %%ecx\n\t"
; 2548 :         "sbbl\t44(%2), %%ecx\n\t"
; 2549 :         "movl\t%%ecx, 44(%3)\n\t"
; 2550 :         "movl\t48(%1), %%ecx\n\t"
; 2551 :         "sbbl\t48(%2), %%ecx\n\t"
; 2552 :         "movl\t%%ecx, 48(%3)\n\t"
; 2553 :         "movl\t52(%1), %%ecx\n\t"
; 2554 :         "sbbl\t52(%2), %%ecx\n\t"
; 2555 :         "movl\t%%ecx, 52(%3)\n\t"
; 2556 :         "movl\t56(%1), %%ecx\n\t"
; 2557 :         "sbbl\t56(%2), %%ecx\n\t"
; 2558 :         "movl\t%%ecx, 56(%3)\n\t"
; 2559 :         "movl\t60(%1), %%ecx\n\t"
; 2560 :         "sbbl\t60(%2), %%ecx\n\t"
; 2561 :         "movl\t%%ecx, 60(%3)\n\t"
; 2562 :         "setc\t%0"
; 2563 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2564 :         :
; 2565 :         : "cc", "memory", "%ecx"
; 2566 : );
; 2567 : #elif defined(_M_IX64)
; 2568 :     __asm__ volatile (
; 2569 :         "addb\t$-1, %0\n\t"
; 2570 :         "movq\t(%1), %%rcx\n\t"
; 2571 :         "sbbq\t(%2), %%rcx\n\t"
; 2572 :         "movq\t%%rcx, (%3)\n\t"
; 2573 :         "movq\t8(%1), %%rcx\n\t"
; 2574 :         "sbbq\t8(%2), %%rcx\n\t"
; 2575 :         "movq\t%%rcx, 8(%3)\n\t"
; 2576 :         "movq\t16(%1), %%rcx\n\t"
; 2577 :         "sbbq\t16(%2), %%rcx\n\t"
; 2578 :         "movq\t%%rcx, 16(%3)\n\t"
; 2579 :         "movq\t24(%1), %%rcx\n\t"
; 2580 :         "sbbq\t24(%2), %%rcx\n\t"
; 2581 :         "movq\t%%rcx, 24(%3)\n\t"
; 2582 :         "movq\t32(%1), %%rcx\n\t"
; 2583 :         "sbbq\t32(%2), %%rcx\n\t"
; 2584 :         "movq\t%%rcx, 32(%3)\n\t"
; 2585 :         "movq\t40(%1), %%rcx\n\t"
; 2586 :         "sbbq\t40(%2), %%rcx\n\t"
; 2587 :         "movq\t%%rcx, 40(%3)\n\t"
; 2588 :         "movq\t48(%1), %%rcx\n\t"
; 2589 :         "sbbq\t48(%2), %%rcx\n\t"
; 2590 :         "movq\t%%rcx, 48(%3)\n\t"
; 2591 :         "movq\t56(%1), %%rcx\n\t"
; 2592 :         "sbbq\t56(%2), %%rcx\n\t"
; 2593 :         "movq\t%%rcx, 56(%3)\n\t"
; 2594 :         "movq\t64(%1), %%rcx\n\t"
; 2595 :         "sbbq\t64(%2), %%rcx\n\t"
; 2596 :         "movq\t%%rcx, 64(%3)\n\t"
; 2597 :         "movq\t72(%1), %%rcx\n\t"
; 2598 :         "sbbq\t72(%2), %%rcx\n\t"
; 2599 :         "movq\t%%rcx, 72(%3)\n\t"
; 2600 :         "movq\t80(%1), %%rcx\n\t"
; 2601 :         "sbbq\t80(%2), %%rcx\n\t"
; 2602 :         "movq\t%%rcx, 80(%3)\n\t"
; 2603 :         "movq\t88(%1), %%rcx\n\t"
; 2604 :         "sbbq\t88(%2), %%rcx\n\t"
; 2605 :         "movq\t%%rcx, 88(%3)\n\t"
; 2606 :         "movq\t96(%1), %%rcx\n\t"
; 2607 :         "sbbq\t96(%2), %%rcx\n\t"
; 2608 :         "movq\t%%rcx, 96(%3)\n\t"
; 2609 :         "movq\t104(%1), %%rcx\n\t"
; 2610 :         "sbbq\t104(%2), %%rcx\n\t"
; 2611 :         "movq\t%%rcx, 104(%3)\n\t"
; 2612 :         "movq\t112(%1), %%rcx\n\t"
; 2613 :         "sbbq\t112(%2), %%rcx\n\t"
; 2614 :         "movq\t%%rcx, 112(%3)\n\t"
; 2615 :         "movq\t120(%1), %%rcx\n\t"
; 2616 :         "sbbq\t120(%2), %%rcx\n\t"
; 2617 :         "movq\t%%rcx, 120(%3)\n\t"
; 2618 :         "setc\t%0"
; 2619 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2620 :         :
; 2621 :         : "cc", "memory", "%rcx"
; 2622 : );
; 2623 : #else
; 2624 : #error unknown platform
; 2625 : #endif
; 2626 : #else
; 2627 : #error unknown compiler
; 2628 : #endif
; 2629 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 2630 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_SUBTRUCT_16WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT _SUBTRUCT_32WORDS_SBB
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_SUBTRUCT_32WORDS_SBB PROC				; COMDAT

; 804  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__89DB6AB9_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 805  : #ifdef _MSC_VER
; 806  :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 807  :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 808  :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 809  :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 810  :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 811  :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 812  :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 813  :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 814  :     c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	edx, 8
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 815  :     c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	edx, 8
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 816  :     c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	edx, 8
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 817  :     c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	edx, 8
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 818  :     c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	edx, 8
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 819  :     c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	edx, 8
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 820  :     c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	edx, 8
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 821  :     c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	edx, 8
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 822  :     c = _SUBTRUCT_UNIT(c, xp[16], yp[16], &zp[16]);

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	edx, 8
	imul	rdx, rdx, 16
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 823  :     c = _SUBTRUCT_UNIT(c, xp[17], yp[17], &zp[17]);

	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	edx, 8
	imul	rdx, rdx, 17
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 824  :     c = _SUBTRUCT_UNIT(c, xp[18], yp[18], &zp[18]);

	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	edx, 8
	imul	rdx, rdx, 18
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 825  :     c = _SUBTRUCT_UNIT(c, xp[19], yp[19], &zp[19]);

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	edx, 8
	imul	rdx, rdx, 19
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 826  :     c = _SUBTRUCT_UNIT(c, xp[20], yp[20], &zp[20]);

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	edx, 8
	imul	rdx, rdx, 20
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 827  :     c = _SUBTRUCT_UNIT(c, xp[21], yp[21], &zp[21]);

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	edx, 8
	imul	rdx, rdx, 21
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 828  :     c = _SUBTRUCT_UNIT(c, xp[22], yp[22], &zp[22]);

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	edx, 8
	imul	rdx, rdx, 22
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 829  :     c = _SUBTRUCT_UNIT(c, xp[23], yp[23], &zp[23]);

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	edx, 8
	imul	rdx, rdx, 23
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 830  :     c = _SUBTRUCT_UNIT(c, xp[24], yp[24], &zp[24]);

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	edx, 8
	imul	rdx, rdx, 24
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 831  :     c = _SUBTRUCT_UNIT(c, xp[25], yp[25], &zp[25]);

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	edx, 8
	imul	rdx, rdx, 25
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 832  :     c = _SUBTRUCT_UNIT(c, xp[26], yp[26], &zp[26]);

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	edx, 8
	imul	rdx, rdx, 26
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 833  :     c = _SUBTRUCT_UNIT(c, xp[27], yp[27], &zp[27]);

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	edx, 8
	imul	rdx, rdx, 27
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 834  :     c = _SUBTRUCT_UNIT(c, xp[28], yp[28], &zp[28]);

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	edx, 8
	imul	rdx, rdx, 28
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 835  :     c = _SUBTRUCT_UNIT(c, xp[29], yp[29], &zp[29]);

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	edx, 8
	imul	rdx, rdx, 29
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 836  :     c = _SUBTRUCT_UNIT(c, xp[30], yp[30], &zp[30]);

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	edx, 8
	imul	rdx, rdx, 30
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 837  :     c = _SUBTRUCT_UNIT(c, xp[31], yp[31], &zp[31]);

	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	edx, 8
	imul	rdx, rdx, 31
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al

; 838  : #elif defined(__GNUC__)
; 839  : #ifdef _M_IX86
; 840  :     __asm__ volatile (
; 841  :         "addb\t$-1, %0\n\t"
; 842  :         "movl\t(%1), %%ecx\n\t"
; 843  :         "sbbl\t(%2), %%ecx\n\t"
; 844  :         "movl\t%%ecx, (%3)\n\t"
; 845  :         "movl\t4(%1), %%ecx\n\t"
; 846  :         "sbbl\t4(%2), %%ecx\n\t"
; 847  :         "movl\t%%ecx, 4(%3)\n\t"
; 848  :         "movl\t8(%1), %%ecx\n\t"
; 849  :         "sbbl\t8(%2), %%ecx\n\t"
; 850  :         "movl\t%%ecx, 8(%3)\n\t"
; 851  :         "movl\t12(%1), %%ecx\n\t"
; 852  :         "sbbl\t12(%2), %%ecx\n\t"
; 853  :         "movl\t%%ecx, 12(%3)\n\t"
; 854  :         "movl\t16(%1), %%ecx\n\t"
; 855  :         "sbbl\t16(%2), %%ecx\n\t"
; 856  :         "movl\t%%ecx, 16(%3)\n\t"
; 857  :         "movl\t20(%1), %%ecx\n\t"
; 858  :         "sbbl\t20(%2), %%ecx\n\t"
; 859  :         "movl\t%%ecx, 20(%3)\n\t"
; 860  :         "movl\t24(%1), %%ecx\n\t"
; 861  :         "sbbl\t24(%2), %%ecx\n\t"
; 862  :         "movl\t%%ecx, 24(%3)\n\t"
; 863  :         "movl\t28(%1), %%ecx\n\t"
; 864  :         "sbbl\t28(%2), %%ecx\n\t"
; 865  :         "movl\t%%ecx, 28(%3)\n\t"
; 866  :         "movl\t32(%1), %%ecx\n\t"
; 867  :         "sbbl\t32(%2), %%ecx\n\t"
; 868  :         "movl\t%%ecx, 32(%3)\n\t"
; 869  :         "movl\t36(%1), %%ecx\n\t"
; 870  :         "sbbl\t36(%2), %%ecx\n\t"
; 871  :         "movl\t%%ecx, 36(%3)\n\t"
; 872  :         "movl\t40(%1), %%ecx\n\t"
; 873  :         "sbbl\t40(%2), %%ecx\n\t"
; 874  :         "movl\t%%ecx, 40(%3)\n\t"
; 875  :         "movl\t44(%1), %%ecx\n\t"
; 876  :         "sbbl\t44(%2), %%ecx\n\t"
; 877  :         "movl\t%%ecx, 44(%3)\n\t"
; 878  :         "movl\t48(%1), %%ecx\n\t"
; 879  :         "sbbl\t48(%2), %%ecx\n\t"
; 880  :         "movl\t%%ecx, 48(%3)\n\t"
; 881  :         "movl\t52(%1), %%ecx\n\t"
; 882  :         "sbbl\t52(%2), %%ecx\n\t"
; 883  :         "movl\t%%ecx, 52(%3)\n\t"
; 884  :         "movl\t56(%1), %%ecx\n\t"
; 885  :         "sbbl\t56(%2), %%ecx\n\t"
; 886  :         "movl\t%%ecx, 56(%3)\n\t"
; 887  :         "movl\t60(%1), %%ecx\n\t"
; 888  :         "sbbl\t60(%2), %%ecx\n\t"
; 889  :         "movl\t%%ecx, 60(%3)\n\t"
; 890  :         "movl\t64(%1), %%ecx\n\t"
; 891  :         "sbbl\t64(%2), %%ecx\n\t"
; 892  :         "movl\t%%ecx, 64(%3)\n\t"
; 893  :         "movl\t68(%1), %%ecx\n\t"
; 894  :         "sbbl\t68(%2), %%ecx\n\t"
; 895  :         "movl\t%%ecx, 68(%3)\n\t"
; 896  :         "movl\t72(%1), %%ecx\n\t"
; 897  :         "sbbl\t72(%2), %%ecx\n\t"
; 898  :         "movl\t%%ecx, 72(%3)\n\t"
; 899  :         "movl\t76(%1), %%ecx\n\t"
; 900  :         "sbbl\t76(%2), %%ecx\n\t"
; 901  :         "movl\t%%ecx, 76(%3)\n\t"
; 902  :         "movl\t80(%1), %%ecx\n\t"
; 903  :         "sbbl\t80(%2), %%ecx\n\t"
; 904  :         "movl\t%%ecx, 80(%3)\n\t"
; 905  :         "movl\t84(%1), %%ecx\n\t"
; 906  :         "sbbl\t84(%2), %%ecx\n\t"
; 907  :         "movl\t%%ecx, 84(%3)\n\t"
; 908  :         "movl\t88(%1), %%ecx\n\t"
; 909  :         "sbbl\t88(%2), %%ecx\n\t"
; 910  :         "movl\t%%ecx, 88(%3)\n\t"
; 911  :         "movl\t92(%1), %%ecx\n\t"
; 912  :         "sbbl\t92(%2), %%ecx\n\t"
; 913  :         "movl\t%%ecx, 92(%3)\n\t"
; 914  :         "movl\t96(%1), %%ecx\n\t"
; 915  :         "sbbl\t96(%2), %%ecx\n\t"
; 916  :         "movl\t%%ecx, 96(%3)\n\t"
; 917  :         "movl\t100(%1), %%ecx\n\t"
; 918  :         "sbbl\t100(%2), %%ecx\n\t"
; 919  :         "movl\t%%ecx, 100(%3)\n\t"
; 920  :         "movl\t104(%1), %%ecx\n\t"
; 921  :         "sbbl\t104(%2), %%ecx\n\t"
; 922  :         "movl\t%%ecx, 104(%3)\n\t"
; 923  :         "movl\t108(%1), %%ecx\n\t"
; 924  :         "sbbl\t108(%2), %%ecx\n\t"
; 925  :         "movl\t%%ecx, 108(%3)\n\t"
; 926  :         "movl\t112(%1), %%ecx\n\t"
; 927  :         "sbbl\t112(%2), %%ecx\n\t"
; 928  :         "movl\t%%ecx, 112(%3)\n\t"
; 929  :         "movl\t116(%1), %%ecx\n\t"
; 930  :         "sbbl\t116(%2), %%ecx\n\t"
; 931  :         "movl\t%%ecx, 116(%3)\n\t"
; 932  :         "movl\t120(%1), %%ecx\n\t"
; 933  :         "sbbl\t120(%2), %%ecx\n\t"
; 934  :         "movl\t%%ecx, 120(%3)\n\t"
; 935  :         "movl\t124(%1), %%ecx\n\t"
; 936  :         "sbbl\t124(%2), %%ecx\n\t"
; 937  :         "movl\t%%ecx, 124(%3)\n\t"
; 938  :         "setc\t%0"
; 939  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 940  :         :
; 941  :         : "cc", "memory", "%ecx"
; 942  : );
; 943  : #elif defined(_M_IX64)
; 944  :     __asm__ volatile (
; 945  :         "addb\t$-1, %0\n\t"
; 946  :         "movq\t(%1), %%rcx\n\t"
; 947  :         "sbbq\t(%2), %%rcx\n\t"
; 948  :         "movq\t%%rcx, (%3)\n\t"
; 949  :         "movq\t8(%1), %%rcx\n\t"
; 950  :         "sbbq\t8(%2), %%rcx\n\t"
; 951  :         "movq\t%%rcx, 8(%3)\n\t"
; 952  :         "movq\t16(%1), %%rcx\n\t"
; 953  :         "sbbq\t16(%2), %%rcx\n\t"
; 954  :         "movq\t%%rcx, 16(%3)\n\t"
; 955  :         "movq\t24(%1), %%rcx\n\t"
; 956  :         "sbbq\t24(%2), %%rcx\n\t"
; 957  :         "movq\t%%rcx, 24(%3)\n\t"
; 958  :         "movq\t32(%1), %%rcx\n\t"
; 959  :         "sbbq\t32(%2), %%rcx\n\t"
; 960  :         "movq\t%%rcx, 32(%3)\n\t"
; 961  :         "movq\t40(%1), %%rcx\n\t"
; 962  :         "sbbq\t40(%2), %%rcx\n\t"
; 963  :         "movq\t%%rcx, 40(%3)\n\t"
; 964  :         "movq\t48(%1), %%rcx\n\t"
; 965  :         "sbbq\t48(%2), %%rcx\n\t"
; 966  :         "movq\t%%rcx, 48(%3)\n\t"
; 967  :         "movq\t56(%1), %%rcx\n\t"
; 968  :         "sbbq\t56(%2), %%rcx\n\t"
; 969  :         "movq\t%%rcx, 56(%3)\n\t"
; 970  :         "movq\t64(%1), %%rcx\n\t"
; 971  :         "sbbq\t64(%2), %%rcx\n\t"
; 972  :         "movq\t%%rcx, 64(%3)\n\t"
; 973  :         "movq\t72(%1), %%rcx\n\t"
; 974  :         "sbbq\t72(%2), %%rcx\n\t"
; 975  :         "movq\t%%rcx, 72(%3)\n\t"
; 976  :         "movq\t80(%1), %%rcx\n\t"
; 977  :         "sbbq\t80(%2), %%rcx\n\t"
; 978  :         "movq\t%%rcx, 80(%3)\n\t"
; 979  :         "movq\t88(%1), %%rcx\n\t"
; 980  :         "sbbq\t88(%2), %%rcx\n\t"
; 981  :         "movq\t%%rcx, 88(%3)\n\t"
; 982  :         "movq\t96(%1), %%rcx\n\t"
; 983  :         "sbbq\t96(%2), %%rcx\n\t"
; 984  :         "movq\t%%rcx, 96(%3)\n\t"
; 985  :         "movq\t104(%1), %%rcx\n\t"
; 986  :         "sbbq\t104(%2), %%rcx\n\t"
; 987  :         "movq\t%%rcx, 104(%3)\n\t"
; 988  :         "movq\t112(%1), %%rcx\n\t"
; 989  :         "sbbq\t112(%2), %%rcx\n\t"
; 990  :         "movq\t%%rcx, 112(%3)\n\t"
; 991  :         "movq\t120(%1), %%rcx\n\t"
; 992  :         "sbbq\t120(%2), %%rcx\n\t"
; 993  :         "movq\t%%rcx, 120(%3)\n\t"
; 994  :         "movq\t128(%1), %%rcx\n\t"
; 995  :         "sbbq\t128(%2), %%rcx\n\t"
; 996  :         "movq\t%%rcx, 128(%3)\n\t"
; 997  :         "movq\t136(%1), %%rcx\n\t"
; 998  :         "sbbq\t136(%2), %%rcx\n\t"
; 999  :         "movq\t%%rcx, 136(%3)\n\t"
; 1000 :         "movq\t144(%1), %%rcx\n\t"
; 1001 :         "sbbq\t144(%2), %%rcx\n\t"
; 1002 :         "movq\t%%rcx, 144(%3)\n\t"
; 1003 :         "movq\t152(%1), %%rcx\n\t"
; 1004 :         "sbbq\t152(%2), %%rcx\n\t"
; 1005 :         "movq\t%%rcx, 152(%3)\n\t"
; 1006 :         "movq\t160(%1), %%rcx\n\t"
; 1007 :         "sbbq\t160(%2), %%rcx\n\t"
; 1008 :         "movq\t%%rcx, 160(%3)\n\t"
; 1009 :         "movq\t168(%1), %%rcx\n\t"
; 1010 :         "sbbq\t168(%2), %%rcx\n\t"
; 1011 :         "movq\t%%rcx, 168(%3)\n\t"
; 1012 :         "movq\t176(%1), %%rcx\n\t"
; 1013 :         "sbbq\t176(%2), %%rcx\n\t"
; 1014 :         "movq\t%%rcx, 176(%3)\n\t"
; 1015 :         "movq\t184(%1), %%rcx\n\t"
; 1016 :         "sbbq\t184(%2), %%rcx\n\t"
; 1017 :         "movq\t%%rcx, 184(%3)\n\t"
; 1018 :         "movq\t192(%1), %%rcx\n\t"
; 1019 :         "sbbq\t192(%2), %%rcx\n\t"
; 1020 :         "movq\t%%rcx, 192(%3)\n\t"
; 1021 :         "movq\t200(%1), %%rcx\n\t"
; 1022 :         "sbbq\t200(%2), %%rcx\n\t"
; 1023 :         "movq\t%%rcx, 200(%3)\n\t"
; 1024 :         "movq\t208(%1), %%rcx\n\t"
; 1025 :         "sbbq\t208(%2), %%rcx\n\t"
; 1026 :         "movq\t%%rcx, 208(%3)\n\t"
; 1027 :         "movq\t216(%1), %%rcx\n\t"
; 1028 :         "sbbq\t216(%2), %%rcx\n\t"
; 1029 :         "movq\t%%rcx, 216(%3)\n\t"
; 1030 :         "movq\t224(%1), %%rcx\n\t"
; 1031 :         "sbbq\t224(%2), %%rcx\n\t"
; 1032 :         "movq\t%%rcx, 224(%3)\n\t"
; 1033 :         "movq\t232(%1), %%rcx\n\t"
; 1034 :         "sbbq\t232(%2), %%rcx\n\t"
; 1035 :         "movq\t%%rcx, 232(%3)\n\t"
; 1036 :         "movq\t240(%1), %%rcx\n\t"
; 1037 :         "sbbq\t240(%2), %%rcx\n\t"
; 1038 :         "movq\t%%rcx, 240(%3)\n\t"
; 1039 :         "movq\t248(%1), %%rcx\n\t"
; 1040 :         "sbbq\t248(%2), %%rcx\n\t"
; 1041 :         "movq\t%%rcx, 248(%3)\n\t"
; 1042 :         "setc\t%0"
; 1043 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1044 :         :
; 1045 :         : "cc", "memory", "%rcx"
; 1046 : );
; 1047 : #else
; 1048 : #error unknown platform
; 1049 : #endif
; 1050 : #else
; 1051 : #error unknown compiler
; 1052 : #endif
; 1053 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 1054 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_SUBTRUCT_32WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 915  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 916  :     if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 917  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 918  : #ifdef _M_IX86
; 919  :     _UINT32_T pos;
; 920  : #ifdef _MSC_VER
; 921  :     _BitScanReverse(&pos, x);
; 922  : #elif defined(__GNUC__)
; 923  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 924  : #else
; 925  : #error unknown compiler
; 926  : #endif
; 927  : #elif defined(_M_X64)
; 928  : #ifdef _MSC_VER
; 929  :     _UINT32_T pos;
; 930  :     _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 931  : #elif defined(__GNUC__)
; 932  :     _UINT64_T pos;
; 933  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 934  : #else
; 935  : #error unknown compiler
; 936  : #endif
; 937  : #else
; 938  : #error unknown platform
; 939  : #endif
; 940  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 941  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 882  : {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 883  :     if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 884  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 885  :     _UINT32_T pos;
; 886  : #ifdef _MSC_VER
; 887  :     _BitScanReverse(&pos, x);

	mov	eax, DWORD PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 888  : #elif defined(__GNUC__)
; 889  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 890  : #else
; 891  : #error unknown compiler
; 892  : #endif
; 893  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 31
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 894  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _SUBTRUCT_UNIT
_TEXT	SEGMENT
borrow$ = 224
u$ = 232
v$ = 240
w$ = 248
_SUBTRUCT_UNIT PROC					; COMDAT

; 555  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 556  : #ifdef _M_IX86
; 557  :     return (_subborrow_u32(borrow, u, v, w));
; 558  : #elif defined(_M_X64)
; 559  :     return (_subborrow_u64(borrow, u, v, w));

	mov	rax, QWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR borrow$[rbp]
	add	cl, -1
	sbb	rax, QWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx], rax
	movzx	eax, cl

; 560  : #else
; 561  : #error unknown platform
; 562  : #endif
; 563  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_SUBTRUCT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 468  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 469  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, QWORD PTR value$[rbp]
	shr	rax, 32					; 00000020H
	mov	rcx, QWORD PTR result_high$[rbp]
	mov	DWORD PTR [rcx], eax

; 470  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR value$[rbp]

; 471  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 224
value_low$ = 232
_FROMWORDTODWORD PROC					; COMDAT

; 463  : {

	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__4522B509_pmc_internal@h
	call	__CheckForDebuggerJustMyCode

; 464  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR value_high$[rbp]
	shl	rax, 32					; 00000020H
	mov	ecx, DWORD PTR value_low$[rbp]
	or	rax, rcx

; 465  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT PMC_Subtruct_X_X
_TEXT	SEGMENT
nx$ = 8
ny$ = 40
result$ = 68
nz$ = 104
x_bit_count$5 = 136
y_bit_count$6 = 168
z_bit_count$7 = 200
nz_light_check_code$8 = 232
tv145 = 436
x$ = 480
y$ = 488
o$ = 496
PMC_Subtruct_X_X PROC					; COMDAT

; 664  : {

$LN22:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+536]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 665  :     if (x == NULL)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@PMC_Subtru

; 666  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 667  :     if (y == NULL)

	cmp	QWORD PTR y$[rbp], 0
	jne	SHORT $LN3@PMC_Subtru

; 668  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 669  :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN4@PMC_Subtru

; 670  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 671  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR nx$[rbp], rax

; 672  :     NUMBER_HEADER* ny = (NUMBER_HEADER*)y;

	mov	rax, QWORD PTR y$[rbp]
	mov	QWORD PTR ny$[rbp], rax

; 673  :     PMC_STATUS_CODE result;
; 674  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nx$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Subtru

; 675  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 676  :     if ((result = CheckNumber(ny)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR ny$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Subtru

; 677  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 678  :     NUMBER_HEADER* nz;
; 679  :     if (nx->IS_ZERO)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_Subtru

; 680  :     {
; 681  :         if (ny->IS_ZERO)

	mov	rax, QWORD PTR ny$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@PMC_Subtru

; 682  :         {
; 683  :             // y が 0 である場合
; 684  : 
; 685  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 686  :             *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 687  :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 688  :         else
; 689  :         {
; 690  :             // y が 0 ではない場合
; 691  : 
; 692  :             // 演算結果は負となってしまうのでエラーを返す。
; 693  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 694  :         }
; 695  :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 696  :     else
; 697  :     {
; 698  :         // x が 0 ではない場合
; 699  : 
; 700  :         if (ny->IS_ZERO)

	mov	rax, QWORD PTR ny$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN11@PMC_Subtru

; 701  :         {
; 702  :             // y が 0 である場合
; 703  : 
; 704  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 705  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR nx$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_Subtru

; 706  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 707  :         }

	jmp	$LN12@PMC_Subtru
$LN11@PMC_Subtru:

; 708  :         else
; 709  :         {
; 710  :             // x と y がともに 0 ではない場合
; 711  : 
; 712  :             // x と y の差を計算する
; 713  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nx$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR x_bit_count$5[rbp], rax

; 714  :             __UNIT_TYPE y_bit_count = ny->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR ny$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR y_bit_count$6[rbp], rax

; 715  :             if (x_bit_count < y_bit_count)

	mov	rax, QWORD PTR y_bit_count$6[rbp]
	cmp	QWORD PTR x_bit_count$5[rbp], rax
	jae	SHORT $LN14@PMC_Subtru

; 716  :             {
; 717  :                 // 演算結果は負となってしまうのでエラーを返す。
; 718  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 719  :             }
; 720  :             __UNIT_TYPE z_bit_count = x_bit_count;

	mov	rax, QWORD PTR x_bit_count$5[rbp]
	mov	QWORD PTR z_bit_count$7[rbp], rax

; 721  :             __UNIT_TYPE nz_light_check_code;
; 722  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$8[rbp]
	mov	rdx, QWORD PTR z_bit_count$7[rbp]
	lea	rcx, QWORD PTR nz$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_Subtru

; 723  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 724  :             if ((result = Subtruct_Imp(nx->BLOCK, nx->UNIT_WORD_COUNT, ny->BLOCK, ny->UNIT_WORD_COUNT, nz->BLOCK, nz->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR nz$[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR nz$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR ny$[rbp]
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR ny$[rbp]
	mov	r8, QWORD PTR [rax+56]
	mov	rax, QWORD PTR nx$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nx$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Subtruct_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Subtru

; 725  :             {
; 726  :                 DeallocateNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	DeallocateNumber

; 727  :                 return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR result$[rbp], -258		; fffffffffffffefeH
	jne	SHORT $LN20@PMC_Subtru
	mov	DWORD PTR tv145[rbp], -2
	jmp	SHORT $LN21@PMC_Subtru
$LN20@PMC_Subtru:
	mov	eax, DWORD PTR result$[rbp]
	mov	DWORD PTR tv145[rbp], eax
$LN21@PMC_Subtru:
	mov	eax, DWORD PTR tv145[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 728  :             }
; 729  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nz_light_check_code$8[rbp]
	mov	rax, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN17@PMC_Subtru

; 730  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 731  :             CommitNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	CommitNumber
$LN12@PMC_Subtru:

; 732  :         }
; 733  :         *o = nz;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR nz$[rbp]
	mov	QWORD PTR [rax], rcx
$LN8@PMC_Subtru:

; 734  :     }
; 735  : #ifdef _DEBUG
; 736  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_Subtru

; 737  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 738  : #endif
; 739  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 740  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_Subtruct_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
PMC_Subtruct_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT PMC_Subtruct_X_L
_TEXT	SEGMENT
nx$ = 8
result$ = 36
nz$ = 72
x_bit_count$8 = 104
y_hi$9 = 132
y_lo$10 = 164
y_bit_count$11 = 200
z_bit_count$12 = 232
nz_light_check_code$13 = 264
y_bit_count$14 = 296
z_bit_count$15 = 328
nz_light_check_code$16 = 360
x_bit_count$17 = 392
y_bit_count$18 = 424
z_bit_count$19 = 456
nz_light_check_code$20 = 488
tv204 = 692
tv174 = 692
tv142 = 692
x$ = 736
y$ = 744
o$ = 752
PMC_Subtruct_X_L PROC					; COMDAT

; 523  : {

$LN38:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 760				; 000002f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+792]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 524  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(y) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 525  :     {
; 526  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 527  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 528  :     }
; 529  :     if (x == NULL)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN3@PMC_Subtru

; 530  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 531  :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN4@PMC_Subtru

; 532  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 533  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR nx$[rbp], rax

; 534  :     PMC_STATUS_CODE result;
; 535  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nx$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Subtru

; 536  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 537  :     NUMBER_HEADER* nz;
; 538  :     if (nx->IS_ZERO)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_Subtru

; 539  :     {
; 540  :         // x が 0 である場合
; 541  : 
; 542  :         if (y == 0)

	cmp	QWORD PTR y$[rbp], 0
	jne	SHORT $LN8@PMC_Subtru

; 543  :         {
; 544  :             // y が 0 である場合
; 545  : 
; 546  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 547  :             *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 548  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 549  :         else
; 550  :         {
; 551  :             // y が 0 ではない場合
; 552  : 
; 553  :             // 演算結果は負となってしまうのでエラーを返す。
; 554  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 555  :         }
; 556  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 557  :     else
; 558  :     {
; 559  :         // x が 0 ではない場合
; 560  : 
; 561  :         if (y == 0)

	cmp	QWORD PTR y$[rbp], 0
	jne	SHORT $LN10@PMC_Subtru

; 562  :         {
; 563  :             // y が 0 である場合
; 564  : 
; 565  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 566  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR nx$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@PMC_Subtru

; 567  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN12@PMC_Subtru:

; 568  :         }

	jmp	$LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 569  :         else
; 570  :         {
; 571  :             // x と y がともに 0 ではない場合
; 572  : 
; 573  :             // x と y の差を計算する
; 574  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(y) * 8)

	xor	eax, eax
	test	eax, eax
	je	$LN13@PMC_Subtru

; 575  :             {
; 576  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 577  : 
; 578  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nx$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR x_bit_count$8[rbp], rax

; 579  :                 _UINT32_T y_hi;
; 580  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(y, &y_hi);

	lea	rdx, QWORD PTR y_hi$9[rbp]
	mov	rcx, QWORD PTR y$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR y_lo$10[rbp], eax

; 581  :                 if (y_hi == 0)

	cmp	DWORD PTR y_hi$9[rbp], 0
	jne	$LN15@PMC_Subtru

; 582  :                 {
; 583  :                     // y の値が 32bit で表現可能な場合
; 584  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);

	mov	ecx, DWORD PTR y_lo$10[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR y_bit_count$11[rbp], rax

; 585  :                     if (x_bit_count < y_bit_count)

	mov	rax, QWORD PTR y_bit_count$11[rbp]
	cmp	QWORD PTR x_bit_count$8[rbp], rax
	jae	SHORT $LN17@PMC_Subtru

; 586  :                     {
; 587  :                         // 演算結果は負となってしまうのでエラーを返す。
; 588  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 589  :                     }
; 590  :                     __UNIT_TYPE z_bit_count = x_bit_count;

	mov	rax, QWORD PTR x_bit_count$8[rbp]
	mov	QWORD PTR z_bit_count$12[rbp], rax

; 591  :                     __UNIT_TYPE nz_light_check_code;
; 592  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$13[rbp]
	mov	rdx, QWORD PTR z_bit_count$12[rbp]
	lea	rcx, QWORD PTR nz$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_Subtru

; 593  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 594  :                     if ((result = Subtruct_X_1W(nx->BLOCK, nx->UNIT_WORD_COUNT, y_lo, nz->BLOCK, nz->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR y_lo$10[rbp]
	mov	rcx, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR nz$[rbp]
	mov	r9, QWORD PTR [rcx+56]
	mov	r8d, eax
	mov	rax, QWORD PTR nx$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nx$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Subtruct_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN19@PMC_Subtru

; 595  :                     {
; 596  :                         DeallocateNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	DeallocateNumber

; 597  :                         return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR result$[rbp], -258		; fffffffffffffefeH
	jne	SHORT $LN32@PMC_Subtru
	mov	DWORD PTR tv142[rbp], -2
	jmp	SHORT $LN33@PMC_Subtru
$LN32@PMC_Subtru:
	mov	eax, DWORD PTR result$[rbp]
	mov	DWORD PTR tv142[rbp], eax
$LN33@PMC_Subtru:
	mov	eax, DWORD PTR tv142[rbp]
	jmp	$LN1@PMC_Subtru
$LN19@PMC_Subtru:

; 598  :                     }
; 599  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nz_light_check_code$13[rbp]
	mov	rax, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN20@PMC_Subtru

; 600  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN20@PMC_Subtru:

; 601  :                 }

	jmp	$LN16@PMC_Subtru
$LN15@PMC_Subtru:

; 602  :                 else
; 603  :                 {
; 604  :                     // y の値が 32bit では表現できない場合
; 605  :                     __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_32(y_hi);

	mov	ecx, DWORD PTR y_hi$9[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR y_bit_count$14[rbp], rax

; 606  :                     if (x_bit_count < y_bit_count)

	mov	rax, QWORD PTR y_bit_count$14[rbp]
	cmp	QWORD PTR x_bit_count$8[rbp], rax
	jae	SHORT $LN21@PMC_Subtru

; 607  :                     {
; 608  :                         // 演算結果は負となってしまうのでエラーを返す。
; 609  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 610  :                     }
; 611  :                     __UNIT_TYPE z_bit_count = x_bit_count;

	mov	rax, QWORD PTR x_bit_count$8[rbp]
	mov	QWORD PTR z_bit_count$15[rbp], rax

; 612  :                     __UNIT_TYPE nz_light_check_code;
; 613  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$16[rbp]
	mov	rdx, QWORD PTR z_bit_count$15[rbp]
	lea	rcx, QWORD PTR nz$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN22@PMC_Subtru

; 614  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN22@PMC_Subtru:

; 615  :                     if ((result = Subtruct_X_2W(nx->BLOCK, nx->UNIT_WORD_COUNT, y_hi, y_lo, nz->BLOCK, nz->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR y_lo$10[rbp]
	mov	ecx, DWORD PTR y_hi$9[rbp]
	mov	rdx, QWORD PTR nz$[rbp]
	mov	rdx, QWORD PTR [rdx+48]
	mov	QWORD PTR [rsp+40], rdx
	mov	rdx, QWORD PTR nz$[rbp]
	mov	rdx, QWORD PTR [rdx+56]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9d, eax
	mov	r8d, ecx
	mov	rax, QWORD PTR nx$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nx$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Subtruct_X_2W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN23@PMC_Subtru

; 616  :                     {
; 617  :                         DeallocateNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	DeallocateNumber

; 618  :                         return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR result$[rbp], -258		; fffffffffffffefeH
	jne	SHORT $LN34@PMC_Subtru
	mov	DWORD PTR tv174[rbp], -2
	jmp	SHORT $LN35@PMC_Subtru
$LN34@PMC_Subtru:
	mov	eax, DWORD PTR result$[rbp]
	mov	DWORD PTR tv174[rbp], eax
$LN35@PMC_Subtru:
	mov	eax, DWORD PTR tv174[rbp]
	jmp	$LN1@PMC_Subtru
$LN23@PMC_Subtru:

; 619  :                     }
; 620  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nz_light_check_code$16[rbp]
	mov	rax, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN24@PMC_Subtru

; 621  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN24@PMC_Subtru:
$LN16@PMC_Subtru:

; 622  :                 }
; 623  :             }

	jmp	$LN14@PMC_Subtru
$LN13@PMC_Subtru:

; 624  :             else
; 625  :             {
; 626  :                 // _UINT64_T が 1 ワードで表現できる場合
; 627  : 
; 628  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nx$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR x_bit_count$17[rbp], rax

; 629  :                 __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)y);

	mov	rcx, QWORD PTR y$[rbp]
	call	_LZCNT_ALT_UNIT
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR y_bit_count$18[rbp], rax

; 630  :                 if (x_bit_count < y_bit_count)

	mov	rax, QWORD PTR y_bit_count$18[rbp]
	cmp	QWORD PTR x_bit_count$17[rbp], rax
	jae	SHORT $LN25@PMC_Subtru

; 631  :                 {
; 632  :                     // 演算結果は負となってしまうのでエラーを返す。
; 633  :                     return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN25@PMC_Subtru:

; 634  :                 }
; 635  :                 __UNIT_TYPE z_bit_count = x_bit_count;

	mov	rax, QWORD PTR x_bit_count$17[rbp]
	mov	QWORD PTR z_bit_count$19[rbp], rax

; 636  :                 __UNIT_TYPE nz_light_check_code;
; 637  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$20[rbp]
	mov	rdx, QWORD PTR z_bit_count$19[rbp]
	lea	rcx, QWORD PTR nz$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN26@PMC_Subtru

; 638  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN26@PMC_Subtru:

; 639  :                 if ((result = Subtruct_X_1W(nx->BLOCK, nx->UNIT_WORD_COUNT, (__UNIT_TYPE)y, nz->BLOCK, nz->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR nz$[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR nz$[rbp]
	mov	r9, QWORD PTR [rax+56]
	mov	r8, QWORD PTR y$[rbp]
	mov	rax, QWORD PTR nx$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nx$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Subtruct_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN27@PMC_Subtru

; 640  :                 {
; 641  :                     DeallocateNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	DeallocateNumber

; 642  :                     return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR result$[rbp], -258		; fffffffffffffefeH
	jne	SHORT $LN36@PMC_Subtru
	mov	DWORD PTR tv204[rbp], -2
	jmp	SHORT $LN37@PMC_Subtru
$LN36@PMC_Subtru:
	mov	eax, DWORD PTR result$[rbp]
	mov	DWORD PTR tv204[rbp], eax
$LN37@PMC_Subtru:
	mov	eax, DWORD PTR tv204[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN27@PMC_Subtru:

; 643  :                 }
; 644  :                 if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nz_light_check_code$20[rbp]
	mov	rax, QWORD PTR nz$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN28@PMC_Subtru

; 645  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN28@PMC_Subtru:
$LN14@PMC_Subtru:

; 646  :             }
; 647  :             CommitNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	CommitNumber

; 648  :             if (nz->IS_ZERO)

	mov	rax, QWORD PTR nz$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN29@PMC_Subtru

; 649  :             {
; 650  :                 DeallocateNumber(nz);

	mov	rcx, QWORD PTR nz$[rbp]
	call	DeallocateNumber

; 651  :                 nz = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nz$[rbp], rax
$LN29@PMC_Subtru:
$LN11@PMC_Subtru:

; 652  :             }
; 653  :         }
; 654  :         *o = nz;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR nz$[rbp]
	mov	QWORD PTR [rax], rcx
$LN7@PMC_Subtru:

; 655  :     }
; 656  : #ifdef _DEBUG
; 657  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN30@PMC_Subtru

; 658  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN30@PMC_Subtru:

; 659  : #endif
; 660  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 661  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_Subtruct_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+712]
	pop	rdi
	pop	rbp
	ret	0
PMC_Subtruct_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT PMC_Subtruct_X_I
_TEXT	SEGMENT
nu$ = 8
result$ = 36
nw$ = 72
u_bit_count$5 = 104
v_bit_count$6 = 136
w_bit_count$7 = 168
w_light_check_code$8 = 200
tv137 = 404
u$ = 448
v$ = 456
w$ = 464
PMC_Subtruct_X_I PROC					; COMDAT

; 268  : {

$LN22:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 269  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 270  :     {
; 271  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 272  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 273  :     }
; 274  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Subtru

; 275  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 276  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Subtru

; 277  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 278  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 279  :     PMC_STATUS_CODE result;
; 280  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Subtru

; 281  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 282  :     NUMBER_HEADER* nw;
; 283  :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_Subtru

; 284  :     {
; 285  :         // u が 0 である場合
; 286  : 
; 287  :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN8@PMC_Subtru

; 288  :         {
; 289  :             // v が 0 である場合
; 290  : 
; 291  :             // u と v がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 292  :             *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 293  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 294  :         else
; 295  :         {
; 296  :             // v が 0 ではない場合
; 297  : 
; 298  :             // 演算結果は負となってしまうのでエラーを返す。
; 299  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 300  :         }
; 301  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 302  :     else
; 303  :     {
; 304  :         // u が 0 ではない場合
; 305  : 
; 306  :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN10@PMC_Subtru

; 307  :         {
; 308  :             // v が 0 である場合
; 309  : 
; 310  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 311  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@PMC_Subtru

; 312  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN12@PMC_Subtru:

; 313  :         }

	jmp	$LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 314  :         else
; 315  :         {
; 316  :             // u と v がともに 0 ではない場合
; 317  : 
; 318  :             // u と v の差を計算する
; 319  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR u_bit_count$5[rbp], rax

; 320  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR v$[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$6[rbp], rax

; 321  :             if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$6[rbp]
	cmp	QWORD PTR u_bit_count$5[rbp], rax
	jae	SHORT $LN13@PMC_Subtru

; 322  :             {
; 323  :                 // 演算結果は負となってしまうのでエラーを返す。
; 324  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 325  :             }
; 326  :             __UNIT_TYPE w_bit_count = u_bit_count;

	mov	rax, QWORD PTR u_bit_count$5[rbp]
	mov	QWORD PTR w_bit_count$7[rbp], rax

; 327  :             __UNIT_TYPE w_light_check_code;
; 328  :             if ((result = AllocateNumber(&nw, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$8[rbp]
	mov	rdx, QWORD PTR w_bit_count$7[rbp]
	lea	rcx, QWORD PTR nw$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Subtru

; 329  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 330  :             if ((result = Subtruct_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, v, nw->BLOCK, nw->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR nw$[rbp]
	mov	r9, QWORD PTR [rcx+56]
	mov	r8d, eax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Subtruct_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_Subtru

; 331  :             {
; 332  :                 DeallocateNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp]
	call	DeallocateNumber

; 333  :                 return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR result$[rbp], -258		; fffffffffffffefeH
	jne	SHORT $LN20@PMC_Subtru
	mov	DWORD PTR tv137[rbp], -2
	jmp	SHORT $LN21@PMC_Subtru
$LN20@PMC_Subtru:
	mov	eax, DWORD PTR result$[rbp]
	mov	DWORD PTR tv137[rbp], eax
$LN21@PMC_Subtru:
	mov	eax, DWORD PTR tv137[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 334  :             }
; 335  :             if ((result = CheckBlockLight(nw->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w_light_check_code$8[rbp]
	mov	rax, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Subtru

; 336  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 337  :             CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp]
	call	CommitNumber

; 338  :             if (nw->IS_ZERO)

	mov	rax, QWORD PTR nw$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN17@PMC_Subtru

; 339  :             {
; 340  :                 DeallocateNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp]
	call	DeallocateNumber

; 341  :                 nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax
$LN17@PMC_Subtru:
$LN11@PMC_Subtru:

; 342  :             }
; 343  :         }
; 344  :         *w = nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx
$LN7@PMC_Subtru:

; 345  :     }
; 346  : #ifdef _DEBUG
; 347  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_Subtru

; 348  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 349  : #endif
; 350  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 351  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_Subtruct_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
PMC_Subtruct_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT PMC_Subtruct_L_X
_TEXT	SEGMENT
nv$ = 8
result$ = 36
u_hi$8 = 68
u_lo$9 = 100
u_bit_count$10 = 136
v_bit_count$11 = 168
temp_w$12 = 200
borrow$13 = 228
u_bit_count$14 = 264
v_bit_count$15 = 296
temp_w_hi$16 = 328
temp_w_lo$17 = 360
borrow$18 = 388
u_bit_count$19 = 424
v_bit_count$20 = 456
temp_w$21 = 488
borrow$22 = 516
u$ = 960
v$ = 968
w$ = 976
PMC_Subtruct_L_X PROC					; COMDAT

; 354  : {

$LN31:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 968				; 000003c8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 242				; 000000f2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1000]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 355  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 356  :     {
; 357  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 358  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 359  :     }
; 360  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Subtru

; 361  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 362  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Subtru

; 363  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 364  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 365  :     PMC_STATUS_CODE result;
; 366  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Subtru

; 367  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 368  :     if (u == 0)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN6@PMC_Subtru

; 369  :     {
; 370  :         // u が 0 である場合
; 371  : 
; 372  :         if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@PMC_Subtru

; 373  :         {
; 374  :             // v が 0 である場合
; 375  : 
; 376  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 377  :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	QWORD PTR [rax], 0

; 378  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 379  :         else
; 380  :         {
; 381  :             // v が 0 ではない場合
; 382  : 
; 383  :             // 演算結果は負となってしまうのでエラーを返す。
; 384  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 385  :         }
; 386  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 387  :     else
; 388  :     {
; 389  :         // u が 0 ではない場合
; 390  : 
; 391  :         if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@PMC_Subtru

; 392  :         {
; 393  :             // v が 0 である場合
; 394  : 
; 395  :             // 演算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 396  :             *w = u;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	QWORD PTR [rax], rcx

; 397  :         }

	jmp	$LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 398  :         else
; 399  :         {
; 400  :             // u と v がともに 0 ではない場合
; 401  : 
; 402  :             // u と v の差を計算する
; 403  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	$LN12@PMC_Subtru

; 404  :             {
; 405  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 406  : 
; 407  :                 _UINT32_T u_hi;
; 408  :                 _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);

	lea	rdx, QWORD PTR u_hi$8[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR u_lo$9[rbp], eax

; 409  :                 if (u_hi == 0)

	cmp	DWORD PTR u_hi$8[rbp], 0
	jne	$LN14@PMC_Subtru

; 410  :                 {
; 411  :                     // u の値が 32bit で表現可能な場合
; 412  :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	mov	ecx, DWORD PTR u_lo$9[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_bit_count$10[rbp], rax

; 413  :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR v_bit_count$11[rbp], rax

; 414  :                     if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$11[rbp]
	cmp	QWORD PTR u_bit_count$10[rbp], rax
	jae	SHORT $LN16@PMC_Subtru

; 415  :                     {
; 416  :                         // 明らかに u < v である場合
; 417  : 
; 418  :                         // 演算結果は負となってしまうのでエラーを返す。
; 419  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru

; 420  :                     }

	jmp	SHORT $LN17@PMC_Subtru
$LN16@PMC_Subtru:

; 421  :                     else
; 422  :                     {
; 423  :                         // u のビット長が v のビット長以上である場合
; 424  : 
; 425  :                         // u が32bit 整数で表現できるので v も 32bit 整数で表現できる
; 426  : 
; 427  :                         __UNIT_TYPE temp_w;
; 428  :                         char borrow = _SUBTRUCT_UNIT(0, u_lo, nv->BLOCK[0], &temp_w);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR u_lo$9[rbp]
	lea	r9, QWORD PTR temp_w$12[rbp]
	mov	r8, QWORD PTR [rcx+rax]
	xor	ecx, ecx
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR borrow$13[rbp], al

; 429  :                         if (borrow)

	movsx	eax, BYTE PTR borrow$13[rbp]
	test	eax, eax
	je	SHORT $LN18@PMC_Subtru

; 430  :                         {
; 431  :                             // ボローが発生した場合は演算結果が負なのでエラーとする
; 432  :                             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru

; 433  :                         }

	jmp	SHORT $LN19@PMC_Subtru
$LN18@PMC_Subtru:

; 434  :                         else
; 435  :                         {
; 436  :                             *w = temp_w;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR temp_w$12[rbp]
	mov	QWORD PTR [rax], rcx
$LN19@PMC_Subtru:
$LN17@PMC_Subtru:

; 437  :                         }
; 438  :                     }
; 439  :                 }

	jmp	$LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 440  :                 else
; 441  :                 {
; 442  :                     // u の値が 32bit では表現できない場合
; 443  :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	mov	ecx, DWORD PTR u_hi$8[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_bit_count$14[rbp], rax

; 444  :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR v_bit_count$15[rbp], rax

; 445  :                     if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$15[rbp]
	cmp	QWORD PTR u_bit_count$14[rbp], rax
	jae	SHORT $LN20@PMC_Subtru

; 446  :                     {
; 447  :                         // 明らかに u < v である場合
; 448  : 
; 449  :                         // 演算結果は負となってしまうのでエラーを返す。
; 450  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru

; 451  :                     }

	jmp	$LN21@PMC_Subtru
$LN20@PMC_Subtru:

; 452  :                     else
; 453  :                     {
; 454  :                         // u のビット長が v のビット長以上である場合
; 455  : 
; 456  :                         // この時点では u は 33 ～ 64bit 整数であり、v は 1 ～ 64bit整数である
; 457  : 
; 458  :                         __UNIT_TYPE temp_w_hi;
; 459  :                         __UNIT_TYPE temp_w_lo;
; 460  :                         char borrow;
; 461  :                         borrow = _SUBTRUCT_UNIT(0, u_lo, nv->BLOCK[0], &temp_w_lo);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR u_lo$9[rbp]
	lea	r9, QWORD PTR temp_w_lo$17[rbp]
	mov	r8, QWORD PTR [rcx+rax]
	xor	ecx, ecx
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR borrow$18[rbp], al

; 462  :                         if (nv->UNIT_WORD_COUNT <= 1)

	mov	rax, QWORD PTR nv$[rbp]
	cmp	QWORD PTR [rax+8], 1
	ja	SHORT $LN22@PMC_Subtru

; 463  :                         {
; 464  :                             // v が 1 ワードで表現できる場合(1 ～ 32bit 整数)
; 465  :                             borrow = _SUBTRUCT_UNIT(borrow, u_hi, 0, &temp_w_hi);

	mov	eax, DWORD PTR u_hi$8[rbp]
	lea	r9, QWORD PTR temp_w_hi$16[rbp]
	xor	r8d, r8d
	mov	edx, eax
	movzx	ecx, BYTE PTR borrow$18[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR borrow$18[rbp], al

; 466  :                         }

	jmp	SHORT $LN23@PMC_Subtru
$LN22@PMC_Subtru:

; 467  :                         else
; 468  :                         {
; 469  :                             // v が 1 ワードで表現できない場合(33 ～ 64bit 整数)
; 470  :                             borrow = _SUBTRUCT_UNIT(borrow, u_hi, nv->BLOCK[1], &temp_w_hi);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR u_hi$8[rbp]
	lea	r9, QWORD PTR temp_w_hi$16[rbp]
	mov	r8, QWORD PTR [rcx+rax]
	movzx	ecx, BYTE PTR borrow$18[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR borrow$18[rbp], al
$LN23@PMC_Subtru:

; 471  :                         }
; 472  :                         if (borrow)

	movsx	eax, BYTE PTR borrow$18[rbp]
	test	eax, eax
	je	SHORT $LN24@PMC_Subtru

; 473  :                         {
; 474  :                             // ボローが発生した場合は演算結果が負なのでエラーとする
; 475  :                             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru

; 476  :                         }

	jmp	SHORT $LN25@PMC_Subtru
$LN24@PMC_Subtru:

; 477  :                         else
; 478  :                         {
; 479  :                             *w = _FROMWORDTODWORD((_UINT32_T)temp_w_hi, (_UINT32_T)temp_w_lo);

	mov	edx, DWORD PTR temp_w_lo$17[rbp]
	mov	ecx, DWORD PTR temp_w_hi$16[rbp]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rcx], rax
$LN25@PMC_Subtru:
$LN21@PMC_Subtru:
$LN15@PMC_Subtru:

; 480  :                         }
; 481  : 
; 482  :                     }
; 483  :                 }
; 484  :             }

	jmp	$LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 485  :             else
; 486  :             {
; 487  :                 // _UINT64_T が 1 ワードで表現できる場合
; 488  : 
; 489  :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);

	mov	rcx, QWORD PTR u$[rbp]
	call	_LZCNT_ALT_UNIT
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_bit_count$19[rbp], rax

; 490  :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR v_bit_count$20[rbp], rax

; 491  :                 if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$20[rbp]
	cmp	QWORD PTR u_bit_count$19[rbp], rax
	jae	SHORT $LN26@PMC_Subtru

; 492  :                 {
; 493  :                     // 明らかに u < v である場合
; 494  : 
; 495  :                     // 演算結果は負となってしまうのでエラーを返す。
; 496  :                     return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_Subtru

; 497  :                 }

	jmp	SHORT $LN27@PMC_Subtru
$LN26@PMC_Subtru:

; 498  :                 else
; 499  :                 {
; 500  :                     // u のビット長が v のビット長以上である場合
; 501  : 
; 502  :                     // u が 64bit 整数で表現できるので v も 64bit 整数で表現できる
; 503  : 
; 504  :                     __UNIT_TYPE temp_w;
; 505  :                     char borrow = _SUBTRUCT_UNIT(0, (__UNIT_TYPE)u, nv->BLOCK[0], &temp_w);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	lea	r9, QWORD PTR temp_w$21[rbp]
	mov	r8, QWORD PTR [rcx+rax]
	mov	rdx, QWORD PTR u$[rbp]
	xor	ecx, ecx
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR borrow$22[rbp], al

; 506  :                     if (borrow)

	movsx	eax, BYTE PTR borrow$22[rbp]
	test	eax, eax
	je	SHORT $LN28@PMC_Subtru

; 507  :                     {
; 508  :                         // ボローが発生した場合は演算結果が負なのでエラーとする
; 509  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_Subtru

; 510  :                     }

	jmp	SHORT $LN29@PMC_Subtru
$LN28@PMC_Subtru:

; 511  :                     else
; 512  :                     {
; 513  :                         *w = temp_w;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR temp_w$21[rbp]
	mov	QWORD PTR [rax], rcx
$LN29@PMC_Subtru:
$LN27@PMC_Subtru:
$LN13@PMC_Subtru:
$LN11@PMC_Subtru:
$LN7@PMC_Subtru:

; 514  :                     }
; 515  :                 }
; 516  :             }
; 517  :         }
; 518  :     }
; 519  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 520  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Subtruct_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+936]
	pop	rdi
	pop	rbp
	ret	0
PMC_Subtruct_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT PMC_Subtruct_I_X
_TEXT	SEGMENT
nv$ = 8
result$ = 36
u_bit_count$4 = 72
v_bit_count$5 = 104
temp_w$6 = 136
borrow$7 = 164
u$ = 416
v$ = 424
w$ = 432
PMC_Subtruct_I_X PROC					; COMDAT

; 188  : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+456]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 189  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 190  :     {
; 191  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 192  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 193  :     }
; 194  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Subtru

; 195  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 196  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Subtru

; 197  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 198  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 199  :     PMC_STATUS_CODE result;
; 200  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Subtru

; 201  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 202  :     if (u == 0)

	cmp	DWORD PTR u$[rbp], 0
	jne	SHORT $LN6@PMC_Subtru

; 203  :     {
; 204  :         // u が 0 である場合
; 205  : 
; 206  :         if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@PMC_Subtru

; 207  :         {
; 208  :             // v が 0 である場合
; 209  : 
; 210  :             // u と v がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 211  :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 212  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 213  :         else
; 214  :         {
; 215  :             // v が 0 ではない場合
; 216  : 
; 217  :             // 演算結果は負となってしまうのでエラーを返す。
; 218  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 219  :         }
; 220  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 221  :     else
; 222  :     {
; 223  :         // u が 0 ではない場合
; 224  : 
; 225  :         if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@PMC_Subtru

; 226  :         {
; 227  :             // v が 0 である場合
; 228  : 
; 229  :             // 演算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 230  :             *w = u;

	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	mov	DWORD PTR [rax], ecx

; 231  :         }

	jmp	$LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 232  :         else
; 233  :         {
; 234  :             // u と v がともに 0 ではない場合
; 235  : 
; 236  :             // x と y の差を計算する
; 237  :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	mov	ecx, DWORD PTR u$[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_bit_count$4[rbp], rax

; 238  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR v_bit_count$5[rbp], rax

; 239  :             if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$5[rbp]
	cmp	QWORD PTR u_bit_count$4[rbp], rax
	jae	SHORT $LN12@PMC_Subtru

; 240  :             {
; 241  :                 // 明らかに u < v である場合
; 242  :                 // 演算結果は負となってしまうのでエラーを返す。
; 243  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_Subtru

; 244  :             }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 245  :             else
; 246  :             {
; 247  :                 // u のビット長が v のビット長以上である場合
; 248  : 
; 249  :                 // u が 32bit 整数なので、v も32bit 整数で表現できる
; 250  :                 __UNIT_TYPE temp_w;
; 251  :                 char borrow = _SUBTRUCT_UNIT(0, u, nv->BLOCK[0], &temp_w);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR u$[rbp]
	lea	r9, QWORD PTR temp_w$6[rbp]
	mov	r8, QWORD PTR [rcx+rax]
	xor	ecx, ecx
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR borrow$7[rbp], al

; 252  :                 if (borrow)

	movsx	eax, BYTE PTR borrow$7[rbp]
	test	eax, eax
	je	SHORT $LN14@PMC_Subtru

; 253  :                 {
; 254  :                     // ボローが発生した場合は演算結果が負なのでエラーとする
; 255  :                     return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_Subtru

; 256  :                 }

	jmp	SHORT $LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 257  :                 else
; 258  :                 {
; 259  :                     *w = (_UINT32_T)temp_w;

	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR temp_w$6[rbp]
	mov	DWORD PTR [rax], ecx
$LN15@PMC_Subtru:
$LN13@PMC_Subtru:
$LN11@PMC_Subtru:
$LN7@PMC_Subtru:

; 260  :                 }
; 261  :             }
; 262  :         }
; 263  :     }
; 264  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 265  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Subtruct_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
PMC_Subtruct_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT Initialize_Subtruct
_TEXT	SEGMENT
feature$ = 224
Initialize_Subtruct PROC				; COMDAT

; 743  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 744  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 745  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Subtruct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
;	COMDAT Subtruct_Imp
_TEXT	SEGMENT
c$ = 4
count$ = 40
tv151 = 248
tv154 = 256
tv157 = 264
up$ = 304
u_count$ = 312
vp$ = 320
v_count$ = 328
wp$ = 336
w_count$ = 344
Subtruct_Imp PROC					; COMDAT

; 124  : {

$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__1898920A_pmc_subtruct@c
	call	__CheckForDebuggerJustMyCode

; 125  :     char c = 0;

	mov	BYTE PTR c$[rbp], 0

; 126  : 
; 127  :     // まず 32 ワードずつ減算をする。
; 128  :     __UNIT_TYPE count = v_count >> 5;

	mov	rax, QWORD PTR v_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@Subtruct_I:

; 129  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	SHORT $LN3@Subtruct_I

; 130  :     {
; 131  :         c= _SUBTRUCT_32WORDS_SBB(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_32WORDS_SBB
	mov	BYTE PTR c$[rbp], al

; 132  :         up += 32;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR up$[rbp], rax

; 133  :         vp += 32;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR vp$[rbp], rax

; 134  :         wp += 32;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR wp$[rbp], rax

; 135  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 136  :     }

	jmp	SHORT $LN2@Subtruct_I
$LN3@Subtruct_I:

; 137  :     // この時点で未処理の桁は 32 ワード未満のはず
; 138  : 
; 139  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード減算を行う。
; 140  :     if (v_count & 0x10)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	SHORT $LN4@Subtruct_I

; 141  :     {
; 142  :         c = _SUBTRUCT_16WORDS_SBB(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_16WORDS_SBB
	mov	BYTE PTR c$[rbp], al

; 143  :         up += 16;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR up$[rbp], rax

; 144  :         vp += 16;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR vp$[rbp], rax

; 145  :         wp += 16;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR wp$[rbp], rax
$LN4@Subtruct_I:

; 146  :     }
; 147  :     // この時点で未処理の桁は 16 ワード未満のはず
; 148  : 
; 149  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード減算を行う。
; 150  :     if (v_count & 0x8)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	SHORT $LN5@Subtruct_I

; 151  :     {
; 152  :         c = _SUBTRUCT_8WORDS_SBB(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_8WORDS_SBB
	mov	BYTE PTR c$[rbp], al

; 153  :         up += 8;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR up$[rbp], rax

; 154  :         vp += 8;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR vp$[rbp], rax

; 155  :         wp += 8;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR wp$[rbp], rax
$LN5@Subtruct_I:

; 156  :     }
; 157  :     // この時点で未処理の桁は 8 ワード未満のはず
; 158  : 
; 159  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード減算を行う。
; 160  :     if (v_count & 0x4)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	SHORT $LN6@Subtruct_I

; 161  :     {
; 162  :         c = _SUBTRUCT_4WORDS_SBB(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_4WORDS_SBB
	mov	BYTE PTR c$[rbp], al

; 163  :         up += 4;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR up$[rbp], rax

; 164  :         vp += 4;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR vp$[rbp], rax

; 165  :         wp += 4;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR wp$[rbp], rax
$LN6@Subtruct_I:

; 166  :     }
; 167  :     // この時点で未処理の桁は 4 ワード未満のはず
; 168  : 
; 169  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード減算を行う。
; 170  :     if (v_count & 0x2)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	SHORT $LN7@Subtruct_I

; 171  :     {
; 172  :         c = _SUBTRUCT_2WORDS_SBB(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_2WORDS_SBB
	mov	BYTE PTR c$[rbp], al

; 173  :         up += 2;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 16
	mov	QWORD PTR up$[rbp], rax

; 174  :         vp += 2;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 16
	mov	QWORD PTR vp$[rbp], rax

; 175  :         wp += 2;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 16
	mov	QWORD PTR wp$[rbp], rax
$LN7@Subtruct_I:

; 176  :     }
; 177  :     // この時点で未処理の桁は 2 ワード未満のはず
; 178  : 
; 179  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード減算を行う。
; 180  :     if (v_count & 1)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	$LN8@Subtruct_I

; 181  :         c = _SUBTRUCT_UNIT(c, *up++, *vp++, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv151[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR vp$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv154[rbp], rax
	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 8
	mov	QWORD PTR vp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv157[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv151[rbp]
	mov	r8, QWORD PTR tv154[rbp]
	mov	rdx, QWORD PTR tv157[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT
	mov	BYTE PTR c$[rbp], al
$LN8@Subtruct_I:

; 182  : 
; 183  :     // 残りの桁の繰り上がりを計算し、復帰する。
; 184  :     return (DoBorrow(c, up, u_count - v_count, wp, w_count - v_count));

	mov	rax, QWORD PTR v_count$[rbp]
	mov	rcx, QWORD PTR w_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR v_count$[rbp]
	mov	rdx, QWORD PTR u_count$[rbp]
	sub	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, rcx
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoBorrow

; 185  : }

	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
Subtruct_Imp ENDP
_TEXT	ENDS
END
