; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	CalculateCriticalDataOfDivision
PUBLIC	??_C@_0FE@HJGKBDLB@found?3?5u0?$DN0x?$CF08x?0?5u1?$DN0x?$CF08x?0?5u2@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$CalculateCriticalDataOfDivision DD imagerel $LN151
	DD	imagerel $LN151+513
	DD	imagerel $unwind$CalculateCriticalDataOfDivision
pdata	ENDS
;	COMDAT ??_C@_0FE@HJGKBDLB@found?3?5u0?$DN0x?$CF08x?0?5u1?$DN0x?$CF08x?0?5u2@
CONST	SEGMENT
??_C@_0FE@HJGKBDLB@found?3?5u0?$DN0x?$CF08x?0?5u1?$DN0x?$CF08x?0?5u2@ DB 'f'
	DB	'ound: u0=0x%08x, u1=0x%08x, u2=0x%08x, u3=0x%08x, v1=0x%08x, '
	DB	'v2=0x%08x, v3=0x%08x', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CalculateCriticalDataOfDivision DD 091701H
	DD	0f013a217H
	DD	0d00fe011H
	DD	0700bc00dH
	DD	05009600aH
	DD	03008H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT CheckQ_
_TEXT	SEGMENT
q_$ = 8
u0$ = 16
u1$ = 24
u2$ = 32
v1$ = 40
v2$ = 48
CheckQ_	PROC						; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r11d, DWORD PTR v2$[rsp]
	mov	eax, ecx
	mov	ecx, DWORD PTR v1$[rsp]
	imul	r11, rax
	imul	rcx, rax

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	r10, r11
	shr	r10, 32					; 00000020H
	mov	rax, rcx
	shr	rax, 32					; 00000020H

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	r8d, ecx
	sbb	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 78   :     else if (lh_hi < rh_hi)

	jne	SHORT $LN23@CheckQ_

; 79   :         return (FALSE);
; 80   :     else if (lh_mi > rh_mi)

	cmp	r10d, r8d
	jbe	SHORT $LN6@CheckQ_

; 81   :         return (TRUE);

	mov	eax, 1

; 86   : }

	ret	0
$LN6@CheckQ_:

; 82   :     else if (lh_mi < rh_mi)

	jb	SHORT $LN23@CheckQ_

; 84   :     else
; 85   :         return (lh_lo > rh_lo);

	xor	eax, eax
	cmp	r11d, r9d
	seta	al

; 86   : }

	ret	0
$LN23@CheckQ_:

; 83   :         return (FALSE);

	xor	eax, eax

; 86   : }

	ret	0
CheckQ_	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT AsumeQ_
_TEXT	SEGMENT
u0$ = 8
u1$ = 16
v1$ = 24
AsumeQ_	PROC						; COMDAT

; 60   :     if (u0 == v1)

	cmp	ecx, r8d
	jne	SHORT $LN2@AsumeQ_

; 61   :         return ((__UNIT_TYPE_DIV)-1);

	mov	eax, -1					; ffffffffH

; 65   : }

	ret	0
$LN2@AsumeQ_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 602  :         return ((_UINT32_T)(t / v));

	xor	edx, edx

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 602  :         return ((_UINT32_T)(t / v));

	mov	ecx, r8d
	div	rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 65   : }

	ret	0
AsumeQ_	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT SUBTRUCT_4W_UNIT
_TEXT	SEGMENT
x1$ = 8
x2$ = 16
x3$ = 24
x4$ = 32
y$ = 40
SUBTRUCT_4W_UNIT PROC					; COMDAT

; 55   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 55   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	eax, DWORD PTR [r8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, 0
	mov	DWORD PTR [r8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 55   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, 0
	mov	DWORD PTR [rdx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 55   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	edx, DWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	edx, 0
	mov	DWORD PTR [rcx], edx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 56   : }

	ret	0
SUBTRUCT_4W_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT SUBTRUCT_3W_UNIT
_TEXT	SEGMENT
x1$ = 8
x2$ = 16
x3$ = 24
y$ = 32
SUBTRUCT_3W_UNIT PROC					; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	DWORD PTR [r8], r9d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 50   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, 0
	mov	DWORD PTR [rdx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 50   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	edx, DWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	edx, 0
	mov	DWORD PTR [rcx], edx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 51   : }

	ret	0
SUBTRUCT_3W_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT ADD_4W_UNIT
_TEXT	SEGMENT
x1$ = 8
x2$ = 16
x3$ = 24
x4$ = 32
y$ = 40
ADD_4W_UNIT PROC					; COMDAT

; 45   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 45   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	eax, DWORD PTR [r8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0
	mov	DWORD PTR [r8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 45   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0
	mov	DWORD PTR [rdx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 45   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	edx, DWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0
	mov	DWORD PTR [rcx], edx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 46   : }

	ret	0
ADD_4W_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT ADD_3W_UNIT
_TEXT	SEGMENT
x1$ = 8
x2$ = 16
x3$ = 24
y$ = 32
ADD_3W_UNIT PROC					; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	DWORD PTR [r8], r9d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 40   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0
	mov	DWORD PTR [rdx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 40   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	edx, DWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0
	mov	DWORD PTR [rcx], edx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 41   : }

	ret	0
ADD_3W_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT CalculateCriticalDataOfDivision
_TEXT	SEGMENT
u_count_2$1$ = 64
u_count_1$1$ = 68
u_count_0$1$ = 72
env$ = 160
u3$1$ = 168
v_count_3$1$ = 176
u_count_3$1$ = 184
CalculateCriticalDataOfDivision PROC			; COMDAT

; 89   : {

$LN151:
	mov	r11, rsp
	mov	QWORD PTR [r11+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 88					; 00000058H

; 90   :     const __UNIT_TYPE_DIV v_min_1 = ~((__UNIT_TYPE_DIV)-1 >> 1);    // 0x80000000
; 91   :     const __UNIT_TYPE_DIV v_min_2 = 0;                              // 0x00000000
; 92   :     const __UNIT_TYPE_DIV v_min_3 = 0;
; 93   : 
; 94   :     const __UNIT_TYPE_DIV u_min_0 = 0;                              // 0x00000000
; 95   :     const __UNIT_TYPE_DIV u_min_1 = ~((__UNIT_TYPE_DIV)-1 >> 1);    // 0x80000000
; 96   :     const __UNIT_TYPE_DIV u_min_2 = 0;                              // 0x00000000
; 97   :     const __UNIT_TYPE_DIV u_min_3 = 0;                              // 0x00000000
; 98   : 
; 99   :     __UNIT_TYPE_DIV u_count_0 = (__UNIT_TYPE_DIV)-1;                // 0xffffffff
; 100  :     __UNIT_TYPE_DIV u_count_1 = ~((__UNIT_TYPE_DIV)-1 >> 1);        // 0x80000000
; 101  :     __UNIT_TYPE_DIV u_count_2 = 0;                                  // 0x00000000

	xor	eax, eax
	mov	DWORD PTR u_count_0$1$[rsp], -1		; ffffffffH
	mov	DWORD PTR u_count_2$1$[rsp], eax

; 102  :     __UNIT_TYPE_DIV u_count_3 = 0;                                  // 0x00000000
; 103  : 
; 104  :     __UNIT_TYPE_DIV u0 = u_min_0;

	mov	edi, eax
	mov	DWORD PTR u_count_1$1$[rsp], -2147483648 ; 80000000H

; 105  :     __UNIT_TYPE_DIV u1 = u_min_1;

	mov	r15d, -2147483648			; 80000000H
	mov	DWORD PTR [r11+32], eax

; 106  :     __UNIT_TYPE_DIV u2 = u_min_2;

	mov	r14d, eax

; 107  :     __UNIT_TYPE_DIV u3 = u_min_3;

	mov	DWORD PTR [r11+16], eax
$LL2@CalculateC:

; 108  : 
; 109  :     for (;;)
; 110  :     {
; 111  :         __UNIT_TYPE_DIV v_count_1 = ~((__UNIT_TYPE_DIV)-1 >> 1);    // 0x80000000

	mov	r12d, -2147483648			; 80000000H

; 112  :         __UNIT_TYPE_DIV v_count_2 = 0;                              // 0x00000000
; 113  :         __UNIT_TYPE_DIV v_count_3 = 0;                              // 0x00000000

	mov	DWORD PTR v_count_3$1$[rsp], eax

; 114  :         __UNIT_TYPE_DIV v1 = v_min_1;

	mov	ebx, r12d
	mov	r13d, eax

; 115  :         __UNIT_TYPE_DIV v2 = v_min_2;

	mov	esi, eax

; 116  :         __UNIT_TYPE_DIV v3 = v_min_3;

	mov	ebp, eax
$LL5@CalculateC:

; 60   :     if (u0 == v1)

	cmp	edi, ebx
	jne	SHORT $LN18@CalculateC

; 61   :         return ((__UNIT_TYPE_DIV)-1);

	mov	eax, -1					; ffffffffH
	jmp	SHORT $LN17@CalculateC
$LN18@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, r15d

; 602  :         return ((_UINT32_T)(t / v));

	xor	edx, edx

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edi
	shl	rax, 32					; 00000020H
	or	rax, rcx

; 602  :         return ((_UINT32_T)(t / v));

	mov	ecx, ebx
	div	rcx
$LN17@CalculateC:

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, eax

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	r9d, r15d

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, ebx
	mov	r11d, esi
	imul	r11, rcx
	imul	rcx, rdx

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	r8, r11

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r10d, esi

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	shr	r8, 32					; 00000020H
	mov	rdx, rcx
	shr	rdx, 32					; 00000020H

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	r9d, ecx
	mov	ecx, edi
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 78   :     else if (lh_hi < rh_hi)

	jne	SHORT $LN9@CalculateC

; 79   :         return (FALSE);
; 80   :     else if (lh_mi > rh_mi)

	cmp	r8d, r9d
	ja	SHORT $LN148@CalculateC

; 81   :         return (TRUE);
; 82   :     else if (lh_mi < rh_mi)

	jb	SHORT $LN9@CalculateC

; 117  :         for (;;)
; 118  :         {
; 119  :             __UNIT_TYPE_DIV q_ = AsumeQ_(u0, u1, v1);
; 120  :             if (CheckQ_(q_, u0, u1, u2, v1, v2))

	cmp	r11d, r14d
	jbe	SHORT $LN9@CalculateC
$LN148@CalculateC:

; 121  :             {
; 122  :                 --q_;

	dec	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, ebx
	mov	ecx, eax
	mov	r11, r10
	imul	r11, rcx
	imul	rcx, rdx

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	r8, r11

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	r9d, r15d

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	shr	r8, 32					; 00000020H
	mov	rdx, rcx
	shr	rdx, 32					; 00000020H

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	r9d, ecx
	mov	ecx, edi
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 78   :     else if (lh_hi < rh_hi)

	jne	SHORT $LN9@CalculateC

; 79   :         return (FALSE);
; 80   :     else if (lh_mi > rh_mi)

	cmp	r8d, r9d
	ja	SHORT $LN149@CalculateC

; 81   :         return (TRUE);
; 82   :     else if (lh_mi < rh_mi)

	jb	SHORT $LN9@CalculateC

; 123  :                 if (CheckQ_(q_, u0, u1, u2, v1, v2))

	cmp	r11d, r14d
	jbe	SHORT $LN9@CalculateC
$LN149@CalculateC:

; 124  :                 {
; 125  :                     --q_;

	dec	eax
$LN9@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	r11d, DWORD PTR u3$1$[rsp]
	mov	r9d, r14d

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, eax
	imul	r10, rcx
	mov	r8d, eax
	mov	eax, ebx
	imul	r8, rax
	mov	edx, ebp

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	eax, r11d

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rcx

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	setb	cl

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	mov	ecx, r15d
	sbb	r9d, edx
	mov	edx, edi
	sbb	ecx, 0
	sbb	edx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 148  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu2, mv2_lo, &bu2), bu1, mv2_hi, &bu1), bu0, 0, &bu0) ||

	jb	SHORT $LN11@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	r9d, r10d
	setb	al

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
	sbb	ecx, r10d
	sbb	edx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 148  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu2, mv2_lo, &bu2), bu1, mv2_hi, &bu1), bu0, 0, &bu0) ||

	jb	SHORT $LN11@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, r8d
	setb	al

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	shr	r8, 32					; 00000020H

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
	sbb	edx, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 148  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu2, mv2_lo, &bu2), bu1, mv2_hi, &bu1), bu0, 0, &bu0) ||

	jae	SHORT $LN10@CalculateC
$LN11@CalculateC:

; 149  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu1, mv1_lo, &bu1), bu0, mv1_hi, &bu0))
; 150  :             {
; 151  :                 if (sizeof(__UNIT_TYPE_DIV) <= 4)
; 152  :                     env->log("found: u0=0x%08x, u1=0x%08x, u2=0x%08x, u3=0x%08x, v1=0x%08x, v2=0x%08x, v3=0x%08x\n", u0, u1, u2, u3, v1, v2, v3);

	mov	rax, QWORD PTR env$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0FE@HJGKBDLB@found?3?5u0?$DN0x?$CF08x?0?5u1?$DN0x?$CF08x?0?5u2@
	mov	DWORD PTR [rsp+56], ebp
	mov	r9d, r14d
	mov	DWORD PTR [rsp+48], esi
	mov	r8d, r15d
	mov	DWORD PTR [rsp+40], ebx
	mov	edx, edi
	mov	DWORD PTR [rsp+32], r11d
	call	QWORD PTR [rax]

; 153  :                 else
; 154  :                     env->log("found: u0=0x%016llx, u1=0x%016llx, u2=0x%016llx, u3=0x%016llx, v1=0x%016llx, v2=0x%016llx, v3=0x%016llx\n", u0, u1, u2, u3, v1, v2, v3);
; 155  :                 env->pause();

	mov	rax, QWORD PTR env$[rsp]
	call	QWORD PTR [rax+8]
	mov	r11d, DWORD PTR u3$1$[rsp]
$LN10@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	DWORD PTR v_count_3$1$[rsp], 1
	sbb	r13d, 0
	sbb	r12d, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 158  :             if (SUBTRUCT_3W_UNIT(&v_count_1, &v_count_2, &v_count_3, 1))

	jb	SHORT $LN142@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	ebp, 1
	adc	esi, 0
	adc	ebx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 161  :         }

	jmp	$LL5@CalculateC
$LN142@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	DWORD PTR u_count_3$1$[rsp], 1
	mov	edx, DWORD PTR u_count_2$1$[rsp]
	mov	ecx, DWORD PTR u_count_1$1$[rsp]
	sbb	edx, 0
	mov	eax, DWORD PTR u_count_0$1$[rsp]
	sbb	ecx, 0
	mov	DWORD PTR u_count_2$1$[rsp], edx
	mov	DWORD PTR u_count_1$1$[rsp], ecx
	sbb	eax, 0
	mov	DWORD PTR u_count_0$1$[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 162  :         if (SUBTRUCT_4W_UNIT(&u_count_0, &u_count_1, &u_count_2, &u_count_3, 1))

	jb	SHORT $LN143@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	r11d, 1
	mov	DWORD PTR u3$1$[rsp], r11d
	adc	r14d, 0
	adc	r15d, 0
	adc	edi, 0
	xor	eax, eax
	jmp	$LL2@CalculateC
$LN143@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 167  : }

	add	rsp, 88					; 00000058H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
CalculateCriticalDataOfDivision ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _DIVREM_UNIT
_TEXT	SEGMENT
u_high$ = 8
u_low$ = 16
v$ = 24
r$ = 32
_DIVREM_UNIT PROC					; COMDAT

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 596  : #ifdef _MSC_VER
; 597  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 598  :     {
; 599  :         // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 600  :         _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 601  :         *r = (_UINT32_T)(t % v);

	xor	edx, edx

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 596  : #ifdef _MSC_VER
; 597  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 598  :     {
; 599  :         // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 600  :         _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 601  :         *r = (_UINT32_T)(t % v);

	mov	ecx, r8d
	div	rcx
	mov	DWORD PTR [r9], edx

; 602  :         return ((_UINT32_T)(t / v));
; 603  :     }
; 604  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 605  :     {
; 606  :         // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 607  :         // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 608  :         // ・128bit 整数のデータ型が用意されていない。
; 609  :         // ・x64 ではインラインアセンブラがサポートされていない。
; 610  :         *r = 0;
; 611  :         return (0);
; 612  :     }
; 613  :     else
; 614  :     {
; 615  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 616  :         *r = 0;
; 617  :         return (0);
; 618  :     }
; 619  : #elif defined(__GNUC__)
; 620  :     __UNIT_TYPE q;
; 621  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 622  :         __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 623  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 624  :         __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 625  :     else
; 626  :     {
; 627  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 628  :         *r = 0;
; 629  :         q = 0;
; 630  :     }
; 631  :     return (q);
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : }

	ret	0
_DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MULTIPLY_UNIT_DIV
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLY_UNIT_DIV PROC					; COMDAT

; 528  : #ifdef _MSC_VER
; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, ecx
	mov	ecx, edx
	imul	rax, rcx

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rcx, rax
	shr	rcx, 32					; 00000020H
	mov	DWORD PTR [r8], ecx

; 530  : #elif defined(__GNUC__)
; 531  : #ifdef _M_IX86
; 532  :     _UINT32_T w_lo;
; 533  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 534  :     return (w_lo);
; 535  : #elif defined(_M_X64)
; 536  :     return (_umul128(u, v, w_hi));
; 537  : #else
; 538  : #error unknown platform
; 539  : #endif
; 540  : #else
; 541  : #error unknown compiler
; 542  : #endif
; 543  : }

	ret	0
_MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _SUBTRUCT_UNIT_DIV
_TEXT	SEGMENT
borrow$ = 8
u$ = 16
v$ = 24
w$ = 32
_SUBTRUCT_UNIT_DIV PROC					; COMDAT

; 492  : #ifdef _MSC_VER
; 493  :     return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	edx, r8d
	mov	DWORD PTR [r9], edx
	setb	al

; 494  : #elif defined(__GNUC__)
; 495  : #ifdef _M_IX86
; 496  :     return (_subborrow_u32(borrow, u, v, w));
; 497  : #elif defined(_M_X64)
; 498  :     return (_subborrow_u64(borrow, u, v, w));
; 499  : #else
; 500  : #error unknown platform
; 501  : #endif
; 502  : #else
; 503  : #error unknown compiler
; 504  : #endif
; 505  : }

	ret	0
_SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ADD_UNIT_DIV
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADD_UNIT_DIV PROC					; COMDAT

; 436  : #ifdef _MSC_VER
; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	edx, r8d
	mov	DWORD PTR [r9], edx
	setb	al

; 438  : #elif defined(__GNUC__)
; 439  : #ifdef _M_IX86
; 440  :     return (_addcarry_u32(carry, u, v, w));
; 441  : #elif defined(_M_X64)
; 442  :     return (_addcarry_u64(carry, u, v, w));
; 443  : #else
; 444  : #error unknown platform
; 445  : #endif
; 446  : #else
; 447  : #error unknown compiler
; 448  : #endif
; 449  : }

	ret	0
_ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 395  :     return ((_UINT32_T)value);

	mov	eax, ecx

; 396  : }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 8
value_low$ = 16
_FROMWORDTODWORD PROC					; COMDAT

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	shl	rax, 32					; 00000020H
	mov	ecx, edx
	or	rax, rcx

; 390  : }

	ret	0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
END
