; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	TEST_PMC_BitwiseAnd_X_I
PUBLIC	TEST_PMC_BitwiseAnd_X_L
PUBLIC	TEST_PMC_BitwiseAnd_X_X
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BL@BDDNFIAI@PMC_BitwiseAnd_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DF@FECDOABD@PMC_BitwiseAnd_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BL@PFBEJDEM@PMC_BitwiseAnd_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DF@PJADGMBB@PMC_BitwiseAnd_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ ; `string'
PUBLIC	??_C@_0BL@NLFBLCNO@PMC_BitwiseAnd_X_X?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DF@CABCFGNK@PMC_BitwiseAnd_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ ; `string'
PUBLIC	??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_BitwiseAnd_X_I DD imagerel $LN5
	DD	imagerel $LN5+310
	DD	imagerel $unwind$TEST_PMC_BitwiseAnd_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_BitwiseAnd_X_L DD imagerel $LN5
	DD	imagerel $LN5+313
	DD	imagerel $unwind$TEST_PMC_BitwiseAnd_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_BitwiseAnd_X_X DD imagerel $LN18
	DD	imagerel $LN18+609
	DD	imagerel $unwind$TEST_PMC_BitwiseAnd_X_X
pdata	ENDS
;	COMDAT ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CABCFGNK@PMC_BitwiseAnd_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
CONST	SEGMENT
??_C@_0DF@CABCFGNK@PMC_BitwiseAnd_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ DB 'P'
	DB	'MC_BitwiseAnd_X_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NLFBLCNO@PMC_BitwiseAnd_X_X?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BL@NLFBLCNO@PMC_BitwiseAnd_X_X?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Bitw'
	DB	'iseAnd_X_X (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PJADGMBB@PMC_BitwiseAnd_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
CONST	SEGMENT
??_C@_0DF@PJADGMBB@PMC_BitwiseAnd_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ DB 'P'
	DB	'MC_BitwiseAnd_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PFBEJDEM@PMC_BitwiseAnd_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BL@PFBEJDEM@PMC_BitwiseAnd_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Bitw'
	DB	'iseAnd_X_L (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FECDOABD@PMC_BitwiseAnd_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
CONST	SEGMENT
??_C@_0DF@FECDOABD@PMC_BitwiseAnd_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ DB 'P'
	DB	'MC_BitwiseAnd_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BDDNFIAI@PMC_BitwiseAnd_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BL@BDDNFIAI@PMC_BitwiseAnd_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Bitw'
	DB	'iseAnd_X_I (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_BitwiseAnd_X_X DD 0a2619H
	DD	02d0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0150H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_BitwiseAnd_X_L DD 0c1c01H
	DD	0f641cH
	DD	0e541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_BitwiseAnd_X_I DD 0c1c01H
	DD	0f641cH
	DD	0e541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 8
count1$ = 16
buffer2$ = 24
count2$ = 32
_EQUALS_MEMORY PROC					; COMDAT

; 103  :     if (count1 != count2)

	cmp	rdx, r9
	jne	SHORT $LN8@EQUALS_MEM

; 104  :         return (-1);
; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN3@EQUALS_MEM
	sub	rcx, r8
	npad	3
$LL2@EQUALS_MEM:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	eax, BYTE PTR [r8]
	cmp	BYTE PTR [rcx+r8], al
	jne	SHORT $LN8@EQUALS_MEM

; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	r8

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 112  :     }
; 113  :     return (0);

	xor	eax, eax

; 114  : }

	ret	0
$LN8@EQUALS_MEM:

; 108  :             return (-1);

	mov	eax, -1

; 114  : }

	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_bitwiseand.c
;	COMDAT TEST_PMC_BitwiseAnd_X_X
_TEXT	SEGMENT
no$GSCopy$1$ = 32
w_result$1$ = 36
w$ = 40
v$ = 48
u$ = 56
actual_w_buf_size$ = 64
actual_w_buf$ = 80
__$ArrayPad$ = 336
env$ = 432
ep$ = 440
no$ = 448
u_buf$ = 456
u_buf_size$ = 464
v_buf$ = 472
v_buf_size$ = 480
desired_w_buf$ = 488
desired_w_buf_size$ = 496
TEST_PMC_BitwiseAnd_X_X PROC				; COMDAT

; 65   : {

$LN18:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 360				; 00000168H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rsi, QWORD PTR v_buf$[rsp]
	mov	rbp, rdx

; 66   :     HANDLE u;
; 67   :     HANDLE v;
; 68   :     HANDLE w;
; 69   :     unsigned char actual_w_buf[256];
; 70   :     size_t actual_w_buf_size;
; 71   :     PMC_STATUS_CODE result;
; 72   :     PMC_STATUS_CODE u_result;
; 73   :     PMC_STATUS_CODE v_result;
; 74   :     PMC_STATUS_CODE w_result;
; 75   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_X (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	rdx, QWORD PTR u_buf_size$[rsp]
	mov	r12d, r8d
	mov	DWORD PTR no$GSCopy$1$[rsp], r8d
	mov	r13, rcx
	lea	r8, QWORD PTR u$[rsp]
	mov	rcx, r9
	call	QWORD PTR [rbp+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	r14d, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BL@NLFBLCNO@PMC_BitwiseAnd_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, r14d
	mov	edx, r12d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [r14+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r13
	call	TEST_Assert

; 76   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_X (%d.%d)", no, 2), (v_result = ep->PMC_From_B(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", v_result));

	mov	rdx, QWORD PTR v_buf_size$[rsp]
	lea	r8, QWORD PTR v$[rsp]
	mov	rcx, rsi
	call	QWORD PTR [rbp+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r12d, eax
	call	FormatTestMesssage
	mov	edx, DWORD PTR no$GSCopy$1$[rsp]
	lea	r8d, QWORD PTR [r14+2]
	test	r12d, r12d
	lea	rcx, OFFSET FLAT:??_C@_0BL@NLFBLCNO@PMC_BitwiseAnd_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edi, r14d
	mov	rbx, rax
	sete	dil
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r13
	call	TEST_Assert

; 77   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_X (%d.%d)", no, 3), (w_result = ep->PMC_BitwiseAnd_X_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage("PMC_BitwiseAnd_X_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	rdx, QWORD PTR v$[rsp]
	lea	r8, QWORD PTR w$[rsp]
	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [rbp+216]
	mov	edx, eax
	mov	DWORD PTR w_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0DF@CABCFGNK@PMC_BitwiseAnd_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
	call	FormatTestMesssage
	cmp	DWORD PTR w_result$1$[rsp], r14d
	lea	r8d, QWORD PTR [r14+3]
	mov	edx, DWORD PTR no$GSCopy$1$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BL@NLFBLCNO@PMC_BitwiseAnd_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edi, r14d
	mov	rbx, rax
	sete	dil
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r13
	call	TEST_Assert

; 78   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_X (%d.%d)", no, 4), (result = ep->PMC_To_X_B(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR w$[rsp]
	lea	r9, QWORD PTR actual_w_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_w_buf$[rsp]
	call	QWORD PTR [rbp+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	mov	rdi, rax
	test	ebx, ebx
	mov	esi, r14d
	mov	ebx, DWORD PTR no$GSCopy$1$[rsp]
	lea	r8d, QWORD PTR [r14+4]
	mov	edx, ebx
	lea	rcx, OFFSET FLAT:??_C@_0BL@NLFBLCNO@PMC_BitwiseAnd_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	sete	sil
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r13
	call	TEST_Assert

; 79   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, "データの内容が一致しない");

	mov	rdx, QWORD PTR actual_w_buf_size$[rsp]
	mov	rax, QWORD PTR desired_w_buf$[rsp]
	cmp	rdx, QWORD PTR desired_w_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN12@TEST_PMC_B
$LN13@TEST_PMC_B:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_bitwiseand.c

; 79   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, "データの内容が一致しない");

	mov	eax, -1
	jmp	SHORT $LN6@TEST_PMC_B
$LN12@TEST_PMC_B:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN8@TEST_PMC_B
	lea	r8, QWORD PTR actual_w_buf$[rsp]
	sub	r8, rax
	npad	6
$LL7@TEST_PMC_B:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN13@TEST_PMC_B

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL7@TEST_PMC_B
$LN8@TEST_PMC_B:

; 112  :     }
; 113  :     return (0);

	mov	eax, r14d
$LN6@TEST_PMC_B:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_bitwiseand.c

; 79   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, "データの内容が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BL@NLFBLCNO@PMC_BitwiseAnd_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 5
	mov	edx, ebx
	sete	r14b
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, r14d
	mov	rcx, r13
	call	TEST_Assert

; 80   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR w_result$1$[rsp], 0
	jne	SHORT $LN2@TEST_PMC_B

; 81   :         ep->PMC_Dispose(w);

	mov	rcx, QWORD PTR w$[rsp]
	call	QWORD PTR [rbp+40]
$LN2@TEST_PMC_B:

; 82   :     if (v_result == PMC_STATUS_OK)

	test	r12d, r12d
	jne	SHORT $LN3@TEST_PMC_B

; 83   :         ep->PMC_Dispose(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	QWORD PTR [rbp+40]
$LN3@TEST_PMC_B:

; 84   :     if (u_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN4@TEST_PMC_B

; 85   :         ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [rbp+40]
$LN4@TEST_PMC_B:

; 86   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 360				; 00000168H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_BitwiseAnd_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_bitwiseand.c
;	COMDAT TEST_PMC_BitwiseAnd_X_L
_TEXT	SEGMENT
actual_w$ = 32
env$ = 96
u$ = 104
ep$ = 104
no$ = 112
u_buf$ = 120
u_buf_size$ = 128
v$ = 136
desired_w$ = 144
TEST_PMC_BitwiseAnd_X_L PROC				; COMDAT

; 52   : {

$LN5:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	r13, rdx
	mov	r14d, r8d

; 53   :     HANDLE u;
; 54   :     unsigned __int64 actual_w;
; 55   :     PMC_STATUS_CODE result;
; 56   :     PMC_STATUS_CODE u_result;
; 57   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_L (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	rdx, QWORD PTR u_buf_size$[rsp]
	lea	r8, QWORD PTR u$[rsp]
	mov	r12, rcx
	mov	rcx, r9
	call	QWORD PTR [r13+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@PFBEJDEM@PMC_BitwiseAnd_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, ebp
	mov	edx, r14d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r12
	call	TEST_Assert

; 58   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_L (%d.%d)", no, 2), (result = ep->PMC_BitwiseAnd_X_L(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage("PMC_BitwiseAnd_X_Lの復帰コードが期待通りではない(%d)", result));

	mov	rdx, QWORD PTR v$[rsp]
	lea	r8, QWORD PTR actual_w$[rsp]
	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [r13+208]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0DF@PJADGMBB@PMC_BitwiseAnd_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+2]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@PFBEJDEM@PMC_BitwiseAnd_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r14d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r12
	call	TEST_Assert

; 59   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_L (%d.%d)", no, 3), actual_w == desired_w, "データの内容が一致しない");

	mov	rax, QWORD PTR desired_w$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BL@PFBEJDEM@PMC_BitwiseAnd_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	QWORD PTR actual_w$[rsp], rax
	mov	r8d, 3
	mov	edx, r14d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r12
	call	TEST_Assert

; 60   :     if (u_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN2@TEST_PMC_B

; 61   :         ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [r13+40]
$LN2@TEST_PMC_B:

; 62   : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
TEST_PMC_BitwiseAnd_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_bitwiseand.c
;	COMDAT TEST_PMC_BitwiseAnd_X_I
_TEXT	SEGMENT
u$ = 32
env$ = 96
actual_w$ = 104
ep$ = 104
no$ = 112
u_buf$ = 120
u_buf_size$ = 128
v$ = 136
desired_w$ = 144
TEST_PMC_BitwiseAnd_X_I PROC				; COMDAT

; 39   : {

$LN5:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	r13, rdx
	mov	r14d, r8d

; 40   :     HANDLE u;
; 41   :     unsigned __int32 actual_w;
; 42   :     PMC_STATUS_CODE result;
; 43   :     PMC_STATUS_CODE u_result;
; 44   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_I (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	rdx, QWORD PTR u_buf_size$[rsp]
	lea	r8, QWORD PTR u$[rsp]
	mov	r12, rcx
	mov	rcx, r9
	call	QWORD PTR [r13+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@BDDNFIAI@PMC_BitwiseAnd_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, ebp
	mov	edx, r14d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r12
	call	TEST_Assert

; 45   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_I (%d.%d)", no, 2), (result = ep->PMC_BitwiseAnd_X_I(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage("PMC_BitwiseAnd_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	edx, DWORD PTR v$[rsp]
	lea	r8, QWORD PTR actual_w$[rsp]
	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [r13+200]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0DF@FECDOABD@PMC_BitwiseAnd_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+2]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@BDDNFIAI@PMC_BitwiseAnd_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r14d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r12
	call	TEST_Assert

; 46   :     TEST_Assert(env, FormatTestLabel("PMC_BitwiseAnd_X_I (%d.%d)", no, 3), actual_w == desired_w, "データの内容が一致しない");

	mov	eax, DWORD PTR desired_w$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BL@BDDNFIAI@PMC_BitwiseAnd_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	DWORD PTR actual_w$[rsp], eax
	mov	r8d, 3
	mov	edx, r14d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r12
	call	TEST_Assert

; 47   :     if (u_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN2@TEST_PMC_B

; 48   :         ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [r13+40]
$LN2@TEST_PMC_B:

; 49   : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
TEST_PMC_BitwiseAnd_X_I ENDP
_TEXT	ENDS
END
