; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	TEST_PMC_DivRem_X_I
PUBLIC	TEST_PMC_DivRem_X_L
PUBLIC	TEST_PMC_DivRem_X_X
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@CJJOGBJJ@PMC_DivRem_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
PUBLIC	??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@IELOONJL@PMC_DivRem_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
PUBLIC	??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@FNKPNHFA@PMC_DivRem_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_DivRem_X_I DD imagerel $LN18
	DD	imagerel $LN18+567
	DD	imagerel $unwind$TEST_PMC_DivRem_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_DivRem_X_L DD imagerel $LN18
	DD	imagerel $LN18+578
	DD	imagerel $unwind$TEST_PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_DivRem_X_X DD imagerel $LN30
	DD	imagerel $LN30+831
	DD	imagerel $unwind$TEST_PMC_DivRem_X_X
pdata	ENDS
;	COMDAT ??_C@_0DB@FNKPNHFA@PMC_DivRem_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@FNKPNHFA@PMC_DivRem_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_DivRem_X_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_DivRem_X'
	DB	'_X (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@IELOONJL@PMC_DivRem_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@IELOONJL@PMC_DivRem_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_DivRem_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_DivRem_X'
	DB	'_L (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 08fH
	DB	0e8H, 097H, ']', 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H, 0eaH
	DB	092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 08fH
	DB	0a4H, 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H, 0eaH, 092H, 'v', 082H
	DB	0b5H, 082H, 0c8H, 082H, 0a2H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CJJOGBJJ@PMC_DivRem_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@CJJOGBJJ@PMC_DivRem_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_DivRem_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_DivRem_X'
	DB	'_I (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_DivRem_X_X DD 0a2619H
	DD	04f0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0260H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_DivRem_X_L DD 0a2619H
	DD	02d0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0150H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_DivRem_X_I DD 0a2619H
	DD	02b0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 8
count1$ = 16
buffer2$ = 24
count2$ = 32
_EQUALS_MEMORY PROC					; COMDAT

; 103  :     if (count1 != count2)

	cmp	rdx, r9
	jne	SHORT $LN8@EQUALS_MEM

; 104  :         return (-1);
; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN3@EQUALS_MEM
	sub	rcx, r8
	npad	3
$LL2@EQUALS_MEM:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	eax, BYTE PTR [r8]
	cmp	BYTE PTR [rcx+r8], al
	jne	SHORT $LN8@EQUALS_MEM

; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	r8

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 112  :     }
; 113  :     return (0);

	xor	eax, eax

; 114  : }

	ret	0
$LN8@EQUALS_MEM:

; 108  :             return (-1);

	mov	eax, -1

; 114  : }

	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
;	COMDAT TEST_PMC_DivRem_X_X
_TEXT	SEGMENT
q_r_result$1$ = 32
v_result$1$ = 36
q$ = 40
r$ = 48
v$ = 56
u$ = 64
actual_q_buf_size$ = 72
actual_r_buf_size$ = 80
actual_q_buf$ = 96
actual_r_buf$ = 352
__$ArrayPad$ = 608
env$ = 704
ep$ = 712
no$ = 720
u_buf$ = 728
u_buf_size$ = 736
v_buf$ = 744
v_buf_size$ = 752
desired_return_code$ = 760
desired_q_buf$ = 768
desired_q_buf_size$ = 776
desired_r_buf$ = 784
desired_r_buf_size$ = 792
TEST_PMC_DivRem_X_X PROC				; COMDAT

; 87   : {

$LN30:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 632				; 00000278H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rsi, QWORD PTR v_buf$[rsp]
	mov	r14, rdx

; 88   : 	HANDLE u;
; 89   : 	HANDLE v;
; 90   : 	HANDLE q;
; 91   : 	HANDLE r;
; 92   : 	unsigned char actual_q_buf[256];
; 93   : 	size_t actual_q_buf_size;
; 94   : 	unsigned char actual_r_buf[256];
; 95   : 	size_t actual_r_buf_size;
; 96   : 	PMC_STATUS_CODE result;
; 97   : 	PMC_STATUS_CODE u_result;
; 98   : 	PMC_STATUS_CODE v_result;
; 99   : 	PMC_STATUS_CODE q_r_result;
; 100  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	rdx, QWORD PTR u_buf_size$[rsp]
	mov	r12d, r8d
	mov	r15, rcx
	lea	r8, QWORD PTR u$[rsp]
	mov	rcx, r9
	call	QWORD PTR [r14+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r13d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	test	r13d, r13d
	mov	ebx, ebp
	mov	edx, r12d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 101  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 2), (v_result = ep->PMC_From_B(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", v_result));

	mov	rdx, QWORD PTR v_buf_size$[rsp]
	lea	r8, QWORD PTR v$[rsp]
	mov	rcx, rsi
	call	QWORD PTR [r14+32]
	mov	edx, eax
	mov	DWORD PTR v_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	esi, eax
	call	FormatTestMesssage
	test	esi, esi
	lea	r8d, QWORD PTR [rbp+2]
	mov	edi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r15
	call	TEST_Assert

; 102  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 3), (q_r_result = ep->PMC_DivRem_X_X(u, v, &q, &r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Xの復帰コードが期待通りではない(%d)", q_r_result));

	mov	rdx, QWORD PTR v$[rsp]
	lea	r9, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR u$[rsp]
	lea	r8, QWORD PTR q$[rsp]
	call	QWORD PTR [r14+160]
	mov	edx, eax
	mov	DWORD PTR q_r_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0DB@FNKPNHFA@PMC_DivRem_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	call	FormatTestMesssage
	mov	esi, DWORD PTR desired_return_code$[rsp]
	lea	r8d, QWORD PTR [rbp+3]
	cmp	DWORD PTR q_r_result$1$[rsp], esi
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edi, ebp
	mov	edx, r12d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r15
	call	TEST_Assert

; 103  : 	if (desired_return_code == PMC_STATUS_OK)

	test	esi, esi
	jne	$LN2@TEST_PMC_D

; 104  : 	{
; 105  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 4), (result = ep->PMC_To_X_B(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR q$[rsp]
	lea	r9, QWORD PTR actual_q_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_q_buf$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+4]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r15
	call	TEST_Assert

; 106  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 5), (result = ep->PMC_To_X_B(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR r$[rsp]
	lea	r9, QWORD PTR actual_r_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_r_buf$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+5]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r15
	call	TEST_Assert

; 107  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 6), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	rdx, QWORD PTR actual_q_buf_size$[rsp]
	lea	edi, QWORD PTR [rbp-1]
	mov	rcx, QWORD PTR desired_q_buf$[rsp]
	cmp	rdx, QWORD PTR desired_q_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN19@TEST_PMC_D
$LN21@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c

; 107  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 6), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	eax, edi
	jmp	SHORT $LN7@TEST_PMC_D
$LN19@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN9@TEST_PMC_D
	lea	r8, QWORD PTR actual_q_buf$[rsp]
	sub	r8, rcx
	npad	1
$LL8@TEST_PMC_D:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [r8+rcx], al
	jne	SHORT $LN21@TEST_PMC_D

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rcx

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL8@TEST_PMC_D
$LN9@TEST_PMC_D:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN7@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c

; 107  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 6), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	ebx, ebp
	mov	r8d, 6
	mov	edx, r12d
	sete	bl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 108  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 7), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, "剰余の値が一致しない");

	mov	rdx, QWORD PTR actual_r_buf_size$[rsp]
	mov	rax, QWORD PTR desired_r_buf$[rsp]
	cmp	rdx, QWORD PTR desired_r_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	jne	SHORT $LN13@TEST_PMC_D

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN15@TEST_PMC_D
	lea	r8, QWORD PTR actual_r_buf$[rsp]
	sub	r8, rax
	npad	4
$LL14@TEST_PMC_D:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN13@TEST_PMC_D

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL14@TEST_PMC_D
$LN15@TEST_PMC_D:

; 112  :     }
; 113  :     return (0);

	mov	edi, ebp
$LN13@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c

; 108  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 7), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, "剰余の値が一致しない");

	test	edi, edi
	lea	rcx, OFFSET FLAT:??_C@_0BH@PLHNBAHA@PMC_DivRem_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 7
	mov	edx, r12d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r15
	call	TEST_Assert
$LN2@TEST_PMC_D:

; 109  : 	}
; 110  : 	if (q_r_result == PMC_STATUS_OK)

	cmp	DWORD PTR q_r_result$1$[rsp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 111  : 	{
; 112  : 		ep->PMC_Dispose(q);

	mov	rcx, QWORD PTR q$[rsp]
	call	QWORD PTR [r14+40]

; 113  : 		ep->PMC_Dispose(r);

	mov	rcx, QWORD PTR r$[rsp]
	call	QWORD PTR [r14+40]
$LN3@TEST_PMC_D:

; 114  : 	}
; 115  : 	if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$1$[rsp], 0
	jne	SHORT $LN4@TEST_PMC_D

; 116  : 		ep->PMC_Dispose(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	QWORD PTR [r14+40]
$LN4@TEST_PMC_D:

; 117  : 	if (u_result == PMC_STATUS_OK)

	test	r13d, r13d
	jne	SHORT $LN5@TEST_PMC_D

; 118  : 		ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [r14+40]
$LN5@TEST_PMC_D:

; 119  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 632				; 00000278H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
;	COMDAT TEST_PMC_DivRem_X_L
_TEXT	SEGMENT
q_result$1$ = 32
q$ = 40
u$ = 48
actual_q_buf_size$ = 56
actual_r$ = 64
actual_q_buf$ = 80
__$ArrayPad$ = 336
env$ = 432
ep$ = 440
no$ = 448
u_buf$ = 456
u_buf_size$ = 464
v$ = 472
desired_return_code$ = 480
desired_q_buf$ = 488
desired_q_buf_size$ = 496
desired_r$ = 504
TEST_PMC_DivRem_X_L PROC				; COMDAT

; 63   : {

$LN18:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 360				; 00000168H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, rdx
	mov	r12d, r8d

; 64   : 	HANDLE u;
; 65   : 	HANDLE q;
; 66   : 	unsigned char actual_q_buf[256];
; 67   : 	size_t actual_q_buf_size;
; 68   : 	unsigned __int64 actual_r;
; 69   : 	PMC_STATUS_CODE result;
; 70   : 	PMC_STATUS_CODE u_result;
; 71   : 	PMC_STATUS_CODE q_result;
; 72   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	rdx, QWORD PTR u_buf_size$[rsp]
	lea	r8, QWORD PTR u$[rsp]
	mov	r15, rcx
	mov	rcx, r9
	call	QWORD PTR [r14+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r13d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	test	r13d, r13d
	mov	ebx, ebp
	mov	edx, r12d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 73   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 2), (q_result = ep->PMC_DivRem_X_L(u, v, &q, &actual_r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Lの復帰コードが期待通りではない(%d)", q_result));

	mov	rdx, QWORD PTR v$[rsp]
	lea	r9, QWORD PTR actual_r$[rsp]
	mov	rcx, QWORD PTR u$[rsp]
	lea	r8, QWORD PTR q$[rsp]
	call	QWORD PTR [r14+152]
	mov	edx, eax
	mov	DWORD PTR q_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0DB@IELOONJL@PMC_DivRem_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	call	FormatTestMesssage
	mov	esi, DWORD PTR desired_return_code$[rsp]
	lea	r8d, QWORD PTR [rbp+2]
	cmp	DWORD PTR q_result$1$[rsp], esi
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edi, ebp
	mov	edx, r12d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r15
	call	TEST_Assert

; 74   : 	if (desired_return_code == PMC_STATUS_OK)

	test	esi, esi
	jne	$LN2@TEST_PMC_D

; 75   : 	{
; 76   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 3), (result = ep->PMC_To_X_B(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR q$[rsp]
	lea	r9, QWORD PTR actual_q_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_q_buf$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+3]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r15
	call	TEST_Assert

; 77   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	rdx, QWORD PTR actual_q_buf_size$[rsp]
	mov	rax, QWORD PTR desired_q_buf$[rsp]
	cmp	rdx, QWORD PTR desired_q_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN12@TEST_PMC_D
$LN13@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c

; 77   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	eax, -1
	jmp	SHORT $LN6@TEST_PMC_D
$LN12@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN8@TEST_PMC_D
	lea	r8, QWORD PTR actual_q_buf$[rsp]
	sub	r8, rax
	npad	8
$LL7@TEST_PMC_D:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN13@TEST_PMC_D

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL7@TEST_PMC_D
$LN8@TEST_PMC_D:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN6@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c

; 77   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	ebx, ebp
	mov	r8d, 4
	mov	edx, r12d
	sete	bl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 78   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 5), actual_r == desired_r, "剰余の値が一致しない");

	mov	rax, QWORD PTR desired_r$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@NFDIDBOC@PMC_DivRem_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	QWORD PTR actual_r$[rsp], rax
	mov	r8d, 5
	mov	edx, r12d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r15
	call	TEST_Assert
$LN2@TEST_PMC_D:

; 79   : 	}
; 80   : 	if (q_result == PMC_STATUS_OK)

	cmp	DWORD PTR q_result$1$[rsp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 81   : 		ep->PMC_Dispose(q);

	mov	rcx, QWORD PTR q$[rsp]
	call	QWORD PTR [r14+40]
$LN3@TEST_PMC_D:

; 82   : 	if (u_result == PMC_STATUS_OK)

	test	r13d, r13d
	jne	SHORT $LN4@TEST_PMC_D

; 83   : 		ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [r14+40]
$LN4@TEST_PMC_D:

; 84   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 360				; 00000168H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_DivRem_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
;	COMDAT TEST_PMC_DivRem_X_I
_TEXT	SEGMENT
q_result$1$ = 32
actual_r$ = 36
q$ = 40
u$ = 48
actual_q_buf_size$ = 56
actual_q_buf$ = 64
__$ArrayPad$ = 320
env$ = 416
ep$ = 424
no$ = 432
u_buf$ = 440
u_buf_size$ = 448
v$ = 456
desired_return_code$ = 464
desired_q_buf$ = 472
desired_q_buf_size$ = 480
desired_r$ = 488
TEST_PMC_DivRem_X_I PROC				; COMDAT

; 39   : {

$LN18:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 344				; 00000158H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, rdx
	mov	r12d, r8d

; 40   : 	HANDLE u;
; 41   : 	HANDLE q;
; 42   : 	unsigned char actual_q_buf[256];
; 43   : 	size_t actual_q_buf_size;
; 44   : 	unsigned __int32 actual_r;
; 45   : 	PMC_STATUS_CODE result;
; 46   : 	PMC_STATUS_CODE u_result;
; 47   : 	PMC_STATUS_CODE q_result;
; 48   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	rdx, QWORD PTR u_buf_size$[rsp]
	lea	r8, QWORD PTR u$[rsp]
	mov	r15, rcx
	mov	rcx, r9
	call	QWORD PTR [r14+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r13d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	test	r13d, r13d
	mov	ebx, ebp
	mov	edx, r12d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 49   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 2), (q_result = ep->PMC_DivRem_X_I(u, v, &q, &actual_r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Iの復帰コードが期待通りではない(%d)", q_result));

	mov	edx, DWORD PTR v$[rsp]
	lea	r9, QWORD PTR actual_r$[rsp]
	mov	rcx, QWORD PTR u$[rsp]
	lea	r8, QWORD PTR q$[rsp]
	call	QWORD PTR [r14+144]
	mov	edx, eax
	mov	DWORD PTR q_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0DB@CJJOGBJJ@PMC_DivRem_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	call	FormatTestMesssage
	mov	esi, DWORD PTR desired_return_code$[rsp]
	lea	r8d, QWORD PTR [rbp+2]
	cmp	DWORD PTR q_result$1$[rsp], esi
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edi, ebp
	mov	edx, r12d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r15
	call	TEST_Assert

; 50   : 	if (desired_return_code == PMC_STATUS_OK)

	test	esi, esi
	jne	$LN2@TEST_PMC_D

; 51   : 	{
; 52   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 3), (result = ep->PMC_To_X_B(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR q$[rsp]
	lea	r9, QWORD PTR actual_q_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_q_buf$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+3]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r15
	call	TEST_Assert

; 53   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	rdx, QWORD PTR actual_q_buf_size$[rsp]
	mov	rax, QWORD PTR desired_q_buf$[rsp]
	cmp	rdx, QWORD PTR desired_q_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN12@TEST_PMC_D
$LN13@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c

; 53   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	eax, -1
	jmp	SHORT $LN6@TEST_PMC_D
$LN12@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN8@TEST_PMC_D
	lea	r8, QWORD PTR actual_q_buf$[rsp]
	sub	r8, rax
$LL7@TEST_PMC_D:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN13@TEST_PMC_D

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL7@TEST_PMC_D
$LN8@TEST_PMC_D:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN6@TEST_PMC_D:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c

; 53   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	ebx, ebp
	mov	r8d, 4
	mov	edx, r12d
	sete	bl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BD@NJDOJIFK@?$IP?$KE?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 54   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 5), actual_r == desired_r, "剰余の値が一致しない");

	mov	eax, DWORD PTR desired_r$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@DDBBPKKG@PMC_DivRem_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	DWORD PTR actual_r$[rsp], eax
	mov	r8d, 5
	mov	edx, r12d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BF@GAFJKMBL@?$IP?h?$JH?$FN?$IC?L?$JCl?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r15
	call	TEST_Assert
$LN2@TEST_PMC_D:

; 55   : 	}
; 56   : 	if (q_result == PMC_STATUS_OK)

	cmp	DWORD PTR q_result$1$[rsp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 57   : 		ep->PMC_Dispose(q);

	mov	rcx, QWORD PTR q$[rsp]
	call	QWORD PTR [r14+40]
$LN3@TEST_PMC_D:

; 58   : 	if (u_result == PMC_STATUS_OK)

	test	r13d, r13d
	jne	SHORT $LN4@TEST_PMC_D

; 59   : 		ep->PMC_Dispose(u);

	mov	rcx, QWORD PTR u$[rsp]
	call	QWORD PTR [r14+40]
$LN4@TEST_PMC_D:

; 60   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 344				; 00000158H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_DivRem_X_I ENDP
_TEXT	ENDS
END
