; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	TEST_PMC_Equals_X_I
PUBLIC	TEST_PMC_Equals_X_L
PUBLIC	TEST_PMC_Equals_X_X
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BH@INBAFMPM@PMC_Equals_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@BFPPMEBH@PMC_Equals_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BH@GLDJJHLI@PMC_Equals_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@LINPEIBF@PMC_Equals_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
PUBLIC	??_C@_0BH@EFHMLGCK@PMC_Equals_X_X?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DB@GBMOHCNO@PMC_Equals_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_Equals_X_I DD imagerel $LN5
	DD	imagerel $LN5+310
	DD	imagerel $unwind$TEST_PMC_Equals_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_Equals_X_L DD imagerel $LN5
	DD	imagerel $LN5+311
	DD	imagerel $unwind$TEST_PMC_Equals_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_Equals_X_X DD imagerel $LN6
	DD	imagerel $LN6+418
	DD	imagerel $unwind$TEST_PMC_Equals_X_X
pdata	ENDS
;	COMDAT ??_C@_0DB@GBMOHCNO@PMC_Equals_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@GBMOHCNO@PMC_Equals_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_Equals_X_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EFHMLGCK@PMC_Equals_X_X?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@EFHMLGCK@PMC_Equals_X_X?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Equals_X'
	DB	'_X (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LINPEIBF@PMC_Equals_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@LINPEIBF@PMC_Equals_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_Equals_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GLDJJHLI@PMC_Equals_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@GLDJJHLI@PMC_Equals_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Equals_X'
	DB	'_L (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BFPPMEBH@PMC_Equals_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
CONST	SEGMENT
??_C@_0DB@BFPPMEBH@PMC_Equals_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@ DB 'P'
	DB	'MC_Equals_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@INBAFMPM@PMC_Equals_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BH@INBAFMPM@PMC_Equals_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Equals_X'
	DB	'_I (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_Equals_X_X DD 0c1c01H
	DD	011641cH
	DD	010541cH
	DD	0e341cH
	DD	0f018721cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_Equals_X_L DD 0c1c01H
	DD	0f641cH
	DD	0e541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_Equals_X_I DD 0c1c01H
	DD	0f641cH
	DD	0e541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_equals.c
;	COMDAT TEST_PMC_Equals_X_X
_TEXT	SEGMENT
x_result$1$ = 32
y$ = 40
x$ = 48
env$ = 112
actual_z$ = 120
ep$ = 120
no$ = 128
x_buf$ = 136
x_buf_size$ = 144
y_buf$ = 152
y_buf_size$ = 160
desired_z$ = 168
TEST_PMC_Equals_X_X PROC				; COMDAT

; 65   : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
	mov	r13, rdx
	mov	r15d, r8d

; 66   :     HANDLE x;
; 67   :     HANDLE y;
; 68   :     int actual_z;
; 69   :     PMC_STATUS_CODE result;
; 70   :     PMC_STATUS_CODE x_result;
; 71   :     PMC_STATUS_CODE y_result;
; 72   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_X (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR x_buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	r12, rcx
	mov	rcx, r9
	call	QWORD PTR [r13+32]
	mov	edx, eax
	mov	DWORD PTR x_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	esi, eax
	call	FormatTestMesssage
	xor	r14d, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BH@EFHMLGCK@PMC_Equals_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	test	esi, esi
	mov	ebx, r14d
	mov	edx, r15d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [r14+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r12
	call	TEST_Assert

; 73   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_X (%d.%d)", no, 2), (y_result = ep->PMC_From_B(y_buf, y_buf_size, &y)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", y_result));

	mov	rdx, QWORD PTR y_buf_size$[rsp]
	lea	r8, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR y_buf$[rsp]
	call	QWORD PTR [r13+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebp, eax
	call	FormatTestMesssage
	test	ebp, ebp
	lea	r8d, QWORD PTR [r14+2]
	mov	edi, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BH@EFHMLGCK@PMC_Equals_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r15d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r12
	call	TEST_Assert

; 74   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_X (%d.%d)", no, 3), (result = ep->PMC_Equals_X_X(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Equals_X_Xの復帰コードが期待通りではない(%d)", result));

	mov	rdx, QWORD PTR y$[rsp]
	lea	r8, QWORD PTR actual_z$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r13+312]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0DB@GBMOHCNO@PMC_Equals_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [r14+3]
	mov	esi, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BH@EFHMLGCK@PMC_Equals_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r15d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r12
	call	TEST_Assert

; 75   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_I (%d.%d)", no, 4), actual_z == desired_z, "データの内容が一致しない");

	mov	eax, DWORD PTR desired_z$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@INBAFMPM@PMC_Equals_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	DWORD PTR actual_z$[rsp], eax
	mov	r8d, 4
	mov	edx, r15d
	sete	r14b
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, r14d
	mov	rcx, r12
	call	TEST_Assert

; 76   :     if (y_result == PMC_STATUS_OK)

	test	ebp, ebp
	jne	SHORT $LN2@TEST_PMC_E

; 77   :         ep->PMC_Dispose(y);

	mov	rcx, QWORD PTR y$[rsp]
	call	QWORD PTR [r13+40]
$LN2@TEST_PMC_E:

; 78   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR x_result$1$[rsp], 0
	jne	SHORT $LN3@TEST_PMC_E

; 79   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r13+40]
$LN3@TEST_PMC_E:

; 80   : }

	lea	r11, QWORD PTR [rsp+64]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsi, QWORD PTR [r11+72]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
TEST_PMC_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_equals.c
;	COMDAT TEST_PMC_Equals_X_L
_TEXT	SEGMENT
x$ = 32
env$ = 96
actual_z$ = 104
ep$ = 104
no$ = 112
x_buf$ = 120
x_buf_size$ = 128
y$ = 136
desired_z$ = 144
TEST_PMC_Equals_X_L PROC				; COMDAT

; 52   : {

$LN5:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	r13, rdx
	mov	r14d, r8d

; 53   :     HANDLE x;
; 54   :     int actual_z;
; 55   :     PMC_STATUS_CODE result;
; 56   :     PMC_STATUS_CODE x_result;
; 57   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_L (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR x_buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	r12, rcx
	mov	rcx, r9
	call	QWORD PTR [r13+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@GLDJJHLI@PMC_Equals_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, ebp
	mov	edx, r14d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r12
	call	TEST_Assert

; 58   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_L (%d.%d)", no, 2), (result = ep->PMC_Equals_X_L(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Equals_X_Lの復帰コードが期待通りではない(%d)", result));

	mov	rdx, QWORD PTR y$[rsp]
	lea	r8, QWORD PTR actual_z$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r13+304]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0DB@LINPEIBF@PMC_Equals_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+2]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@GLDJJHLI@PMC_Equals_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r14d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r12
	call	TEST_Assert

; 59   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_I (%d.%d)", no, 3), actual_z == desired_z, "データの内容が一致しない");

	mov	eax, DWORD PTR desired_z$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@INBAFMPM@PMC_Equals_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	DWORD PTR actual_z$[rsp], eax
	mov	r8d, 3
	mov	edx, r14d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r12
	call	TEST_Assert

; 60   :     if (x_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN2@TEST_PMC_E

; 61   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r13+40]
$LN2@TEST_PMC_E:

; 62   : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
TEST_PMC_Equals_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_equals.c
;	COMDAT TEST_PMC_Equals_X_I
_TEXT	SEGMENT
x$ = 32
env$ = 96
actual_z$ = 104
ep$ = 104
no$ = 112
x_buf$ = 120
x_buf_size$ = 128
y$ = 136
desired_z$ = 144
TEST_PMC_Equals_X_I PROC				; COMDAT

; 39   : {

$LN5:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	r13, rdx
	mov	r14d, r8d

; 40   :     HANDLE x;
; 41   :     int actual_z;
; 42   :     PMC_STATUS_CODE result;
; 43   :     PMC_STATUS_CODE x_result;
; 44   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_I (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR x_buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	r12, rcx
	mov	rcx, r9
	call	QWORD PTR [r13+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@INBAFMPM@PMC_Equals_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, ebp
	mov	edx, r14d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r12
	call	TEST_Assert

; 45   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_I (%d.%d)", no, 2), (result = ep->PMC_Equals_X_I(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Equals_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	edx, DWORD PTR y$[rsp]
	lea	r8, QWORD PTR actual_z$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r13+296]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0DB@BFPPMEBH@PMC_Equals_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+2]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BH@INBAFMPM@PMC_Equals_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r14d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r12
	call	TEST_Assert

; 46   :     TEST_Assert(env, FormatTestLabel("PMC_Equals_X_I (%d.%d)", no, 3), actual_z == desired_z, "データの内容が一致しない");

	mov	eax, DWORD PTR desired_z$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BH@INBAFMPM@PMC_Equals_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	DWORD PTR actual_z$[rsp], eax
	mov	r8d, 3
	mov	edx, r14d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r12
	call	TEST_Assert

; 47   :     if (x_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN2@TEST_PMC_E

; 48   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r13+40]
$LN2@TEST_PMC_E:

; 49   : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
TEST_PMC_Equals_X_I ENDP
_TEXT	ENDS
END
