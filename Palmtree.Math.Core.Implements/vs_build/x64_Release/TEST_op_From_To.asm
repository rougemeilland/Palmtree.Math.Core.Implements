; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	TEST_PMC_From_I
PUBLIC	TEST_PMC_From_L
PUBLIC	TEST_PMC_To_X_I
PUBLIC	TEST_PMC_To_X_L
PUBLIC	??_C@_0CN@KHEEECME@PMC_From_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0CN@KGEMOMG@PMC_From_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_From_I DD imagerel $LN16
	DD	imagerel $LN16+374
	DD	imagerel $unwind$TEST_PMC_From_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_From_L DD imagerel $LN16
	DD	imagerel $LN16+374
	DD	imagerel $unwind$TEST_PMC_From_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_To_X_I DD imagerel $LN6
	DD	imagerel $LN6+321
	DD	imagerel $unwind$TEST_PMC_To_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_To_X_L DD imagerel $LN6
	DD	imagerel $LN6+323
	DD	imagerel $unwind$TEST_PMC_To_X_L
pdata	ENDS
;	COMDAT ??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_To_X_L (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_To_X_I (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_From_L (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KGEMOMG@PMC_From_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@KGEMOMG@PMC_From_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_From_I (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KHEEECME@PMC_From_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@KHEEECME@PMC_From_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_To_X_L DD 0a1c01H
	DD	0f641cH
	DD	0e341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_To_X_I DD 0a1c01H
	DD	0f641cH
	DD	0e341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_From_L DD 0a2619H
	DD	0290114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_From_I DD 0a2619H
	DD	0290114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 8
count1$ = 16
buffer2$ = 24
count2$ = 32
_EQUALS_MEMORY PROC					; COMDAT

; 103  :     if (count1 != count2)

	cmp	rdx, r9
	jne	SHORT $LN8@EQUALS_MEM

; 104  :         return (-1);
; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN3@EQUALS_MEM
	sub	rcx, r8
	npad	3
$LL2@EQUALS_MEM:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	eax, BYTE PTR [r8]
	cmp	BYTE PTR [rcx+r8], al
	jne	SHORT $LN8@EQUALS_MEM

; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	r8

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 112  :     }
; 113  :     return (0);

	xor	eax, eax

; 114  : }

	ret	0
$LN8@EQUALS_MEM:

; 108  :             return (-1);

	mov	eax, -1

; 114  : }

	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
;	COMDAT TEST_PMC_To_X_L
_TEXT	SEGMENT
rvalue$ = 32
env$ = 96
x$ = 104
ep$ = 104
no$ = 112
buf$ = 120
buf_size$ = 128
desired_result_code$ = 136
desired_rvalue$ = 144
TEST_PMC_To_X_L PROC					; COMDAT

; 81   : {

$LN6:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	r12, rdx
	mov	r13d, r8d

; 82   :     HANDLE x;
; 83   :     unsigned __int64 rvalue;
; 84   :     PMC_STATUS_CODE result;
; 85   :     PMC_STATUS_CODE x_result;
; 86   :     TEST_Assert(env, FormatTestLabel("PMC_To_X_L (%d.%d)", no, 1), (x_result = ep->PMC_From_B(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	rsi, rcx
	mov	rcx, r9
	call	QWORD PTR [r12+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	r14d, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, r14d
	mov	edx, r13d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [r14+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, rsi
	call	TEST_Assert

; 87   :     TEST_Assert(env, FormatTestLabel("PMC_To_X_L (%d.%d)", no, 2), (result = ep->PMC_To_X_L(x, &rvalue)) == desired_result_code, FormatTestMesssage("PMC_To_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR x$[rsp]
	lea	rdx, QWORD PTR rvalue$[rsp]
	call	QWORD PTR [r12+56]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	cmp	ebx, DWORD PTR desired_result_code$[rsp]
	lea	r8d, QWORD PTR [r14+2]
	mov	esi, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r13d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rbx, QWORD PTR env$[rsp]
	mov	rdx, rax
	mov	rcx, rbx
	mov	r9, rdi
	mov	r8d, esi
	call	TEST_Assert

; 88   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_result_code$[rsp], r14d
	jne	SHORT $LN2@TEST_PMC_T

; 89   :         TEST_Assert(env, FormatTestLabel("PMC_To_X_L (%d.%d)", no, 3), rvalue == desired_rvalue, "データの内容が一致しない");

	mov	rax, QWORD PTR desired_rvalue$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	QWORD PTR rvalue$[rsp], rax
	mov	r8d, 3
	mov	edx, r13d
	sete	r14b
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, r14d
	mov	rcx, rbx
	call	TEST_Assert
$LN2@TEST_PMC_T:

; 90   :     if (x_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN3@TEST_PMC_T

; 91   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r12+40]
$LN3@TEST_PMC_T:

; 92   : }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
TEST_PMC_To_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
;	COMDAT TEST_PMC_To_X_I
_TEXT	SEGMENT
x$ = 32
env$ = 96
rvalue$ = 104
ep$ = 104
no$ = 112
buf$ = 120
buf_size$ = 128
desired_result_code$ = 136
desired_rvalue$ = 144
TEST_PMC_To_X_I PROC					; COMDAT

; 67   : {

$LN6:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	r12, rdx
	mov	r13d, r8d

; 68   :     HANDLE x;
; 69   :     unsigned __int32 rvalue;
; 70   :     PMC_STATUS_CODE result;
; 71   :     PMC_STATUS_CODE x_result;
; 72   :     TEST_Assert(env, FormatTestLabel("PMC_To_X_I (%d.%d)", no, 1), (x_result = ep->PMC_From_B(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	rsi, rcx
	mov	rcx, r9
	call	QWORD PTR [r12+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	r14d, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, r14d
	mov	edx, r13d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [r14+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, rsi
	call	TEST_Assert

; 73   :     TEST_Assert(env, FormatTestLabel("PMC_To_X_I (%d.%d)", no, 2), (result = ep->PMC_To_X_I(x, &rvalue)) == desired_result_code, FormatTestMesssage("PMC_To_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR x$[rsp]
	lea	rdx, QWORD PTR rvalue$[rsp]
	call	QWORD PTR [r12+48]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	cmp	ebx, DWORD PTR desired_result_code$[rsp]
	lea	r8d, QWORD PTR [r14+2]
	mov	esi, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r13d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rbx, QWORD PTR env$[rsp]
	mov	rdx, rax
	mov	rcx, rbx
	mov	r9, rdi
	mov	r8d, esi
	call	TEST_Assert

; 74   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_result_code$[rsp], r14d
	jne	SHORT $LN2@TEST_PMC_T

; 75   :         TEST_Assert(env, FormatTestLabel("PMC_To_X_I (%d.%d)", no, 3), rvalue == desired_rvalue, "データの内容が一致しない");

	mov	eax, DWORD PTR desired_rvalue$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	cmp	DWORD PTR rvalue$[rsp], eax
	mov	r8d, 3
	mov	edx, r13d
	sete	r14b
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, r14d
	mov	rcx, rbx
	call	TEST_Assert
$LN2@TEST_PMC_T:

; 76   :     if (x_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN3@TEST_PMC_T

; 77   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r12+40]
$LN3@TEST_PMC_T:

; 78   : }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
TEST_PMC_To_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
;	COMDAT TEST_PMC_From_L
_TEXT	SEGMENT
x$ = 32
rlength$ = 40
rbuffer$ = 48
__$ArrayPad$ = 304
env$ = 400
ep$ = 408
no$ = 416
v$ = 424
buf$ = 432
buf_size$ = 440
TEST_PMC_From_L PROC					; COMDAT

; 53   : {

$LN16:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, rdx
	mov	r15, rcx

; 54   :     HANDLE x;
; 55   :     unsigned char rbuffer[256];
; 56   :     size_t rlength;
; 57   :     PMC_STATUS_CODE result;
; 58   :     PMC_STATUS_CODE x_result;
; 59   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 1), (x_result = ep->PMC_From_L(v, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Lの復帰コードが期待通りではない(%d)", x_result));

	lea	rdx, QWORD PTR x$[rsp]
	mov	rcx, r9
	mov	r12d, r8d
	call	QWORD PTR [r14+24]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@KGEMOMG@PMC_From_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r13d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@
	test	r13d, r13d
	mov	ebx, ebp
	mov	edx, r12d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 60   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 2), (result = ep->PMC_To_X_B(x, rbuffer, sizeof(rbuffer), &rlength)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR x$[rsp]
	lea	r9, QWORD PTR rlength$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR rbuffer$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+2]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r15
	call	TEST_Assert

; 61   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	mov	rdx, QWORD PTR rlength$[rsp]
	mov	rax, QWORD PTR buf$[rsp]
	cmp	rdx, QWORD PTR buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN10@TEST_PMC_F
$LN11@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c

; 61   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	mov	eax, -1
	jmp	SHORT $LN4@TEST_PMC_F
$LN10@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN6@TEST_PMC_F
	lea	r8, QWORD PTR rbuffer$[rsp]
	sub	r8, rax
$LL5@TEST_PMC_F:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN11@TEST_PMC_F

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL5@TEST_PMC_F
$LN6@TEST_PMC_F:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN4@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c

; 61   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 3
	mov	edx, r12d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r15
	call	TEST_Assert

; 62   :     if (x_result == PMC_STATUS_OK)

	test	r13d, r13d
	jne	SHORT $LN2@TEST_PMC_F

; 63   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+40]
$LN2@TEST_PMC_F:

; 64   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_From_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
;	COMDAT TEST_PMC_From_I
_TEXT	SEGMENT
x$ = 32
rlength$ = 40
rbuffer$ = 48
__$ArrayPad$ = 304
env$ = 400
ep$ = 408
no$ = 416
v$ = 424
buf$ = 432
buf_size$ = 440
TEST_PMC_From_I PROC					; COMDAT

; 39   : {

$LN16:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, rdx
	mov	r15, rcx

; 40   :     HANDLE x;
; 41   :     unsigned char rbuffer[256];
; 42   :     size_t rlength;
; 43   :     PMC_STATUS_CODE result;
; 44   :     PMC_STATUS_CODE x_result;
; 45   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 1), (x_result = ep->PMC_From_I(v, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Iの復帰コードが期待通りではない(%d)", x_result));

	lea	rdx, QWORD PTR x$[rsp]
	mov	ecx, r9d
	mov	r12d, r8d
	call	QWORD PTR [r14+16]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@KHEEECME@PMC_From_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r13d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@
	test	r13d, r13d
	mov	ebx, ebp
	mov	edx, r12d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 46   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 2), (result = ep->PMC_To_X_B(x, rbuffer, sizeof(rbuffer), &rlength)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR x$[rsp]
	lea	r9, QWORD PTR rlength$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR rbuffer$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+2]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r15
	call	TEST_Assert

; 47   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	mov	rdx, QWORD PTR rlength$[rsp]
	mov	rax, QWORD PTR buf$[rsp]
	cmp	rdx, QWORD PTR buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN10@TEST_PMC_F
$LN11@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c

; 47   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	mov	eax, -1
	jmp	SHORT $LN4@TEST_PMC_F
$LN10@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN6@TEST_PMC_F
	lea	r8, QWORD PTR rbuffer$[rsp]
	sub	r8, rax
$LL5@TEST_PMC_F:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN11@TEST_PMC_F

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL5@TEST_PMC_F
$LN6@TEST_PMC_F:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN4@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c

; 47   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 3
	mov	edx, r12d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r15
	call	TEST_Assert

; 48   :     if (x_result == PMC_STATUS_OK)

	test	r13d, r13d
	jne	SHORT $LN2@TEST_PMC_F

; 49   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+40]
$LN2@TEST_PMC_F:

; 50   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_From_I ENDP
_TEXT	ENDS
END
