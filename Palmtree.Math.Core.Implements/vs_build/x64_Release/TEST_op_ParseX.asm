; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	TEST_PMC_ParseX
PUBLIC	??_C@_13DEFPDAGF@?$AA?0@			; `string'
PUBLIC	??_C@_01EKENIIDA@3@				; `string'
PUBLIC	??_C@_13JOFGPIOO@?$AA?4@			; `string'
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL@			; `string'
PUBLIC	??_C@_13IMODFHAA@?$AA?9@			; `string'
PUBLIC	??_C@_0CP@JCNEMHLF@PMC_TryParse?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC@ ; `string'
PUBLIC	??_C@_0BD@KDIELBDO@PMC_ParseX?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
EXTRN	__imp_lstrcpyA:PROC
EXTRN	__imp_lstrcpyW:PROC
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?actual_buf@?1??TEST_PMC_ParseX@@9@9 DB 0100H DUP (?)	; `TEST_PMC_ParseX'::`2'::actual_buf
?actual_buf_size@?1??TEST_PMC_ParseX@@9@9 DQ 01H DUP (?) ; `TEST_PMC_ParseX'::`2'::actual_buf_size
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_ParseX DD imagerel $LN17
	DD	imagerel $LN17+505
	DD	imagerel $unwind$TEST_PMC_ParseX
pdata	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KDIELBDO@PMC_ParseX?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@KDIELBDO@PMC_ParseX?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_ParseX (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@JCNEMHLF@PMC_TryParse?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC@
CONST	SEGMENT
??_C@_0CP@JCNEMHLF@PMC_TryParse?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC@ DB 'P'
	DB	'MC_TryParse', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13IMODFHAA@?$AA?9@
CONST	SEGMENT
??_C@_13IMODFHAA@?$AA?9@ DB '-', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL@ DB '+', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13JOFGPIOO@?$AA?4@
CONST	SEGMENT
??_C@_13JOFGPIOO@?$AA?4@ DB '.', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3@
CONST	SEGMENT
??_C@_01EKENIIDA@3@ DB '3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13DEFPDAGF@?$AA?0@
CONST	SEGMENT
??_C@_13DEFPDAGF@?$AA?0@ DB ',', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_ParseX DD 092019H
	DD	0f00dc211H
	DD	0d009e00bH
	DD	07005c007H
	DD	050036004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 8
count1$ = 16
buffer2$ = 24
count2$ = 32
_EQUALS_MEMORY PROC					; COMDAT

; 103  :     if (count1 != count2)

	cmp	rdx, r9
	jne	SHORT $LN8@EQUALS_MEM

; 104  :         return (-1);
; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN3@EQUALS_MEM
	sub	rcx, r8
	npad	3
$LL2@EQUALS_MEM:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	eax, BYTE PTR [r8]
	cmp	BYTE PTR [rcx+r8], al
	jne	SHORT $LN8@EQUALS_MEM

; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	r8

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 112  :     }
; 113  :     return (0);

	xor	eax, eax

; 114  : }

	ret	0
$LN8@EQUALS_MEM:

; 108  :             return (-1);

	mov	eax, -1

; 114  : }

	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_parsex.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_parsex.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_parsex.c
;	COMDAT TEST_PMC_ParseX
_TEXT	SEGMENT
x_result$1$ = 32
x$ = 40
opt$ = 48
__$ArrayPad$ = 88
env$ = 176
ep$ = 184
no$ = 192
str$ = 200
styles$ = 208
desired_result_code$ = 216
desired_buf$ = 224
desired_buf_size$ = 232
TEST_PMC_ParseX PROC					; COMDAT

; 39   : {

$LN17:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r15, rdx
	mov	r12, rcx

; 40   :     HANDLE x;
; 41   :     static unsigned char actual_buf[256];
; 42   :     static size_t actual_buf_size;
; 43   :     PMC_STATUS_CODE result;
; 44   :     PMC_STATUS_CODE x_result;
; 45   :     PMC_NUMBER_FORMAT_OPTION opt;
; 46   :     lstrcpyW(opt.GroupSeparator, L",");

	lea	rdx, OFFSET FLAT:??_C@_13DEFPDAGF@?$AA?0@
	mov	rbx, r9
	lea	rcx, QWORD PTR opt$[rsp+4]
	mov	r13d, r8d
	call	QWORD PTR __imp_lstrcpyW

; 47   :     lstrcpy(opt.GroupSizes, "3");

	lea	rdx, OFFSET FLAT:??_C@_01EKENIIDA@3@
	lea	rcx, QWORD PTR opt$[rsp+28]
	call	QWORD PTR __imp_lstrcpyA

; 48   :     lstrcpyW(opt.DecimalSeparator, L".");

	lea	rdx, OFFSET FLAT:??_C@_13JOFGPIOO@?$AA?4@
	lea	rcx, QWORD PTR opt$[rsp+10]
	call	QWORD PTR __imp_lstrcpyW

; 49   :     opt.DecimalDigits = 2;
; 50   :     lstrcpyW(opt.PositiveSign, L"+");

	lea	rdx, OFFSET FLAT:??_C@_13KJIIAINM@?$AA?$CL@
	mov	DWORD PTR opt$[rsp], 2
	lea	rcx, QWORD PTR opt$[rsp+16]
	call	QWORD PTR __imp_lstrcpyW

; 51   :     lstrcpyW(opt.NegativeSign, L"-");

	lea	rdx, OFFSET FLAT:??_C@_13IMODFHAA@?$AA?9@
	lea	rcx, QWORD PTR opt$[rsp+22]
	call	QWORD PTR __imp_lstrcpyW

; 52   :     TEST_Assert(env, FormatTestLabel("PMC_ParseX (%d.%d)", no, 1), (x_result = ep->PMC_TryParse(str, styles, &opt, &x)) == desired_result_code, FormatTestMesssage("PMC_TryParseの復帰コードが期待通りではない(%d)", x_result));

	mov	edx, DWORD PTR styles$[rsp]
	lea	r9, QWORD PTR x$[rsp]
	lea	r8, QWORD PTR opt$[rsp]
	mov	rcx, rbx
	call	QWORD PTR [r15+328]
	mov	edx, eax
	mov	DWORD PTR x_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0CP@JCNEMHLF@PMC_TryParse?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC@
	mov	ebp, eax
	call	FormatTestMesssage
	mov	esi, DWORD PTR desired_result_code$[rsp]
	lea	rcx, OFFSET FLAT:??_C@_0BD@KDIELBDO@PMC_ParseX?5?$CI?$CFd?4?$CFd?$CJ@
	xor	r14d, r14d
	mov	edx, r13d
	cmp	ebp, esi
	mov	ebx, r14d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [r14+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r12
	call	TEST_Assert

; 53   :     if (desired_result_code == PMC_STATUS_OK)

	test	esi, esi
	jne	$LN2@TEST_PMC_P

; 54   :     {
; 55   :         TEST_Assert(env, FormatTestLabel("PMC_ParseX (%d.%d)", no, 2), (result = ep->PMC_To_X_B(x,  actual_buf, sizeof(actual_buf), &actual_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR x$[rsp]
	lea	rbp, OFFSET FLAT:?actual_buf@?1??TEST_PMC_ParseX@@9@9
	mov	rdx, rbp
	lea	r9, OFFSET FLAT:?actual_buf_size@?1??TEST_PMC_ParseX@@9@9
	mov	r8d, 256				; 00000100H
	call	QWORD PTR [r15+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [r14+2]
	mov	esi, r14d
	lea	rcx, OFFSET FLAT:??_C@_0BD@KDIELBDO@PMC_ParseX?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r13d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r12
	call	TEST_Assert

; 56   :         TEST_Assert(env, FormatTestLabel("PMC_ParseX (%d.%d)", no, 3), _EQUALS_MEMORY(actual_buf, actual_buf_size, desired_buf, desired_buf_size) == 0, "データの内容が一致しない");

	mov	rdx, QWORD PTR ?actual_buf_size@?1??TEST_PMC_ParseX@@9@9
	mov	rax, QWORD PTR desired_buf$[rsp]
	cmp	rdx, QWORD PTR desired_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN11@TEST_PMC_P
$LN12@TEST_PMC_P:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_parsex.c

; 56   :         TEST_Assert(env, FormatTestLabel("PMC_ParseX (%d.%d)", no, 3), _EQUALS_MEMORY(actual_buf, actual_buf_size, desired_buf, desired_buf_size) == 0, "データの内容が一致しない");

	mov	eax, -1
	jmp	SHORT $LN5@TEST_PMC_P
$LN11@TEST_PMC_P:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN7@TEST_PMC_P
	sub	rbp, rax
$LL6@TEST_PMC_P:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [rax+rbp], cl
	jne	SHORT $LN12@TEST_PMC_P

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL6@TEST_PMC_P
$LN7@TEST_PMC_P:

; 112  :     }
; 113  :     return (0);

	mov	eax, r14d
$LN5@TEST_PMC_P:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_parsex.c

; 56   :         TEST_Assert(env, FormatTestLabel("PMC_ParseX (%d.%d)", no, 3), _EQUALS_MEMORY(actual_buf, actual_buf_size, desired_buf, desired_buf_size) == 0, "データの内容が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BD@KDIELBDO@PMC_ParseX?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 3
	mov	edx, r13d
	sete	r14b
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, r14d
	mov	rcx, r12
	call	TEST_Assert
	mov	ebp, DWORD PTR x_result$1$[rsp]
$LN2@TEST_PMC_P:

; 57   :     }
; 58   :     if (x_result == PMC_STATUS_OK)

	test	ebp, ebp
	jne	SHORT $LN3@TEST_PMC_P

; 59   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r15+40]
$LN3@TEST_PMC_P:

; 60   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_ParseX ENDP
_TEXT	ENDS
END
