; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	TEST_PMC_RightShift_X_I
PUBLIC	TEST_PMC_RightShift_X_L
PUBLIC	TEST_PMC_LeftShift_X_I
PUBLIC	TEST_PMC_LeftShift_X_L
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BL@BIGKDBIB@PMC_RightShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DF@CIKCLNEH@PMC_RightShift_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ ; `string'
PUBLIC	??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BL@POEDPKMF@PMC_RightShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DF@IFICDBEF@PMC_RightShift_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ ; `string'
PUBLIC	??_C@_0BK@EFNFJOHI@PMC_LeftShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DE@GGGOIKAI@PMC_LeftShift_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@ ; `string'
PUBLIC	??_C@_0BK@KDPMFFDM@PMC_LeftShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DE@MLEOAGAK@PMC_LeftShift_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_RightShift_X_I DD imagerel $LN17
	DD	imagerel $LN17+489
	DD	imagerel $unwind$TEST_PMC_RightShift_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_RightShift_X_L DD imagerel $LN18
	DD	imagerel $LN18+495
	DD	imagerel $unwind$TEST_PMC_RightShift_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_LeftShift_X_I DD imagerel $LN17
	DD	imagerel $LN17+489
	DD	imagerel $unwind$TEST_PMC_LeftShift_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_LeftShift_X_L DD imagerel $LN18
	DD	imagerel $LN18+495
	DD	imagerel $unwind$TEST_PMC_LeftShift_X_L
pdata	ENDS
;	COMDAT ??_C@_0DE@MLEOAGAK@PMC_LeftShift_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
CONST	SEGMENT
??_C@_0DE@MLEOAGAK@PMC_LeftShift_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@ DB 'P'
	DB	'MC_LeftShift_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KDPMFFDM@PMC_LeftShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BK@KDPMFFDM@PMC_LeftShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_LeftS'
	DB	'hift_X_L (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GGGOIKAI@PMC_LeftShift_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
CONST	SEGMENT
??_C@_0DE@GGGOIKAI@PMC_LeftShift_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@ DB 'P'
	DB	'MC_LeftShift_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EFNFJOHI@PMC_LeftShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BK@EFNFJOHI@PMC_LeftShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_LeftS'
	DB	'hift_X_I (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@IFICDBEF@PMC_RightShift_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
CONST	SEGMENT
??_C@_0DF@IFICDBEF@PMC_RightShift_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ DB 'P'
	DB	'MC_RightShift_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@POEDPKMF@PMC_RightShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BL@POEDPKMF@PMC_RightShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Righ'
	DB	'tShift_X_L (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CIKCLNEH@PMC_RightShift_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
CONST	SEGMENT
??_C@_0DF@CIKCLNEH@PMC_RightShift_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@ DB 'P'
	DB	'MC_RightShift_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BIGKDBIB@PMC_RightShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BL@BIGKDBIB@PMC_RightShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Righ'
	DB	'tShift_X_I (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_LeftShift_X_L DD 0a2619H
	DD	02b0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_LeftShift_X_I DD 0a2619H
	DD	02b0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_RightShift_X_L DD 0a2619H
	DD	02b0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_RightShift_X_I DD 0a2619H
	DD	02b0114H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 8
count1$ = 16
buffer2$ = 24
count2$ = 32
_EQUALS_MEMORY PROC					; COMDAT

; 103  :     if (count1 != count2)

	cmp	rdx, r9
	jne	SHORT $LN8@EQUALS_MEM

; 104  :         return (-1);
; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN3@EQUALS_MEM
	sub	rcx, r8
	npad	3
$LL2@EQUALS_MEM:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	eax, BYTE PTR [r8]
	cmp	BYTE PTR [rcx+r8], al
	jne	SHORT $LN8@EQUALS_MEM

; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	r8

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 112  :     }
; 113  :     return (0);

	xor	eax, eax

; 114  : }

	ret	0
$LN8@EQUALS_MEM:

; 108  :             return (-1);

	mov	eax, -1

; 114  : }

	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
;	COMDAT TEST_PMC_LeftShift_X_L
_TEXT	SEGMENT
z$ = 32
x$ = 40
actual_z_buf_size$ = 48
actual_z_buf$ = 64
__$ArrayPad$ = 320
env$ = 416
ep$ = 424
no$ = 432
x_buf$ = 440
x_buf_size$ = 448
n$ = 456
desired_z_buf$ = 464
desired_z_buf_size$ = 472
TEST_PMC_LeftShift_X_L PROC				; COMDAT

; 101  : {

$LN18:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 344				; 00000158H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, rdx
	mov	r12d, r8d

; 102  : #ifdef _M_IX64
; 103  :     HANDLE x;
; 104  :     HANDLE z;
; 105  :     unsigned char actual_z_buf[256];
; 106  :     size_t actual_z_buf_size;
; 107  :     PMC_STATUS_CODE result;
; 108  :     PMC_STATUS_CODE x_result;
; 109  :     PMC_STATUS_CODE z_result;
; 110  :     TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_L (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR x_buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	r15, rcx
	mov	rcx, r9
	call	QWORD PTR [r14+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r13d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BK@KDPMFFDM@PMC_LeftShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	test	r13d, r13d
	mov	ebx, ebp
	mov	edx, r12d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 111  :     TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_L (%d.%d)", no, 2), (z_result = ep->PMC_LeftShift_X_L(x, n, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_LeftShift_X_Lの復帰コードが期待通りではない(%d)", z_result));

	mov	rdx, QWORD PTR n$[rsp]
	lea	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+176]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0DE@MLEOAGAK@PMC_LeftShift_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	mov	esi, eax
	call	FormatTestMesssage
	test	esi, esi
	lea	r8d, QWORD PTR [rbp+2]
	mov	edi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BK@KDPMFFDM@PMC_LeftShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r15
	call	TEST_Assert

; 112  :     if (z_result == PMC_STATUS_OK)

	test	esi, esi
	jne	$LN3@TEST_PMC_L

; 113  :     {
; 114  :         TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_L (%d.%d)", no, 3), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR z$[rsp]
	lea	r9, QWORD PTR actual_z_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_z_buf$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+3]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BK@KDPMFFDM@PMC_LeftShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r15
	call	TEST_Assert

; 115  :         TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	rdx, QWORD PTR actual_z_buf_size$[rsp]
	mov	rax, QWORD PTR desired_z_buf$[rsp]
	cmp	rdx, QWORD PTR desired_z_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN12@TEST_PMC_L
$LN13@TEST_PMC_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c

; 115  :         TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	eax, -1
	jmp	SHORT $LN6@TEST_PMC_L
$LN12@TEST_PMC_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN8@TEST_PMC_L
	lea	r8, QWORD PTR actual_z_buf$[rsp]
	sub	r8, rax
	npad	8
$LL7@TEST_PMC_L:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN13@TEST_PMC_L

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL7@TEST_PMC_L
$LN8@TEST_PMC_L:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN6@TEST_PMC_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c

; 115  :         TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BK@KDPMFFDM@PMC_LeftShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 4
	mov	edx, r12d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r15
	call	TEST_Assert

; 116  :     }
; 117  :     if (z_result == PMC_STATUS_OK)
; 118  :         ep->PMC_Dispose(z);

	mov	rcx, QWORD PTR z$[rsp]
	call	QWORD PTR [r14+40]
$LN3@TEST_PMC_L:

; 119  :     if (x_result == PMC_STATUS_OK)

	test	r13d, r13d
	jne	SHORT $LN4@TEST_PMC_L

; 120  :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+40]
$LN4@TEST_PMC_L:

; 121  : #endif
; 122  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 344				; 00000158H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_LeftShift_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
;	COMDAT TEST_PMC_LeftShift_X_I
_TEXT	SEGMENT
z_result$1$ = 32
z$ = 40
x$ = 48
actual_z_buf_size$ = 56
actual_z_buf$ = 64
__$ArrayPad$ = 320
env$ = 416
ep$ = 424
no$ = 432
x_buf$ = 440
x_buf_size$ = 448
n$ = 456
desired_z_buf$ = 464
desired_z_buf_size$ = 472
TEST_PMC_LeftShift_X_I PROC				; COMDAT

; 82   : {

$LN17:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 344				; 00000158H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, rdx
	mov	r13d, r8d

; 83   :     HANDLE x;
; 84   :     HANDLE z;
; 85   :     unsigned char actual_z_buf[256];
; 86   :     size_t actual_z_buf_size;
; 87   :     PMC_STATUS_CODE result;
; 88   :     PMC_STATUS_CODE x_result;
; 89   :     PMC_STATUS_CODE z_result;
; 90   :     TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_I (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR x_buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	r12, rcx
	mov	rcx, r9
	call	QWORD PTR [r14+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BK@EFNFJOHI@PMC_LeftShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, ebp
	mov	edx, r13d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r12
	call	TEST_Assert

; 91   :     TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_I (%d.%d)", no, 2), (z_result = ep->PMC_LeftShift_X_I(x, n, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_LeftShift_X_Iの復帰コードが期待通りではない(%d)", z_result));

	mov	edx, DWORD PTR n$[rsp]
	lea	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+168]
	mov	edx, eax
	mov	DWORD PTR z_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0DE@GGGOIKAI@PMC_LeftShift_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK@
	mov	esi, eax
	call	FormatTestMesssage
	test	esi, esi
	lea	r8d, QWORD PTR [rbp+2]
	mov	edi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BK@EFNFJOHI@PMC_LeftShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r13d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r12
	call	TEST_Assert

; 92   :     TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_I (%d.%d)", no, 3), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR z$[rsp]
	lea	r9, QWORD PTR actual_z_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_z_buf$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+3]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BK@EFNFJOHI@PMC_LeftShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r13d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r12
	call	TEST_Assert

; 93   :     TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	rdx, QWORD PTR actual_z_buf_size$[rsp]
	mov	rax, QWORD PTR desired_z_buf$[rsp]
	cmp	rdx, QWORD PTR desired_z_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN11@TEST_PMC_L
$LN12@TEST_PMC_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c

; 93   :     TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	eax, -1
	jmp	SHORT $LN5@TEST_PMC_L
$LN11@TEST_PMC_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN7@TEST_PMC_L
	lea	r8, QWORD PTR actual_z_buf$[rsp]
	sub	r8, rax
$LL6@TEST_PMC_L:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN12@TEST_PMC_L

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL6@TEST_PMC_L
$LN7@TEST_PMC_L:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN5@TEST_PMC_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c

; 93   :     TEST_Assert(env, FormatTestLabel("PMC_LeftShift_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BK@EFNFJOHI@PMC_LeftShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 4
	mov	edx, r13d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r12
	call	TEST_Assert

; 94   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR z_result$1$[rsp], 0
	jne	SHORT $LN2@TEST_PMC_L

; 95   :         ep->PMC_Dispose(z);

	mov	rcx, QWORD PTR z$[rsp]
	call	QWORD PTR [r14+40]
$LN2@TEST_PMC_L:

; 96   :     if (x_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN3@TEST_PMC_L

; 97   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+40]
$LN3@TEST_PMC_L:

; 98   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 344				; 00000158H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_LeftShift_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
;	COMDAT TEST_PMC_RightShift_X_L
_TEXT	SEGMENT
z$ = 32
x$ = 40
actual_z_buf_size$ = 48
actual_z_buf$ = 64
__$ArrayPad$ = 320
env$ = 416
ep$ = 424
no$ = 432
x_buf$ = 440
x_buf_size$ = 448
n$ = 456
desired_z_buf$ = 464
desired_z_buf_size$ = 472
TEST_PMC_RightShift_X_L PROC				; COMDAT

; 58   : {

$LN18:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 344				; 00000158H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, rdx
	mov	r12d, r8d

; 59   : #ifdef _M_IX64
; 60   :     HANDLE x;
; 61   :     HANDLE z;
; 62   :     unsigned char actual_z_buf[256];
; 63   :     size_t actual_z_buf_size;
; 64   :     PMC_STATUS_CODE result;
; 65   :     PMC_STATUS_CODE x_result;
; 66   :     PMC_STATUS_CODE z_result;
; 67   :     TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_L (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR x_buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	r15, rcx
	mov	rcx, r9
	call	QWORD PTR [r14+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r13d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@POEDPKMF@PMC_RightShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	test	r13d, r13d
	mov	ebx, ebp
	mov	edx, r12d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r15
	call	TEST_Assert

; 68   :     TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_L (%d.%d)", no, 2), (z_result = ep->PMC_RightShift_X_L(x, n, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_RightShift_X_Lの復帰コードが期待通りではない(%d)", z_result));

	mov	rdx, QWORD PTR n$[rsp]
	lea	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+192]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0DF@IFICDBEF@PMC_RightShift_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
	mov	esi, eax
	call	FormatTestMesssage
	test	esi, esi
	lea	r8d, QWORD PTR [rbp+2]
	mov	edi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@POEDPKMF@PMC_RightShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r15
	call	TEST_Assert

; 69   :     if (z_result == PMC_STATUS_OK)

	test	esi, esi
	jne	$LN3@TEST_PMC_R

; 70   :     {
; 71   :         TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_L (%d.%d)", no, 3), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR z$[rsp]
	lea	r9, QWORD PTR actual_z_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_z_buf$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+3]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@POEDPKMF@PMC_RightShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r12d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r15
	call	TEST_Assert

; 72   :         TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	rdx, QWORD PTR actual_z_buf_size$[rsp]
	mov	rax, QWORD PTR desired_z_buf$[rsp]
	cmp	rdx, QWORD PTR desired_z_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN12@TEST_PMC_R
$LN13@TEST_PMC_R:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c

; 72   :         TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	eax, -1
	jmp	SHORT $LN6@TEST_PMC_R
$LN12@TEST_PMC_R:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN8@TEST_PMC_R
	lea	r8, QWORD PTR actual_z_buf$[rsp]
	sub	r8, rax
	npad	8
$LL7@TEST_PMC_R:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN13@TEST_PMC_R

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL7@TEST_PMC_R
$LN8@TEST_PMC_R:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN6@TEST_PMC_R:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c

; 72   :         TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BL@POEDPKMF@PMC_RightShift_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 4
	mov	edx, r12d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r15
	call	TEST_Assert

; 73   :     }
; 74   :     if (z_result == PMC_STATUS_OK)
; 75   :         ep->PMC_Dispose(z);

	mov	rcx, QWORD PTR z$[rsp]
	call	QWORD PTR [r14+40]
$LN3@TEST_PMC_R:

; 76   :     if (x_result == PMC_STATUS_OK)

	test	r13d, r13d
	jne	SHORT $LN4@TEST_PMC_R

; 77   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+40]
$LN4@TEST_PMC_R:

; 78   : #endif
; 79   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 344				; 00000158H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_RightShift_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c
;	COMDAT TEST_PMC_RightShift_X_I
_TEXT	SEGMENT
z_result$1$ = 32
z$ = 40
x$ = 48
actual_z_buf_size$ = 56
actual_z_buf$ = 64
__$ArrayPad$ = 320
env$ = 416
ep$ = 424
no$ = 432
x_buf$ = 440
x_buf_size$ = 448
n$ = 456
desired_z_buf$ = 464
desired_z_buf_size$ = 472
TEST_PMC_RightShift_X_I PROC				; COMDAT

; 39   : {

$LN17:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 344				; 00000158H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r14, rdx
	mov	r13d, r8d

; 40   :     HANDLE x;
; 41   :     HANDLE z;
; 42   :     unsigned char actual_z_buf[256];
; 43   :     size_t actual_z_buf_size;
; 44   :     PMC_STATUS_CODE result;
; 45   :     PMC_STATUS_CODE x_result;
; 46   :     PMC_STATUS_CODE z_result;
; 47   :     TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_I (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	rdx, QWORD PTR x_buf_size$[rsp]
	lea	r8, QWORD PTR x$[rsp]
	mov	r12, rcx
	mov	rcx, r9
	call	QWORD PTR [r14+32]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	r15d, eax
	call	FormatTestMesssage
	xor	ebp, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@BIGKDBIB@PMC_RightShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	test	r15d, r15d
	mov	ebx, ebp
	mov	edx, r13d
	mov	rdi, rax
	sete	bl
	lea	r8d, QWORD PTR [rbp+1]
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, ebx
	mov	rcx, r12
	call	TEST_Assert

; 48   :     TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_I (%d.%d)", no, 2), (z_result = ep->PMC_RightShift_X_I(x, n, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_RightShift_X_Iの復帰コードが期待通りではない(%d)", z_result));

	mov	edx, DWORD PTR n$[rsp]
	lea	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+184]
	mov	edx, eax
	mov	DWORD PTR z_result$1$[rsp], eax
	lea	rcx, OFFSET FLAT:??_C@_0DF@CIKCLNEH@PMC_RightShift_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC@
	mov	esi, eax
	call	FormatTestMesssage
	test	esi, esi
	lea	r8d, QWORD PTR [rbp+2]
	mov	edi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@BIGKDBIB@PMC_RightShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r13d
	sete	dil
	mov	rbx, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rbx
	mov	r8d, edi
	mov	rcx, r12
	call	TEST_Assert

; 49   :     TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_I (%d.%d)", no, 3), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	rcx, QWORD PTR z$[rsp]
	lea	r9, QWORD PTR actual_z_buf_size$[rsp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_z_buf$[rsp]
	call	QWORD PTR [r14+64]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	ebx, eax
	call	FormatTestMesssage
	test	ebx, ebx
	lea	r8d, QWORD PTR [rbp+3]
	mov	esi, ebp
	lea	rcx, OFFSET FLAT:??_C@_0BL@BIGKDBIB@PMC_RightShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	edx, r13d
	sete	sil
	mov	rdi, rax
	call	FormatTestLabel
	mov	rdx, rax
	mov	r9, rdi
	mov	r8d, esi
	mov	rcx, r12
	call	TEST_Assert

; 50   :     TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	rdx, QWORD PTR actual_z_buf_size$[rsp]
	mov	rax, QWORD PTR desired_z_buf$[rsp]
	cmp	rdx, QWORD PTR desired_z_buf_size$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN11@TEST_PMC_R
$LN12@TEST_PMC_R:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c

; 50   :     TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	eax, -1
	jmp	SHORT $LN5@TEST_PMC_R
$LN11@TEST_PMC_R:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	rdx, rdx
	je	SHORT $LN7@TEST_PMC_R
	lea	r8, QWORD PTR actual_z_buf$[rsp]
	sub	r8, rax
$LL6@TEST_PMC_R:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [r8+rax], cl
	jne	SHORT $LN12@TEST_PMC_R

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	rax

; 111  :         --count1;

	sub	rdx, 1
	jne	SHORT $LL6@TEST_PMC_R
$LN7@TEST_PMC_R:

; 112  :     }
; 113  :     return (0);

	mov	eax, ebp
$LN5@TEST_PMC_R:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_shift.c

; 50   :     TEST_Assert(env, FormatTestLabel("PMC_RightShift_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	test	eax, eax
	lea	rcx, OFFSET FLAT:??_C@_0BL@BIGKDBIB@PMC_RightShift_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	mov	r8d, 4
	mov	edx, r13d
	sete	bpl
	call	FormatTestLabel
	mov	rdx, rax
	lea	r9, OFFSET FLAT:??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	mov	r8d, ebp
	mov	rcx, r12
	call	TEST_Assert

; 51   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR z_result$1$[rsp], 0
	jne	SHORT $LN2@TEST_PMC_R

; 52   :         ep->PMC_Dispose(z);

	mov	rcx, QWORD PTR z$[rsp]
	call	QWORD PTR [r14+40]
$LN2@TEST_PMC_R:

; 53   :     if (x_result == PMC_STATUS_OK)

	test	r15d, r15d
	jne	SHORT $LN3@TEST_PMC_R

; 54   :         ep->PMC_Dispose(x);

	mov	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR [r14+40]
$LN3@TEST_PMC_R:

; 55   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 344				; 00000158H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
TEST_PMC_RightShift_X_I ENDP
_TEXT	ENDS
END
