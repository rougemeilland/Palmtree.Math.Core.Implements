; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Compare_Imp
PUBLIC	Initialize_Compare
PUBLIC	PMC_Compare_X_I
PUBLIC	PMC_Compare_X_L
PUBLIC	PMC_Compare_X_X
EXTRN	CheckNumber:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_I DD imagerel $LN27
	DD	imagerel $LN27+148
	DD	imagerel $unwind$PMC_Compare_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_L DD imagerel $LN59
	DD	imagerel $LN59+138
	DD	imagerel $unwind$PMC_Compare_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_X DD imagerel $LN31
	DD	imagerel $LN31+244
	DD	imagerel $unwind$PMC_Compare_X_X
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 860  :     if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 861  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 885  : }

	ret	0
$LN2@LZCNT_ALT_:

; 862  : #ifdef _M_IX86
; 863  :     _UINT32_T pos;
; 864  : #ifdef _MSC_VER
; 865  :     _BitScanReverse(&pos, x);
; 866  : #elif defined(__GNUC__)
; 867  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 868  : #else
; 869  : #error unknown compiler
; 870  : #endif
; 871  : #elif defined(_M_X64)
; 872  : #ifdef _MSC_VER
; 873  :     _UINT32_T pos;
; 874  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 875  : #elif defined(__GNUC__)
; 876  :     _UINT64_T pos;
; 877  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 878  : #else
; 879  : #error unknown compiler
; 880  : #endif
; 881  : #else
; 882  : #error unknown platform
; 883  : #endif
; 884  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	rax, rcx

; 885  : }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 827  :     if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 828  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 838  : }

	ret	0
$LN2@LZCNT_ALT_:

; 829  :     _UINT32_T pos;
; 830  : #ifdef _MSC_VER
; 831  :     _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 832  : #elif defined(__GNUC__)
; 833  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 834  : #else
; 835  : #error unknown compiler
; 836  : #endif
; 837  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 838  : }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 413  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 414  :     return ((_UINT32_T)value);

	mov	eax, ecx

; 415  : }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT PMC_Compare_X_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Compare_X_X PROC					; COMDAT

; 257  : {

$LN31:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rdi, rdx
	mov	rbx, rcx

; 258  :     if (u == NULL)

	test	rcx, rcx
	je	$LN29@PMC_Compar

; 259  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 260  :     if (v == NULL)

	test	rdx, rdx
	je	$LN29@PMC_Compar

; 261  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 262  :     if (w == NULL)

	test	r8, r8
	je	$LN29@PMC_Compar

; 264  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 265  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 266  :     PMC_STATUS_CODE result;
; 267  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Compar

; 268  :         return (result);
; 269  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdi
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Compar

; 270  :         return (result);
; 271  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR [rdi+32]
	and	eax, 2
	test	BYTE PTR [rbx+32], 2
	je	SHORT $LN7@PMC_Compar

; 272  :     {
; 273  :         *w = nv->IS_ZERO ? 0 : -1;

	neg	eax
	sbb	eax, eax
	neg	eax
	dec	eax

; 297  :         }
; 298  :     }
; 299  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 300  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@PMC_Compar:

; 274  :     }
; 275  :     else if (nv->IS_ZERO)

	test	eax, eax
	jne	SHORT $LN25@PMC_Compar

; 276  :     {
; 277  :         *w = 1;
; 278  :     }
; 279  :     else
; 280  :     {
; 281  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR [rbx+8]

; 282  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 283  :         if (u_bit_count > v_bit_count)

	cmp	rax, QWORD PTR [rdi+8]
	ja	SHORT $LN25@PMC_Compar

; 284  :         {
; 285  :             // 明らかに u > v である場合
; 286  :             *w = 1;
; 287  :         }
; 288  :         else if (u_bit_count < v_bit_count)

	jb	SHORT $LN26@PMC_Compar

; 289  :         {
; 290  :             // 明らかに u < v である場合
; 291  :             *w = -1;
; 292  :         }
; 293  :         else
; 294  :         {
; 295  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 296  :             *w = Compare_Imp(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	rcx, QWORD PTR [rbx]

; 39   :     u += count;

	mov	rax, QWORD PTR [rbx+48]
	lea	r8, QWORD PTR [rax+rcx*8]

; 40   :     v += count;

	mov	rax, QWORD PTR [rdi+48]
	lea	r9, QWORD PTR [rax+rcx*8]

; 41   :     while (count > 0)

	test	rcx, rcx
	je	SHORT $LN18@PMC_Compar
$LL17@PMC_Compar:

; 42   :     {
; 43   :         --u;
; 44   :         --v;
; 45   :         --count;
; 46   : 
; 47   :         if (*u > *v)

	mov	rax, QWORD PTR [r8-8]
	lea	r8, QWORD PTR [r8-8]
	lea	r9, QWORD PTR [r9-8]
	dec	rcx
	cmp	rax, QWORD PTR [r9]
	ja	SHORT $LN25@PMC_Compar

; 48   :             return (1);
; 49   :         else if (*u < *v)

	jb	SHORT $LN26@PMC_Compar

; 41   :     while (count > 0)

	test	rcx, rcx
	jne	SHORT $LL17@PMC_Compar
$LN18@PMC_Compar:

; 50   :             return (-1);
; 51   :         else
; 52   :         {
; 53   :         }
; 54   :     }
; 55   :     return (0);

	xor	eax, eax
$LN16@PMC_Compar:

; 297  :         }
; 298  :     }
; 299  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 300  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN26@PMC_Compar:

; 297  :         }
; 298  :     }
; 299  :     return (PMC_STATUS_OK);

	mov	eax, -1
	jmp	SHORT $LN16@PMC_Compar
$LN25@PMC_Compar:
	mov	eax, 1
	jmp	SHORT $LN16@PMC_Compar
$LN29@PMC_Compar:

; 263  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Compar:

; 300  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Compare_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT PMC_Compare_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Compare_X_L PROC					; COMDAT

; 124  : {

$LN59:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 125  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 126  :     {
; 127  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 128  :         return (PMC_STATUS_INTERNAL_ERROR);
; 129  :     }
; 130  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN56@PMC_Compar

; 131  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 132  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN56@PMC_Compar

; 134  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 135  :     PMC_STATUS_CODE result;
; 136  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Compar

; 137  :         return (result);
; 138  :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi+32], 2
	je	SHORT $LN6@PMC_Compar

; 139  :     {
; 140  :         // u が 0 である場合
; 141  :         if (v == 0)

	neg	rbx
$LN40@PMC_Compar:

; 244  :                     *w = 1;
; 245  :                 else if (nu->BLOCK[0] < v)
; 246  :                     *w = -1;
; 247  :                 else
; 248  :                     *w = 0;
; 249  :             }
; 250  :         }
; 251  : 
; 252  :     }
; 253  :     return (PMC_STATUS_OK);

	sbb	eax, eax
$LN42@PMC_Compar:
	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 254  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@PMC_Compar:

; 142  :         {
; 143  :             // v が 0 である場合
; 144  :             *w = 0;
; 145  :         }
; 146  :         else
; 147  :         {
; 148  :             // v が 0 でない場合
; 149  :             *w = -1;
; 150  :         }
; 151  :     }
; 152  :     else if (v == 0)

	test	rbx, rbx
	je	SHORT $LN57@PMC_Compar
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 874  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rbx

; 875  : #elif defined(__GNUC__)
; 876  :     _UINT64_T pos;
; 877  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 878  : #else
; 879  : #error unknown compiler
; 880  : #endif
; 881  : #else
; 882  : #error unknown platform
; 883  : #endif
; 884  :     return (sizeof(x) * 8 - 1 - pos);

	inc	rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c

; 229  :             if (u_bit_count > v_bit_count)

	cmp	QWORD PTR [rdi+8], rcx
	ja	SHORT $LN57@PMC_Compar

; 230  :             {
; 231  :                 // 明らかに u > v である場合
; 232  :                 *w = 1;
; 233  :             }
; 234  :             else if (u_bit_count < v_bit_count)

	jae	SHORT $LN38@PMC_Compar

; 235  :             {
; 236  :                 // 明らかに u < v である場合
; 237  :                 *w = -1;

	mov	eax, -1

; 238  :             }

	jmp	SHORT $LN42@PMC_Compar
$LN38@PMC_Compar:

; 239  :             else
; 240  :             {
; 241  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 242  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 243  :                 if (nu->BLOCK[0] > v)

	mov	rax, QWORD PTR [rdi+48]
	cmp	QWORD PTR [rax], rbx
	jbe	SHORT $LN40@PMC_Compar
$LN57@PMC_Compar:

; 244  :                     *w = 1;
; 245  :                 else if (nu->BLOCK[0] < v)
; 246  :                     *w = -1;
; 247  :                 else
; 248  :                     *w = 0;
; 249  :             }
; 250  :         }
; 251  : 
; 252  :     }
; 253  :     return (PMC_STATUS_OK);

	mov	eax, 1
	jmp	SHORT $LN42@PMC_Compar
$LN56@PMC_Compar:

; 133  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Compar:

; 254  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Compare_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT PMC_Compare_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Compare_X_I PROC					; COMDAT

; 60   : {

$LN27:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, edx
	mov	rsi, r8
	mov	rdi, rcx

; 61   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 62   :     {
; 63   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 64   :         return (PMC_STATUS_INTERNAL_ERROR);
; 65   :     }
; 66   :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN24@PMC_Compar

; 67   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 68   :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN24@PMC_Compar

; 70   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 71   :     PMC_STATUS_CODE result;
; 72   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Compar

; 73   :         return (result);
; 74   :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi+32], 2
	je	SHORT $LN6@PMC_Compar

; 75   :     {
; 76   :         // u が 0 である場合
; 77   :         if (v == 0)
; 78   :         {
; 79   :             // v が 0 である場合
; 80   :             *w = 0;
; 81   :         }
; 82   :         else
; 83   :         {
; 84   :             // v が 0 でない場合
; 85   :             *w = -1;
; 86   :         }
; 87   :     }

	neg	ebx
$LN16@PMC_Compar:

; 113  :                 *w = 1;
; 114  :             else if (nu->BLOCK[0] < v)
; 115  :                 *w = -1;
; 116  :             else
; 117  :                 *w = 0;
; 118  :         }
; 119  :     }
; 120  :     return (PMC_STATUS_OK);

	sbb	eax, eax
$LN18@PMC_Compar:
	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 121  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@PMC_Compar:

; 88   :     else if (v == 0)

	test	ebx, ebx
	je	SHORT $LN25@PMC_Compar
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 831  :     _BitScanReverse(&pos, x);

	bsr	eax, ebx

; 832  : #elif defined(__GNUC__)
; 833  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 834  : #else
; 835  : #error unknown compiler
; 836  : #endif
; 837  :     return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c

; 97   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	eax, ecx
	mov	ecx, 32					; 00000020H
	sub	rcx, rax

; 98   :         if (u_bit_count > v_bit_count)

	cmp	QWORD PTR [rdi+8], rcx
	ja	SHORT $LN25@PMC_Compar

; 99   :         {
; 100  :             // 明らかに u > v である場合
; 101  :             *w = 1;
; 102  :         }
; 103  :         else if (u_bit_count < v_bit_count)

	jae	SHORT $LN14@PMC_Compar

; 104  :         {
; 105  :             // 明らかに u < v である場合
; 106  :             *w = -1;

	mov	eax, -1

; 107  :         }

	jmp	SHORT $LN18@PMC_Compar
$LN14@PMC_Compar:

; 108  :         else
; 109  :         {
; 110  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 111  :             // ⇒ u と v はともに 1 ワードで表現できる
; 112  :             if (nu->BLOCK[0] > v)

	mov	rax, QWORD PTR [rdi+48]
	cmp	QWORD PTR [rax], rbx
	jbe	SHORT $LN16@PMC_Compar
$LN25@PMC_Compar:

; 113  :                 *w = 1;
; 114  :             else if (nu->BLOCK[0] < v)
; 115  :                 *w = -1;
; 116  :             else
; 117  :                 *w = 0;
; 118  :         }
; 119  :     }
; 120  :     return (PMC_STATUS_OK);

	mov	eax, 1
	jmp	SHORT $LN18@PMC_Compar
$LN24@PMC_Compar:

; 69   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Compar:

; 121  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Compare_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT Initialize_Compare
_TEXT	SEGMENT
feature$ = 8
Initialize_Compare PROC					; COMDAT

; 304  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 305  : }

	ret	0
Initialize_Compare ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT Compare_Imp
_TEXT	SEGMENT
u$ = 8
v$ = 16
count$ = 24
Compare_Imp PROC					; COMDAT

; 39   :     u += count;

	lea	rax, QWORD PTR [r8*8]
	add	rcx, rax

; 40   :     v += count;

	add	rdx, rax

; 41   :     while (count > 0)

	test	r8, r8
	je	SHORT $LN3@Compare_Im
	npad	13
$LL2@Compare_Im:

; 42   :     {
; 43   :         --u;
; 44   :         --v;
; 45   :         --count;
; 46   : 
; 47   :         if (*u > *v)

	mov	rax, QWORD PTR [rcx-8]
	lea	rcx, QWORD PTR [rcx-8]
	lea	rdx, QWORD PTR [rdx-8]
	dec	r8
	cmp	rax, QWORD PTR [rdx]
	ja	SHORT $LN10@Compare_Im

; 49   :         else if (*u < *v)

	jb	SHORT $LN11@Compare_Im

; 41   :     while (count > 0)

	test	r8, r8
	jne	SHORT $LL2@Compare_Im
$LN3@Compare_Im:

; 51   :         else
; 52   :         {
; 53   :         }
; 54   :     }
; 55   :     return (0);

	xor	eax, eax

; 56   : }

	ret	0
$LN11@Compare_Im:

; 50   :             return (-1);

	mov	eax, -1

; 56   : }

	ret	0
$LN10@Compare_Im:

; 48   :             return (1);

	mov	eax, 1

; 56   : }

	ret	0
Compare_Imp ENDP
_TEXT	ENDS
END
