; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_Equals
PUBLIC	PMC_Equals_X_I
PUBLIC	PMC_Equals_X_L
PUBLIC	PMC_Equals_X_X
PUBLIC	Equals_X_X
EXTRN	CheckNumber:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_I DD imagerel $LN21
	DD	imagerel $LN21+154
	DD	imagerel $unwind$PMC_Equals_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_L DD imagerel $LN40
	DD	imagerel $LN40+168
	DD	imagerel $unwind$PMC_Equals_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_X DD imagerel $LN26
	DD	imagerel $LN26+213
	DD	imagerel $unwind$PMC_Equals_X_X
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT Equals_X_X
_TEXT	SEGMENT
u$ = 8
v$ = 16
count$ = 24
Equals_X_X PROC						; COMDAT

; 39   :     while (count > 0)

	test	r8, r8
	je	SHORT $LN3@Equals_X_X
	sub	rcx, rdx
	npad	8
$LL2@Equals_X_X:

; 40   :     {
; 41   :         if (*u != *v)

	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rdx], rax
	jne	SHORT $LN7@Equals_X_X

; 43   :         ++u;
; 44   :         ++v;

	add	rdx, 8

; 45   :         --count;

	sub	r8, 1
	jne	SHORT $LL2@Equals_X_X
$LN3@Equals_X_X:

; 46   :     }
; 47   :     return (1);

	mov	eax, 1

; 48   : }

	ret	0
$LN7@Equals_X_X:

; 42   :             return (0);

	xor	eax, eax

; 48   : }

	ret	0
Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 841  :     if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 842  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 866  : }

	ret	0
$LN2@LZCNT_ALT_:

; 843  : #ifdef _M_IX86
; 844  :     _UINT32_T pos;
; 845  : #ifdef _MSC_VER
; 846  :     _BitScanReverse(&pos, x);
; 847  : #elif defined(__GNUC__)
; 848  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 849  : #else
; 850  : #error unknown compiler
; 851  : #endif
; 852  : #elif defined(_M_X64)
; 853  : #ifdef _MSC_VER
; 854  :     _UINT32_T pos;
; 855  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 856  : #elif defined(__GNUC__)
; 857  :     _UINT64_T pos;
; 858  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 859  : #else
; 860  : #error unknown compiler
; 861  : #endif
; 862  : #else
; 863  : #error unknown platform
; 864  : #endif
; 865  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	rax, rcx

; 866  : }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 808  :     if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 809  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 819  : }

	ret	0
$LN2@LZCNT_ALT_:

; 810  :     _UINT32_T pos;
; 811  : #ifdef _MSC_VER
; 812  :     _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 813  : #elif defined(__GNUC__)
; 814  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 815  : #else
; 816  : #error unknown compiler
; 817  : #endif
; 818  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 819  : }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 395  :     return ((_UINT32_T)value);

	mov	eax, ecx

; 396  : }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_X PROC					; COMDAT

; 205  : {

$LN26:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rdi, rdx
	mov	rbx, rcx

; 206  :     if (u == NULL)

	test	rcx, rcx
	je	$LN24@PMC_Equals

; 207  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 208  :     if (v == NULL)

	test	rdx, rdx
	je	$LN24@PMC_Equals

; 209  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 210  :     if (w == NULL)

	test	r8, r8
	je	$LN24@PMC_Equals

; 212  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 213  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 214  :     PMC_STATUS_CODE result;
; 215  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Equals

; 216  :         return (result);
; 217  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdi
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 218  :         return (result);
; 219  :     if (nu->IS_ZERO)

	test	BYTE PTR [rbx+32], 2
	mov	eax, DWORD PTR [rdi+32]
	je	SHORT $LN7@PMC_Equals

; 220  :     {
; 221  :         *w = nv->IS_ZERO ? 1 : 0;

	shr	eax, 1
	and	eax, 1

; 240  :         }
; 241  :     }
; 242  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 243  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@PMC_Equals:

; 222  :     }
; 223  :     else if (nv->IS_ZERO)

	test	al, 2
	jne	SHORT $LN20@PMC_Equals

; 224  :     {
; 225  :         *w = 0;
; 226  :     }
; 227  :     else
; 228  :     {
; 229  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 230  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 231  :         if (u_bit_count != v_bit_count)

	mov	rax, QWORD PTR [rdi+8]
	cmp	QWORD PTR [rbx+8], rax
	jne	SHORT $LN20@PMC_Equals

; 232  :         {
; 233  :             // 明らかに u > v である場合
; 234  :             *w = 0;
; 235  :         }
; 236  :         else
; 237  :         {
; 238  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 239  :             *w = Equals_X_X(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rdi+48]

; 39   :     while (count > 0)

	test	rdx, rdx
	je	SHORT $LN16@PMC_Equals
	mov	r8, QWORD PTR [rbx+48]
	sub	r8, rcx
	npad	1
$LL15@PMC_Equals:

; 40   :     {
; 41   :         if (*u != *v)

	mov	rax, QWORD PTR [rcx]
	cmp	QWORD PTR [r8+rcx], rax
	jne	SHORT $LN20@PMC_Equals

; 42   :             return (0);
; 43   :         ++u;
; 44   :         ++v;

	add	rcx, 8

; 45   :         --count;

	sub	rdx, 1
	jne	SHORT $LL15@PMC_Equals
$LN16@PMC_Equals:

; 46   :     }
; 47   :     return (1);

	mov	eax, 1
$LN14@PMC_Equals:

; 240  :         }
; 241  :     }
; 242  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 243  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN20@PMC_Equals:

; 240  :         }
; 241  :     }
; 242  :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN14@PMC_Equals
$LN24@PMC_Equals:

; 211  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 243  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_L PROC					; COMDAT

; 106  : {

$LN40:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rdi, rdx
	mov	rbx, rcx

; 107  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 108  :     {
; 109  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 110  :         return (PMC_STATUS_INTERNAL_ERROR);
; 111  :     }
; 112  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN36@PMC_Equals

; 113  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 114  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN36@PMC_Equals

; 116  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 117  :     PMC_STATUS_CODE result;
; 118  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 119  :         return (result);
; 120  :     if (nu->IS_ZERO)

	test	BYTE PTR [rbx+32], 2
	je	SHORT $LN6@PMC_Equals

; 121  :     {
; 122  :         // u が 0 である場合
; 123  :         if (v == 0)

	xor	ecx, ecx
	test	rdi, rdi

; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	sete	cl
	mov	DWORD PTR [rsi], ecx

; 202  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@PMC_Equals:

; 124  :         {
; 125  :             // v が 0 である場合
; 126  :             *w = 1;
; 127  :         }
; 128  :         else
; 129  :         {
; 130  :             // v が 0 でない場合
; 131  :             *w = 0;
; 132  :         }
; 133  :     }
; 134  :     else if (v == 0)

	test	rdi, rdi
	je	SHORT $LN38@PMC_Equals
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 855  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rdi

; 856  : #elif defined(__GNUC__)
; 857  :     _UINT64_T pos;
; 858  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 859  : #else
; 860  : #error unknown compiler
; 861  : #endif
; 862  : #else
; 863  : #error unknown platform
; 864  : #endif
; 865  :     return (sizeof(x) * 8 - 1 - pos);

	inc	rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c

; 187  :             if (u_bit_count != v_bit_count)

	cmp	QWORD PTR [rbx+8], rcx
	je	SHORT $LN20@PMC_Equals
$LN38@PMC_Equals:

; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	xor	ecx, ecx
	mov	DWORD PTR [rsi], ecx
	xor	eax, eax

; 202  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN20@PMC_Equals:

; 188  :             {
; 189  :                 // 明らかに u > v である場合
; 190  :                 *w = 0;
; 191  :             }
; 192  :             else
; 193  :             {
; 194  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 195  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 196  :                 *w = nu->BLOCK[0] == v;

	mov	rax, QWORD PTR [rbx+48]
	xor	ecx, ecx
	cmp	QWORD PTR [rax], rdi

; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	sete	cl
	xor	eax, eax
	mov	DWORD PTR [rsi], ecx

; 202  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN36@PMC_Equals:

; 115  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 202  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_I PROC					; COMDAT

; 52   : {

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	edi, edx
	mov	rsi, r8
	mov	rbx, rcx

; 53   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 54   :     {
; 55   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 56   :         return (PMC_STATUS_INTERNAL_ERROR);
; 57   :     }
; 58   :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN18@PMC_Equals

; 59   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 60   :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN18@PMC_Equals

; 62   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 63   :     PMC_STATUS_CODE result;
; 64   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 65   :         return (result);
; 66   :     if (nu->IS_ZERO)

	xor	edx, edx
	test	BYTE PTR [rbx+32], 2
	je	SHORT $LN6@PMC_Equals

; 67   :     {
; 68   :         // u が 0 である場合
; 69   :         if (v == 0)
; 70   :         {
; 71   :             // v が 0 である場合
; 72   :             *w = 1;
; 73   :         }
; 74   :         else
; 75   :         {
; 76   :             // v が 0 でない場合
; 77   :             *w = 0;
; 78   :         }
; 79   :     }

	test	edi, edi

; 100  :         }
; 101  :     }
; 102  :     return (PMC_STATUS_OK);

	sete	dl
	mov	DWORD PTR [rsi], edx

; 103  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@PMC_Equals:

; 80   :     else if (v == 0)

	test	edi, edi
	je	SHORT $LN13@PMC_Equals
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 812  :     _BitScanReverse(&pos, x);

	bsr	eax, edi

; 813  : #elif defined(__GNUC__)
; 814  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 815  : #else
; 816  : #error unknown compiler
; 817  : #endif
; 818  :     return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c

; 89   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	eax, ecx
	mov	ecx, 32					; 00000020H
	sub	rcx, rax

; 90   :         if (u_bit_count != v_bit_count)

	cmp	QWORD PTR [rbx+8], rcx
	jne	SHORT $LN13@PMC_Equals

; 91   :         {
; 92   :             // 明らかに u != v である場合
; 93   :             *w = 0;
; 94   :         }
; 95   :         else
; 96   :         {
; 97   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 98   :             // ⇒ u と v はともに 1 ワードで表現できる
; 99   :             *w = nu->BLOCK[0] == v;

	mov	rcx, QWORD PTR [rbx+48]
	cmp	QWORD PTR [rcx], rdi

; 100  :         }
; 101  :     }
; 102  :     return (PMC_STATUS_OK);

	sete	dl
$LN13@PMC_Equals:
	mov	DWORD PTR [rsi], edx
	xor	eax, eax

; 103  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN18@PMC_Equals:

; 61   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 103  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT Initialize_Equals
_TEXT	SEGMENT
feature$ = 8
Initialize_Equals PROC					; COMDAT

; 247  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 248  : }

	ret	0
Initialize_Equals ENDP
_TEXT	ENDS
END
