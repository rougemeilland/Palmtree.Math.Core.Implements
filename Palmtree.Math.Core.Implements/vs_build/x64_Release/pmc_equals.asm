; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_Equals
PUBLIC	PMC_Equals_I_X
PUBLIC	PMC_Equals_L_X
PUBLIC	PMC_Equals_X_I
PUBLIC	PMC_Equals_X_L
PUBLIC	PMC_Equals_X_X
PUBLIC	Equals_X_X
EXTRN	CheckNumber:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_I_X DD imagerel $LN10
	DD	imagerel $LN10+94
	DD	imagerel $unwind$PMC_Equals_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_L_X DD imagerel $LN10
	DD	imagerel $LN10+96
	DD	imagerel $unwind$PMC_Equals_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_I DD imagerel $LN10
	DD	imagerel $LN10+91
	DD	imagerel $unwind$PMC_Equals_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_L DD imagerel $LN10
	DD	imagerel $LN10+93
	DD	imagerel $unwind$PMC_Equals_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_X DD imagerel $LN26
	DD	imagerel $LN26+213
	DD	imagerel $unwind$PMC_Equals_X_X
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_L_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_I_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_L_Imp
_TEXT	SEGMENT
u$ = 8
v$ = 16
w$ = 24
PMC_Equals_X_L_Imp PROC					; COMDAT

; 132  :     if (u->IS_ZERO)

	test	BYTE PTR [rcx+32], 2
	mov	r9, rcx
	je	SHORT $LN2@PMC_Equals

; 133  :     {
; 134  :         // u が 0 である場合
; 135  :         if (v == 0)
; 136  :         {
; 137  :             // v が 0 である場合
; 138  :             *w = 1;
; 139  :         }
; 140  :         else
; 141  :         {
; 142  :             // v が 0 でない場合
; 143  :             *w = 0;
; 144  :         }
; 145  :     }

	xor	ecx, ecx
	test	rdx, rdx

; 209  :             }
; 210  :         }
; 211  :     }
; 212  :     return (PMC_STATUS_OK);
; 213  : }

	sete	cl
	xor	eax, eax
	mov	DWORD PTR [r8], ecx
	ret	0
$LN2@PMC_Equals:

; 146  :     else if (v == 0)

	test	rdx, rdx
	jne	SHORT $LN6@PMC_Equals
$LN34@PMC_Equals:

; 209  :             }
; 210  :         }
; 211  :     }
; 212  :     return (PMC_STATUS_OK);
; 213  : }

	xor	ecx, ecx
	xor	eax, eax
	mov	DWORD PTR [r8], ecx
	ret	0
$LN6@PMC_Equals:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 894  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rdx

; 895  : #elif defined(__GNUC__)
; 896  :     _UINT64_T pos;
; 897  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 898  : #else
; 899  : #error unknown compiler
; 900  : #endif
; 901  : #else
; 902  : #error unknown platform
; 903  : #endif
; 904  :     return (sizeof(x) * 8 - 1 - pos);

	inc	rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c

; 199  :             if (u_bit_count != v_bit_count)

	cmp	QWORD PTR [r9+8], rcx
	jne	SHORT $LN34@PMC_Equals

; 200  :             {
; 201  :                 // 明らかに u > v である場合
; 202  :                 *w = 0;
; 203  :             }
; 204  :             else
; 205  :             {
; 206  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 207  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 208  :                 *w = u->BLOCK[0] == v;

	mov	rax, QWORD PTR [r9+48]
	xor	ecx, ecx
	cmp	QWORD PTR [rax], rdx

; 209  :             }
; 210  :         }
; 211  :     }
; 212  :     return (PMC_STATUS_OK);
; 213  : }

	sete	cl
	xor	eax, eax
	mov	DWORD PTR [r8], ecx
	ret	0
PMC_Equals_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_I_Imp
_TEXT	SEGMENT
u$ = 8
v$ = 16
w$ = 24
PMC_Equals_X_I_Imp PROC					; COMDAT

; 53   :     if (u->IS_ZERO)

	test	BYTE PTR [rcx+32], 2
	mov	r9, rcx
	je	SHORT $LN2@PMC_Equals

; 54   :     {
; 55   :         // u が 0 である場合
; 56   :         if (v == 0)
; 57   :         {
; 58   :             // v が 0 である場合
; 59   :             *w = 1;
; 60   :         }
; 61   :         else
; 62   :         {
; 63   :             // v が 0 でない場合
; 64   :             *w = 0;
; 65   :         }
; 66   :     }

	xor	r9d, r9d
	test	edx, edx

; 87   :         }
; 88   :     }
; 89   :     return (PMC_STATUS_OK);
; 90   : }

	sete	r9b
	xor	eax, eax
	mov	DWORD PTR [r8], r9d
	ret	0
$LN2@PMC_Equals:

; 67   :     else if (v == 0)

	test	edx, edx
	jne	SHORT $LN6@PMC_Equals
$LN16@PMC_Equals:

; 87   :         }
; 88   :     }
; 89   :     return (PMC_STATUS_OK);
; 90   : }

	xor	r9d, r9d
	xor	eax, eax
	mov	DWORD PTR [r8], r9d
	ret	0
$LN6@PMC_Equals:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 851  :     _BitScanReverse(&pos, x);

	bsr	eax, edx

; 852  : #elif defined(__GNUC__)
; 853  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 854  : #else
; 855  : #error unknown compiler
; 856  : #endif
; 857  :     return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c

; 76   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	eax, ecx
	mov	ecx, 32					; 00000020H
	sub	rcx, rax

; 77   :         if (u_bit_count != v_bit_count)

	cmp	QWORD PTR [r9+8], rcx
	jne	SHORT $LN16@PMC_Equals

; 78   :         {
; 79   :             // 明らかに u != v である場合
; 80   :             *w = 0;
; 81   :         }
; 82   :         else
; 83   :         {
; 84   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 85   :             // ⇒ u と v はともに 1 ワードで表現できる
; 86   :             *w = u->BLOCK[0] == v;

	mov	rcx, QWORD PTR [r9+48]
	xor	r9d, r9d
	mov	eax, edx
	cmp	QWORD PTR [rcx], rax

; 87   :         }
; 88   :     }
; 89   :     return (PMC_STATUS_OK);
; 90   : }

	sete	r9b
	xor	eax, eax
	mov	DWORD PTR [r8], r9d
	ret	0
PMC_Equals_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT Equals_X_X
_TEXT	SEGMENT
u$ = 8
v$ = 16
count$ = 24
Equals_X_X PROC						; COMDAT

; 39   :     while (count > 0)

	test	r8, r8
	je	SHORT $LN3@Equals_X_X
	sub	rcx, rdx
	npad	8
$LL2@Equals_X_X:

; 40   :     {
; 41   :         if (*u != *v)

	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rdx], rax
	jne	SHORT $LN7@Equals_X_X

; 43   :         ++u;
; 44   :         ++v;

	add	rdx, 8

; 45   :         --count;

	sub	r8, 1
	jne	SHORT $LL2@Equals_X_X
$LN3@Equals_X_X:

; 46   :     }
; 47   :     return (1);

	mov	eax, 1

; 48   : }

	ret	0
$LN7@Equals_X_X:

; 42   :             return (0);

	xor	eax, eax

; 48   : }

	ret	0
Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 880  :     if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 881  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 905  : }

	ret	0
$LN2@LZCNT_ALT_:

; 882  : #ifdef _M_IX86
; 883  :     _UINT32_T pos;
; 884  : #ifdef _MSC_VER
; 885  :     _BitScanReverse(&pos, x);
; 886  : #elif defined(__GNUC__)
; 887  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 888  : #else
; 889  : #error unknown compiler
; 890  : #endif
; 891  : #elif defined(_M_X64)
; 892  : #ifdef _MSC_VER
; 893  :     _UINT32_T pos;
; 894  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 895  : #elif defined(__GNUC__)
; 896  :     _UINT64_T pos;
; 897  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 898  : #else
; 899  : #error unknown compiler
; 900  : #endif
; 901  : #else
; 902  : #error unknown platform
; 903  : #endif
; 904  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	rax, rcx

; 905  : }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 847  :     if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 848  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 858  : }

	ret	0
$LN2@LZCNT_ALT_:

; 849  :     _UINT32_T pos;
; 850  : #ifdef _MSC_VER
; 851  :     _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 852  : #elif defined(__GNUC__)
; 853  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 854  : #else
; 855  : #error unknown compiler
; 856  : #endif
; 857  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 858  : }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 433  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 434  :     return ((_UINT32_T)value);

	mov	eax, ecx

; 435  : }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_X PROC					; COMDAT

; 254  : {

$LN26:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rdi, rdx
	mov	rbx, rcx

; 255  :     if (u == NULL)

	test	rcx, rcx
	je	$LN24@PMC_Equals

; 256  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 257  :     if (v == NULL)

	test	rdx, rdx
	je	$LN24@PMC_Equals

; 258  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 259  :     if (w == NULL)

	test	r8, r8
	je	$LN24@PMC_Equals

; 261  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 262  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 263  :     PMC_STATUS_CODE result;
; 264  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Equals

; 265  :         return (result);
; 266  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdi
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 267  :         return (result);
; 268  :     if (nu->IS_ZERO)

	test	BYTE PTR [rbx+32], 2
	mov	eax, DWORD PTR [rdi+32]
	je	SHORT $LN7@PMC_Equals

; 269  :     {
; 270  :         *w = nv->IS_ZERO ? 1 : 0;

	shr	eax, 1
	and	eax, 1

; 289  :         }
; 290  :     }
; 291  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 292  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@PMC_Equals:

; 271  :     }
; 272  :     else if (nv->IS_ZERO)

	test	al, 2
	jne	SHORT $LN20@PMC_Equals

; 273  :     {
; 274  :         *w = 0;
; 275  :     }
; 276  :     else
; 277  :     {
; 278  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 279  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 280  :         if (u_bit_count != v_bit_count)

	mov	rax, QWORD PTR [rdi+8]
	cmp	QWORD PTR [rbx+8], rax
	jne	SHORT $LN20@PMC_Equals

; 281  :         {
; 282  :             // 明らかに u > v である場合
; 283  :             *w = 0;
; 284  :         }
; 285  :         else
; 286  :         {
; 287  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 288  :             *w = Equals_X_X(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rdi+48]

; 39   :     while (count > 0)

	test	rdx, rdx
	je	SHORT $LN16@PMC_Equals
	mov	r8, QWORD PTR [rbx+48]
	sub	r8, rcx
	npad	1
$LL15@PMC_Equals:

; 40   :     {
; 41   :         if (*u != *v)

	mov	rax, QWORD PTR [rcx]
	cmp	QWORD PTR [r8+rcx], rax
	jne	SHORT $LN20@PMC_Equals

; 42   :             return (0);
; 43   :         ++u;
; 44   :         ++v;

	add	rcx, 8

; 45   :         --count;

	sub	rdx, 1
	jne	SHORT $LL15@PMC_Equals
$LN16@PMC_Equals:

; 46   :     }
; 47   :     return (1);

	mov	eax, 1
$LN14@PMC_Equals:

; 289  :         }
; 290  :     }
; 291  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 292  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN20@PMC_Equals:

; 289  :         }
; 290  :     }
; 291  :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN14@PMC_Equals
$LN24@PMC_Equals:

; 260  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 292  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_L PROC					; COMDAT

; 235  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 236  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 237  :     {
; 238  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 239  :         return (PMC_STATUS_INTERNAL_ERROR);
; 240  :     }
; 241  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Equals

; 242  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 243  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Equals

; 245  :     PMC_STATUS_CODE result;
; 246  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Equals

; 247  :         return (result);
; 248  :     if ((result = PMC_Equals_X_L_Imp((NUMBER_HEADER*)u, v, w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 249  :         return (result);
; 250  :     return (PMC_STATUS_OK);
; 251  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 247  :         return (result);
; 248  :     if ((result = PMC_Equals_X_L_Imp((NUMBER_HEADER*)u, v, w)) != PMC_STATUS_OK)

	jmp	PMC_Equals_X_L_Imp
$LN8@PMC_Equals:

; 244  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Equals:

; 249  :         return (result);
; 250  :     return (PMC_STATUS_OK);
; 251  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_I PROC					; COMDAT

; 112  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	esi, edx
	mov	rbx, rcx

; 113  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 114  :     {
; 115  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 116  :         return (PMC_STATUS_INTERNAL_ERROR);
; 117  :     }
; 118  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Equals

; 119  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 120  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Equals

; 122  :     PMC_STATUS_CODE result;
; 123  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Equals

; 124  :         return (result);
; 125  :     if ((result = PMC_Equals_X_I_Imp((NUMBER_HEADER*)u, v, w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 126  :         return (result);
; 127  :     return (PMC_STATUS_OK);
; 128  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 124  :         return (result);
; 125  :     if ((result = PMC_Equals_X_I_Imp((NUMBER_HEADER*)u, v, w)) != PMC_STATUS_OK)

	jmp	PMC_Equals_X_I_Imp
$LN8@PMC_Equals:

; 121  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Equals:

; 126  :         return (result);
; 127  :     return (PMC_STATUS_OK);
; 128  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_L_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_L_X PROC					; COMDAT

; 216  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	rsi, rcx

; 217  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 218  :     {
; 219  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 220  :         return (PMC_STATUS_INTERNAL_ERROR);
; 221  :     }
; 222  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Equals

; 223  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 224  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Equals

; 226  :     PMC_STATUS_CODE result;
; 227  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Equals

; 228  :         return (result);
; 229  :     if ((result = PMC_Equals_X_L_Imp((NUMBER_HEADER*)v, u, w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 230  :         return (result);
; 231  :     return (PMC_STATUS_OK);
; 232  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 228  :         return (result);
; 229  :     if ((result = PMC_Equals_X_L_Imp((NUMBER_HEADER*)v, u, w)) != PMC_STATUS_OK)

	jmp	PMC_Equals_X_L_Imp
$LN8@PMC_Equals:

; 225  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Equals:

; 230  :         return (result);
; 231  :     return (PMC_STATUS_OK);
; 232  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT PMC_Equals_I_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_I_X PROC					; COMDAT

; 93   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	esi, ecx

; 94   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 95   :     {
; 96   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 97   :         return (PMC_STATUS_INTERNAL_ERROR);
; 98   :     }
; 99   :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Equals

; 100  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 101  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Equals

; 103  :     PMC_STATUS_CODE result;
; 104  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Equals

; 105  :         return (result);
; 106  :     if ((result = PMC_Equals_X_I_Imp((NUMBER_HEADER*)v, u, w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 107  :         return (result);
; 108  :     return (PMC_STATUS_OK);
; 109  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 105  :         return (result);
; 106  :     if ((result = PMC_Equals_X_I_Imp((NUMBER_HEADER*)v, u, w)) != PMC_STATUS_OK)

	jmp	PMC_Equals_X_I_Imp
$LN8@PMC_Equals:

; 102  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Equals:

; 107  :         return (result);
; 108  :     return (PMC_STATUS_OK);
; 109  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT Initialize_Equals
_TEXT	SEGMENT
feature$ = 8
Initialize_Equals PROC					; COMDAT

; 296  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 297  : }

	ret	0
Initialize_Equals ENDP
_TEXT	ENDS
END
