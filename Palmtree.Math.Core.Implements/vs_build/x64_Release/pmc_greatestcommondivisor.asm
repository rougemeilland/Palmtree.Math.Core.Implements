; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_GreatestCommonDivisor
PUBLIC	PMC_GreatestCommonDivisor_X_I
PUBLIC	PMC_GreatestCommonDivisor_X_L
PUBLIC	PMC_GreatestCommonDivisor_X_X
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	RightShift_Imp:PROC
EXTRN	LeftShift_Imp:PROC
EXTRN	Subtruct_Imp:PROC
EXTRN	Compare_Imp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_I DD imagerel $LN41
	DD	imagerel $LN41+606
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_L DD imagerel $LN99
	DD	imagerel $LN99+584
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_X DD imagerel $LN40
	DD	imagerel $LN40+645
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GreatestCommonDivisor DD imagerel GreatestCommonDivisor
	DD	imagerel GreatestCommonDivisor+251
	DD	imagerel $unwind$GreatestCommonDivisor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GreatestCommonDivisor DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_X DD 0a1701H
	DD	0153417H
	DD	0f010b217H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_L DD 0a1701H
	DD	0153417H
	DD	0f010b217H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_I DD 0a1701H
	DD	0153417H
	DD	0f010b217H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT GreatestCommonDivisor
_TEXT	SEGMENT
p1_buf$ = 80
p2_buf$ = 88
word_count$ = 96
w_buf$ = 104
w_buf_count$ = 112
GreatestCommonDivisor PROC				; COMDAT

; 39   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 40   :     __UNIT_TYPE* u = p1_buf;
; 41   :     __UNIT_TYPE* v = p2_buf;

	mov	r15, QWORD PTR w_buf_count$[rsp]
	mov	r14, r9
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx
	xor	ebp, ebp
	npad	5
$LL2@GreatestCo:

; 42   :     for (;;)
; 43   :     {
; 44   :         while (word_count > 0 && u[word_count - 1] == 0 && v[word_count - 1] == 0)

	test	rbx, rbx
	je	SHORT $LN29@GreatestCo
	lea	rax, QWORD PTR [rbx-1]
	mov	rcx, rsi
	lea	rax, QWORD PTR [rdi+rax*8]
	sub	rcx, rdi
$LL5@GreatestCo:
	cmp	QWORD PTR [rcx+rax], rbp
	jne	SHORT $LN6@GreatestCo
	cmp	QWORD PTR [rax], rbp
	jne	SHORT $LN6@GreatestCo

; 45   :             --word_count;

	sub	rax, 8
	sub	rbx, 1
	jne	SHORT $LL5@GreatestCo

; 46   :         if (word_count <= 0)

	jmp	SHORT $LN29@GreatestCo
$LN6@GreatestCo:
	test	rbx, rbx
	jne	SHORT $LN9@GreatestCo
$LN29@GreatestCo:

; 47   :         {
; 48   :             // このルートへの到達はあり得ないはず。
; 49   :             w_buf[0] = 0;

	mov	QWORD PTR [r14], rbp

; 50   :             *w_buf_count = 1;

	mov	QWORD PTR [r15], 1
$LN9@GreatestCo:

; 51   :         }
; 52   :         int c = Compare_Imp(u, v, word_count);

	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, rsi
	call	Compare_Imp

; 53   :         if (c == 0)

	test	eax, eax
	je	SHORT $LN19@GreatestCo

; 54   :         {
; 55   :             // u == v の場合
; 56   : 
; 57   :             // GCD を u として復帰
; 58   :             _COPY_MEMORY_UNIT(w_buf, u, word_count);
; 59   :             *w_buf_count = word_count;
; 60   :             return;
; 61   :         }
; 62   :         if (c < 0)

	jns	SHORT $LN11@GreatestCo

; 63   :         {
; 64   :             __UNIT_TYPE* tt = u;

	mov	rax, rsi

; 65   :             u = v;

	mov	rsi, rdi

; 66   :             v = tt;

	mov	rdi, rax
$LN11@GreatestCo:

; 67   :         }
; 68   :         // この時点で u > v かつ u と v はともに奇数である
; 69   : 
; 70   :         Subtruct_Imp(u, word_count, v, word_count, u, word_count);

	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rbx
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], rsi
	mov	rdx, rbx
	mov	rcx, rsi
	call	Subtruct_Imp

; 71   : 
; 72   :         while ((*u & 1) == 0)

	test	BYTE PTR [rsi], 1
	jne	SHORT $LL2@GreatestCo
	npad	10
$LL7@GreatestCo:

; 73   :             RightShift_Imp(u, word_count, 1, u, TRUE);

	mov	r9, rsi
	mov	DWORD PTR [rsp+32], 1
	mov	r8d, 1
	mov	rdx, rbx
	mov	rcx, rsi
	call	RightShift_Imp
	test	BYTE PTR [rsi], 1
	je	SHORT $LL7@GreatestCo
	jmp	$LL2@GreatestCo
$LN19@GreatestCo:

; 75   : }

	mov	rbp, QWORD PTR [rsp+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 300  :     __movsq(d, s, count);

	mov	rcx, rbx
	mov	rdi, r14
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 75   : }

	mov	rsi, QWORD PTR [rsp+96]
	mov	QWORD PTR [r15], rbx
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
GreatestCommonDivisor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _TZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_TZCNT_ALT_UNIT PROC					; COMDAT

; 940  :     if (x == 0)
; 941  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	test	rcx, rcx
	je	SHORT $LN1@TZCNT_ALT_

; 942  : #ifdef _M_IX86
; 943  :     _UINT32_T pos;
; 944  : #ifdef _MSC_VER
; 945  :     _BitScanForward(&pos, x);
; 946  : #elif defined(__GNUC__)
; 947  :     __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 948  : #else
; 949  : #error unknown compiler
; 950  : #endif
; 951  : #elif defined(_M_X64)
; 952  : #ifdef _MSC_VER
; 953  :     _UINT32_T pos;
; 954  :     _BitScanForward64(&pos, x);

	bsf	rax, rcx
$LN1@TZCNT_ALT_:

; 955  : #elif defined(__GNUC__)
; 956  :     _UINT64_T pos;
; 957  :     __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 958  : #else
; 959  : #error unknown compiler
; 960  : #endif
; 961  : #else
; 962  : #error unknown platform
; 963  : #endif
; 964  :     return (pos);
; 965  : }

	ret	0
_TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 860  :     if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 861  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 885  : }

	ret	0
$LN2@LZCNT_ALT_:

; 862  : #ifdef _M_IX86
; 863  :     _UINT32_T pos;
; 864  : #ifdef _MSC_VER
; 865  :     _BitScanReverse(&pos, x);
; 866  : #elif defined(__GNUC__)
; 867  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 868  : #else
; 869  : #error unknown compiler
; 870  : #endif
; 871  : #elif defined(_M_X64)
; 872  : #ifdef _MSC_VER
; 873  :     _UINT32_T pos;
; 874  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 875  : #elif defined(__GNUC__)
; 876  :     _UINT64_T pos;
; 877  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 878  : #else
; 879  : #error unknown compiler
; 880  : #endif
; 881  : #else
; 882  : #error unknown platform
; 883  : #endif
; 884  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	rax, rcx

; 885  : }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 827  :     if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 828  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 838  : }

	ret	0
$LN2@LZCNT_ALT_:

; 829  :     _UINT32_T pos;
; 830  : #ifdef _MSC_VER
; 831  :     _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 832  : #elif defined(__GNUC__)
; 833  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 834  : #else
; 835  : #error unknown compiler
; 836  : #endif
; 837  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 838  : }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MINIMUM_UNIT
_TEXT	SEGMENT
x$ = 8
y$ = 16
_MINIMUM_UNIT PROC					; COMDAT

; 439  :     return (x <= y ? x : y);

	cmp	rcx, rdx
	cmovbe	rdx, rcx
	mov	rax, rdx

; 440  : }

	ret	0
_MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MAXIMUM_UNIT
_TEXT	SEGMENT
x$ = 8
y$ = 16
_MAXIMUM_UNIT PROC					; COMDAT

; 434  :     return (x >= y ? x : y);

	cmp	rcx, rdx
	cmovae	rdx, rcx
	mov	rax, rdx

; 435  : }

	ret	0
_MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 424  :     return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 425  : }

	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 413  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 414  :     return ((_UINT32_T)value);

	mov	eax, ecx

; 415  : }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 296  : {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 297  : #ifdef _M_IX86
; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 299  : #elif defined(_M_X64)
; 300  :     __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 301  : #else
; 302  : #error unknown platform
; 303  : #endif
; 304  : }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_X
_TEXT	SEGMENT
work_v_buf_words$1 = 48
nw_check_code$2 = 56
v_tzcnt$1$ = 64
w_buf_count$3 = 64
work_u_buf_code$4 = 72
work_v_buf_code$5 = 80
k$1$ = 88
nw$ = 160
u$ = 160
v$ = 168
w$ = 176
work_u_buf_words$6 = 184
PMC_GreatestCommonDivisor_X_X PROC			; COMDAT

; 436  : {

$LN40:
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H
	mov	r12, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 437  :     if (u == NULL)

	test	rcx, rcx
	je	$LN37@PMC_Greate

; 438  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 439  :     if (v == NULL)

	test	rdx, rdx
	je	$LN37@PMC_Greate

; 440  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 441  :     if (w == NULL)

	test	r8, r8
	je	$LN37@PMC_Greate

; 442  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 443  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 444  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 445  :     PMC_STATUS_CODE result;
; 446  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 447  :         return (result);
; 448  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rbx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 449  :         return (result);
; 450  :     NUMBER_HEADER* nw;
; 451  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR [rbx+32]
	and	eax, 2
	test	BYTE PTR [rdi+32], 2
	je	SHORT $LN7@PMC_Greate

; 452  :     {
; 453  :         // u が 0 である場合
; 454  : 
; 455  :         if (nv->IS_ZERO)

	test	eax, eax
	jne	$LN37@PMC_Greate

; 461  :         }
; 462  :         else
; 463  :         {
; 464  :             // v が 0 ではない場合
; 465  : 
; 466  :             // GCD は v そのものであるため、v を計算結果として返す。
; 467  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	$LN14@PMC_Greate

; 468  :                 return (result);

	jmp	$LN1@PMC_Greate
$LN7@PMC_Greate:

; 469  :             *w = nw;
; 470  :         }
; 471  :     }
; 472  :     else
; 473  :     {
; 474  :         // u が 0 ではない場合
; 475  : 
; 476  :         if (nv->IS_ZERO)

	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 477  :         {
; 478  :             // v が 0 である場合
; 479  : 
; 480  :             // GCD は u そのものであるため、u を計算結果として返す。
; 481  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 544  :             *w = nw;
; 545  :         }
; 546  :     }
; 547  : #ifdef _DEBUG
; 548  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 549  :         return (result);
; 550  : #endif
; 551  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r12], rax
	xor	eax, eax
	jmp	$LN1@PMC_Greate
$LN12@PMC_Greate:

; 482  :                 return (result);
; 483  :             *w = nw;
; 484  :         }
; 485  :         else
; 486  :         {
; 487  :             // u と v がともに 0 ではない場合
; 488  : 
; 489  :             // u と v の GCD を計算する
; 490  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 491  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	r13, QWORD PTR [rbx+8]

; 496  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$4[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmp	QWORD PTR [rdi+8], r13
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 496  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmovae	r13, QWORD PTR [rdi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 496  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r13
	call	AllocateBlock
	mov	r15, rax

; 497  :             if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN38@PMC_Greate

; 498  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 499  : 
; 500  :             __UNIT_TYPE work_v_buf_code;
; 501  :             __UNIT_TYPE work_v_buf_words;
; 502  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r13
	lea	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	call	AllocateBlock
	mov	r14, rax

; 503  :             if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN16@PMC_Greate

; 504  :             {
; 505  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock
$LN38@PMC_Greate:

; 552  : }

	mov	eax, -5
	jmp	$LN1@PMC_Greate
$LN16@PMC_Greate:

; 506  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 507  :             }
; 508  : 
; 509  :             __UNIT_TYPE nw_check_code;
; 510  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$2[rbp-96]
	mov	rdx, r13
	lea	rcx, QWORD PTR nw$[rbp-96]
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN17@PMC_Greate

; 511  :             {
; 512  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r14
	call	DeallocateBlock

; 513  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock

; 514  :                 return (result);

	mov	eax, esi
	jmp	$LN1@PMC_Greate
$LN17@PMC_Greate:

; 515  :             }
; 516  : 
; 517  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rdi+24]

; 518  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	rax, QWORD PTR [rbx+24]

; 519  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rsi, QWORD PTR [rdi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 439  :     return (x <= y ? x : y);

	cmp	r8, rax
	mov	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 518  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	QWORD PTR v_tzcnt$1$[rbp-96], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 439  :     return (x <= y ? x : y);

	cmovbe	rcx, r8
	mov	QWORD PTR k$1$[rbp-96], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 519  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rdi]

; 520  :             if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN18@PMC_Greate

; 521  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r15
	call	RightShift_Imp
	mov	rax, QWORD PTR v_tzcnt$1$[rbp-96]
	jmp	SHORT $LN31@PMC_Greate
$LN18@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 300  :     __movsq(d, s, count);

	mov	rdi, r15
	rep movsq
$LN31@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 524  :             if (v_tzcnt > 0)

	mov	rcx, QWORD PTR [rbx]
	mov	rsi, QWORD PTR [rbx+48]
	test	rax, rax
	je	SHORT $LN20@PMC_Greate

; 525  :                 RightShift_Imp(nv->BLOCK, nv->UNIT_WORD_COUNT, v_tzcnt, work_v_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r14
	mov	r8, rax
	call	RightShift_Imp
	jmp	SHORT $LN33@PMC_Greate
$LN20@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 300  :     __movsq(d, s, count);

	mov	rdi, r14
	rep movsq
$LN33@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 530  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	r9, QWORD PTR nw$[rbp-96]
	lea	rax, QWORD PTR w_buf_count$3[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r13+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 530  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 530  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	rdx, r14
	mov	rcx, r15
	mov	r9, QWORD PTR [r9+48]
	call	GreatestCommonDivisor

; 531  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$4[rbp-96]
	mov	rcx, r15
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@PMC_Greate

; 532  :                 return (result);
; 533  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 534  :                 return (result);
; 535  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 536  :                 return (result);
; 537  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r14
	call	DeallocateBlock

; 538  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock

; 539  : 
; 540  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	r8, QWORD PTR k$1$[rbp-96]
	mov	rdx, QWORD PTR w_buf_count$3[rbp-96]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+48]
	mov	r9, rcx
	call	LeftShift_Imp

; 541  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 542  :                 return (result);
; 543  :             CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp-96]
	call	CommitNumber
$LN14@PMC_Greate:

; 544  :             *w = nw;
; 545  :         }
; 546  :     }
; 547  : #ifdef _DEBUG
; 548  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 549  :         return (result);
; 550  : #endif
; 551  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r12], rax
	xor	eax, eax
	jmp	SHORT $LN1@PMC_Greate
$LN37@PMC_Greate:

; 456  :         {
; 457  :             // v が 0 である場合
; 458  : 
; 459  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 460  :             return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Greate:

; 552  : }

	mov	rbx, QWORD PTR [rsp+168]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
PMC_GreatestCommonDivisor_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_L
_TEXT	SEGMENT
work_v_buf_words$1 = 48
nw_check_code$2 = 56
v_tzcnt$1$ = 64
w_buf_count$3 = 64
work_u_buf_code$4 = 72
work_v_buf_code$5 = 80
k$1$ = 88
nw$ = 160
u$ = 160
v$ = 168
w$ = 176
work_u_buf_words$6 = 184
PMC_GreatestCommonDivisor_X_L PROC			; COMDAT

; 194  : {

$LN99:
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H
	mov	r13, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 195  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 196  :     {
; 197  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 198  :         return (PMC_STATUS_INTERNAL_ERROR);
; 199  :     }
; 200  :     if (u == NULL)

	test	rcx, rcx
	je	$LN96@PMC_Greate

; 201  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 202  :     if (w == NULL)

	test	r8, r8
	je	$LN96@PMC_Greate

; 203  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 204  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 205  :     PMC_STATUS_CODE result;
; 206  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 207  :         return (result);
; 208  :     NUMBER_HEADER* nw;
; 209  :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi+32], 2
	je	SHORT $LN6@PMC_Greate

; 210  :     {
; 211  :         // u が 0 である場合
; 212  : 
; 213  :         if (v == 0)

	test	rbx, rbx
	je	$LN96@PMC_Greate

; 219  :         }
; 220  :         else
; 221  :         {
; 222  :             // v が 0 ではない場合
; 223  : 
; 224  :             // GCD は v そのものであるため、v を計算結果として返す。
; 225  :             if ((result = From_L_Imp(v, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rbx
	call	From_L_Imp
	test	eax, eax
	je	$LN13@PMC_Greate

; 226  :                 return (result);

	jmp	$LN1@PMC_Greate
$LN6@PMC_Greate:

; 227  :             *w = nw;
; 228  :         }
; 229  :     }
; 230  :     else
; 231  :     {
; 232  :         // u が 0 ではない場合
; 233  : 
; 234  :         if (v == 0)

	test	rbx, rbx
	jne	SHORT $LN11@PMC_Greate

; 235  :         {
; 236  :             // v が 0 である場合
; 237  : 
; 238  :             // GCD は u そのものであるため、u を計算結果として返す。
; 239  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 424  :                 *w = nw;
; 425  :             }
; 426  :         }
; 427  :     }
; 428  : #ifdef _DEBUG
; 429  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 430  :         return (result);
; 431  : #endif
; 432  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r13], rax
	xor	eax, eax
	jmp	$LN1@PMC_Greate
$LN11@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 874  :     _BitScanReverse64(&pos, x);

	bsr	r14, rbx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 379  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$4[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 884  :     return (sizeof(x) * 8 - 1 - pos);

	inc	r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 379  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmp	QWORD PTR [rdi+8], r14
	cmovae	r14, QWORD PTR [rdi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 379  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r14
	call	AllocateBlock
	mov	r15, rax

; 380  :                 if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN97@PMC_Greate

; 381  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 382  : 
; 383  :                 __UNIT_TYPE work_v_buf_code;
; 384  :                 __UNIT_TYPE work_v_buf_words;
; 385  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r14
	lea	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	call	AllocateBlock
	mov	r12, rax

; 386  :                 if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN38@PMC_Greate

; 387  :                 {
; 388  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock
$LN97@PMC_Greate:

; 433  : }

	mov	eax, -5
	jmp	$LN1@PMC_Greate
$LN38@PMC_Greate:

; 389  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 390  :                 }
; 391  : 
; 392  :                 __UNIT_TYPE nw_check_code;
; 393  :                 if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$2[rbp-96]
	mov	rdx, r14
	lea	rcx, QWORD PTR nw$[rbp-96]
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN39@PMC_Greate

; 394  :                 {
; 395  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r12
	call	DeallocateBlock

; 396  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock

; 397  :                     return (result);

	mov	eax, esi
	jmp	$LN1@PMC_Greate
$LN39@PMC_Greate:

; 398  :                 }
; 399  : 
; 400  :                 __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rdi+24]

; 402  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rsi, QWORD PTR [rdi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 954  :     _BitScanForward64(&pos, x);

	bsf	rax, rbx

; 439  :     return (x <= y ? x : y);

	cmp	r8, rax

; 964  :     return (pos);

	mov	QWORD PTR v_tzcnt$1$[rbp-96], rax

; 439  :     return (x <= y ? x : y);

	mov	rcx, rax
	cmovbe	rcx, r8
	mov	QWORD PTR k$1$[rbp-96], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 402  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rdi]

; 403  :                 if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN40@PMC_Greate

; 404  :                     RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r15
	call	RightShift_Imp
	mov	rax, QWORD PTR v_tzcnt$1$[rbp-96]
	jmp	SHORT $LN92@PMC_Greate
$LN40@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 300  :     __movsq(d, s, count);

	mov	rdi, r15
	rep movsq
$LN92@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 407  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);

	mov	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r14+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 407  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);

	shr	rbx, cl

; 410  :                 GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	lea	rax, QWORD PTR w_buf_count$3[rbp-96]
	mov	QWORD PTR [r12], rbx
	mov	rdx, r12
	mov	r9, QWORD PTR nw$[rbp-96]
	mov	rcx, r15
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 410  :                 GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [r9+48]
	call	GreatestCommonDivisor

; 411  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$4[rbp-96]
	mov	rcx, r15
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@PMC_Greate

; 412  :                     return (result);
; 413  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r12
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 414  :                     return (result);
; 415  :                 if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 416  :                     return (result);
; 417  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r12
	call	DeallocateBlock

; 418  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock

; 419  : 
; 420  :                 LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	r8, QWORD PTR k$1$[rbp-96]
	mov	rdx, QWORD PTR w_buf_count$3[rbp-96]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+48]
	mov	r9, rcx
	call	LeftShift_Imp

; 421  :                 if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 422  :                     return (result);
; 423  :                 CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp-96]
	call	CommitNumber
$LN13@PMC_Greate:

; 424  :                 *w = nw;
; 425  :             }
; 426  :         }
; 427  :     }
; 428  : #ifdef _DEBUG
; 429  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 430  :         return (result);
; 431  : #endif
; 432  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r13], rax
	xor	eax, eax
	jmp	SHORT $LN1@PMC_Greate
$LN96@PMC_Greate:

; 214  :         {
; 215  :             // v が 0 である場合
; 216  : 
; 217  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 218  :             return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Greate:

; 433  : }

	mov	rbx, QWORD PTR [rsp+168]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
PMC_GreatestCommonDivisor_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_I
_TEXT	SEGMENT
work_v_buf_words$1 = 48
nw_check_code$2 = 56
x$1$ = 64
w_buf_count$3 = 64
work_u_buf_code$4 = 72
work_v_buf_code$5 = 80
k$1$ = 88
nw$ = 160
u$ = 160
v$ = 168
w$ = 176
work_u_buf_words$6 = 184
PMC_GreatestCommonDivisor_X_I PROC			; COMDAT

; 78   : {

$LN41:
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H
	mov	esi, edx
	mov	r15, r8
	mov	rdi, rcx

; 79   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 80   :     {
; 81   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 82   :         return (PMC_STATUS_INTERNAL_ERROR);
; 83   :     }
; 84   :     if (u == NULL)

	test	rcx, rcx
	je	$LN38@PMC_Greate

; 85   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 86   :     if (w == NULL)

	test	r8, r8
	je	$LN38@PMC_Greate

; 87   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 88   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 89   :     PMC_STATUS_CODE result;
; 90   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 91   :         return (result);
; 92   :     NUMBER_HEADER* nw;
; 93   :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi+32], 2
	je	SHORT $LN6@PMC_Greate

; 94   :     {
; 95   :         // u が 0 である場合
; 96   : 
; 97   :         if (v == 0)

	test	esi, esi
	je	$LN38@PMC_Greate

; 103  :         }
; 104  :         else
; 105  :         {
; 106  :             // v が 0 ではない場合
; 107  : 
; 108  :             // GCD は v そのものであるため、v を計算結果として返す。
; 109  :             if ((result = From_I_Imp(v, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	ecx, esi
	call	From_I_Imp
	test	eax, eax
	je	$LN13@PMC_Greate

; 110  :                 return (result);

	jmp	$LN1@PMC_Greate
$LN6@PMC_Greate:

; 111  :             *w = nw;
; 112  :         }
; 113  :     }
; 114  :     else
; 115  :     {
; 116  :         // u が 0 ではない場合
; 117  : 
; 118  :         if (v == 0)

	test	esi, esi
	jne	SHORT $LN11@PMC_Greate

; 119  :         {
; 120  :             // v が 0 である場合
; 121  : 
; 122  :             // GCD は u そのものであるため、u を計算結果として返す。
; 123  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 183  :             *w = nw;
; 184  :         }
; 185  :     }
; 186  : #ifdef _DEBUG
; 187  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 188  :         return (result);
; 189  : #endif
; 190  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r15], rax
	xor	eax, eax
	jmp	$LN1@PMC_Greate
$LN11@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 831  :     _BitScanReverse(&pos, x);

	bsr	eax, esi

; 837  :     return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 138  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$4[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 837  :     return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 138  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	eax, ecx
	mov	r13d, 32				; 00000020H
	sub	r13, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmp	QWORD PTR [rdi+8], r13
	cmovae	r13, QWORD PTR [rdi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 138  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r13
	call	AllocateBlock
	mov	rbx, rax

; 139  :             if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN39@PMC_Greate

; 140  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 141  : 
; 142  :             __UNIT_TYPE work_v_buf_code;
; 143  :             __UNIT_TYPE work_v_buf_words;
; 144  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r13
	lea	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	call	AllocateBlock
	mov	r14, rax

; 145  :             if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN15@PMC_Greate

; 146  :             {
; 147  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, rbx
	call	DeallocateBlock
$LN39@PMC_Greate:

; 191  : }

	mov	eax, -5
	jmp	$LN1@PMC_Greate
$LN15@PMC_Greate:

; 148  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 149  :             }
; 150  : 
; 151  :             __UNIT_TYPE nw_check_code;
; 152  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$2[rbp-96]
	mov	rdx, r13
	lea	rcx, QWORD PTR nw$[rbp-96]
	call	AllocateNumber
	mov	r12d, eax
	test	eax, eax
	je	SHORT $LN16@PMC_Greate

; 153  :             {
; 154  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r14
	call	DeallocateBlock

; 155  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, rbx
	call	DeallocateBlock

; 156  :                 return (result);

	mov	eax, r12d
	jmp	$LN1@PMC_Greate
$LN16@PMC_Greate:

; 157  :             }
; 158  : 
; 159  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rdi+24]

; 160  :             __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT(v);

	mov	rdx, rsi
	mov	QWORD PTR x$1$[rbp-96], rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 941  :         return (sizeof(x) * 8);

	mov	r12d, 64				; 00000040H
	test	esi, esi
	je	SHORT $LN29@PMC_Greate

; 942  : #ifdef _M_IX86
; 943  :     _UINT32_T pos;
; 944  : #ifdef _MSC_VER
; 945  :     _BitScanForward(&pos, x);
; 946  : #elif defined(__GNUC__)
; 947  :     __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 948  : #else
; 949  : #error unknown compiler
; 950  : #endif
; 951  : #elif defined(_M_X64)
; 952  : #ifdef _MSC_VER
; 953  :     _UINT32_T pos;
; 954  :     _BitScanForward64(&pos, x);

	bsf	r12, rdx
$LN29@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 161  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rdi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 439  :     return (x <= y ? x : y);

	cmp	r8, r12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 161  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rsi, QWORD PTR [rdi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 439  :     return (x <= y ? x : y);

	mov	rax, r12
	cmovbe	rax, r8
	mov	QWORD PTR k$1$[rbp-96], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 162  :             if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN17@PMC_Greate

; 163  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, rbx
	call	RightShift_Imp
	mov	rdx, QWORD PTR x$1$[rbp-96]
	jmp	SHORT $LN34@PMC_Greate
$LN17@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 300  :     __movsq(d, s, count);

	mov	rdi, rbx
	rep movsq
$LN34@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 166  :             work_v_buf[0] = v >> v_tzcnt;

	mov	rcx, r12

; 169  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	lea	rax, QWORD PTR w_buf_count$3[rbp-96]
	shr	rdx, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r13+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 166  :             work_v_buf[0] = v >> v_tzcnt;

	mov	QWORD PTR [r14], rdx

; 169  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	rcx, rbx
	mov	r9, QWORD PTR nw$[rbp-96]
	mov	rdx, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 169  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [r9+48]
	call	GreatestCommonDivisor

; 170  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$4[rbp-96]
	mov	rcx, rbx
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@PMC_Greate

; 171  :                 return (result);
; 172  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 173  :                 return (result);
; 174  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 175  :                 return (result);
; 176  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r14
	call	DeallocateBlock

; 177  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, rbx
	call	DeallocateBlock

; 178  : 
; 179  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	r8, QWORD PTR k$1$[rbp-96]
	mov	rdx, QWORD PTR w_buf_count$3[rbp-96]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+48]
	mov	r9, rcx
	call	LeftShift_Imp

; 180  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 181  :                 return (result);
; 182  :             CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp-96]
	call	CommitNumber
$LN13@PMC_Greate:

; 183  :             *w = nw;
; 184  :         }
; 185  :     }
; 186  : #ifdef _DEBUG
; 187  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 188  :         return (result);
; 189  : #endif
; 190  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r15], rax
	xor	eax, eax
	jmp	SHORT $LN1@PMC_Greate
$LN38@PMC_Greate:

; 98   :         {
; 99   :             // v が 0 である場合
; 100  : 
; 101  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 102  :             return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Greate:

; 191  : }

	mov	rbx, QWORD PTR [rsp+168]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
PMC_GreatestCommonDivisor_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT Initialize_GreatestCommonDivisor
_TEXT	SEGMENT
feature$ = 8
Initialize_GreatestCommonDivisor PROC			; COMDAT

; 556  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 557  : }

	ret	0
Initialize_GreatestCommonDivisor ENDP
_TEXT	ENDS
END
