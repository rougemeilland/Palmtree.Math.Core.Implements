; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	configuration_info:DWORD
_DATA	ENDS
PUBLIC	PMC_Initialize
EXTRN	GetCPUInfo:PROC
EXTRN	Initialize_Memory:PROC
EXTRN	Initialize_From:PROC
EXTRN	Initialize_To:PROC
EXTRN	Initialize_Add:PROC
EXTRN	Initialize_Subtruct:PROC
EXTRN	Initialize_Multiply:PROC
EXTRN	Initialize_DivRem:PROC
EXTRN	Initialize_Shift:PROC
EXTRN	Initialize_BitwiseAnd:PROC
EXTRN	Initialize_BitwiseOr:PROC
EXTRN	Initialize_ExclusiveOr:PROC
EXTRN	Initialize_Compare:PROC
EXTRN	Initialize_Equals:PROC
EXTRN	Initialize_ToString:PROC
EXTRN	Initialize_Parse:PROC
EXTRN	PMC_GetStatisticsInfo:PROC
EXTRN	PMC_From_I:PROC
EXTRN	PMC_From_L:PROC
EXTRN	PMC_From_B:PROC
EXTRN	PMC_Dispose:PROC
EXTRN	PMC_To_X_I:PROC
EXTRN	PMC_To_X_L:PROC
EXTRN	PMC_To_X_B:PROC
EXTRN	PMC_Add_X_I:PROC
EXTRN	PMC_Add_X_L:PROC
EXTRN	PMC_Add_X_X:PROC
EXTRN	PMC_Subtruct_X_I:PROC
EXTRN	PMC_Subtruct_X_L:PROC
EXTRN	PMC_Subtruct_X_X:PROC
EXTRN	PMC_Multiply_X_I:PROC
EXTRN	PMC_Multiply_X_L:PROC
EXTRN	PMC_Multiply_X_X:PROC
EXTRN	PMC_DivRem_X_I:PROC
EXTRN	PMC_DivRem_X_L:PROC
EXTRN	PMC_DivRem_X_X:PROC
EXTRN	PMC_RightShift_X_I:PROC
EXTRN	PMC_RightShift_X_L:PROC
EXTRN	PMC_LeftShift_X_I:PROC
EXTRN	PMC_LeftShift_X_L:PROC
EXTRN	PMC_BitwiseAnd_X_I:PROC
EXTRN	PMC_BitwiseAnd_X_L:PROC
EXTRN	PMC_BitwiseAnd_X_X:PROC
EXTRN	PMC_BitwiseOr_X_I:PROC
EXTRN	PMC_BitwiseOr_X_L:PROC
EXTRN	PMC_BitwiseOr_X_X:PROC
EXTRN	PMC_ExclusiveOr_X_I:PROC
EXTRN	PMC_ExclusiveOr_X_L:PROC
EXTRN	PMC_ExclusiveOr_X_X:PROC
EXTRN	PMC_Compare_X_I:PROC
EXTRN	PMC_Compare_X_L:PROC
EXTRN	PMC_Compare_X_X:PROC
EXTRN	PMC_Equals_X_I:PROC
EXTRN	PMC_Equals_X_L:PROC
EXTRN	PMC_Equals_X_X:PROC
EXTRN	PMC_ToString:PROC
EXTRN	PMC_TryParse:PROC
_BSS	SEGMENT
entry_points DB	0150H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Initialize DD imagerel $LN20
	DD	imagerel $LN20+908
	DD	imagerel $unwind$PMC_Initialize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Initialize DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_initialize.c
;	COMDAT PMC_Initialize
_TEXT	SEGMENT
feature$ = 48
config$ = 48
PMC_Initialize PROC					; COMDAT

; 46   : {

$LN20:
	sub	rsp, 40					; 00000028H

; 47   :     configuration_info = *config;

	mov	eax, DWORD PTR [rcx]

; 48   :     PROCESSOR_FEATURES feature;
; 49   :     GetCPUInfo(&feature);

	lea	rcx, QWORD PTR feature$[rsp]
	mov	DWORD PTR configuration_info, eax
	call	GetCPUInfo

; 50   : 
; 51   :     if (Initialize_Memory(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Memory
	test	eax, eax
	jne	$LN18@PMC_Initia

; 52   :         return (NULL);
; 53   :     if (Initialize_From(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_From
	test	eax, eax
	jne	$LN18@PMC_Initia

; 54   :         return (NULL);
; 55   :     if (Initialize_To(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_To
	test	eax, eax
	jne	$LN18@PMC_Initia

; 56   :         return (NULL);
; 57   :     if (Initialize_Add(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Add
	test	eax, eax
	jne	$LN18@PMC_Initia

; 58   :         return (NULL);
; 59   :     if (Initialize_Subtruct(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Subtruct
	test	eax, eax
	jne	$LN18@PMC_Initia

; 60   :         return (NULL);
; 61   :     if (Initialize_Multiply(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Multiply
	test	eax, eax
	jne	$LN18@PMC_Initia

; 62   :         return (NULL);
; 63   :     if (Initialize_DivRem(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_DivRem
	test	eax, eax
	jne	$LN18@PMC_Initia

; 64   :         return (NULL);
; 65   :     if (Initialize_Shift(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Shift
	test	eax, eax
	jne	$LN18@PMC_Initia

; 66   :         return (NULL);
; 67   :     if (Initialize_BitwiseAnd(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_BitwiseAnd
	test	eax, eax
	jne	$LN18@PMC_Initia

; 68   :         return (NULL);
; 69   :     if (Initialize_BitwiseOr(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_BitwiseOr
	test	eax, eax
	jne	$LN18@PMC_Initia

; 70   :         return (NULL);
; 71   :     if (Initialize_ExclusiveOr(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_ExclusiveOr
	test	eax, eax
	jne	$LN18@PMC_Initia

; 72   :         return (NULL);
; 73   :     if (Initialize_Compare(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Compare
	test	eax, eax
	jne	$LN18@PMC_Initia

; 74   :         return (NULL);
; 75   :     if (Initialize_Equals(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Equals
	test	eax, eax
	jne	$LN18@PMC_Initia

; 76   :         return (NULL);
; 77   :     if (Initialize_ToString(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_ToString
	test	eax, eax
	jne	$LN18@PMC_Initia

; 78   :         return (NULL);
; 79   :     if (Initialize_Parse(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Parse
	test	eax, eax
	jne	$LN18@PMC_Initia

; 81   : 
; 82   :     entry_points.PROCESSOR_FEATURE_POPCNT = feature.PROCESSOR_FEATURE_POPCNT;
; 83   :     entry_points.PROCESSOR_FEATURE_ADX = feature.PROCESSOR_FEATURE_ADX;
; 84   : 	entry_points.PROCESSOR_FEATURE_BMI1 = feature.PROCESSOR_FEATURE_BMI1;
; 85   :     entry_points.PROCESSOR_FEATURE_BMI2 = feature.PROCESSOR_FEATURE_BMI2;
; 86   :     entry_points.PROCESSOR_FEATURE_ABM = feature.PROCESSOR_FEATURE_ABM;

	mov	ecx, DWORD PTR entry_points
	mov	eax, ecx
	xor	eax, DWORD PTR feature$[rsp]
	and	eax, 31
	xor	ecx, eax

; 87   : 	entry_points.PMC_GetStatisticsInfo = PMC_GetStatisticsInfo;

	lea	rax, OFFSET FLAT:PMC_GetStatisticsInfo
	mov	QWORD PTR entry_points+8, rax

; 88   : 	entry_points.PMC_From_I = PMC_From_I;

	lea	rax, OFFSET FLAT:PMC_From_I
	mov	QWORD PTR entry_points+16, rax

; 89   : 	entry_points.PMC_From_L = PMC_From_L;

	lea	rax, OFFSET FLAT:PMC_From_L
	mov	QWORD PTR entry_points+24, rax

; 90   :     entry_points.PMC_From_B = PMC_From_B;

	lea	rax, OFFSET FLAT:PMC_From_B
	mov	QWORD PTR entry_points+32, rax

; 91   :     entry_points.PMC_Dispose = PMC_Dispose;

	lea	rax, OFFSET FLAT:PMC_Dispose
	mov	QWORD PTR entry_points+40, rax

; 92   :     entry_points.PMC_To_X_I = PMC_To_X_I;

	lea	rax, OFFSET FLAT:PMC_To_X_I
	mov	QWORD PTR entry_points+48, rax

; 93   : 	entry_points.PMC_To_X_L = PMC_To_X_L;

	lea	rax, OFFSET FLAT:PMC_To_X_L
	mov	QWORD PTR entry_points+56, rax

; 94   :     entry_points.PMC_To_X_B = PMC_To_X_B;

	lea	rax, OFFSET FLAT:PMC_To_X_B
	mov	QWORD PTR entry_points+64, rax

; 95   :     entry_points.PMC_Add_X_I = PMC_Add_X_I;

	lea	rax, OFFSET FLAT:PMC_Add_X_I
	mov	QWORD PTR entry_points+72, rax

; 96   : 	entry_points.PMC_Add_X_L = PMC_Add_X_L;

	lea	rax, OFFSET FLAT:PMC_Add_X_L
	mov	QWORD PTR entry_points+80, rax

; 97   : 	entry_points.PMC_Add_X_X = PMC_Add_X_X;

	lea	rax, OFFSET FLAT:PMC_Add_X_X
	mov	QWORD PTR entry_points+88, rax

; 98   :     entry_points.PMC_Subtruct_X_I = PMC_Subtruct_X_I;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_I
	mov	QWORD PTR entry_points+96, rax

; 99   :     entry_points.PMC_Subtruct_X_L = PMC_Subtruct_X_L;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_L
	mov	QWORD PTR entry_points+104, rax

; 100  :     entry_points.PMC_Subtruct_X_X = PMC_Subtruct_X_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_X
	mov	QWORD PTR entry_points+112, rax

; 101  :     entry_points.PMC_Multiply_X_I = PMC_Multiply_X_I;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_I
	mov	QWORD PTR entry_points+120, rax

; 102  :     entry_points.PMC_Multiply_X_L = PMC_Multiply_X_L;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_L
	mov	QWORD PTR entry_points+128, rax

; 103  :     entry_points.PMC_Multiply_X_X = PMC_Multiply_X_X;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_X
	mov	QWORD PTR entry_points+136, rax

; 104  :     entry_points.PMC_DivRem_X_I = PMC_DivRem_X_I;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_I
	mov	QWORD PTR entry_points+144, rax

; 105  :     entry_points.PMC_DivRem_X_L = PMC_DivRem_X_L;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_L
	mov	QWORD PTR entry_points+152, rax

; 106  :     entry_points.PMC_DivRem_X_X = PMC_DivRem_X_X;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_X
	mov	QWORD PTR entry_points+160, rax

; 107  :     entry_points.PMC_RightShift_X_I = PMC_RightShift_X_I;

	lea	rax, OFFSET FLAT:PMC_RightShift_X_I
	mov	QWORD PTR entry_points+184, rax

; 108  :     entry_points.PMC_RightShift_X_L = PMC_RightShift_X_L;

	lea	rax, OFFSET FLAT:PMC_RightShift_X_L
	mov	QWORD PTR entry_points+192, rax

; 109  :     entry_points.PMC_LeftShift_X_I = PMC_LeftShift_X_I;

	lea	rax, OFFSET FLAT:PMC_LeftShift_X_I
	mov	QWORD PTR entry_points+168, rax

; 110  :     entry_points.PMC_LeftShift_X_L = PMC_LeftShift_X_L;

	lea	rax, OFFSET FLAT:PMC_LeftShift_X_L
	mov	QWORD PTR entry_points+176, rax

; 111  :     entry_points.PMC_BitwiseAnd_X_I = PMC_BitwiseAnd_X_I;

	lea	rax, OFFSET FLAT:PMC_BitwiseAnd_X_I
	mov	QWORD PTR entry_points+200, rax

; 112  :     entry_points.PMC_BitwiseAnd_X_L = PMC_BitwiseAnd_X_L;

	lea	rax, OFFSET FLAT:PMC_BitwiseAnd_X_L
	mov	QWORD PTR entry_points+208, rax

; 113  :     entry_points.PMC_BitwiseAnd_X_X = PMC_BitwiseAnd_X_X;

	lea	rax, OFFSET FLAT:PMC_BitwiseAnd_X_X
	mov	QWORD PTR entry_points+216, rax

; 114  :     entry_points.PMC_BitwiseOr_X_I = PMC_BitwiseOr_X_I;

	lea	rax, OFFSET FLAT:PMC_BitwiseOr_X_I
	mov	QWORD PTR entry_points+224, rax

; 115  :     entry_points.PMC_BitwiseOr_X_L = PMC_BitwiseOr_X_L;

	lea	rax, OFFSET FLAT:PMC_BitwiseOr_X_L
	mov	QWORD PTR entry_points+232, rax

; 116  :     entry_points.PMC_BitwiseOr_X_X = PMC_BitwiseOr_X_X;

	lea	rax, OFFSET FLAT:PMC_BitwiseOr_X_X
	mov	QWORD PTR entry_points+240, rax

; 117  :     entry_points.PMC_ExclusiveOr_X_I = PMC_ExclusiveOr_X_I;

	lea	rax, OFFSET FLAT:PMC_ExclusiveOr_X_I
	mov	QWORD PTR entry_points+248, rax

; 118  :     entry_points.PMC_ExclusiveOr_X_L = PMC_ExclusiveOr_X_L;

	lea	rax, OFFSET FLAT:PMC_ExclusiveOr_X_L
	mov	QWORD PTR entry_points+256, rax

; 119  :     entry_points.PMC_ExclusiveOr_X_X = PMC_ExclusiveOr_X_X;

	lea	rax, OFFSET FLAT:PMC_ExclusiveOr_X_X
	mov	QWORD PTR entry_points+264, rax

; 120  :     entry_points.PMC_Compare_X_I = PMC_Compare_X_I;

	lea	rax, OFFSET FLAT:PMC_Compare_X_I
	mov	QWORD PTR entry_points+272, rax

; 121  :     entry_points.PMC_Compare_X_L = PMC_Compare_X_L;

	lea	rax, OFFSET FLAT:PMC_Compare_X_L
	mov	QWORD PTR entry_points+280, rax

; 122  :     entry_points.PMC_Compare_X_X = PMC_Compare_X_X;

	lea	rax, OFFSET FLAT:PMC_Compare_X_X
	mov	QWORD PTR entry_points+288, rax

; 123  :     entry_points.PMC_Equals_X_I = PMC_Equals_X_I;

	lea	rax, OFFSET FLAT:PMC_Equals_X_I
	mov	QWORD PTR entry_points+296, rax

; 124  :     entry_points.PMC_Equals_X_L = PMC_Equals_X_L;

	lea	rax, OFFSET FLAT:PMC_Equals_X_L
	mov	DWORD PTR entry_points, ecx
	mov	QWORD PTR entry_points+304, rax

; 125  :     entry_points.PMC_Equals_X_X = PMC_Equals_X_X;

	lea	rax, OFFSET FLAT:PMC_Equals_X_X
	mov	QWORD PTR entry_points+312, rax

; 126  :     entry_points.PMC_ToString = PMC_ToString;

	lea	rax, OFFSET FLAT:PMC_ToString
	mov	QWORD PTR entry_points+320, rax

; 127  :     entry_points.PMC_TryParse = PMC_TryParse;

	lea	rax, OFFSET FLAT:PMC_TryParse
	mov	QWORD PTR entry_points+328, rax

; 128  :     return (&entry_points);

	lea	rax, OFFSET FLAT:entry_points

; 129  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN18@PMC_Initia:

; 80   :         return (NULL);

	xor	eax, eax

; 129  : }

	add	rsp, 40					; 00000028H
	ret	0
PMC_Initialize ENDP
_TEXT	ENDS
END
