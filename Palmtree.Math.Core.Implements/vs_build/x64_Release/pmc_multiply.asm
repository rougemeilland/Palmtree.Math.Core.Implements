; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_Multiply
PUBLIC	PMC_Multiply_X_I
PUBLIC	PMC_Multiply_X_L
PUBLIC	PMC_Multiply_X_X
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	number_zero:BYTE
EXTRN	statistics_info:BYTE
_BSS	SEGMENT
fp_Multiply_X_1W DQ 01H DUP (?)
fp_Multiply_X_2W DQ 01H DUP (?)
fp_Multiply_X_X DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_I DD imagerel $LN32
	DD	imagerel $LN32+367
	DD	imagerel $unwind$PMC_Multiply_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_L DD imagerel $LN54
	DD	imagerel $LN54+372
	DD	imagerel $unwind$PMC_Multiply_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_X DD imagerel $LN30
	DD	imagerel $LN30+389
	DD	imagerel $unwind$PMC_Multiply_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_WORD_using_MUL_ADC DD imagerel Multiply_WORD_using_MUL_ADC
	DD	imagerel Multiply_WORD_using_MUL_ADC+2979
	DD	imagerel $unwind$Multiply_WORD_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_WORD_using_MULX_ADCX DD imagerel Multiply_WORD_using_MULX_ADCX
	DD	imagerel Multiply_WORD_using_MULX_ADCX+3188
	DD	imagerel $unwind$Multiply_WORD_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_1W_using_MUL_ADC DD imagerel Multiply_X_1W_using_MUL_ADC
	DD	imagerel Multiply_X_1W_using_MUL_ADC+30
	DD	imagerel $unwind$Multiply_X_1W_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_1W_using_MULX_ADCX DD imagerel Multiply_X_1W_using_MULX_ADCX
	DD	imagerel Multiply_X_1W_using_MULX_ADCX+30
	DD	imagerel $unwind$Multiply_X_1W_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_2W_using_MUL_ADC DD imagerel Multiply_X_2W_using_MUL_ADC
	DD	imagerel Multiply_X_2W_using_MUL_ADC+81
	DD	imagerel $unwind$Multiply_X_2W_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_2W_using_MULX_ADCX DD imagerel Multiply_X_2W_using_MULX_ADCX
	DD	imagerel Multiply_X_2W_using_MULX_ADCX+81
	DD	imagerel $unwind$Multiply_X_2W_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_X_using_MUL_ADC DD imagerel Multiply_X_X_using_MUL_ADC
	DD	imagerel Multiply_X_X_using_MUL_ADC+140
	DD	imagerel $unwind$Multiply_X_X_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_X_using_MULX_ADCX DD imagerel Multiply_X_X_using_MULX_ADCX
	DD	imagerel Multiply_X_X_using_MULX_ADCX+140
	DD	imagerel $unwind$Multiply_X_X_using_MULX_ADCX
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_X_using_MULX_ADCX DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_X_using_MUL_ADC DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_2W_using_MULX_ADCX DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_2W_using_MUL_ADC DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_1W_using_MULX_ADCX DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_1W_using_MUL_ADC DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_WORD_using_MULX_ADCX DD 091d01H
	DD	084641dH
	DD	082341dH
	DD	07e011dH
	DD	0700ce00eH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_WORD_using_MUL_ADC DD 091f01H
	DD	083741fH
	DD	082641fH
	DD	080341fH
	DD	07e011fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_X DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_L DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_I DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_X
_TEXT	SEGMENT
x$ = 8
y$ = 16
z$ = 24
Multiply_X_X PROC					; COMDAT

; 453  :     return ((*fp_Multiply_X_X)(x, y, z));

	rex_jmp	QWORD PTR fp_Multiply_X_X
Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_X_using_MULX_ADCX
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
Multiply_X_X_using_MULX_ADCX PROC			; COMDAT

; 425  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	r10, QWORD PTR [rcx]

; 426  :     // x のワード長が y のワード長以上であるようにする
; 427  :     if (x->UNIT_WORD_COUNT < y->UNIT_WORD_COUNT)
; 428  :     {
; 429  :         NUMBER_HEADER* t = x;
; 430  :         x = y;
; 431  :         y = t;
; 432  :     }
; 433  :     __UNIT_TYPE x_count = x->UNIT_WORD_COUNT;

	mov	rax, rdx
	mov	r9, QWORD PTR [rdx]
	mov	rsi, r10

; 434  :     __UNIT_TYPE y_count = y->UNIT_WORD_COUNT;
; 435  :     __UNIT_TYPE z_count = z->BLOCK_COUNT;
; 436  :     __UNIT_TYPE* xp = &x->BLOCK[0];
; 437  :     __UNIT_TYPE* yp = &y->BLOCK[0];
; 438  :     __UNIT_TYPE* zp = &z->BLOCK[0];

	mov	rbx, QWORD PTR [r8+48]
	cmp	r10, r9
	mov	rbp, r9
	cmovae	rax, rcx
	cmovae	rbp, r10
	cmovae	rcx, rdx
	cmovae	rsi, r9
	mov	r14, QWORD PTR [rax+48]
	mov	rdi, QWORD PTR [rcx+48]
	npad	8
$LL4@Multiply_X:

; 439  : 
; 440  :     do
; 441  :     {
; 442  :         Multiply_WORD_using_MULX_ADCX(xp, x_count, *yp, zp);

	mov	r8, QWORD PTR [rdi]
	mov	r9, rbx
	mov	rdx, rbp
	mov	rcx, r14
	call	Multiply_WORD_using_MULX_ADCX

; 443  :         ++yp;
; 444  :         ++zp;

	add	rbx, 8
	lea	rdi, QWORD PTR [rdi+8]

; 445  :         --y_count;

	sub	rsi, 1

; 446  :     } while (y_count != 0);

	jne	SHORT $LL4@Multiply_X

; 447  : 
; 448  :     return (PMC_STATUS_OK);
; 449  : }

	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
Multiply_X_X_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_X_using_MUL_ADC
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
Multiply_X_X_using_MUL_ADC PROC				; COMDAT

; 398  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	r10, QWORD PTR [rcx]

; 399  :     // x のワード長が y のワード長以上であるようにする
; 400  :     if (x->UNIT_WORD_COUNT < y->UNIT_WORD_COUNT)
; 401  :     {
; 402  :         NUMBER_HEADER* t = x;
; 403  :         x = y;
; 404  :         y = t;
; 405  :     }
; 406  :     __UNIT_TYPE x_count = x->UNIT_WORD_COUNT;

	mov	rax, rdx
	mov	r9, QWORD PTR [rdx]
	mov	rsi, r10

; 407  :     __UNIT_TYPE y_count = y->UNIT_WORD_COUNT;
; 408  :     __UNIT_TYPE z_count = z->BLOCK_COUNT;
; 409  :     __UNIT_TYPE* xp = &x->BLOCK[0];
; 410  :     __UNIT_TYPE* yp = &y->BLOCK[0];
; 411  :     __UNIT_TYPE* zp = &z->BLOCK[0];

	mov	rbx, QWORD PTR [r8+48]
	cmp	r10, r9
	mov	rbp, r9
	cmovae	rax, rcx
	cmovae	rbp, r10
	cmovae	rcx, rdx
	cmovae	rsi, r9
	mov	r14, QWORD PTR [rax+48]
	mov	rdi, QWORD PTR [rcx+48]
	npad	8
$LL4@Multiply_X:

; 412  : 
; 413  :     do
; 414  :     {
; 415  :         Multiply_WORD_using_MUL_ADC(xp, x_count, *yp, zp);

	mov	r8, QWORD PTR [rdi]
	mov	r9, rbx
	mov	rdx, rbp
	mov	rcx, r14
	call	Multiply_WORD_using_MUL_ADC

; 416  :         ++yp;
; 417  :         ++zp;

	add	rbx, 8
	lea	rdi, QWORD PTR [rdi+8]

; 418  :         --y_count;

	sub	rsi, 1

; 419  :     } while (y_count != 0);

	jne	SHORT $LL4@Multiply_X

; 420  : 
; 421  :     return (PMC_STATUS_OK);
; 422  : }

	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
Multiply_X_X_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_2W
_TEXT	SEGMENT
x$ = 8
y_hi$ = 16
y_lo$ = 24
z$ = 32
Multiply_X_2W PROC					; COMDAT

; 394  :     return ((*fp_Multiply_X_2W)(x, y_hi, y_lo, z));

	rex_jmp	QWORD PTR fp_Multiply_X_2W
Multiply_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_2W_using_MULX_ADCX
_TEXT	SEGMENT
x$ = 48
y_hi$ = 56
y_lo$ = 64
z$ = 72
Multiply_X_2W_using_MULX_ADCX PROC			; COMDAT

; 386  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, r9

; 387  :     Multiply_WORD_using_MULX_ADCX(&x->BLOCK[0], x->UNIT_WORD_COUNT, y_lo, &z->BLOCK[0]);

	mov	rdx, QWORD PTR [rcx]
	mov	rsi, rcx
	mov	rcx, QWORD PTR [rcx+48]
	mov	r9, QWORD PTR [r9+48]
	call	Multiply_WORD_using_MULX_ADCX

; 388  :     Multiply_WORD_using_MULX_ADCX(&x->BLOCK[0], x->UNIT_WORD_COUNT, y_hi, &z->BLOCK[1]);

	mov	r9, QWORD PTR [rbx+48]
	mov	r8, rdi
	mov	rdx, QWORD PTR [rsi]
	add	r9, 8
	mov	rcx, QWORD PTR [rsi+48]
	call	Multiply_WORD_using_MULX_ADCX

; 389  :     return (PMC_STATUS_OK);
; 390  : }

	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
Multiply_X_2W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_2W_using_MUL_ADC
_TEXT	SEGMENT
x$ = 48
y_hi$ = 56
y_lo$ = 64
z$ = 72
Multiply_X_2W_using_MUL_ADC PROC			; COMDAT

; 379  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, r9

; 380  :     Multiply_WORD_using_MUL_ADC(&x->BLOCK[0], x->UNIT_WORD_COUNT, y_lo, &z->BLOCK[0]);

	mov	rdx, QWORD PTR [rcx]
	mov	rsi, rcx
	mov	rcx, QWORD PTR [rcx+48]
	mov	r9, QWORD PTR [r9+48]
	call	Multiply_WORD_using_MUL_ADC

; 381  :     Multiply_WORD_using_MUL_ADC(&x->BLOCK[0], x->UNIT_WORD_COUNT, y_hi, &z->BLOCK[1]);

	mov	r9, QWORD PTR [rbx+48]
	mov	r8, rdi
	mov	rdx, QWORD PTR [rsi]
	add	r9, 8
	mov	rcx, QWORD PTR [rsi+48]
	call	Multiply_WORD_using_MUL_ADC

; 382  :     return (PMC_STATUS_OK);
; 383  : }

	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
Multiply_X_2W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_1W
_TEXT	SEGMENT
x$ = 8
y$ = 16
z$ = 24
Multiply_X_1W PROC					; COMDAT

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	rex_jmp	QWORD PTR fp_Multiply_X_1W
Multiply_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_1W_using_MULX_ADCX
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
Multiply_X_1W_using_MULX_ADCX PROC			; COMDAT

; 368  : {

	sub	rsp, 40					; 00000028H

; 369  :     Multiply_WORD_using_MULX_ADCX(&x->BLOCK[0], x->UNIT_WORD_COUNT, y, &z->BLOCK[0]);

	mov	r9, QWORD PTR [r8+48]
	mov	r8, rdx
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rcx+48]
	call	Multiply_WORD_using_MULX_ADCX

; 370  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 371  : }

	add	rsp, 40					; 00000028H
	ret	0
Multiply_X_1W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_X_1W_using_MUL_ADC
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
Multiply_X_1W_using_MUL_ADC PROC			; COMDAT

; 362  : {

	sub	rsp, 40					; 00000028H

; 363  :     Multiply_WORD_using_MUL_ADC(&x->BLOCK[0], x->UNIT_WORD_COUNT, y, &z->BLOCK[0]);

	mov	r9, QWORD PTR [r8+48]
	mov	r8, rdx
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rcx+48]
	call	Multiply_WORD_using_MUL_ADC

; 364  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 365  : }

	add	rsp, 40					; 00000028H
	ret	0
Multiply_X_1W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_WORD_using_MULX_ADCX
_TEXT	SEGMENT
t_hi$1 = 0
t_lo$2 = 8
t_hi$3 = 16
t_lo$4 = 24
t_hi$5 = 32
t_lo$6 = 40
t_hi$7 = 48
t_lo$8 = 56
t_hi$9 = 64
t_lo$10 = 72
t_hi$11 = 80
t_lo$12 = 88
t_hi$13 = 96
t_lo$14 = 104
t_hi$15 = 112
t_lo$16 = 120
t_hi$17 = 128
t_lo$18 = 136
t_hi$19 = 144
t_lo$20 = 152
t_hi$21 = 160
t_lo$22 = 168
t_hi$23 = 176
t_lo$24 = 184
t_hi$25 = 192
t_lo$26 = 200
t_hi$27 = 208
t_lo$28 = 216
t_hi$29 = 224
t_lo$30 = 232
t_hi$31 = 240
t_lo$32 = 248
t_hi$33 = 256
t_lo$34 = 264
t_hi$35 = 272
t_lo$36 = 280
t_hi$37 = 288
t_lo$38 = 296
t_hi$39 = 304
t_lo$40 = 312
t_hi$41 = 320
t_lo$42 = 328
t_hi$43 = 336
t_lo$44 = 344
t_hi$45 = 352
t_lo$46 = 360
t_hi$47 = 368
t_lo$48 = 376
t_hi$49 = 384
t_lo$50 = 392
t_hi$51 = 400
t_lo$52 = 408
t_hi$53 = 416
t_lo$54 = 424
t_hi$55 = 432
t_lo$56 = 440
t_hi$57 = 448
t_lo$58 = 456
t_hi$59 = 464
t_lo$60 = 472
t_hi$61 = 480
t_lo$62 = 488
t_hi$63 = 496
t_lo$64 = 504
t_hi$65 = 512
t_lo$66 = 520
t_hi$67 = 528
t_lo$68 = 536
t_hi$69 = 544
t_lo$70 = 552
t_hi$71 = 560
t_lo$72 = 568
t_hi$73 = 576
t_lo$74 = 584
t_hi$75 = 592
t_lo$76 = 600
t_hi$77 = 608
t_lo$78 = 616
t_hi$79 = 624
t_lo$80 = 632
t_hi$81 = 640
t_lo$82 = 648
t_hi$83 = 656
t_lo$84 = 664
t_hi$85 = 672
t_lo$86 = 680
t_hi$87 = 688
t_lo$88 = 696
t_hi$89 = 704
t_lo$90 = 712
t_hi$91 = 720
t_lo$92 = 728
t_hi$93 = 736
t_lo$94 = 744
t_hi$95 = 752
t_lo$96 = 760
t_hi$97 = 768
t_lo$98 = 776
t_hi$99 = 784
t_lo$100 = 792
t_hi$101 = 800
t_lo$102 = 808
t_hi$103 = 816
t_lo$104 = 824
t_hi$105 = 832
t_lo$106 = 840
t_hi$107 = 848
t_lo$108 = 856
t_hi$109 = 864
t_lo$110 = 872
t_hi$111 = 880
t_lo$112 = 888
t_hi$113 = 896
t_lo$114 = 904
t_hi$115 = 912
t_lo$116 = 920
t_hi$117 = 928
t_lo$118 = 936
t_hi$119 = 944
t_lo$120 = 952
t_hi$121 = 960
t_lo$122 = 968
t_hi$123 = 976
t_lo$124 = 984
t_hi$125 = 992
up$ = 1040
t_lo$126 = 1048
u_count$ = 1048
v$ = 1056
wp$ = 1064
Multiply_WORD_using_MULX_ADCX PROC			; COMDAT

; 214  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rbp
	push	rdi
	push	r14
	lea	rbp, QWORD PTR [rsp-752]
	sub	rsp, 1008				; 000003f0H

; 215  :     __UNIT_TYPE k = 0;

	xor	r14d, r14d

; 216  :     __UNIT_TYPE count = u_count >> 5;

	mov	rsi, rdx
	shr	rsi, 5
	mov	rbx, r8
	mov	rdi, rdx
	mov	r11, rcx
	mov	r10d, r14d

; 218  :     while (count != 0)

	test	rsi, rsi
	je	$LN3@Multiply_W
	npad	4
$LL2@Multiply_W:

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$126[rbp-256], rcx
	mov	QWORD PTR t_hi$1[rsp], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$2[rsp], rcx
	mov	QWORD PTR t_hi$3[rsp], r10

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+16]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$4[rsp], rcx
	mov	QWORD PTR t_hi$5[rsp], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+24]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$6[rsp], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+32]
	mov	QWORD PTR t_hi$7[rsp], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$8[rsp], rcx
	mov	QWORD PTR t_hi$9[rsp], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+40]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$10[rsp], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+48]
	mov	QWORD PTR t_hi$11[rsp], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$12[rsp], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+56]
	mov	QWORD PTR t_hi$13[rsp], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$14[rsp], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+64]
	mov	QWORD PTR t_hi$15[rsp], r10
	adcx	r8, r14
	add	rcx, r10
	mov	QWORD PTR t_lo$16[rsp], rcx
	adcx	r8, r14
	mov	QWORD PTR t_hi$17[rbp-256], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+64], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+72]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+72], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$18[rbp-256], rcx
	mov	QWORD PTR t_hi$19[rbp-256], r10

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+80]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+80], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$20[rbp-256], rcx
	mov	QWORD PTR t_hi$21[rbp-256], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+88]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+88], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$22[rbp-256], rcx
	mov	QWORD PTR t_hi$23[rbp-256], r10

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+96]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+96], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$24[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+104]
	mov	QWORD PTR t_hi$25[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+104], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$26[rbp-256], rcx
	mov	QWORD PTR t_hi$27[rbp-256], r10

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+112]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+112], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$28[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+120]
	mov	QWORD PTR t_hi$29[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+120], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$30[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+128]
	mov	QWORD PTR t_hi$31[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+128], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+136]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$32[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+136]
	mov	QWORD PTR t_hi$33[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
	mov	QWORD PTR t_lo$34[rbp-256], rcx
	adcx	r10, r14
	mov	QWORD PTR t_hi$35[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+136], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+144]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+144]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+144], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+152]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$36[rbp-256], rcx
	mov	QWORD PTR t_hi$37[rbp-256], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+152]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+152], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+160]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$38[rbp-256], rcx
	mov	QWORD PTR t_hi$39[rbp-256], r10

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+160]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+160], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+168]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$40[rbp-256], rcx
	mov	QWORD PTR t_hi$41[rbp-256], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+168]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+168], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+176]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$42[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+176]
	mov	QWORD PTR t_hi$43[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+176], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+184]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$44[rbp-256], rcx
	mov	QWORD PTR t_hi$45[rbp-256], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+184]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+184], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+192]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$46[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+192]
	mov	QWORD PTR t_hi$47[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+192], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+200]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$48[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+200]
	mov	QWORD PTR t_hi$49[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+200], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+208]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$50[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+208]
	mov	QWORD PTR t_hi$51[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
	mov	QWORD PTR t_lo$52[rbp-256], rcx
	adcx	r8, r14
	mov	QWORD PTR t_hi$53[rbp-256], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+208], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+216]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+216]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+216], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+224]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$54[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+224]
	mov	QWORD PTR t_hi$55[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+224], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+232]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$56[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+232]
	mov	QWORD PTR t_hi$57[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+232], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+240]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$58[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+240]
	mov	QWORD PTR t_hi$59[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+240], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+248]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$60[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+248]

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 32					; 00000020H

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$61[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+248], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 252  :         up += 32;

	add	r11, 256				; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$62[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 253  :         wp += 32;

	add	r9, 256					; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$63[rbp-256], r10

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 218  :     while (count != 0)

	sub	rsi, 1
	jne	$LL2@Multiply_W
$LN3@Multiply_W:

; 254  :         --count;
; 255  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 256  :         if (sizeof(k) == sizeof(_UINT32_T))
; 257  :             AddToMULTI32Counter(32);
; 258  :         else
; 259  :             AddToMULTI64Counter(32);
; 260  : #endif
; 261  :     }
; 262  : 
; 263  :     if (u_count & 0x10)

	test	dil, 16
	je	$LN605@Multiply_W

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$64[rbp-256], rcx
	mov	QWORD PTR t_hi$65[rbp-256], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$66[rbp-256], rcx
	mov	QWORD PTR t_hi$67[rbp-256], r10

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+16]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$68[rbp-256], rcx
	mov	QWORD PTR t_hi$69[rbp-256], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+24]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$70[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+32]
	mov	QWORD PTR t_hi$71[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$72[rbp-256], rcx
	mov	QWORD PTR t_hi$73[rbp-256], r8

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+40]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$74[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+48]
	mov	QWORD PTR t_hi$75[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$76[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+56]
	mov	QWORD PTR t_hi$77[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$78[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+64]
	mov	QWORD PTR t_hi$79[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
	mov	QWORD PTR t_lo$80[rbp-256], rcx
	adcx	r8, r14
	mov	QWORD PTR t_hi$81[rbp-256], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+64], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+72]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+72], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$82[rbp-256], rcx
	mov	QWORD PTR t_hi$83[rbp-256], r10

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+80]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+80], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$84[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+88]
	mov	QWORD PTR t_hi$85[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+88], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$86[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+96]
	mov	QWORD PTR t_hi$87[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+96], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$88[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+104]
	mov	QWORD PTR t_hi$89[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+104], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$90[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+112]
	mov	QWORD PTR t_hi$91[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+112], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$92[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+120]

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 16

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$93[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+120], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 281  :         up += 16;

	sub	r11, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$94[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 282  :         wp += 16;

	sub	r9, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$95[rbp-256], r10

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN605@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 291  :     if (u_count & 0x8)

	test	dil, 8
	je	$LN705@Multiply_W

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$96[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
	mov	QWORD PTR t_hi$97[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$98[rbp-256], rcx
	mov	QWORD PTR t_hi$99[rbp-256], r10

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+16]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$100[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+24]
	mov	QWORD PTR t_hi$101[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$102[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+32]
	mov	QWORD PTR t_hi$103[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$104[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+40]
	mov	QWORD PTR t_hi$105[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$106[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+48]
	mov	QWORD PTR t_hi$107[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$108[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+56]

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 8

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$109[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 301  :         up += 8;

	add	r11, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$110[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 302  :         wp += 8;

	add	r9, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$111[rbp-256], r10

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN705@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 311  :     if (u_count & 0x4)

	test	dil, 4
	je	$LN757@Multiply_W

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$112[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
	mov	QWORD PTR t_hi$113[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$114[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+16]
	mov	QWORD PTR t_hi$115[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$116[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+24]

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 4

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$117[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 317  :         up += 4;

	add	r11, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$118[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 318  :         wp += 4;

	add	r9, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$119[rbp-256], r10

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN757@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 327  :     if (u_count & 0x2)

	test	dil, 2
	je	SHORT $LN785@Multiply_W

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$120[rbp-256], rcx

; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 2

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$121[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 331  :         up += 2;

	add	r11, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$122[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 332  :         wp += 2;

	add	r9, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$123[rbp-256], r10

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN785@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 341  :     if (u_count & 0x1)

	test	dil, 1
	je	SHORT $LN801@Multiply_W

; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	rcx, r8, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	r8, QWORD PTR [r9]
	adcx	rcx, r14
	add	r8, r10
	mov	r10, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_hi$125[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 345  :         wp += 1;

	add	r9, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$124[rbp-256], r8

; 987  :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info
$LN801@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 354  :     if (k != 0)

	xor	eax, eax
	test	r10, r10
	je	SHORT $LN21@Multiply_W

; 355  :         *wp = k;

	mov	QWORD PTR [r9], r10
$LN21@Multiply_W:

; 356  : 
; 357  :     return (PMC_STATUS_OK);
; 358  : }

	lea	r11, QWORD PTR [rsp+1008]
	mov	rbx, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r14
	pop	rdi
	pop	rbp
	ret	0
Multiply_WORD_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Multiply_WORD_using_MUL_ADC
_TEXT	SEGMENT
t_hi$1 = 0
t_lo$2 = 8
t_hi$3 = 16
t_lo$4 = 24
t_hi$5 = 32
t_lo$6 = 40
t_hi$7 = 48
t_lo$8 = 56
t_hi$9 = 64
t_lo$10 = 72
t_hi$11 = 80
t_lo$12 = 88
t_hi$13 = 96
t_lo$14 = 104
t_hi$15 = 112
t_lo$16 = 120
t_hi$17 = 128
t_lo$18 = 136
t_hi$19 = 144
t_lo$20 = 152
t_hi$21 = 160
t_lo$22 = 168
t_hi$23 = 176
t_lo$24 = 184
t_hi$25 = 192
t_lo$26 = 200
t_hi$27 = 208
t_lo$28 = 216
t_hi$29 = 224
t_lo$30 = 232
t_hi$31 = 240
t_lo$32 = 248
t_hi$33 = 256
t_lo$34 = 264
t_hi$35 = 272
t_lo$36 = 280
t_hi$37 = 288
t_lo$38 = 296
t_hi$39 = 304
t_lo$40 = 312
t_hi$41 = 320
t_lo$42 = 328
t_hi$43 = 336
t_lo$44 = 344
t_hi$45 = 352
t_lo$46 = 360
t_hi$47 = 368
t_lo$48 = 376
t_hi$49 = 384
t_lo$50 = 392
t_hi$51 = 400
t_lo$52 = 408
t_hi$53 = 416
t_lo$54 = 424
t_hi$55 = 432
t_lo$56 = 440
t_hi$57 = 448
t_lo$58 = 456
t_hi$59 = 464
t_lo$60 = 472
t_hi$61 = 480
t_lo$62 = 488
t_hi$63 = 496
t_lo$64 = 504
t_hi$65 = 512
t_lo$66 = 520
t_hi$67 = 528
t_lo$68 = 536
t_hi$69 = 544
t_lo$70 = 552
t_hi$71 = 560
t_lo$72 = 568
t_hi$73 = 576
t_lo$74 = 584
t_hi$75 = 592
t_lo$76 = 600
t_hi$77 = 608
t_lo$78 = 616
t_hi$79 = 624
t_lo$80 = 632
t_hi$81 = 640
t_lo$82 = 648
t_hi$83 = 656
t_lo$84 = 664
t_hi$85 = 672
t_lo$86 = 680
t_hi$87 = 688
t_lo$88 = 696
t_hi$89 = 704
t_lo$90 = 712
t_hi$91 = 720
t_lo$92 = 728
t_hi$93 = 736
t_lo$94 = 744
t_hi$95 = 752
t_lo$96 = 760
t_hi$97 = 768
t_lo$98 = 776
t_hi$99 = 784
t_lo$100 = 792
t_hi$101 = 800
t_lo$102 = 808
t_hi$103 = 816
t_lo$104 = 824
t_hi$105 = 832
t_lo$106 = 840
t_hi$107 = 848
t_lo$108 = 856
t_hi$109 = 864
t_lo$110 = 872
t_hi$111 = 880
t_lo$112 = 888
t_hi$113 = 896
t_lo$114 = 904
t_hi$115 = 912
t_lo$116 = 920
t_hi$117 = 928
t_lo$118 = 936
t_hi$119 = 944
t_lo$120 = 952
t_hi$121 = 960
t_lo$122 = 968
t_hi$123 = 976
t_lo$124 = 984
t_hi$125 = 992
up$ = 1024
t_lo$126 = 1032
u_count$ = 1032
v$ = 1040
wp$ = 1048
Multiply_WORD_using_MUL_ADC PROC			; COMDAT

; 67   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	lea	rbp, QWORD PTR [rsp-752]
	sub	rsp, 1008				; 000003f0H

; 68   :     __UNIT_TYPE k = 0;
; 69   :     __UNIT_TYPE count = u_count >> 5;

	mov	rsi, rdx
	xor	r10d, r10d
	shr	rsi, 5
	mov	rbx, r8
	mov	rdi, rdx
	mov	r11, rcx

; 71   :     while (count != 0)

	test	rsi, rsi
	je	$LN3@Multiply_W
	npad	5
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$126[rbp-256], rax
	mov	QWORD PTR t_hi$1[rsp], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+8]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$2[rsp], rax
	mov	QWORD PTR t_hi$3[rsp], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+16]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+16]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$4[rsp], rax
	mov	QWORD PTR t_hi$5[rsp], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+24]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+24]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$6[rsp], rax
	mov	QWORD PTR t_hi$7[rsp], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+32]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+32]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$8[rsp], rax
	mov	QWORD PTR t_hi$9[rsp], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+40]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+40]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$10[rsp], rax
	mov	QWORD PTR t_hi$11[rsp], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+48]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+48]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$12[rsp], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$13[rsp], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+56]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+56]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$14[rsp], rax
	adc	r8, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$15[rsp], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+64]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+64]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+64], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$16[rsp], rax
	mov	QWORD PTR t_hi$17[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+72]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+72]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+72], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$18[rbp-256], rax
	mov	QWORD PTR t_hi$19[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+80]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+80]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+80], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$20[rbp-256], rax
	mov	QWORD PTR t_hi$21[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+88]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+88]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+88], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$22[rbp-256], rax
	mov	QWORD PTR t_hi$23[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+96]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+96]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+96], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$24[rbp-256], rax
	mov	QWORD PTR t_hi$25[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+104]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+104]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+104], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$26[rbp-256], rax
	mov	QWORD PTR t_hi$27[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+112]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+112]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+112], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$28[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$29[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+120]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+120]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$30[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+120], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$31[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+128]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+128]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+128], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$32[rbp-256], rax
	mov	QWORD PTR t_hi$33[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+136]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+136]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+136], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$34[rbp-256], rax
	mov	QWORD PTR t_hi$35[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+144]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+144]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+144], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$36[rbp-256], rax
	mov	QWORD PTR t_hi$37[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+152]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+152]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+152], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$38[rbp-256], rax
	mov	QWORD PTR t_hi$39[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+160]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+160]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+160], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$40[rbp-256], rax
	mov	QWORD PTR t_hi$41[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+168]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+168]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+168], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$42[rbp-256], rax
	mov	QWORD PTR t_hi$43[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+176]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+176]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+176], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$44[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$45[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+184]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+184]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$46[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+184], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$47[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+192]
	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+192]
	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+192], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$48[rbp-256], rax
	mov	QWORD PTR t_hi$49[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+200]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+200]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+200], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$50[rbp-256], rax
	mov	QWORD PTR t_hi$51[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+208]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+208]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+208], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$52[rbp-256], rax
	mov	QWORD PTR t_hi$53[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+216]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+216]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+216], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$54[rbp-256], rax
	mov	QWORD PTR t_hi$55[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+224]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+224]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+224], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$56[rbp-256], rax
	mov	QWORD PTR t_hi$57[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+232]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+232]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+232], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$58[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$59[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+240]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+240]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+240], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$60[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$61[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+248]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+248]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+248], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$62[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 105  :         up += 32;

	add	r11, 256				; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$63[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 106  :         wp += 32;

	add	r9, 256					; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 32					; 00000020H
	lock xadd DWORD PTR statistics_info, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 71   :     while (count != 0)

	sub	rsi, 1
	jne	$LL2@Multiply_W
$LN3@Multiply_W:

; 107  :         --count;
; 108  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 109  :         if (sizeof(k) == sizeof(_UINT32_T))
; 110  :             AddToMULTI32Counter(32);
; 111  :         else
; 112  :             AddToMULTI64Counter(32);
; 113  : #endif
; 114  :     }
; 115  : 
; 116  :     if (u_count & 0x10)

	test	dil, 16
	je	$LN605@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$64[rbp-256], rax
	mov	QWORD PTR t_hi$65[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+8]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$66[rbp-256], rax
	mov	QWORD PTR t_hi$67[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+16]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+16]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$68[rbp-256], rax
	mov	QWORD PTR t_hi$69[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+24]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+24]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$70[rbp-256], rax
	mov	QWORD PTR t_hi$71[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+32]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+32]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$72[rbp-256], rax
	mov	QWORD PTR t_hi$73[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+40]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+40]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$74[rbp-256], rax
	mov	QWORD PTR t_hi$75[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+48]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+48]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$76[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$77[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+56]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+56]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$78[rbp-256], rax
	adc	r8, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$79[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+64]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+64]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+64], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$80[rbp-256], rax
	mov	QWORD PTR t_hi$81[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+72]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+72]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+72], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$82[rbp-256], rax
	mov	QWORD PTR t_hi$83[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+80]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+80]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+80], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$84[rbp-256], rax
	mov	QWORD PTR t_hi$85[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+88]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+88]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+88], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$86[rbp-256], rax
	mov	QWORD PTR t_hi$87[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+96]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+96]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+96], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$88[rbp-256], rax
	mov	QWORD PTR t_hi$89[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+104]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+104]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+104], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$90[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$91[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+112]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+112]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+112], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$92[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$93[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+120]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+120]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+120], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$94[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 134  :         up += 16;

	sub	r11, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$95[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 135  :         wp += 16;

	sub	r9, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 16
	lock xadd DWORD PTR statistics_info, eax
$LN605@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 144  :     if (u_count & 0x8)

	test	dil, 8
	je	$LN705@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$96[rbp-256], rax
	mov	QWORD PTR t_hi$97[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+8]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$98[rbp-256], rax
	mov	QWORD PTR t_hi$99[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+16]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+16]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$100[rbp-256], rax
	mov	QWORD PTR t_hi$101[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+24]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+24]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$102[rbp-256], rax
	mov	QWORD PTR t_hi$103[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+32]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+32]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$104[rbp-256], rax
	mov	QWORD PTR t_hi$105[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+40]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+40]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$106[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$107[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+48]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+48]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$108[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$109[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+56]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+56]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$110[rbp-256], rax
	adc	r10, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$111[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 154  :         up += 8;

	add	r11, 64					; 00000040H

; 155  :         wp += 8;

	add	r9, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 8
	lock xadd DWORD PTR statistics_info, eax
$LN705@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 164  :     if (u_count & 0x4)

	test	dil, 4
	je	$LN757@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$112[rbp-256], rax
	mov	QWORD PTR t_hi$113[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+8]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$114[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$115[rbp-256], r8

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+16]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+16]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$116[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$117[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+24]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+24]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$118[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 170  :         up += 4;

	add	r11, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$119[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 171  :         wp += 4;

	add	r9, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 4
	lock xadd DWORD PTR statistics_info, eax
$LN757@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 180  :     if (u_count & 0x2)

	test	dil, 2
	je	SHORT $LN785@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 539  :     return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$120[rbp-256], rax

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$121[rbp-256], rcx

; 539  :     return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+8]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 539  :     return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$122[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 184  :         up += 2;

	add	r11, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$123[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 185  :         wp += 2;

	add	r9, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info, eax
$LN785@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 194  :     if (u_count & 0x1)

	test	dil, 1
	je	SHORT $LN801@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]
	adc	rdx, 0
	add	rax, r10
	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$124[rbp-256], rax
	mov	QWORD PTR t_hi$125[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 198  :         wp += 1;

	add	r9, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 987  :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info
$LN801@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 207  :     if (k != 0)

	xor	eax, eax
	test	r10, r10
	je	SHORT $LN21@Multiply_W

; 208  :         *wp = k;

	mov	QWORD PTR [r9], r10
$LN21@Multiply_W:

; 209  : 
; 210  :     return (PMC_STATUS_OK);
; 211  : }

	lea	r11, QWORD PTR [rsp+1008]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rbp
	ret	0
Multiply_WORD_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _MULTIPLYX_DIGIT_UNIT
_TEXT	SEGMENT
k$ = 8
up$ = 16
v$ = 24
wp$ = 32
_MULTIPLYX_DIGIT_UNIT PROC				; COMDAT

; 56   :     __UNIT_TYPE t_hi;
; 57   :     __UNIT_TYPE t_lo;
; 58   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 570  :     return (_mulx_u64(u, v, w_hi));

	mov	rdx, r8
	mulx	rax, r8, rax

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	r8, QWORD PTR [r9]
	mov	edx, 0
	adcx	rax, rdx
	add	r8, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	QWORD PTR [r9], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 475  :     return (_addcarryx_u64(carry, u, v, w));

	adcx	rax, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 64   : }

	ret	0
_MULTIPLYX_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _MULTIPLY_DIGIT_UNIT
_TEXT	SEGMENT
k$ = 8
up$ = 16
v$ = 24
wp$ = 32
_MULTIPLY_DIGIT_UNIT PROC				; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, r8
	mul	QWORD PTR [rdx]

; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]
	adc	rdx, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 447  :     return (_addcarry_u64(carry, u, v, w));

	adc	rdx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 51   :     return (k);

	mov	rax, rdx

; 52   : }

	ret	0
_MULTIPLY_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT AddToMULTI64Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI64Counter PROC				; COMDAT

; 1010 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, ecx

; 1011 : }

	ret	0
AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT AddToMULTI32Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI32Counter PROC				; COMDAT

; 1004 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx

; 1005 : }

	ret	0
AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT IncrementMULTI64Counter
_TEXT	SEGMENT
IncrementMULTI64Counter PROC				; COMDAT

; 987  :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info

; 988  : }

	ret	0
IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT IncrementMULTI32Counter
_TEXT	SEGMENT
IncrementMULTI32Counter PROC				; COMDAT

; 981  :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4

; 982  : }

	ret	0
IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 860  :     if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 861  :         return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 885  : }

	ret	0
$LN2@LZCNT_ALT_:

; 862  : #ifdef _M_IX86
; 863  :     _UINT32_T pos;
; 864  : #ifdef _MSC_VER
; 865  :     _BitScanReverse(&pos, x);
; 866  : #elif defined(__GNUC__)
; 867  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 868  : #else
; 869  : #error unknown compiler
; 870  : #endif
; 871  : #elif defined(_M_X64)
; 872  : #ifdef _MSC_VER
; 873  :     _UINT32_T pos;
; 874  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 875  : #elif defined(__GNUC__)
; 876  :     _UINT64_T pos;
; 877  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 878  : #else
; 879  : #error unknown compiler
; 880  : #endif
; 881  : #else
; 882  : #error unknown platform
; 883  : #endif
; 884  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	rax, rcx

; 885  : }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 827  :     if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 828  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 838  : }

	ret	0
$LN2@LZCNT_ALT_:

; 829  :     _UINT32_T pos;
; 830  : #ifdef _MSC_VER
; 831  :     _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 832  : #elif defined(__GNUC__)
; 833  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 834  : #else
; 835  : #error unknown compiler
; 836  : #endif
; 837  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 838  : }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLYX_UNIT PROC					; COMDAT

; 566  : #ifdef _MSC_VER
; 567  : #ifdef _M_IX86
; 568  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 569  : #elif defined(_M_X64)
; 570  :     return (_mulx_u64(u, v, w_hi));

	mulx	rcx, rax, rcx
	mov	QWORD PTR [r8], rcx

; 571  : #else
; 572  : #error unknown platform
; 573  : #endif
; 574  : #elif defined(__GNUC__)
; 575  : #ifdef _M_IX86
; 576  :     _UINT32_T w_lo;
; 577  :     __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 578  :     return (w_lo);
; 579  : #elif defined(_M_X64)
; 580  :     _UINT64_T w_lo;
; 581  :     __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 582  :     return (w_lo);
; 583  : #else
; 584  : #error unknown platform
; 585  : #endif
; 586  : #else
; 587  : #error unknown compiler
; 588  : #endif
; 589  : }

	ret	0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLY_UNIT PROC					; COMDAT

; 528  : #ifdef _M_IX86
; 529  : #ifdef _MSC_VER
; 530  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 531  : #elif defined(__GNUC__)
; 532  :     _UINT32_T w_lo;
; 533  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 534  :     return (w_lo);
; 535  : #else
; 536  : #error unknown compiler
; 537  : #endif
; 538  : #elif defined(_M_X64)
; 539  :     return (_umul128(u, v, w_hi));

	mov	rax, rdx
	mul	rcx
	mov	QWORD PTR [r8], rdx

; 540  : #else
; 541  : #error unknown platform
; 542  : #endif
; 543  : }

	ret	0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADDX_UNIT PROC						; COMDAT

; 472  : #ifdef _M_IX86
; 473  :     return (_addcarryx_u32(carry, u, v, w));
; 474  : #elif defined(_M_X64)
; 475  :     return (_addcarryx_u64(carry, u, v, w));

	add	cl, -1
	adcx	rdx, r8
	mov	QWORD PTR [r9], rdx
	setb	al

; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  : }

	ret	0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADD_UNIT PROC						; COMDAT

; 444  : #ifdef _M_IX86
; 445  :     return (_addcarry_u32(carry, u, v, w));
; 446  : #elif defined(_M_X64)
; 447  :     return (_addcarry_u64(carry, u, v, w));

	add	cl, -1
	adc	rdx, r8
	mov	QWORD PTR [r9], rdx
	setb	al

; 448  : #else
; 449  : #error unknown platform
; 450  : #endif
; 451  : }

	ret	0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 413  :     *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 414  :     return ((_UINT32_T)value);

	mov	eax, ecx

; 415  : }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_X_X
_TEXT	SEGMENT
nz$ = 48
x$ = 48
y$ = 56
o$ = 64
nz_light_check_code$1 = 72
PMC_Multiply_X_X PROC					; COMDAT

; 686  : {

$LN30:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 687  :     if (x == NULL)

	test	rcx, rcx
	je	$LN25@PMC_Multip

; 688  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 689  :     if (y == NULL)

	test	rdx, rdx
	je	$LN25@PMC_Multip

; 690  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 691  :     if (o == NULL)

	test	rbx, rbx
	je	$LN25@PMC_Multip

; 693  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 694  :     NUMBER_HEADER* ny = (NUMBER_HEADER*)y;
; 695  :     PMC_STATUS_CODE result;
; 696  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 697  :         return (result);
; 698  :     if ((result = CheckNumber(ny)) != PMC_STATUS_OK)

	mov	rcx, rdi
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 699  :         return (result);
; 700  :     NUMBER_HEADER* nz;
; 701  :     if (nx->IS_ZERO)

	mov	ecx, DWORD PTR [rsi+32]
	test	cl, 2
	jne	SHORT $LN28@PMC_Multip

; 702  :     {
; 703  :         // x が 0 である場合
; 704  : 
; 705  :         // y の値にかかわらず 0 を返す。
; 706  :         *o = &number_zero;
; 707  :     }
; 708  :     else if (nx->IS_ONE)

	mov	edx, DWORD PTR [rdi+32]
	mov	eax, edx
	and	eax, 2
	test	cl, 4
	je	SHORT $LN9@PMC_Multip

; 709  :     {
; 710  :         // x が 1 である場合
; 711  :         if (ny->IS_ZERO)

	test	eax, eax
	jne	SHORT $LN28@PMC_Multip

; 712  :         {
; 713  :             // y が 0 である場合
; 714  : 
; 715  :             //  0  を返す。
; 716  :             *o = &number_zero;
; 717  :         }
; 718  :         else
; 719  :         {
; 720  :             // y が 0 ではない場合
; 721  : 
; 722  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 723  :             if ((result = DuplicateNumber(ny, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rsp]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 766  :         }
; 767  :         *o = nz;
; 768  :     }
; 769  : #ifdef _DEBUG
; 770  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 771  :         return (result);
; 772  : #endif
; 773  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rbx], rax
	xor	eax, eax

; 774  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN9@PMC_Multip:

; 724  :                 return (result);
; 725  :             *o = nz;
; 726  :         }
; 727  :     }
; 728  :     else
; 729  :     {
; 730  :         // x が 0 と 1 のどちらでもない場合
; 731  : 
; 732  :         if (ny->IS_ZERO)

	test	eax, eax
	je	SHORT $LN14@PMC_Multip
$LN28@PMC_Multip:

; 766  :         }
; 767  :         *o = nz;
; 768  :     }
; 769  : #ifdef _DEBUG
; 770  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 771  :         return (result);
; 772  : #endif
; 773  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [rbx], rax
	xor	eax, eax

; 774  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN14@PMC_Multip:

; 733  :         {
; 734  :             // y が 0 である場合
; 735  : 
; 736  :             //  0  を返す。
; 737  :             nz = &number_zero;
; 738  :         }
; 739  :         else if (ny->IS_ONE)

	test	dl, 4
	je	SHORT $LN16@PMC_Multip

; 740  :         {
; 741  :             // y が 1 である場合
; 742  : 
; 743  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 744  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rsp]
	mov	rcx, rsi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 766  :         }
; 767  :         *o = nz;
; 768  :     }
; 769  : #ifdef _DEBUG
; 770  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 771  :         return (result);
; 772  : #endif
; 773  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rbx], rax
	xor	eax, eax

; 774  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN16@PMC_Multip:

; 745  :                 return (result);
; 746  :         }
; 747  :         else
; 748  :         {
; 749  :             // x と y がともに 0 、1 のどちらでもない場合
; 750  : 
; 751  :             // x と y の積を計算する
; 752  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;
; 753  :             __UNIT_TYPE y_bit_count = ny->UNIT_BIT_COUNT;
; 754  :             __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	rdx, QWORD PTR [rsi+8]

; 755  :             __UNIT_TYPE nz_light_check_code;
; 756  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$1[rsp]
	add	rdx, QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR nz$[rsp]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 453  :     return ((*fp_Multiply_X_X)(x, y, z));

	mov	r8, QWORD PTR nz$[rsp]
	mov	rdx, rdi
	mov	rcx, rsi
	call	QWORD PTR fp_Multiply_X_X

; 757  :                 return (result);
; 758  :             if ((result = Multiply_X_X(nx, ny, nz)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nz$[rsp]

; 453  :     return ((*fp_Multiply_X_X)(x, y, z));

	mov	edi, eax

; 757  :                 return (result);
; 758  :             if ((result = Multiply_X_X(nx, ny, nz)) != PMC_STATUS_OK)

	test	eax, eax
	je	SHORT $LN20@PMC_Multip

; 759  :             {
; 760  :                 DeallocateNumber(nz);

	call	DeallocateNumber

; 761  :                 return (result);

	mov	eax, edi

; 774  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN20@PMC_Multip:

; 762  :             }
; 763  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nz_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 764  :                 return (result);
; 765  :             CommitNumber(nz);

	mov	rcx, QWORD PTR nz$[rsp]
	call	CommitNumber

; 766  :         }
; 767  :         *o = nz;
; 768  :     }
; 769  : #ifdef _DEBUG
; 770  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 771  :         return (result);
; 772  : #endif
; 773  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rbx], rax
	xor	eax, eax

; 774  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN25@PMC_Multip:

; 692  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Multip:

; 774  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_X_L
_TEXT	SEGMENT
nz$ = 48
x$ = 48
y$ = 56
o$ = 64
nz_light_check_code$1 = 72
PMC_Multiply_X_L PROC					; COMDAT

; 548  : {

$LN54:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	rsi, rcx

; 549  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(y) * 8)
; 550  :     {
; 551  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 552  :         return (PMC_STATUS_INTERNAL_ERROR);
; 553  :     }
; 554  :     if (x == NULL)

	test	rcx, rcx
	je	$LN49@PMC_Multip

; 555  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 556  :     if (o == NULL)

	test	r8, r8
	je	$LN49@PMC_Multip

; 558  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 559  :     PMC_STATUS_CODE result;
; 560  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 561  :         return (result);
; 562  :     NUMBER_HEADER* nz;
; 563  :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR [rsi+32]
	test	al, 2
	jne	SHORT $LN52@PMC_Multip

; 564  :     {
; 565  :         // x が 0 である場合
; 566  : 
; 567  :         // y の値にかかわらず 0 を返す。
; 568  :         *o = &number_zero;
; 569  :     }
; 570  :     else if (nx->IS_ONE)

	test	al, 4
	je	SHORT $LN8@PMC_Multip

; 571  :     {
; 572  :         // x が 1 である場合
; 573  :         if (y == 0)

	test	rbx, rbx
	je	SHORT $LN52@PMC_Multip

; 574  :         {
; 575  :             // y が 0 である場合
; 576  : 
; 577  :             //  0  を返す。
; 578  :             *o = &number_zero;
; 579  :         }
; 580  :         else
; 581  :         {
; 582  :             // y が 0 ではない場合
; 583  : 
; 584  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 585  :             if ((result = From_L_Imp(y, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rsp]
	mov	rcx, rbx
	call	From_L_Imp
	test	eax, eax
	jne	$LN1@PMC_Multip

; 673  :             }
; 674  : 
; 675  :         }
; 676  :         *o = nz;
; 677  :     }
; 678  : #ifdef _DEBUG
; 679  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 680  :         return (result);
; 681  : #endif
; 682  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 683  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@PMC_Multip:

; 586  :                 return (result);
; 587  :             *o = nz;
; 588  :         }
; 589  :     }
; 590  :     else
; 591  :     {
; 592  :         // x が 0 と 1 のどちらでもない場合
; 593  : 
; 594  :         if (y == 0)

	test	rbx, rbx
	jne	SHORT $LN13@PMC_Multip
$LN52@PMC_Multip:

; 673  :             }
; 674  : 
; 675  :         }
; 676  :         *o = nz;
; 677  :     }
; 678  : #ifdef _DEBUG
; 679  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 680  :         return (result);
; 681  : #endif
; 682  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 683  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN13@PMC_Multip:

; 595  :         {
; 596  :             // y が 0 である場合
; 597  : 
; 598  :             //  0  を返す。
; 599  :             nz = &number_zero;
; 600  :         }
; 601  :         else if (y == 1)

	cmp	rbx, 1
	jne	SHORT $LN15@PMC_Multip

; 602  :         {
; 603  :             // y が 1 である場合
; 604  : 
; 605  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 606  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rsp]
	mov	rcx, rsi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 673  :             }
; 674  : 
; 675  :         }
; 676  :         *o = nz;
; 677  :     }
; 678  : #ifdef _DEBUG
; 679  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 680  :         return (result);
; 681  : #endif
; 682  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 683  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN15@PMC_Multip:

; 607  :                 return (result);
; 608  :         }
; 609  :         else
; 610  :         {
; 611  :             // x と y がともに 0 、1 のどちらでもない場合
; 612  : 
; 613  :             // x と y の積を計算する
; 614  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(y) * 8)
; 615  :             {
; 616  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 617  : 
; 618  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;
; 619  :                 _UINT32_T y_hi;
; 620  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(y, &y_hi);
; 621  :                 if (y_hi == 0)
; 622  :                 {
; 623  :                     // y の値が 32bit で表現可能な場合
; 624  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);
; 625  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 626  :                     __UNIT_TYPE nz_light_check_code;
; 627  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 628  :                         return (result);
; 629  :                     if ((result = Multiply_X_1W(nx, y_lo, nz)) != PMC_STATUS_OK)
; 630  :                     {
; 631  :                         DeallocateNumber(nz);
; 632  :                         return (result);
; 633  :                     }
; 634  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 635  :                         return (result);
; 636  :                 }
; 637  :                 else
; 638  :                 {
; 639  :                     // y の値が 32bit では表現できない場合
; 640  :                     __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_32(y_hi);
; 641  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 642  :                     __UNIT_TYPE nz_light_check_code;
; 643  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 644  :                         return (result);
; 645  :                     if ((result = Multiply_X_2W(nx, y_hi, y_lo, nz)) != PMC_STATUS_OK)
; 646  :                     {
; 647  :                         DeallocateNumber(nz);
; 648  :                         return (result);
; 649  :                     }
; 650  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 651  :                         return (result);
; 652  :                 }
; 653  :                 CommitNumber(nz);
; 654  :             }
; 655  :             else
; 656  :             {
; 657  :                 // _UINT64_T が 1 ワードで表現できる場合
; 658  : 
; 659  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	rdx, QWORD PTR [rsi+8]

; 663  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$1[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 874  :     _BitScanReverse64(&pos, x);

	bsr	rcx, rbx

; 875  : #elif defined(__GNUC__)
; 876  :     _UINT64_T pos;
; 877  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 878  : #else
; 879  : #error unknown compiler
; 880  : #endif
; 881  : #else
; 882  : #error unknown platform
; 883  : #endif
; 884  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 663  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR nz$[rsp]
	sub	rdx, rax
	add	rdx, 64					; 00000040H
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	mov	r8, QWORD PTR nz$[rsp]
	mov	rdx, rbx
	mov	rcx, rsi
	call	QWORD PTR fp_Multiply_X_1W

; 664  :                     return (result);
; 665  :                 if ((result = Multiply_X_1W(nx, (__UNIT_TYPE)y, nz)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nz$[rsp]

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	mov	ebx, eax

; 664  :                     return (result);
; 665  :                 if ((result = Multiply_X_1W(nx, (__UNIT_TYPE)y, nz)) != PMC_STATUS_OK)

	test	eax, eax
	je	SHORT $LN29@PMC_Multip

; 666  :                 {
; 667  :                     DeallocateNumber(nz);

	call	DeallocateNumber

; 668  :                     return (result);

	mov	eax, ebx

; 683  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN29@PMC_Multip:

; 669  :                 }
; 670  :                 if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nz_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 671  :                     return (result);
; 672  :                 CommitNumber(nz);

	mov	rcx, QWORD PTR nz$[rsp]
	call	CommitNumber

; 673  :             }
; 674  : 
; 675  :         }
; 676  :         *o = nz;
; 677  :     }
; 678  : #ifdef _DEBUG
; 679  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 680  :         return (result);
; 681  : #endif
; 682  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 683  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN49@PMC_Multip:

; 557  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Multip:

; 683  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT PMC_Multiply_X_I
_TEXT	SEGMENT
nz$ = 48
x$ = 48
y$ = 56
o$ = 64
nz_light_check_code$1 = 72
PMC_Multiply_X_I PROC					; COMDAT

; 457  : {

$LN32:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, edx
	mov	rdi, r8
	mov	rsi, rcx

; 458  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(y) * 8)
; 459  :     {
; 460  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 461  :         return (PMC_STATUS_INTERNAL_ERROR);
; 462  :     }
; 463  :     if (x == NULL)

	test	rcx, rcx
	je	$LN27@PMC_Multip

; 464  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 465  :     if (o == NULL)

	test	r8, r8
	je	$LN27@PMC_Multip

; 467  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 468  :     PMC_STATUS_CODE result;
; 469  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 470  :         return (result);
; 471  :     NUMBER_HEADER* nz;
; 472  :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR [rsi+32]
	test	al, 2
	jne	SHORT $LN30@PMC_Multip

; 473  :     {
; 474  :         // x が 0 である場合
; 475  : 
; 476  :         // y の値にかかわらず 0 を返す。
; 477  :         *o = &number_zero;
; 478  :     }
; 479  :     else if (nx->IS_ONE)

	test	al, 4
	je	SHORT $LN8@PMC_Multip

; 480  :     {
; 481  :         // x が 1 である場合
; 482  :         if (y == 0)

	test	ebx, ebx
	je	SHORT $LN30@PMC_Multip

; 483  :         {
; 484  :             // y が 0 である場合
; 485  : 
; 486  :             //  0  を返す。
; 487  :             *o = &number_zero;
; 488  :         }
; 489  :         else
; 490  :         {
; 491  :             // y が 0 ではない場合
; 492  : 
; 493  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 494  :             if ((result = From_I_Imp(y, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rsp]
	mov	ecx, ebx
	call	From_I_Imp
	test	eax, eax
	jne	$LN1@PMC_Multip

; 537  :         }
; 538  :         *o = nz;
; 539  :     }
; 540  : #ifdef _DEBUG
; 541  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 542  :         return (result);
; 543  : #endif
; 544  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 545  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@PMC_Multip:

; 495  :                 return (result);
; 496  :             *o = nz;
; 497  :         }
; 498  :     }
; 499  :     else
; 500  :     {
; 501  :         // x が 0 と 1 のどちらでもない場合
; 502  : 
; 503  :         if (y == 0)

	test	ebx, ebx
	jne	SHORT $LN13@PMC_Multip
$LN30@PMC_Multip:

; 537  :         }
; 538  :         *o = nz;
; 539  :     }
; 540  : #ifdef _DEBUG
; 541  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 542  :         return (result);
; 543  : #endif
; 544  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 545  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN13@PMC_Multip:

; 504  :         {
; 505  :             // y が 0 である場合
; 506  : 
; 507  :             //  0  を返す。
; 508  :             nz = &number_zero;
; 509  :         }
; 510  :         else if (y == 1)

	cmp	ebx, 1
	jne	SHORT $LN15@PMC_Multip

; 511  :         {
; 512  :             // y が 1 である場合
; 513  : 
; 514  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 515  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nz$[rsp]
	mov	rcx, rsi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 537  :         }
; 538  :         *o = nz;
; 539  :     }
; 540  : #ifdef _DEBUG
; 541  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 542  :         return (result);
; 543  : #endif
; 544  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 545  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN15@PMC_Multip:

; 516  :                 return (result);
; 517  :         }
; 518  :         else
; 519  :         {
; 520  :             // x と y がともに 0 、1 のどちらでもない場合
; 521  : 
; 522  :             // x と y の積を計算する
; 523  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	rdx, QWORD PTR [rsi+8]

; 525  :             __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 526  :             __UNIT_TYPE nz_light_check_code;
; 527  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$1[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 831  :     _BitScanReverse(&pos, x);

	bsr	eax, ebx

; 832  : #elif defined(__GNUC__)
; 833  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 834  : #else
; 835  : #error unknown compiler
; 836  : #endif
; 837  :     return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 524  :             __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_32(y);

	mov	eax, ecx

; 525  :             __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 526  :             __UNIT_TYPE nz_light_check_code;
; 527  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR nz$[rsp]
	sub	rdx, rax
	add	rdx, 32					; 00000020H
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	mov	r8, QWORD PTR nz$[rsp]

; 528  :                 return (result);
; 529  :             if ((result = Multiply_X_1W(nx, y, nz)) != PMC_STATUS_OK)

	mov	rdx, rbx

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	mov	rcx, rsi
	call	QWORD PTR fp_Multiply_X_1W

; 528  :                 return (result);
; 529  :             if ((result = Multiply_X_1W(nx, y, nz)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nz$[rsp]

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	mov	ebx, eax

; 528  :                 return (result);
; 529  :             if ((result = Multiply_X_1W(nx, y, nz)) != PMC_STATUS_OK)

	test	eax, eax
	je	SHORT $LN19@PMC_Multip

; 530  :             {
; 531  :                 DeallocateNumber(nz);

	call	DeallocateNumber

; 532  :                 return (result);

	mov	eax, ebx

; 545  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN19@PMC_Multip:

; 533  :             }
; 534  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nz_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 535  :                 return (result);
; 536  :             CommitNumber(nz);

	mov	rcx, QWORD PTR nz$[rsp]
	call	CommitNumber

; 537  :         }
; 538  :         *o = nz;
; 539  :     }
; 540  : #ifdef _DEBUG
; 541  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 542  :         return (result);
; 543  : #endif
; 544  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nz$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 545  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN27@PMC_Multip:

; 466  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Multip:

; 545  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT Initialize_Multiply
_TEXT	SEGMENT
feature$ = 8
Initialize_Multiply PROC				; COMDAT

; 777  : {

	mov	edx, DWORD PTR [rcx]

; 778  :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 779  :     {
; 780  :         fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;
; 781  :         fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;
; 782  :         fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;
; 783  :     }
; 784  :     else
; 785  :     {
; 786  :         fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;
; 787  :         fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;
; 788  :         fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;
; 789  :     }
; 790  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:Multiply_X_1W_using_MULX_ADCX
	lea	rcx, OFFSET FLAT:Multiply_X_1W_using_MUL_ADC
	and	edx, 10
	cmp	edx, 10
	cmovne	rax, rcx
	lea	rcx, OFFSET FLAT:Multiply_X_2W_using_MUL_ADC
	mov	QWORD PTR fp_Multiply_X_1W, rax
	lea	rax, OFFSET FLAT:Multiply_X_2W_using_MULX_ADCX
	cmovne	rax, rcx
	lea	rcx, OFFSET FLAT:Multiply_X_X_using_MUL_ADC
	mov	QWORD PTR fp_Multiply_X_2W, rax
	lea	rax, OFFSET FLAT:Multiply_X_X_using_MULX_ADCX
	cmovne	rax, rcx
	mov	QWORD PTR fp_Multiply_X_X, rax
	xor	eax, eax

; 791  : }

	ret	0
Initialize_Multiply ENDP
_TEXT	ENDS
END
