; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	RightShift_Imp_DIV
PUBLIC	RightShift_Imp
PUBLIC	LeftShift_Imp_DIV
PUBLIC	LeftShift_Imp
PUBLIC	Initialize_Shift
PUBLIC	PMC_RightShift_X_I
PUBLIC	PMC_RightShift_X_L
PUBLIC	PMC_LeftShift_X_I
PUBLIC	PMC_LeftShift_X_L
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$RightShift_Imp_DIV DD imagerel $LN109
	DD	imagerel $LN109+83
	DD	imagerel $unwind$RightShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$RightShift_Imp_DIV DD imagerel $LN109+83
	DD	imagerel $LN109+94
	DD	imagerel $chain$0$RightShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$RightShift_Imp_DIV DD imagerel $LN109+94
	DD	imagerel $LN109+831
	DD	imagerel $chain$1$RightShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$RightShift_Imp_DIV DD imagerel $LN109+831
	DD	imagerel $LN109+1518
	DD	imagerel $chain$2$RightShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$RightShift_Imp_DIV DD imagerel $LN109+1518
	DD	imagerel $LN109+1591
	DD	imagerel $chain$3$RightShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RightShift_Imp DD imagerel $LN115
	DD	imagerel $LN115+92
	DD	imagerel $unwind$RightShift_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$RightShift_Imp DD imagerel $LN115+92
	DD	imagerel $LN115+1092
	DD	imagerel $chain$0$RightShift_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$RightShift_Imp DD imagerel $LN115+1092
	DD	imagerel $LN115+2012
	DD	imagerel $chain$1$RightShift_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LeftShift_Imp_DIV DD imagerel $LN28
	DD	imagerel $LN28+67
	DD	imagerel $unwind$LeftShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$LeftShift_Imp_DIV DD imagerel $LN28+67
	DD	imagerel $LN28+831
	DD	imagerel $chain$0$LeftShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$LeftShift_Imp_DIV DD imagerel $LN28+831
	DD	imagerel $LN28+1579
	DD	imagerel $chain$1$LeftShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LeftShift_Imp DD imagerel $LN28
	DD	imagerel $LN28+67
	DD	imagerel $unwind$LeftShift_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$LeftShift_Imp DD imagerel $LN28+67
	DD	imagerel $LN28+1102
	DD	imagerel $chain$0$LeftShift_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$LeftShift_Imp DD imagerel $LN28+1102
	DD	imagerel $LN28+2010
	DD	imagerel $chain$1$LeftShift_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_RightShift_X_I DD imagerel $LN20
	DD	imagerel $LN20+282
	DD	imagerel $unwind$PMC_RightShift_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_RightShift_X_L DD imagerel $LN20
	DD	imagerel $LN20+284
	DD	imagerel $unwind$PMC_RightShift_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_LeftShift_X_I DD imagerel $LN18
	DD	imagerel $LN18+273
	DD	imagerel $unwind$PMC_LeftShift_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_LeftShift_X_L DD imagerel $LN18
	DD	imagerel $LN18+275
	DD	imagerel $unwind$PMC_LeftShift_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT_DIV DD imagerel _COPY_MEMORY_UNIT_DIV
	DD	imagerel _COPY_MEMORY_UNIT_DIV+32
	DD	imagerel $unwind$_COPY_MEMORY_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_UNIT DD imagerel _ZERO_MEMORY_UNIT
	DD	imagerel _ZERO_MEMORY_UNIT+22
	DD	imagerel $unwind$_ZERO_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_UNIT_DIV DD imagerel _ZERO_MEMORY_UNIT_DIV
	DD	imagerel _ZERO_MEMORY_UNIT_DIV+20
	DD	imagerel $unwind$_ZERO_MEMORY_UNIT_DIV
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_UNIT_DIV DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_UNIT DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT_DIV DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_LeftShift_X_L DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_LeftShift_X_I DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_RightShift_X_L DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_RightShift_X_I DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$LeftShift_Imp DD 021H
	DD	imagerel $LN28
	DD	imagerel $LN28+67
	DD	imagerel $unwind$LeftShift_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$LeftShift_Imp DD 020521H
	DD	025405H
	DD	imagerel $LN28
	DD	imagerel $LN28+67
	DD	imagerel $unwind$LeftShift_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LeftShift_Imp DD 071101H
	DD	057411H
	DD	046411H
	DD	033411H
	DD	0e011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$LeftShift_Imp_DIV DD 021H
	DD	imagerel $LN28
	DD	imagerel $LN28+67
	DD	imagerel $unwind$LeftShift_Imp_DIV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$LeftShift_Imp_DIV DD 020521H
	DD	025405H
	DD	imagerel $LN28
	DD	imagerel $LN28+67
	DD	imagerel $unwind$LeftShift_Imp_DIV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LeftShift_Imp_DIV DD 071101H
	DD	057411H
	DD	046411H
	DD	033411H
	DD	0e011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$RightShift_Imp DD 021H
	DD	imagerel $LN115
	DD	imagerel $LN115+92
	DD	imagerel $unwind$RightShift_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$RightShift_Imp DD 020521H
	DD	03f405H
	DD	imagerel $LN115
	DD	imagerel $LN115+92
	DD	imagerel $unwind$RightShift_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RightShift_Imp DD 081201H
	DD	066412H
	DD	055412H
	DD	043412H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$RightShift_Imp_DIV DD 021H
	DD	imagerel $LN109
	DD	imagerel $LN109+83
	DD	imagerel $unwind$RightShift_Imp_DIV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$RightShift_Imp_DIV DD 021H
	DD	imagerel $LN109+83
	DD	imagerel $LN109+94
	DD	imagerel $chain$0$RightShift_Imp_DIV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$RightShift_Imp_DIV DD 020521H
	DD	04f405H
	DD	imagerel $LN109+83
	DD	imagerel $LN109+94
	DD	imagerel $chain$0$RightShift_Imp_DIV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$RightShift_Imp_DIV DD 020521H
	DD	035405H
	DD	imagerel $LN109
	DD	imagerel $LN109+83
	DD	imagerel $unwind$RightShift_Imp_DIV
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RightShift_Imp_DIV DD 060d01H
	DD	06640dH
	DD	05340dH
	DD	0700be00dH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ZERO_MEMORY_UNIT_DIV
_TEXT	SEGMENT
d$ = 8
count$ = 16
_ZERO_MEMORY_UNIT_DIV PROC				; COMDAT

; 386  : {

	mov	QWORD PTR [rsp+8], rdi
	mov	rdi, rcx

; 387  : #ifdef _M_IX86
; 388  :     __stosd((unsigned long*)d, 0, (unsigned long)count);
; 389  : #elif defined(_M_X64)
; 390  : #ifdef _MSC_VER
; 391  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	xor	eax, eax
	mov	ecx, edx
	rep stosd

; 392  : #elif defined(__GNUC__)
; 393  :     __stosq(d, 0, count);
; 394  : #else
; 395  : #error unknown compiler
; 396  : #endif
; 397  : #else
; 398  : #error unknown platform
; 399  : #endif
; 400  : }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_ZERO_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _ZERO_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
count$ = 16
_ZERO_MEMORY_UNIT PROC					; COMDAT

; 375  : {

	mov	QWORD PTR [rsp+8], rdi

; 376  : #ifdef _M_IX86
; 377  :     __stosd((unsigned long*)d, 0, (unsigned long)count);
; 378  : #elif defined(_M_X64)
; 379  :     __stosq(d, 0, count);

	mov	rdi, rcx
	xor	eax, eax
	mov	rcx, rdx
	rep stosq

; 380  : #else
; 381  : #error unknown platform
; 382  : #endif
; 383  : }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 336  : {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi
	mov	rdi, rcx

; 337  : #ifdef _M_IX86
; 338  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 339  : #elif defined(_M_X64)
; 340  : #ifdef _MSC_VER
; 341  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	rsi, rdx
	mov	ecx, r8d
	rep movsd

; 342  : #elif defined(__GNUC__)
; 343  :     __movsq(d, s, count);
; 344  : #else
; 345  : #error unknown compiler
; 346  : #endif
; 347  : #else
; 348  : #error unknown platform
; 349  : #endif
; 350  : }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 325  : {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 326  : #ifdef _M_IX86
; 327  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 328  : #elif defined(_M_X64)
; 329  :     __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 330  : #else
; 331  : #error unknown platform
; 332  : #endif
; 333  : }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT PMC_LeftShift_X_L
_TEXT	SEGMENT
no$ = 64
p$ = 64
n$ = 72
o$ = 80
no_light_check_code$1 = 88
PMC_LeftShift_X_L PROC					; COMDAT

; 720  : {

$LN18:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 721  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)
; 722  :     {
; 723  :         // _UINT64_T が 1 ワードで表現しきれない処理系には対応しない
; 724  :         return (PMC_STATUS_NOT_SUPPORTED);
; 725  :     }
; 726  :     if (p == NULL)

	test	rcx, rcx
	je	$LN14@PMC_LeftSh

; 727  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 728  :     if (o == NULL)

	test	r8, r8
	je	$LN14@PMC_LeftSh

; 730  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 731  :     NUMBER_HEADER* no;
; 732  :     PMC_STATUS_CODE result;
; 733  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_LeftSh

; 734  :         return (result);
; 735  :     if (np->IS_ZERO)

	test	BYTE PTR [rbx+32], 2
	je	SHORT $LN6@PMC_LeftSh

; 736  :         *o = &number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 754  :         *o = no;
; 755  :     }
; 756  : #ifdef _DEBUG
; 757  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 758  :         return (result);
; 759  : #endif
; 760  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 761  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN6@PMC_LeftSh:

; 737  :     else if (n == 0)

	test	rsi, rsi
	jne	SHORT $LN8@PMC_LeftSh

; 738  :     {
; 739  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rsp]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_LeftSh

; 754  :         *o = no;
; 755  :     }
; 756  : #ifdef _DEBUG
; 757  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 758  :         return (result);
; 759  : #endif
; 760  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR no$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 761  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN8@PMC_LeftSh:

; 740  :             return (result);
; 741  :         *o = no;
; 742  :     }
; 743  :     else
; 744  :     {
; 745  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;
; 746  :         __UNIT_TYPE o_bit_count = p_bit_count + (__UNIT_TYPE)n;

	mov	rdx, QWORD PTR [rbx+8]

; 747  :         __UNIT_TYPE no_light_check_code;
; 748  :         if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$1[rsp]
	add	rdx, rsi
	lea	rcx, QWORD PTR no$[rsp]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_LeftSh

; 749  :             return (result);
; 750  :         LeftShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, (__UNIT_TYPE)n, no->BLOCK, FALSE);

	mov	r9, QWORD PTR no$[rsp]
	mov	r8, rsi
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rbx+48]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR [r9+48]
	call	LeftShift_Imp

; 751  :         if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR no$[rsp]
	mov	rdx, QWORD PTR no_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_LeftSh

; 752  :             return (result);
; 753  :         CommitNumber(no);

	mov	rcx, QWORD PTR no$[rsp]
	call	CommitNumber

; 754  :         *o = no;
; 755  :     }
; 756  : #ifdef _DEBUG
; 757  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 758  :         return (result);
; 759  : #endif
; 760  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR no$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 761  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN14@PMC_LeftSh:

; 729  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_LeftSh:

; 761  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
PMC_LeftShift_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT PMC_LeftShift_X_I
_TEXT	SEGMENT
no$ = 64
p$ = 64
n$ = 72
o$ = 80
no_light_check_code$1 = 88
PMC_LeftShift_X_I PROC					; COMDAT

; 676  : {

$LN18:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	esi, edx
	mov	rdi, r8
	mov	rbx, rcx

; 677  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)
; 678  :     {
; 679  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 680  :         return (PMC_STATUS_NOT_SUPPORTED);
; 681  :     }
; 682  :     if (p == NULL)

	test	rcx, rcx
	je	$LN14@PMC_LeftSh

; 683  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 684  :     if (o == NULL)

	test	r8, r8
	je	$LN14@PMC_LeftSh

; 686  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 687  :     NUMBER_HEADER* no;
; 688  :     PMC_STATUS_CODE result;
; 689  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_LeftSh

; 690  :         return (result);
; 691  :     if (np->IS_ZERO)

	test	BYTE PTR [rbx+32], 2
	je	SHORT $LN6@PMC_LeftSh

; 692  :         *o = &number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 710  :         *o = no;
; 711  :     }
; 712  : #ifdef _DEBUG
; 713  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 714  :         return (result);
; 715  : #endif
; 716  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 717  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN6@PMC_LeftSh:

; 693  :     else if (n == 0)

	test	esi, esi
	jne	SHORT $LN8@PMC_LeftSh

; 694  :     {
; 695  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rsp]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_LeftSh

; 710  :         *o = no;
; 711  :     }
; 712  : #ifdef _DEBUG
; 713  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 714  :         return (result);
; 715  : #endif
; 716  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR no$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 717  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN8@PMC_LeftSh:

; 696  :             return (result);
; 697  :         *o = no;
; 698  :     }
; 699  :     else
; 700  :     {
; 701  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;
; 702  :         __UNIT_TYPE o_bit_count = p_bit_count + n;

	mov	rdx, QWORD PTR [rbx+8]

; 703  :         __UNIT_TYPE no_light_check_code;
; 704  :         if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$1[rsp]
	add	rdx, rsi
	lea	rcx, QWORD PTR no$[rsp]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_LeftSh

; 705  :             return (result);
; 706  :         LeftShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, n, no->BLOCK, FALSE);

	mov	r9, QWORD PTR no$[rsp]
	mov	r8, rsi
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rbx+48]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR [r9+48]
	call	LeftShift_Imp

; 707  :         if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR no$[rsp]
	mov	rdx, QWORD PTR no_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_LeftSh

; 708  :             return (result);
; 709  :         CommitNumber(no);

	mov	rcx, QWORD PTR no$[rsp]
	call	CommitNumber

; 710  :         *o = no;
; 711  :     }
; 712  : #ifdef _DEBUG
; 713  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 714  :         return (result);
; 715  : #endif
; 716  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR no$[rsp]
	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 717  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN14@PMC_LeftSh:

; 685  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_LeftSh:

; 717  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
PMC_LeftShift_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT PMC_RightShift_X_L
_TEXT	SEGMENT
no$ = 64
p$ = 64
n$ = 72
o$ = 80
no_light_check_code$1 = 88
PMC_RightShift_X_L PROC					; COMDAT

; 627  : {

$LN20:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 628  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)
; 629  :     {
; 630  :         // _UINT64_T が 1 ワードで表現しきれない処理系には対応しない
; 631  :         return (PMC_STATUS_NOT_SUPPORTED);
; 632  :     }
; 633  :     if (p == NULL)

	test	rcx, rcx
	je	$LN17@PMC_RightS

; 634  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 635  :     if (o == NULL)

	test	r8, r8
	je	$LN17@PMC_RightS

; 637  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 638  :     NUMBER_HEADER* no;
; 639  :     PMC_STATUS_CODE result;
; 640  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_RightS

; 641  :         return (result);
; 642  :     if (np->IS_ZERO)

	test	BYTE PTR [rbx+32], 2
	jne	$LN16@PMC_RightS

; 643  :         *o = &number_zero;
; 644  :     else if (n == 0)

	test	rsi, rsi
	jne	SHORT $LN8@PMC_RightS

; 645  :     {
; 646  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rsp]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_RightS

; 647  :             return (result);
; 648  :         *o = no;

	mov	rax, QWORD PTR no$[rsp]

; 666  :         }
; 667  :     }
; 668  : #ifdef _DEBUG
; 669  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 670  :         return (result);
; 671  : #endif
; 672  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 673  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN8@PMC_RightS:

; 649  :     }
; 650  :     else
; 651  :     {
; 652  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	rdx, QWORD PTR [rbx+8]

; 653  :         if (p_bit_count <= n)

	cmp	rdx, rsi
	jbe	SHORT $LN16@PMC_RightS

; 655  :         else
; 656  :         {
; 657  :             __UNIT_TYPE o_bit_count = p_bit_count - (__UNIT_TYPE)n;

	sub	rdx, rsi

; 658  :             __UNIT_TYPE no_light_check_code;
; 659  :             if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$1[rsp]
	lea	rcx, QWORD PTR no$[rsp]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_RightS

; 660  :                 return (result);
; 661  :             RightShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, (__UNIT_TYPE)n, no->BLOCK, FALSE);

	mov	r9, QWORD PTR no$[rsp]
	mov	r8, rsi
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rbx+48]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR [r9+48]
	call	RightShift_Imp

; 662  :             if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR no$[rsp]
	mov	rdx, QWORD PTR no_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_RightS

; 663  :                 return (result);
; 664  :             CommitNumber(no);

	mov	rcx, QWORD PTR no$[rsp]
	call	CommitNumber

; 665  :             *o = no;

	mov	rax, QWORD PTR no$[rsp]

; 666  :         }
; 667  :     }
; 668  : #ifdef _DEBUG
; 669  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 670  :         return (result);
; 671  : #endif
; 672  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 673  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN16@PMC_RightS:

; 654  :             *o = &number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 666  :         }
; 667  :     }
; 668  : #ifdef _DEBUG
; 669  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 670  :         return (result);
; 671  : #endif
; 672  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 673  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN17@PMC_RightS:

; 636  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_RightS:

; 673  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
PMC_RightShift_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT PMC_RightShift_X_I
_TEXT	SEGMENT
no$ = 64
p$ = 64
n$ = 72
o$ = 80
no_light_check_code$1 = 88
PMC_RightShift_X_I PROC					; COMDAT

; 578  : {

$LN20:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	esi, edx
	mov	rdi, r8
	mov	rbx, rcx

; 579  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)
; 580  :     {
; 581  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 582  :         return (PMC_STATUS_NOT_SUPPORTED);
; 583  :     }
; 584  :     if (p == NULL)

	test	rcx, rcx
	je	$LN17@PMC_RightS

; 585  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 586  :     if (o == NULL)

	test	r8, r8
	je	$LN17@PMC_RightS

; 588  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 589  :     NUMBER_HEADER* no;
; 590  :     PMC_STATUS_CODE result;
; 591  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_RightS

; 592  :         return (result);
; 593  :     if (np->IS_ZERO)

	test	BYTE PTR [rbx+32], 2
	jne	$LN16@PMC_RightS

; 594  :         *o = &number_zero;
; 595  :     else if (n == 0)

	test	esi, esi
	jne	SHORT $LN8@PMC_RightS

; 596  :     {
; 597  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rsp]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_RightS

; 598  :             return (result);
; 599  :         *o = no;

	mov	rax, QWORD PTR no$[rsp]

; 617  :         }
; 618  :     }
; 619  : #ifdef _DEBUG
; 620  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 621  :         return (result);
; 622  : #endif
; 623  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 624  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN8@PMC_RightS:

; 600  :     }
; 601  :     else
; 602  :     {
; 603  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	rdx, QWORD PTR [rbx+8]

; 604  :         if (p_bit_count <= n)

	cmp	rdx, rsi
	jbe	SHORT $LN16@PMC_RightS

; 606  :         else
; 607  :         {
; 608  :             __UNIT_TYPE o_bit_count = p_bit_count - n;

	sub	rdx, rsi

; 609  :             __UNIT_TYPE no_light_check_code;
; 610  :             if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$1[rsp]
	lea	rcx, QWORD PTR no$[rsp]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_RightS

; 611  :                 return (result);
; 612  :             RightShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, n, no->BLOCK, FALSE);

	mov	r9, QWORD PTR no$[rsp]
	mov	r8, rsi
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rbx+48]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR [r9+48]
	call	RightShift_Imp

; 613  :             if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR no$[rsp]
	mov	rdx, QWORD PTR no_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_RightS

; 614  :                 return (result);
; 615  :             CommitNumber(no);

	mov	rcx, QWORD PTR no$[rsp]
	call	CommitNumber

; 616  :             *o = no;

	mov	rax, QWORD PTR no$[rsp]

; 617  :         }
; 618  :     }
; 619  : #ifdef _DEBUG
; 620  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 621  :         return (result);
; 622  : #endif
; 623  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 624  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN16@PMC_RightS:

; 605  :             *o = &number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 617  :         }
; 618  :     }
; 619  : #ifdef _DEBUG
; 620  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 621  :         return (result);
; 622  : #endif
; 623  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 624  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN17@PMC_RightS:

; 587  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_RightS:

; 624  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
PMC_RightShift_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT Initialize_Shift
_TEXT	SEGMENT
feature$ = 8
Initialize_Shift PROC					; COMDAT

; 765  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 766  : }

	ret	0
Initialize_Shift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT LeftShift_Imp
_TEXT	SEGMENT
p$ = 16
p_word_count$ = 24
n$ = 32
o$ = 40
padding_zero$ = 48
LeftShift_Imp PROC					; COMDAT

; 308  : {

$LN28:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14

; 309  :     __UNIT_TYPE* pp = p;
; 310  :     __UNIT_TYPE p_count = p_word_count;
; 311  :     __UNIT_TYPE* op = o;
; 312  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	rbx, r8
	mov	r10, r8
	shr	rbx, 6
	mov	r14, r9

; 313  :     __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	and	r10d, 63				; 0000003fH

; 314  :     if (n_lshift_bit_count == 0)

	jne	SHORT $LN4@LeftShift_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 329  :     __movsq(d, s, count);

	mov	rsi, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c

; 317  :         _COPY_MEMORY_UNIT(op + n_word_count, pp, p_count);

	lea	rdi, QWORD PTR [r9+rbx*8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 329  :     __movsq(d, s, count);

	mov	rcx, rdx
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c

; 320  :     }

	jmp	$LN26@LeftShift_
$LN4@LeftShift_:

; 321  :     else
; 322  :     {
; 323  :         __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;
; 324  :         pp += p_count - 1;
; 325  :         op += p_count + n_word_count;
; 326  :         p_count -= 1;
; 327  :         __UNIT_TYPE temp = *pp;

	mov	rsi, QWORD PTR [rcx+rdx*8-8]
	lea	r8, QWORD PTR [rcx+rdx*8]
	lea	rax, QWORD PTR [rbx+rdx]
	mov	QWORD PTR [rsp+16], rbp
	lea	r11, QWORD PTR [rdx-1]
	mov	r9d, 64					; 00000040H
	sub	r9, r10
	lea	rax, QWORD PTR [r14+rax*8]

; 328  :         __UNIT_TYPE work = temp >> n_rshift_bit_count;

	mov	rdx, rsi
	mov	rcx, r9
	shr	rdx, cl

; 329  :         if (work != 0)

	test	rdx, rdx
	je	SHORT $LN7@LeftShift_

; 330  :             *op = work;

	mov	QWORD PTR [rax], rdx
$LN7@LeftShift_:

; 331  :         --pp;
; 332  :         --op;
; 333  : 
; 334  :         __UNIT_TYPE count = p_count >> 5;

	mov	rbp, r11
	sub	r8, 16
	shr	rbp, 5
	sub	rax, 8

; 335  :         while (count != 0)

	test	rbp, rbp
	je	$LN3@LeftShift_
	npad	14
$LL2@LeftShift_:

; 336  :         {
; 337  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rdi, QWORD PTR [r8]
	mov	rcx, r10
	shl	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shr	rdx, cl

; 338  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-8]
	mov	rdx, rsi
	shr	rdx, cl

; 339  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-8], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-16]
	mov	rdx, rdi
	shr	rdx, cl

; 340  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-16], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-24]
	mov	rdx, rsi
	shr	rdx, cl

; 341  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-24], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-32]
	mov	rdx, rdi
	shr	rdx, cl

; 342  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-32], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-40]
	mov	rdx, rsi
	shr	rdx, cl

; 343  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-40], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-48]
	mov	rdx, rdi
	shr	rdx, cl

; 344  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-48], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-56]
	mov	rdx, rsi
	shr	rdx, cl

; 345  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-56], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-64]
	mov	rdx, rdi
	shr	rdx, cl

; 346  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-64], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-72]
	mov	rdx, rsi
	shr	rdx, cl

; 347  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	rcx, r10
	or	rdx, rdi
	mov	QWORD PTR [rax-72], rdx
	mov	rdi, QWORD PTR [r8-80]
	shl	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shr	rdx, cl

; 348  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-80], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-88]
	mov	rdx, rsi
	shr	rdx, cl

; 349  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-88], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-96]
	mov	rdx, rdi
	shr	rdx, cl

; 350  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-96], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-104]
	mov	rdx, rsi
	shr	rdx, cl

; 351  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-104], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-112]
	mov	rdx, rdi
	shr	rdx, cl

; 352  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-112], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-120]
	mov	rdx, rsi
	shr	rdx, cl

; 353  :             work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-120], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-128]
	mov	rdx, rdi
	shr	rdx, cl

; 354  :             work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-128], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-136]
	mov	rdx, rsi
	shr	rdx, cl

; 355  :             work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-136], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-144]
	mov	rdx, rdi
	shr	rdx, cl

; 356  :             work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-144], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-152]
	mov	rdx, rsi
	shr	rdx, cl

; 357  :             work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

	mov	rcx, r10
	or	rdx, rdi
	mov	QWORD PTR [rax-152], rdx
	shl	rsi, cl
	mov	rdi, QWORD PTR [r8-160]
	mov	rcx, r9
	mov	rdx, rdi
	shr	rdx, cl

; 358  :             work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-160], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-168]
	mov	rdx, rsi
	shr	rdx, cl

; 359  :             work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-168], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-176]
	mov	rdx, rdi
	shr	rdx, cl

; 360  :             work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-176], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-184]
	mov	rdx, rsi
	shr	rdx, cl

; 361  :             work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-184], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-192]
	mov	rdx, rdi
	shr	rdx, cl

; 362  :             work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-192], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-200]
	mov	rdx, rsi
	shr	rdx, cl

; 363  :             work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-200], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-208]
	mov	rdx, rdi
	shr	rdx, cl

; 364  :             work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-208], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-216]
	mov	rdx, rsi
	shr	rdx, cl

; 365  :             work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-216], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-224]
	mov	rdx, rdi
	shr	rdx, cl

; 366  :             work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-224], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-232]
	mov	rdx, rsi
	shr	rdx, cl

; 367  :             work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

	mov	rcx, r10
	or	rdx, rdi
	mov	QWORD PTR [rax-232], rdx
	mov	rdi, QWORD PTR [r8-240]
	shl	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shr	rdx, cl

; 368  :             work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-240], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-248]

; 369  :             pp -= 32;

	sub	r8, 256					; 00000100H
	mov	rdx, rsi
	shr	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [rax-248], rdx

; 370  :             op -= 32;

	sub	rax, 256				; 00000100H

; 371  :             --count;

	sub	rbp, 1
	jne	$LL2@LeftShift_
$LN3@LeftShift_:
	mov	rbp, QWORD PTR [rsp+16]

; 372  :         }
; 373  : 
; 374  :         if (p_count & 0x10)

	test	r11b, 16
	je	$LN8@LeftShift_

; 375  :         {
; 376  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rdi, QWORD PTR [r8]
	mov	rcx, r10
	shl	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shr	rdx, cl

; 377  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-8]
	mov	rdx, rsi
	shr	rdx, cl

; 378  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-8], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-16]
	mov	rdx, rdi
	shr	rdx, cl

; 379  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-16], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-24]
	mov	rdx, rsi
	shr	rdx, cl

; 380  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-24], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-32]
	mov	rdx, rdi
	shr	rdx, cl

; 381  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-32], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-40]
	mov	rdx, rsi
	shr	rdx, cl

; 382  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-40], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-48]
	mov	rdx, rdi
	shr	rdx, cl

; 383  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-48], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-56]
	mov	rdx, rsi
	shr	rdx, cl

; 384  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-56], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-64]
	mov	rdx, rdi
	shr	rdx, cl

; 385  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-64], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-72]
	mov	rdx, rsi
	shr	rdx, cl

; 386  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	rcx, r10
	or	rdx, rdi
	mov	QWORD PTR [rax-72], rdx
	mov	rdi, QWORD PTR [r8-80]
	shl	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shr	rdx, cl

; 387  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-80], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-88]
	mov	rdx, rsi
	shr	rdx, cl

; 388  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-88], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-96]
	mov	rdx, rdi
	shr	rdx, cl

; 389  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-96], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-104]
	mov	rdx, rsi
	shr	rdx, cl

; 390  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-104], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-112]
	mov	rdx, rdi
	shr	rdx, cl

; 391  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-112], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-120]

; 392  :             pp -= 16;

	add	r8, -128				; ffffffffffffff80H
	mov	rdx, rsi
	shr	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [rax-120], rdx

; 393  :             op -= 16;

	add	rax, -128				; ffffffffffffff80H
$LN8@LeftShift_:

; 394  :         }
; 395  : 
; 396  :         if (p_count & 0x8)

	test	r11b, 8
	je	$LN9@LeftShift_

; 397  :         {
; 398  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rdi, QWORD PTR [r8]
	mov	rcx, r10
	shl	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shr	rdx, cl

; 399  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-8]
	mov	rdx, rsi
	shr	rdx, cl

; 400  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-8], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-16]
	mov	rdx, rdi
	shr	rdx, cl

; 401  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-16], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-24]
	mov	rdx, rsi
	shr	rdx, cl

; 402  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-24], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-32]
	mov	rdx, rdi
	shr	rdx, cl

; 403  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-32], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-40]
	mov	rdx, rsi
	shr	rdx, cl

; 404  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-40], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-48]
	mov	rdx, rdi
	shr	rdx, cl

; 405  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-48], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-56]

; 406  :             pp -= 8;

	sub	r8, 64					; 00000040H
	mov	rdx, rsi
	shr	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [rax-56], rdx

; 407  :             op -= 8;

	sub	rax, 64					; 00000040H
$LN9@LeftShift_:

; 408  :         }
; 409  : 
; 410  :         if (p_count & 0x4)

	test	r11b, 4
	je	SHORT $LN10@LeftShift_

; 411  :         {
; 412  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rdi, QWORD PTR [r8]
	mov	rcx, r10
	shl	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shr	rdx, cl

; 413  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-8]
	mov	rdx, rsi
	shr	rdx, cl

; 414  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rcx, r10
	or	rdx, rdi
	shl	rsi, cl
	mov	QWORD PTR [rax-8], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [r8-16]
	mov	rdx, rdi
	shr	rdx, cl

; 415  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax-16], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-24]

; 416  :             pp -= 4;

	sub	r8, 32					; 00000020H
	mov	rdx, rsi
	shr	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [rax-24], rdx

; 417  :             op -= 4;

	sub	rax, 32					; 00000020H
$LN10@LeftShift_:

; 418  :         }
; 419  : 
; 420  :         if (p_count & 0x2)

	test	r11b, 2
	je	SHORT $LN11@LeftShift_

; 421  :         {
; 422  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rdi, QWORD PTR [r8]
	mov	rcx, r10
	shl	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shr	rdx, cl

; 423  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	rdx, rsi
	shl	rdi, cl
	mov	QWORD PTR [rax], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [r8-8]

; 424  :             pp -= 2;

	sub	r8, 16
	mov	rdx, rsi
	shr	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [rax-8], rdx

; 425  :             op -= 2;

	sub	rax, 16
$LN11@LeftShift_:

; 426  :         }
; 427  : 
; 428  :         if (p_count & 0x1)

	test	r11b, 1
	je	SHORT $LN12@LeftShift_

; 429  :         {
; 430  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rcx, r10
	shl	rsi, cl
	mov	rcx, r9
	mov	rdi, rsi
	mov	rsi, QWORD PTR [r8]
	mov	rdx, rsi
	shr	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [rax], rdx

; 431  :             pp -= 1;
; 432  :             op -= 1;

	sub	rax, 8
$LN12@LeftShift_:

; 433  :         }
; 434  :         work = temp << n_lshift_bit_count;

	mov	rcx, r10
	shl	rsi, cl

; 435  :         *op = work;

	mov	QWORD PTR [rax], rsi
$LN26@LeftShift_:

; 436  : 
; 437  :         if (padding_zero)
; 438  :             _ZERO_MEMORY_UNIT(o, n_word_count);
; 439  :     }
; 440  : }

	cmp	DWORD PTR padding_zero$[rsp], 0
	je	SHORT $LN19@LeftShift_
	mov	rcx, rbx
	xor	eax, eax
	mov	rdi, r14
	rep stosq
$LN19@LeftShift_:
	mov	rbx, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+32]
	mov	rdi, QWORD PTR [rsp+40]
	pop	r14
	ret	0
LeftShift_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT LeftShift_Imp_DIV
_TEXT	SEGMENT
p$ = 16
p_word_count$ = 24
n$ = 32
o$ = 40
padding_zero$ = 48
LeftShift_Imp_DIV PROC					; COMDAT

; 443  : {

$LN28:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14

; 444  :     __UNIT_TYPE_DIV* pp = p;
; 445  :     __UNIT_TYPE p_count = p_word_count;
; 446  :     __UNIT_TYPE_DIV* op = o;
; 447  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	rbx, r8
	mov	r10, r8
	shr	rbx, 6
	mov	r14, r9
	mov	rax, rcx

; 448  :     __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	and	r10d, 63				; 0000003fH

; 449  :     if (n_lshift_bit_count == 0)

	jne	SHORT $LN4@LeftShift_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 341  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c

; 452  :         _COPY_MEMORY_UNIT_DIV(op + n_word_count, pp, p_count);

	lea	rdi, QWORD PTR [r9+rbx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 341  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	rsi, rax
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c

; 455  :     }

	jmp	$LN26@LeftShift_
$LN4@LeftShift_:

; 456  :     else
; 457  :     {
; 458  :         __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;
; 459  :         pp += p_count - 1;
; 460  :         op += p_count + n_word_count;
; 461  :         p_count -= 1;
; 462  :         __UNIT_TYPE_DIV temp = *pp;

	mov	esi, DWORD PTR [rcx+rdx*4-4]
	lea	r8, QWORD PTR [rcx+rdx*4]
	lea	rax, QWORD PTR [rbx+rdx]
	mov	QWORD PTR [rsp+16], rbp
	lea	r11, QWORD PTR [rdx-1]
	mov	r9d, 64					; 00000040H
	sub	r9, r10
	lea	rax, QWORD PTR [r14+rax*4]

; 463  :         __UNIT_TYPE_DIV work = temp >> n_rshift_bit_count;

	mov	rcx, r9
	mov	edx, esi
	shr	edx, cl

; 464  :         if (work != 0)

	test	edx, edx
	je	SHORT $LN7@LeftShift_

; 465  :             *op = work;

	mov	DWORD PTR [rax], edx
$LN7@LeftShift_:

; 466  :         --pp;
; 467  :         --op;
; 468  : 
; 469  :         __UNIT_TYPE count = p_count >> 5;

	mov	rbp, r11
	sub	r8, 8
	shr	rbp, 5
	sub	rax, 4

; 470  :         while (count != 0)

	test	rbp, rbp
	je	$LN3@LeftShift_
	npad	2
$LL2@LeftShift_:

; 471  :         {
; 472  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edi, DWORD PTR [r8]
	mov	rcx, r10
	shl	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shr	edx, cl

; 473  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-4]
	mov	edx, esi
	shr	edx, cl

; 474  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-4], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-8]
	mov	edx, edi
	shr	edx, cl

; 475  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-12]
	mov	edx, esi
	shr	edx, cl

; 476  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-12], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-16]
	mov	edx, edi
	shr	edx, cl

; 477  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-16], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-20]
	mov	edx, esi
	shr	edx, cl

; 478  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-20], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-24]
	mov	edx, edi
	shr	edx, cl

; 479  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-24], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-28]
	mov	edx, esi
	shr	edx, cl

; 480  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-28], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-32]
	mov	edx, edi
	shr	edx, cl

; 481  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-32], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-36]
	mov	edx, esi
	shr	edx, cl

; 482  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	rcx, r10
	or	edx, edi
	mov	DWORD PTR [rax-36], edx
	mov	edi, DWORD PTR [r8-40]
	mov	edx, edi
	shl	esi, cl
	mov	rcx, r9
	shr	edx, cl

; 483  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-40], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-44]
	mov	edx, esi
	shr	edx, cl

; 484  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-44], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-48]
	mov	edx, edi
	shr	edx, cl

; 485  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-48], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-52]
	mov	edx, esi
	shr	edx, cl

; 486  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-52], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-56]
	mov	edx, edi
	shr	edx, cl

; 487  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-56], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-60]
	mov	edx, esi
	shr	edx, cl

; 488  :             work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-60], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-64]
	mov	edx, edi
	shr	edx, cl

; 489  :             work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-64], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-68]
	mov	edx, esi
	shr	edx, cl

; 490  :             work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-68], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-72]
	mov	edx, edi
	shr	edx, cl

; 491  :             work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-72], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-76]
	mov	edx, esi
	shr	edx, cl

; 492  :             work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

	mov	rcx, r10
	or	edx, edi
	mov	DWORD PTR [rax-76], edx
	shl	esi, cl
	mov	edi, DWORD PTR [r8-80]
	mov	rcx, r9
	mov	edx, edi
	shr	edx, cl

; 493  :             work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-80], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-84]
	mov	edx, esi
	shr	edx, cl

; 494  :             work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-84], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-88]
	mov	edx, edi
	shr	edx, cl

; 495  :             work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-88], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-92]
	mov	edx, esi
	shr	edx, cl

; 496  :             work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-92], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-96]
	mov	edx, edi
	shr	edx, cl

; 497  :             work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-96], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-100]
	mov	edx, esi
	shr	edx, cl

; 498  :             work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-100], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-104]
	mov	edx, edi
	shr	edx, cl

; 499  :             work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-104], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-108]
	mov	edx, esi
	shr	edx, cl

; 500  :             work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-108], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-112]
	mov	edx, edi
	shr	edx, cl

; 501  :             work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-112], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-116]
	mov	edx, esi
	shr	edx, cl

; 502  :             work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

	mov	rcx, r10
	or	edx, edi
	mov	DWORD PTR [rax-116], edx
	mov	edi, DWORD PTR [r8-120]
	shl	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shr	edx, cl

; 503  :             work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-120], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-124]
	mov	edx, esi
	shr	edx, cl

; 504  :             pp -= 32;

	add	r8, -128				; ffffffffffffff80H
	or	edx, edi
	mov	DWORD PTR [rax-124], edx

; 505  :             op -= 32;

	add	rax, -128				; ffffffffffffff80H

; 506  :             --count;

	sub	rbp, 1
	jne	$LL2@LeftShift_
$LN3@LeftShift_:
	mov	rbp, QWORD PTR [rsp+16]

; 507  :         }
; 508  : 
; 509  :         if (p_count & 0x10)

	test	r11b, 16
	je	$LN8@LeftShift_

; 510  :         {
; 511  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edi, DWORD PTR [r8]
	mov	rcx, r10
	shl	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shr	edx, cl

; 512  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-4]
	mov	edx, esi
	shr	edx, cl

; 513  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-4], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-8]
	mov	edx, edi
	shr	edx, cl

; 514  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-12]
	mov	edx, esi
	shr	edx, cl

; 515  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-12], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-16]
	mov	edx, edi
	shr	edx, cl

; 516  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-16], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-20]
	mov	edx, esi
	shr	edx, cl

; 517  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-20], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-24]
	mov	edx, edi
	shr	edx, cl

; 518  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-24], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-28]
	mov	edx, esi
	shr	edx, cl

; 519  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-28], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-32]
	mov	edx, edi
	shr	edx, cl

; 520  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-32], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-36]
	mov	edx, esi
	shr	edx, cl

; 521  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	rcx, r10
	or	edx, edi
	mov	DWORD PTR [rax-36], edx
	mov	edi, DWORD PTR [r8-40]
	mov	edx, edi
	shl	esi, cl
	mov	rcx, r9
	shr	edx, cl

; 522  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-40], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-44]
	mov	edx, esi
	shr	edx, cl

; 523  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-44], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-48]
	mov	edx, edi
	shr	edx, cl

; 524  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-48], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-52]
	mov	edx, esi
	shr	edx, cl

; 525  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-52], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-56]
	mov	edx, edi
	shr	edx, cl

; 526  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-56], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-60]
	mov	edx, esi
	shr	edx, cl

; 527  :             pp -= 16;

	sub	r8, 64					; 00000040H
	or	edx, edi
	mov	DWORD PTR [rax-60], edx

; 528  :             op -= 16;

	sub	rax, 64					; 00000040H
$LN8@LeftShift_:

; 529  :         }
; 530  : 
; 531  :         if (p_count & 0x8)

	test	r11b, 8
	je	$LN9@LeftShift_

; 532  :         {
; 533  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edi, DWORD PTR [r8]
	mov	rcx, r10
	shl	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shr	edx, cl

; 534  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-4]
	mov	edx, esi
	shr	edx, cl

; 535  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-4], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-8]
	mov	edx, edi
	shr	edx, cl

; 536  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-12]
	mov	edx, esi
	shr	edx, cl

; 537  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-12], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-16]
	mov	edx, edi
	shr	edx, cl

; 538  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-16], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-20]
	mov	edx, esi
	shr	edx, cl

; 539  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-20], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-24]
	mov	edx, edi
	shr	edx, cl

; 540  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-24], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-28]
	mov	edx, esi
	shr	edx, cl

; 541  :             pp -= 8;

	sub	r8, 32					; 00000020H
	or	edx, edi
	mov	DWORD PTR [rax-28], edx

; 542  :             op -= 8;

	sub	rax, 32					; 00000020H
$LN9@LeftShift_:

; 543  :         }
; 544  : 
; 545  :         if (p_count & 0x4)

	test	r11b, 4
	je	SHORT $LN10@LeftShift_

; 546  :         {
; 547  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edi, DWORD PTR [r8]
	mov	rcx, r10
	shl	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shr	edx, cl

; 548  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-4]
	mov	edx, esi
	shr	edx, cl

; 549  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rcx, r10
	or	edx, edi
	shl	esi, cl
	mov	DWORD PTR [rax-4], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [r8-8]
	mov	edx, edi
	shr	edx, cl

; 550  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax-8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-12]
	mov	edx, esi
	shr	edx, cl

; 551  :             pp -= 4;

	sub	r8, 16
	or	edx, edi
	mov	DWORD PTR [rax-12], edx

; 552  :             op -= 4;

	sub	rax, 16
$LN10@LeftShift_:

; 553  :         }
; 554  : 
; 555  :         if (p_count & 0x2)

	test	r11b, 2
	je	SHORT $LN11@LeftShift_

; 556  :         {
; 557  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edi, DWORD PTR [r8]
	mov	rcx, r10
	shl	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shr	edx, cl

; 558  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rcx, r10
	or	edx, esi
	shl	edi, cl
	mov	DWORD PTR [rax], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [r8-4]
	mov	edx, esi
	shr	edx, cl

; 559  :             pp -= 2;

	sub	r8, 8
	or	edx, edi
	mov	DWORD PTR [rax-4], edx

; 560  :             op -= 2;

	sub	rax, 8
$LN11@LeftShift_:

; 561  :         }
; 562  : 
; 563  :         if (p_count & 0x1)

	test	r11b, 1
	je	SHORT $LN12@LeftShift_

; 564  :         {
; 565  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rcx, r10
	shl	esi, cl
	mov	rcx, r9
	mov	edi, esi
	mov	esi, DWORD PTR [r8]
	mov	edx, esi
	shr	edx, cl
	or	edx, edi
	mov	DWORD PTR [rax], edx

; 566  :             pp -= 1;
; 567  :             op -= 1;

	sub	rax, 4
$LN12@LeftShift_:

; 568  :         }
; 569  :         work = temp << n_lshift_bit_count;

	mov	rcx, r10
	shl	esi, cl

; 570  :         *op = work;

	mov	DWORD PTR [rax], esi
$LN26@LeftShift_:

; 571  : 
; 572  :         if (padding_zero)
; 573  :             _ZERO_MEMORY_UNIT_DIV(o, n_word_count);
; 574  :     }
; 575  : }

	cmp	DWORD PTR padding_zero$[rsp], 0
	je	SHORT $LN19@LeftShift_
	mov	ecx, ebx
	xor	eax, eax
	mov	rdi, r14
	rep stosd
$LN19@LeftShift_:
	mov	rbx, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+32]
	mov	rdi, QWORD PTR [rsp+40]
	pop	r14
	ret	0
LeftShift_Imp_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT RightShift_Imp
_TEXT	SEGMENT
p$ = 24
p_word_count$ = 32
n$ = 40
o$ = 48
padding_zero$ = 56
RightShift_Imp PROC					; COMDAT

; 38   : {

$LN115:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r14
	mov	r10, r8
	mov	rbx, rdx

; 39   :     __UNIT_TYPE* pp = p;
; 40   :     __UNIT_TYPE p_count = p_word_count;
; 41   :     __UNIT_TYPE* op = o;
; 42   :     // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 43   :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	rbp, r10
	mov	r14, r9
	shr	rbp, 6

; 44   :     __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	and	r10d, 63				; 0000003fH
	sub	rbx, rbp
	mov	r8, r9
	lea	rax, QWORD PTR [rcx+rbp*8]

; 45   :     if (n_rshift_bit_count == 0)

	test	r10, r10
	jne	SHORT $LN4@RightShift
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 329  :     __movsq(d, s, count);

	mov	rdi, r9
	mov	rsi, rax
	mov	rcx, rbx
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c

; 49   :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rsp], r10d
	je	$LN20@RightShift

; 50   :             _ZERO_MEMORY_UNIT(op + p_count - n_word_count, n_word_count);

	lea	rdi, QWORD PTR [r9+rbx*8]

; 51   :     }

	jmp	$LN113@RightShift
$LN4@RightShift:

; 52   :     else
; 53   :     {
; 54   :         pp += n_word_count;
; 55   :         __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;
; 56   :         // p_count - n_word_count 回繰り返し
; 57   : 
; 58   :         __UNIT_TYPE temp = *pp++;

	mov	rsi, QWORD PTR [rax]

; 59   :         __UNIT_TYPE work;
; 60   :         __UNIT_TYPE t_count = p_count - n_word_count - 1;

	lea	r11, QWORD PTR [rbx-1]
	mov	QWORD PTR [rsp+24], r15
	mov	r9d, 64					; 00000040H

; 61   : 
; 62   :         __UNIT_TYPE count = t_count >> 5;

	mov	r15, r11
	sub	r9, r10
	shr	r15, 5
	add	rax, 8

; 63   :         while ( count > 0)

	test	r15, r15
	je	$LN3@RightShift
	npad	2
$LL2@RightShift:

; 64   :         {
; 65   :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rdi, QWORD PTR [rax]
	mov	rcx, r10
	shr	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+8]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+8], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+16]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+16], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+24]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+24], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+32]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+32], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+40]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+40], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+48]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+48], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+56]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+56], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+64]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+64], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+72]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	mov	QWORD PTR [r8+72], rdx
	mov	rdi, QWORD PTR [rax+80]
	shr	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+80], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+88]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+88], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+96]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+96], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+104]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+104], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+112]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+112], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+120]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+120], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+128]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+128], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+136]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+136], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+144]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+144], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+152]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	mov	QWORD PTR [r8+152], rdx
	shr	rsi, cl
	mov	rdi, QWORD PTR [rax+160]
	mov	rcx, r9
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+160], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+168]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+168], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+176]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+176], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+184]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+184], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+192]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+192], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+200]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+200], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+208]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+208], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+216]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+216], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+224]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+224], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+232]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	mov	QWORD PTR [r8+232], rdx
	mov	rdi, QWORD PTR [rax+240]
	shr	rsi, cl
	mov	rcx, r9
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+240], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+248]

; 66   :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 67   :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 68   :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 69   :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 70   :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 71   :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 72   :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 73   :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 74   :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 75   :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 76   :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 77   :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 78   :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 79   :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 80   :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 81   :             work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;
; 82   :             work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;
; 83   :             work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;
; 84   :             work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;
; 85   :             work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;
; 86   :             work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;
; 87   :             work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;
; 88   :             work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;
; 89   :             work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;
; 90   :             work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;
; 91   :             work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;
; 92   :             work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;
; 93   :             work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;
; 94   :             work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;
; 95   :             work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;
; 96   :             work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;
; 97   :             --count;
; 98   :             pp += 32;

	add	rax, 256				; 00000100H
	mov	rdx, rsi
	shl	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [r8+248], rdx

; 99   :             op += 32;

	add	r8, 256					; 00000100H
	sub	r15, 1
	jne	$LL2@RightShift
$LN3@RightShift:
	mov	r15, QWORD PTR [rsp+24]

; 100  :         }
; 101  : 
; 102  :         if (t_count & 0x10)

	test	r11b, 16
	je	$LN7@RightShift

; 103  :         {
; 104  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rdi, QWORD PTR [rax]
	mov	rcx, r10
	shr	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+8]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+8], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+16]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+16], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+24]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+24], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+32]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+32], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+40]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+40], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+48]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+48], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+56]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+56], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+64]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+64], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+72]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	mov	QWORD PTR [r8+72], rdx
	mov	rdi, QWORD PTR [rax+80]
	shr	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+80], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+88]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+88], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+96]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+96], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+104]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+104], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+112]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+112], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+120]

; 105  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 106  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 107  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 108  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 109  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 110  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 111  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 112  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 113  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 114  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 115  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 116  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 117  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 118  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 119  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 120  :             pp += 16;

	sub	rax, -128				; ffffffffffffff80H
	mov	rdx, rsi
	shl	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [r8+120], rdx

; 121  :             op += 16;

	sub	r8, -128				; ffffffffffffff80H
$LN7@RightShift:

; 122  :         }
; 123  : 
; 124  :         if (t_count & 0x8)

	test	r11b, 8
	je	$LN8@RightShift

; 125  :         {
; 126  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rdi, QWORD PTR [rax]
	mov	rcx, r10
	shr	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+8]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+8], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+16]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+16], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+24]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+24], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+32]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+32], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+40]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+40], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+48]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+48], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+56]

; 127  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 128  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 129  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 130  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 131  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 132  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 133  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 134  :             pp += 8;

	add	rax, 64					; 00000040H
	mov	rdx, rsi
	shl	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [r8+56], rdx

; 135  :             op += 8;

	add	r8, 64					; 00000040H
$LN8@RightShift:

; 136  :         }
; 137  : 
; 138  :         if (t_count & 0x4)

	test	r11b, 4
	je	SHORT $LN9@RightShift

; 139  :         {
; 140  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rdi, QWORD PTR [rax]
	mov	rcx, r10
	shr	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+8]
	mov	rdx, rsi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rdi
	shr	rsi, cl
	mov	QWORD PTR [r8+8], rdx
	mov	rcx, r9
	mov	rdi, QWORD PTR [rax+16]
	mov	rdx, rdi
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8+16], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+24]

; 141  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 142  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 143  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 144  :             pp += 4;

	add	rax, 32					; 00000020H
	mov	rdx, rsi
	shl	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [r8+24], rdx

; 145  :             op += 4;

	add	r8, 32					; 00000020H
$LN9@RightShift:

; 146  :         }
; 147  : 
; 148  :         if (t_count & 0x2)

	test	r11b, 2
	je	SHORT $LN10@RightShift

; 149  :         {
; 150  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rdi, QWORD PTR [rax]
	mov	rcx, r10
	shr	rsi, cl
	mov	rdx, rdi
	mov	rcx, r9
	shl	rdx, cl
	mov	rcx, r10
	or	rdx, rsi
	shr	rdi, cl
	mov	QWORD PTR [r8], rdx
	mov	rcx, r9
	mov	rsi, QWORD PTR [rax+8]

; 151  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 152  :             pp += 2;

	add	rax, 16
	mov	rdx, rsi
	shl	rdx, cl
	or	rdx, rdi
	mov	QWORD PTR [r8+8], rdx

; 153  :             op += 2;

	add	r8, 16
$LN10@RightShift:

; 154  :         }
; 155  : 
; 156  :         if (t_count & 0x1)

	test	r11b, 1
	je	SHORT $LN11@RightShift

; 157  :         {
; 158  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rcx, r10
	shr	rsi, cl
	mov	rcx, r9
	mov	rdx, rsi
	mov	rsi, QWORD PTR [rax]
	mov	rax, rsi
	shl	rax, cl
	or	rax, rdx
	mov	QWORD PTR [r8], rax

; 159  :             pp += 1;
; 160  :             op += 1;

	add	r8, 8
$LN11@RightShift:

; 161  :         }
; 162  : 
; 163  :         work = temp >> n_rshift_bit_count;
; 164  :         if (work != 0 || padding_zero)

	mov	eax, DWORD PTR padding_zero$[rsp]
	mov	rcx, r10
	shr	rsi, cl
	test	rsi, rsi
	jne	SHORT $LN13@RightShift
	test	eax, eax
	je	SHORT $LN20@RightShift
$LN13@RightShift:

; 165  :             *op = work;

	mov	QWORD PTR [r8], rsi

; 166  : 
; 167  :         if (padding_zero)

	test	eax, eax
	je	SHORT $LN20@RightShift

; 168  :             _ZERO_MEMORY_UNIT(o + p_word_count - n_word_count, n_word_count);

	lea	rdi, QWORD PTR [r14+rbx*8]
$LN113@RightShift:

; 169  :     }
; 170  : }

	mov	rcx, rbp
	xor	eax, eax
	rep stosq
$LN20@RightShift:
	mov	rbx, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+40]
	mov	rsi, QWORD PTR [rsp+48]
	pop	r14
	pop	rdi
	ret	0
RightShift_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c
;	COMDAT RightShift_Imp_DIV
_TEXT	SEGMENT
p$ = 24
p_word_count$ = 32
n$ = 40
o$ = 48
padding_zero$ = 56
RightShift_Imp_DIV PROC					; COMDAT

; 173  : {

$LN109:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r14
	mov	r10, r8
	mov	r14, r9

; 174  :     __UNIT_TYPE_DIV* pp = p;
; 175  :     __UNIT_TYPE p_count = p_word_count;
; 176  :     __UNIT_TYPE_DIV* op = o;
; 177  :     // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 178  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	rbx, r10
	mov	r11, rdx
	shr	rbx, 6
	mov	r8, r9

; 179  :     __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	lea	rax, QWORD PTR [rcx+rbx*4]
	and	r10d, 63				; 0000003fH

; 180  :     if (n_rshift_bit_count == 0)

	jne	SHORT $LN4@RightShift

; 183  :         _COPY_MEMORY_UNIT_DIV(op, pp + n_word_count, p_count - n_word_count);

	mov	ecx, r11d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 341  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	rdi, r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c

; 183  :         _COPY_MEMORY_UNIT_DIV(op, pp + n_word_count, p_count - n_word_count);

	sub	ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 341  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	rsi, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c

; 184  :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rsp], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 341  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_shift.c

; 184  :         if (padding_zero)

	je	$LN20@RightShift

; 185  :             _ZERO_MEMORY_UNIT_DIV(op + p_count - n_word_count, n_word_count);

	sub	r11, rbx
	lea	rdi, QWORD PTR [r9+r11*4]

; 186  :     }

	jmp	$LN107@RightShift
$LN4@RightShift:

; 187  :     else
; 188  :     {
; 189  :         pp += n_word_count;
; 190  :         __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;
; 191  :         // p_count - n_word_count 回繰り返し
; 192  : 
; 193  :         __UNIT_TYPE_DIV temp = *pp++;

	mov	esi, DWORD PTR [rax]

; 194  :         __UNIT_TYPE_DIV work;
; 195  :         __UNIT_TYPE t_count = p_count - n_word_count - 1;

	sub	r11, rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	r9d, 64					; 00000040H
	mov	QWORD PTR [rsp+32], r15
	sub	r9, r10
	add	rax, 4
	lea	rbp, QWORD PTR [r11-1]

; 196  : 
; 197  :         __UNIT_TYPE count = t_count >> 5;

	mov	r15, rbp
	shr	r15, 5

; 198  :         while (count > 0)

	test	r15, r15
	je	$LN3@RightShift
	npad	2
$LL2@RightShift:

; 199  :         {
; 200  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edi, DWORD PTR [rax]
	mov	rcx, r10
	shr	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+4]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+4], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+8]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+12]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+12], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+16]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+16], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+20]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+20], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+24]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+24], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+28]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+28], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+32]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+32], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+36]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	mov	DWORD PTR [r8+36], edx
	mov	edi, DWORD PTR [rax+40]
	mov	edx, edi
	shr	esi, cl
	mov	rcx, r9
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+40], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+44]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+44], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+48]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+48], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+52]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+52], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+56]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+56], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+60]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+60], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+64]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+64], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+68]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+68], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+72]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+72], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+76]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	mov	DWORD PTR [r8+76], edx
	shr	esi, cl
	mov	edi, DWORD PTR [rax+80]
	mov	rcx, r9
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+80], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+84]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+84], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+88]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+88], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+92]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+92], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+96]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+96], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+100]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+100], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+104]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+104], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+108]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+108], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+112]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+112], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+116]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	mov	DWORD PTR [r8+116], edx
	mov	edi, DWORD PTR [rax+120]
	shr	esi, cl
	mov	rcx, r9
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+120], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+124]
	mov	edx, esi
	shl	edx, cl

; 201  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 202  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 203  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 204  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 205  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 206  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 207  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 208  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 209  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 210  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 211  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 212  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 213  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 214  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 215  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 216  :             work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;
; 217  :             work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;
; 218  :             work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;
; 219  :             work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;
; 220  :             work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;
; 221  :             work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;
; 222  :             work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;
; 223  :             work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;
; 224  :             work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;
; 225  :             work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;
; 226  :             work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;
; 227  :             work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;
; 228  :             work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;
; 229  :             work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;
; 230  :             work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;
; 231  :             work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;
; 232  :             --count;
; 233  :             pp += 32;

	sub	rax, -128				; ffffffffffffff80H
	or	edx, edi
	mov	DWORD PTR [r8+124], edx

; 234  :             op += 32;

	sub	r8, -128				; ffffffffffffff80H
	sub	r15, 1
	jne	$LL2@RightShift
$LN3@RightShift:
	mov	r15, QWORD PTR [rsp+32]

; 235  :         }
; 236  : 
; 237  :         if (t_count & 0x10)

	test	bpl, 16
	je	$LN7@RightShift

; 238  :         {
; 239  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edi, DWORD PTR [rax]
	mov	rcx, r10
	shr	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+4]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+4], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+8]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+12]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+12], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+16]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+16], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+20]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+20], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+24]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+24], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+28]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+28], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+32]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+32], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+36]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	mov	DWORD PTR [r8+36], edx
	mov	edi, DWORD PTR [rax+40]
	mov	edx, edi
	shr	esi, cl
	mov	rcx, r9
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+40], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+44]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+44], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+48]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+48], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+52]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+52], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+56]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+56], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+60]
	mov	edx, esi
	shl	edx, cl

; 240  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 241  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 242  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 243  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 244  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 245  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 246  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 247  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 248  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 249  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 250  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 251  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 252  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 253  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 254  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 255  :             pp += 16;

	add	rax, 64					; 00000040H
	or	edx, edi
	mov	DWORD PTR [r8+60], edx

; 256  :             op += 16;

	add	r8, 64					; 00000040H
$LN7@RightShift:

; 257  :         }
; 258  : 
; 259  :         if (t_count & 0x8)

	test	bpl, 8
	je	$LN8@RightShift

; 260  :         {
; 261  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edi, DWORD PTR [rax]
	mov	rcx, r10
	shr	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+4]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+4], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+8]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+12]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+12], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+16]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+16], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+20]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+20], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+24]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+24], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+28]
	mov	edx, esi
	shl	edx, cl

; 262  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 263  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 264  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 265  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 266  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 267  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 268  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 269  :             pp += 8;

	add	rax, 32					; 00000020H
	or	edx, edi
	mov	DWORD PTR [r8+28], edx

; 270  :             op += 8;

	add	r8, 32					; 00000020H
$LN8@RightShift:

; 271  :         }
; 272  : 
; 273  :         if (t_count & 0x4)

	test	bpl, 4
	je	SHORT $LN9@RightShift

; 274  :         {
; 275  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edi, DWORD PTR [rax]
	mov	rcx, r10
	shr	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+4]
	mov	edx, esi
	shl	edx, cl
	mov	rcx, r10
	or	edx, edi
	shr	esi, cl
	mov	DWORD PTR [r8+4], edx
	mov	rcx, r9
	mov	edi, DWORD PTR [rax+8]
	mov	edx, edi
	shl	edx, cl
	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8+8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+12]
	mov	edx, esi
	shl	edx, cl

; 276  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 277  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 278  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 279  :             pp += 4;

	add	rax, 16
	or	edx, edi
	mov	DWORD PTR [r8+12], edx

; 280  :             op += 4;

	add	r8, 16
$LN9@RightShift:

; 281  :         }
; 282  : 
; 283  :         if (t_count & 0x2)

	test	bpl, 2
	je	SHORT $LN10@RightShift

; 284  :         {
; 285  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edi, DWORD PTR [rax]
	mov	rcx, r10
	shr	esi, cl
	mov	edx, edi
	mov	rcx, r9
	shl	edx, cl

; 286  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rcx, r10
	or	edx, esi
	shr	edi, cl
	mov	DWORD PTR [r8], edx
	mov	rcx, r9
	mov	esi, DWORD PTR [rax+4]
	mov	edx, esi
	shl	edx, cl

; 287  :             pp += 2;

	add	rax, 8
	or	edx, edi
	mov	DWORD PTR [r8+4], edx

; 288  :             op += 2;

	add	r8, 8
$LN10@RightShift:

; 289  :         }
; 290  : 
; 291  :         if (t_count & 0x1)

	test	bpl, 1
	mov	rbp, QWORD PTR [rsp+24]
	je	SHORT $LN11@RightShift

; 292  :         {
; 293  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rcx, r10
	shr	esi, cl
	mov	rcx, r9
	mov	edx, esi
	mov	esi, DWORD PTR [rax]
	mov	eax, esi
	shl	eax, cl
	or	eax, edx
	mov	DWORD PTR [r8], eax

; 294  :             pp += 1;
; 295  :             op += 1;

	add	r8, 4
$LN11@RightShift:

; 296  :         }
; 297  : 
; 298  :         work = temp >> n_rshift_bit_count;
; 299  :         if (work != 0 || padding_zero)

	mov	eax, DWORD PTR padding_zero$[rsp]
	mov	rcx, r10
	shr	esi, cl
	test	esi, esi
	jne	SHORT $LN13@RightShift
	test	eax, eax
	je	SHORT $LN20@RightShift
$LN13@RightShift:

; 300  :             *op = work;

	mov	DWORD PTR [r8], esi

; 301  : 
; 302  :         if (padding_zero)

	test	eax, eax
	je	SHORT $LN20@RightShift

; 303  :             _ZERO_MEMORY_UNIT_DIV(o + p_word_count - n_word_count, n_word_count);

	lea	rdi, QWORD PTR [r14+r11*4]
$LN107@RightShift:

; 304  :     }
; 305  : }

	mov	ecx, ebx
	xor	eax, eax
	rep stosd
$LN20@RightShift:
	mov	rbx, QWORD PTR [rsp+40]
	mov	rsi, QWORD PTR [rsp+48]
	pop	r14
	pop	rdi
	ret	0
RightShift_Imp_DIV ENDP
_TEXT	ENDS
END
