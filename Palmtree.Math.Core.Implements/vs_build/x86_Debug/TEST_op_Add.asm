; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\TEST_op_Add.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__1C66ECB2_pmc_debug@h DB 01H
__662C3AA8_test_op_add@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_Add_X_I
PUBLIC	_TEST_PMC_Add_X_L
PUBLIC	_TEST_PMC_Add_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG93847 DB	'PMC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93848 DB	'PMC_Add_X_I (%d.%d)', 00H
$SG93849 DB	'PMC_Add_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+2
$SG93850 DB	'PMC_Add_X_I (%d.%d)', 00H
$SG93851 DB	'PMC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93852 DB	'PMC_Add_X_I (%d.%d)', 00H
$SG93853 DB	083H, 'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H
	DB	'e', 082H, 0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H
	DB	082H, 0a2H, 00H
	ORG $+3
$SG93854 DB	'PMC_Add_X_I (%d.%d)', 00H
$SG93881 DB	'PMC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93882 DB	'PMC_Add_X_L (%d.%d)', 00H
$SG93883 DB	'PMC_Add_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+2
$SG93884 DB	'PMC_Add_X_L (%d.%d)', 00H
$SG93885 DB	'PMC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93886 DB	'PMC_Add_X_L (%d.%d)', 00H
$SG93887 DB	083H, 'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H
	DB	'e', 082H, 0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H
	DB	082H, 0a2H, 00H
	ORG $+3
$SG93888 DB	'PMC_Add_X_L (%d.%d)', 00H
$SG93919 DB	'PMC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93920 DB	'PMC_Add_X_X (%d.%d)', 00H
$SG93921 DB	'PMC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93922 DB	'PMC_Add_X_X (%d.%d)', 00H
$SG93923 DB	'PMC_Add_X_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+2
$SG93924 DB	'PMC_Add_X_X (%d.%d)', 00H
$SG93925 DB	'PMC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93926 DB	'PMC_Add_X_X (%d.%d)', 00H
$SG93927 DB	083H, 'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H
	DB	'e', 082H, 0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H
	DB	082H, 0a2H, 00H
	ORG $+3
$SG93928 DB	'PMC_Add_X_X (%d.%d)', 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 105  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __1C66ECB2_pmc_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 106  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 107  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 108  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 109  :     {
; 110  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 111  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 112  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 113  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 114  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 115  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 116  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 117  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_add.c
_TEXT	SEGMENT
tv176 = -352						; size = 4
tv161 = -348						; size = 4
tv142 = -344						; size = 4
tv92 = -340						; size = 4
tv74 = -336						; size = 4
_z_result$ = -332					; size = 4
_y_result$ = -328					; size = 4
_x_result$ = -324					; size = 4
_result$ = -320						; size = 4
_actual_z_buf_size$ = -312				; size = 4
_actual_z_buf$ = -300					; size = 256
_z$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y_buf$ = 28						; size = 4
_y_buf_size$ = 32					; size = 4
_desired_z_buf$ = 36					; size = 4
_desired_z_buf_size$ = 40				; size = 4
_TEST_PMC_Add_X_X PROC

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __662C3AA8_test_op_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 78   :     HANDLE x;
; 79   :     HANDLE y;
; 80   :     HANDLE z;
; 81   :     unsigned char actual_z_buf[256];
; 82   :     size_t actual_z_buf_size;
; 83   :     PMC_STATUS_CODE result;
; 84   :     PMC_STATUS_CODE x_result;
; 85   :     PMC_STATUS_CODE y_result;
; 86   :     PMC_STATUS_CODE z_result;
; 87   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_X (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_A
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_A
$LN6@TEST_PMC_A:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_A:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG93919
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93920
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 88   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_X (%d.%d)", no, 2), (y_result = ep->PMC_From_B(y_buf, y_buf_size, &y)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", y_result));

	mov	esi, esp
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _y_result$[ebp], eax
	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN8@TEST_PMC_A
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_A
$LN8@TEST_PMC_A:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_A:
	mov	edx, DWORD PTR _y_result$[ebp]
	push	edx
	push	OFFSET $SG93921
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93922
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 89   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_X (%d.%d)", no, 3), (z_result = ep->PMC_Add_X_X(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Add_X_Xの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_A
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_A
$LN10@TEST_PMC_A:
	mov	DWORD PTR tv142[ebp], 0
$LN11@TEST_PMC_A:
	mov	edx, DWORD PTR _z_result$[ebp]
	push	edx
	push	OFFSET $SG93923
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93924
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 90   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_X (%d.%d)", no, 4), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN12@TEST_PMC_A
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_A
$LN12@TEST_PMC_A:
	mov	DWORD PTR tv161[ebp], 0
$LN13@TEST_PMC_A:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG93925
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93926
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 91   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	eax, DWORD PTR _desired_z_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN14@TEST_PMC_A
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN15@TEST_PMC_A
$LN14@TEST_PMC_A:
	mov	DWORD PTR tv176[ebp], 0
$LN15@TEST_PMC_A:
	push	OFFSET $SG93927
	mov	ecx, DWORD PTR tv176[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG93928
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 92   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_A

; 93   :         ep->PMC_Dispose(z);

	mov	esi, esp
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_A:

; 94   :     if (y_result == PMC_STATUS_OK)

	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_A

; 95   :         ep->PMC_Dispose(y);

	mov	esi, esp
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_A:

; 96   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_A

; 97   :         ep->PMC_Dispose(x);

	mov	esi, esp
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_A:

; 98   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@TEST_PMC_A
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@TEST_PMC_A:
	DD	5
	DD	$LN21@TEST_PMC_A
$LN21@TEST_PMC_A:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@TEST_PMC_A
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@TEST_PMC_A
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@TEST_PMC_A
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN19@TEST_PMC_A
	DD	-312					; fffffec8H
	DD	4
	DD	$LN20@TEST_PMC_A
$LN20@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN19@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@TEST_PMC_A:
	DB	122					; 0000007aH
	DB	0
$LN17@TEST_PMC_A:
	DB	121					; 00000079H
	DB	0
$LN16@TEST_PMC_A:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Add_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_add.c
_TEXT	SEGMENT
tv158 = -332						; size = 4
tv143 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_z_result$ = -316					; size = 4
_x_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_z_buf_size$ = -300				; size = 4
_actual_z_buf$ = -288					; size = 256
_z$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 8
_desired_z_buf$ = 36					; size = 4
_desired_z_buf_size$ = 40				; size = 4
_TEST_PMC_Add_X_L PROC

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __662C3AA8_test_op_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 59   :     HANDLE x;
; 60   :     HANDLE z;
; 61   :     unsigned char actual_z_buf[256];
; 62   :     size_t actual_z_buf_size;
; 63   :     PMC_STATUS_CODE result;
; 64   :     PMC_STATUS_CODE x_result;
; 65   :     PMC_STATUS_CODE z_result;
; 66   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_L (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_A
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_A
$LN5@TEST_PMC_A:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_A:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG93881
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93882
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 67   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_L (%d.%d)", no, 2), (z_result = ep->PMC_Add_X_L(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Add_X_Lの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_A
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_A
$LN7@TEST_PMC_A:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_A:
	mov	eax, DWORD PTR _z_result$[ebp]
	push	eax
	push	OFFSET $SG93883
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG93884
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 68   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_L (%d.%d)", no, 3), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	ecx, DWORD PTR _actual_z_buf_size$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _actual_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_A
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_A
$LN9@TEST_PMC_A:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_PMC_A:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG93885
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG93886
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 69   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	ecx, DWORD PTR _desired_z_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_PMC_A
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_A
$LN11@TEST_PMC_A:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_PMC_A:
	push	OFFSET $SG93887
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG93888
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 70   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_A

; 71   :         ep->PMC_Dispose(z);

	mov	esi, esp
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_A:

; 72   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_A

; 73   :         ep->PMC_Dispose(x);

	mov	esi, esp
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_A:

; 74   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_PMC_A
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@TEST_PMC_A:
	DD	4
	DD	$LN17@TEST_PMC_A
$LN17@TEST_PMC_A:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_PMC_A
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_PMC_A
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_PMC_A
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_PMC_A
$LN16@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_PMC_A:
	DB	122					; 0000007aH
	DB	0
$LN13@TEST_PMC_A:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Add_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_add.c
_TEXT	SEGMENT
tv158 = -332						; size = 4
tv143 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_z_result$ = -316					; size = 4
_x_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_z_buf_size$ = -300				; size = 4
_actual_z_buf$ = -288					; size = 256
_z$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 4
_desired_z_buf$ = 32					; size = 4
_desired_z_buf_size$ = 36				; size = 4
_TEST_PMC_Add_X_I PROC

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __662C3AA8_test_op_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 40   :     HANDLE x;
; 41   :     HANDLE z;
; 42   :     unsigned char actual_z_buf[256];
; 43   :     size_t actual_z_buf_size;
; 44   :     PMC_STATUS_CODE result;
; 45   :     PMC_STATUS_CODE x_result;
; 46   :     PMC_STATUS_CODE z_result;
; 47   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_I (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_A
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_A
$LN5@TEST_PMC_A:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_A:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG93847
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93848
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 48   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_I (%d.%d)", no, 2), (z_result = ep->PMC_Add_X_I(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Add_X_Iの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_A
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_A
$LN7@TEST_PMC_A:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_A:
	mov	edx, DWORD PTR _z_result$[ebp]
	push	edx
	push	OFFSET $SG93849
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93850
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 49   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_I (%d.%d)", no, 3), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_A
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_A
$LN9@TEST_PMC_A:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_PMC_A:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG93851
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93852
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 50   :     TEST_Assert(env, FormatTestLabel("PMC_Add_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	eax, DWORD PTR _desired_z_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_PMC_A
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_A
$LN11@TEST_PMC_A:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_PMC_A:
	push	OFFSET $SG93853
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG93854
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 51   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_A

; 52   :         ep->PMC_Dispose(z);

	mov	esi, esp
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_A:

; 53   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_A

; 54   :         ep->PMC_Dispose(x);

	mov	esi, esp
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_A:

; 55   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_PMC_A
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@TEST_PMC_A:
	DD	4
	DD	$LN17@TEST_PMC_A
$LN17@TEST_PMC_A:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_PMC_A
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_PMC_A
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_PMC_A
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_PMC_A
$LN16@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_PMC_A:
	DB	122					; 0000007aH
	DB	0
$LN13@TEST_PMC_A:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Add_X_I ENDP
_TEXT	ENDS
END
