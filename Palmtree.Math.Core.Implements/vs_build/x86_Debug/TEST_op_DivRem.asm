; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\TEST_op_DivRem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__1C66ECB2_pmc_debug@h DB 01H
__E0086EBB_test_op_divrem@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_DivRem_X_I
PUBLIC	_TEST_PMC_DivRem_X_L
PUBLIC	_TEST_PMC_DivRem_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG93932 DB	'PMC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93933 DB	'PMC_DivRem_X_I (%d.%d)', 00H
	ORG $+1
$SG93934 DB	'PMC_DivRem_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H
	DB	'R', 081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93935 DB	'PMC_DivRem_X_I (%d.%d)', 00H
	ORG $+1
$SG93937 DB	'PMC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93938 DB	'PMC_DivRem_X_I (%d.%d)', 00H
	ORG $+1
$SG93939 DB	08fH, 0a4H, 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H, 0eaH
	DB	092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H, 00H
	ORG $+1
$SG93940 DB	'PMC_DivRem_X_I (%d.%d)', 00H
	ORG $+1
$SG93941 DB	08fH, 0e8H, 097H, ']', 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H
	DB	0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H, 00H
	ORG $+3
$SG93942 DB	'PMC_DivRem_X_I (%d.%d)', 00H
	ORG $+1
$SG93974 DB	'PMC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93975 DB	'PMC_DivRem_X_L (%d.%d)', 00H
	ORG $+1
$SG93976 DB	'PMC_DivRem_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H
	DB	'R', 081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93977 DB	'PMC_DivRem_X_L (%d.%d)', 00H
	ORG $+1
$SG93979 DB	'PMC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG93980 DB	'PMC_DivRem_X_L (%d.%d)', 00H
	ORG $+1
$SG93981 DB	08fH, 0a4H, 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H, 0eaH
	DB	092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H, 00H
	ORG $+1
$SG93982 DB	'PMC_DivRem_X_L (%d.%d)', 00H
	ORG $+1
$SG93983 DB	08fH, 0e8H, 097H, ']', 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H
	DB	0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H, 00H
	ORG $+3
$SG93984 DB	'PMC_DivRem_X_L (%d.%d)', 00H
	ORG $+1
$SG94024 DB	'PMC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG94025 DB	'PMC_DivRem_X_X (%d.%d)', 00H
	ORG $+1
$SG94026 DB	'PMC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG94027 DB	'PMC_DivRem_X_X (%d.%d)', 00H
	ORG $+1
$SG94028 DB	'PMC_DivRem_X_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H
	DB	'R', 081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG94029 DB	'PMC_DivRem_X_X (%d.%d)', 00H
	ORG $+1
$SG94031 DB	'PMC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG94032 DB	'PMC_DivRem_X_X (%d.%d)', 00H
	ORG $+1
$SG94033 DB	'PMC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+3
$SG94034 DB	'PMC_DivRem_X_X (%d.%d)', 00H
	ORG $+1
$SG94035 DB	08fH, 0a4H, 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H, 0eaH
	DB	092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H, 00H
	ORG $+1
$SG94036 DB	'PMC_DivRem_X_X (%d.%d)', 00H
	ORG $+1
$SG94037 DB	08fH, 0e8H, 097H, ']', 082H, 0ccH, 092H, 'l', 082H, 0aaH, 088H
	DB	0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H, 00H
	ORG $+3
$SG94038 DB	'PMC_DivRem_X_X (%d.%d)', 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 109  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __1C66ECB2_pmc_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 110  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 111  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 112  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 113  :     {
; 114  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 115  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 116  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 117  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 118  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 119  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 120  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 121  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
_TEXT	SEGMENT
tv212 = -648						; size = 4
tv197 = -644						; size = 4
tv182 = -640						; size = 4
tv163 = -636						; size = 4
tv143 = -632						; size = 4
tv92 = -628						; size = 4
tv74 = -624						; size = 4
_q_r_result$ = -620					; size = 4
_v_result$ = -616					; size = 4
_u_result$ = -612					; size = 4
_result$ = -608						; size = 4
_actual_r_buf_size$ = -600				; size = 4
_actual_r_buf$ = -588					; size = 256
_actual_q_buf_size$ = -324				; size = 4
_actual_q_buf$ = -312					; size = 256
_r$ = -48						; size = 4
_q$ = -36						; size = 4
_v$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_return_code$ = 36				; size = 4
_desired_q_buf$ = 40					; size = 4
_desired_q_buf_size$ = 44				; size = 4
_desired_r_buf$ = 48					; size = 4
_desired_r_buf_size$ = 52				; size = 4
_TEST_PMC_DivRem_X_X PROC

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 648				; 00000288H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-648]
	mov	ecx, 162				; 000000a2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E0086EBB_test_op_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 89   : 	HANDLE u;
; 90   : 	HANDLE v;
; 91   : 	HANDLE q;
; 92   : 	HANDLE r;
; 93   : 	unsigned char actual_q_buf[256];
; 94   : 	size_t actual_q_buf_size;
; 95   : 	unsigned char actual_r_buf[256];
; 96   : 	size_t actual_r_buf_size;
; 97   : 	PMC_STATUS_CODE result;
; 98   : 	PMC_STATUS_CODE u_result;
; 99   : 	PMC_STATUS_CODE v_result;
; 100  : 	PMC_STATUS_CODE q_r_result;
; 101  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_D
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_D
$LN7@TEST_PMC_D:
	mov	DWORD PTR tv74[ebp], 0
$LN8@TEST_PMC_D:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET $SG94024
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94025
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 102  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 2), (v_result = ep->PMC_From_B(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_D
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_D
$LN9@TEST_PMC_D:
	mov	DWORD PTR tv92[ebp], 0
$LN10@TEST_PMC_D:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94026
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94027
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 103  : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 3), (q_r_result = ep->PMC_DivRem_X_X(u, v, &q, &r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Xの復帰コードが期待通りではない(%d)", q_r_result));

	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	lea	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _q_r_result$[ebp], eax
	mov	eax, DWORD PTR _q_r_result$[ebp]
	cmp	eax, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN11@TEST_PMC_D
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_D
$LN11@TEST_PMC_D:
	mov	DWORD PTR tv143[ebp], 0
$LN12@TEST_PMC_D:
	mov	ecx, DWORD PTR _q_r_result$[ebp]
	push	ecx
	push	OFFSET $SG94028
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv143[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94029
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 104  : 	if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	$LN2@TEST_PMC_D

; 105  : 	{
; 106  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 4), (result = ep->PMC_To_X_B(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	edx, DWORD PTR _actual_q_buf_size$[ebp]
	push	edx
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_q_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN13@TEST_PMC_D
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN14@TEST_PMC_D
$LN13@TEST_PMC_D:
	mov	DWORD PTR tv163[ebp], 0
$LN14@TEST_PMC_D:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET $SG94031
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv163[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94032
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 107  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 5), (result = ep->PMC_To_X_B(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	edx, DWORD PTR _actual_r_buf_size$[ebp]
	push	edx
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN15@TEST_PMC_D
	mov	DWORD PTR tv182[ebp], 1
	jmp	SHORT $LN16@TEST_PMC_D
$LN15@TEST_PMC_D:
	mov	DWORD PTR tv182[ebp], 0
$LN16@TEST_PMC_D:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET $SG94033
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv182[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94034
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 108  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 6), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	edx, DWORD PTR _desired_q_buf_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _desired_q_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _actual_q_buf_size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _actual_q_buf$[ebp]
	push	edx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN17@TEST_PMC_D
	mov	DWORD PTR tv197[ebp], 1
	jmp	SHORT $LN18@TEST_PMC_D
$LN17@TEST_PMC_D:
	mov	DWORD PTR tv197[ebp], 0
$LN18@TEST_PMC_D:
	push	OFFSET $SG94035
	mov	eax, DWORD PTR tv197[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94036
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 109  : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_X (%d.%d)", no, 7), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, "剰余の値が一致しない");

	mov	eax, DWORD PTR _desired_r_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_r_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN19@TEST_PMC_D
	mov	DWORD PTR tv212[ebp], 1
	jmp	SHORT $LN20@TEST_PMC_D
$LN19@TEST_PMC_D:
	mov	DWORD PTR tv212[ebp], 0
$LN20@TEST_PMC_D:
	push	OFFSET $SG94037
	mov	ecx, DWORD PTR tv212[ebp]
	push	ecx
	push	7
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94038
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_D:

; 110  : 	}
; 111  : 	if (q_r_result == PMC_STATUS_OK)

	cmp	DWORD PTR _q_r_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 112  : 	{
; 113  : 		ep->PMC_Dispose(q);

	mov	esi, esp
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  : 		ep->PMC_Dispose(r);

	mov	esi, esp
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_D:

; 115  : 	}
; 116  : 	if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_D

; 117  : 		ep->PMC_Dispose(v);

	mov	esi, esp
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@TEST_PMC_D:

; 118  : 	if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_D

; 119  : 		ep->PMC_Dispose(u);

	mov	esi, esp
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_D:

; 120  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@TEST_PMC_D
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 648				; 00000288H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN30@TEST_PMC_D:
	DD	8
	DD	$LN29@TEST_PMC_D
$LN29@TEST_PMC_D:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN21@TEST_PMC_D
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN22@TEST_PMC_D
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN23@TEST_PMC_D
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN24@TEST_PMC_D
	DD	-312					; fffffec8H
	DD	256					; 00000100H
	DD	$LN25@TEST_PMC_D
	DD	-324					; fffffebcH
	DD	4
	DD	$LN26@TEST_PMC_D
	DD	-588					; fffffdb4H
	DD	256					; 00000100H
	DD	$LN27@TEST_PMC_D
	DD	-600					; fffffda8H
	DD	4
	DD	$LN28@TEST_PMC_D
$LN28@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN27@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN26@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN25@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN24@TEST_PMC_D:
	DB	114					; 00000072H
	DB	0
$LN23@TEST_PMC_D:
	DB	113					; 00000071H
	DB	0
$LN22@TEST_PMC_D:
	DB	118					; 00000076H
	DB	0
$LN21@TEST_PMC_D:
	DB	117					; 00000075H
	DB	0
_TEST_PMC_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
_TEXT	SEGMENT
tv170 = -352						; size = 4
tv160 = -348						; size = 4
tv145 = -344						; size = 4
tv93 = -340						; size = 4
tv74 = -336						; size = 4
_q_result$ = -332					; size = 4
_u_result$ = -328					; size = 4
_result$ = -324						; size = 4
_actual_r$ = -316					; size = 8
_actual_q_buf_size$ = -300				; size = 4
_actual_q_buf$ = -288					; size = 256
_q$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v$ = 28						; size = 8
_desired_return_code$ = 36				; size = 4
_desired_q_buf$ = 40					; size = 4
_desired_q_buf_size$ = 44				; size = 4
_desired_r$ = 48					; size = 8
_TEST_PMC_DivRem_X_L PROC

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E0086EBB_test_op_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 65   : 	HANDLE u;
; 66   : 	HANDLE q;
; 67   : 	unsigned char actual_q_buf[256];
; 68   : 	size_t actual_q_buf_size;
; 69   : 	unsigned __int64 actual_r;
; 70   : 	PMC_STATUS_CODE result;
; 71   : 	PMC_STATUS_CODE u_result;
; 72   : 	PMC_STATUS_CODE q_result;
; 73   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_D
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_D
$LN6@TEST_PMC_D:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_D:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET $SG93974
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93975
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 74   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 2), (q_result = ep->PMC_DivRem_X_L(u, v, &q, &actual_r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Lの復帰コードが期待通りではない(%d)", q_result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r$[ebp]
	push	eax
	lea	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _q_result$[ebp], eax
	mov	ecx, DWORD PTR _q_result$[ebp]
	cmp	ecx, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN8@TEST_PMC_D
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_D
$LN8@TEST_PMC_D:
	mov	DWORD PTR tv93[ebp], 0
$LN9@TEST_PMC_D:
	mov	edx, DWORD PTR _q_result$[ebp]
	push	edx
	push	OFFSET $SG93976
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv93[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93977
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 75   : 	if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	$LN2@TEST_PMC_D

; 76   : 	{
; 77   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 3), (result = ep->PMC_To_X_B(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_q_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_q_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_D
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_D
$LN10@TEST_PMC_D:
	mov	DWORD PTR tv145[ebp], 0
$LN11@TEST_PMC_D:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG93979
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv145[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93980
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 78   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	eax, DWORD PTR _desired_q_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_q_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_q_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_q_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_D
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_D
$LN12@TEST_PMC_D:
	mov	DWORD PTR tv160[ebp], 0
$LN13@TEST_PMC_D:
	push	OFFSET $SG93981
	mov	ecx, DWORD PTR tv160[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG93982
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 79   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_L (%d.%d)", no, 5), actual_r == desired_r, "剰余の値が一致しない");

	mov	ecx, DWORD PTR _actual_r$[ebp]
	cmp	ecx, DWORD PTR _desired_r$[ebp]
	jne	SHORT $LN14@TEST_PMC_D
	mov	edx, DWORD PTR _actual_r$[ebp+4]
	cmp	edx, DWORD PTR _desired_r$[ebp+4]
	jne	SHORT $LN14@TEST_PMC_D
	mov	DWORD PTR tv170[ebp], 1
	jmp	SHORT $LN15@TEST_PMC_D
$LN14@TEST_PMC_D:
	mov	DWORD PTR tv170[ebp], 0
$LN15@TEST_PMC_D:
	push	OFFSET $SG93983
	mov	eax, DWORD PTR tv170[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93984
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_D:

; 80   : 	}
; 81   : 	if (q_result == PMC_STATUS_OK)

	cmp	DWORD PTR _q_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 82   : 		ep->PMC_Dispose(q);

	mov	esi, esp
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_D:

; 83   : 	if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_D

; 84   : 		ep->PMC_Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_D:

; 85   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@TEST_PMC_D
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@TEST_PMC_D:
	DD	5
	DD	$LN21@TEST_PMC_D
$LN21@TEST_PMC_D:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@TEST_PMC_D
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@TEST_PMC_D
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN18@TEST_PMC_D
	DD	-300					; fffffed4H
	DD	4
	DD	$LN19@TEST_PMC_D
	DD	-316					; fffffec4H
	DD	8
	DD	$LN20@TEST_PMC_D
$LN20@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
$LN19@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN18@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN17@TEST_PMC_D:
	DB	113					; 00000071H
	DB	0
$LN16@TEST_PMC_D:
	DB	117					; 00000075H
	DB	0
_TEST_PMC_DivRem_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_divrem.c
_TEXT	SEGMENT
tv170 = -348						; size = 4
tv160 = -344						; size = 4
tv145 = -340						; size = 4
tv93 = -336						; size = 4
tv74 = -332						; size = 4
_q_result$ = -328					; size = 4
_u_result$ = -324					; size = 4
_result$ = -320						; size = 4
_actual_r$ = -312					; size = 4
_actual_q_buf_size$ = -300				; size = 4
_actual_q_buf$ = -288					; size = 256
_q$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v$ = 28						; size = 4
_desired_return_code$ = 32				; size = 4
_desired_q_buf$ = 36					; size = 4
_desired_q_buf_size$ = 40				; size = 4
_desired_r$ = 44					; size = 4
_TEST_PMC_DivRem_X_I PROC

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E0086EBB_test_op_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 41   : 	HANDLE u;
; 42   : 	HANDLE q;
; 43   : 	unsigned char actual_q_buf[256];
; 44   : 	size_t actual_q_buf_size;
; 45   : 	unsigned __int32 actual_r;
; 46   : 	PMC_STATUS_CODE result;
; 47   : 	PMC_STATUS_CODE u_result;
; 48   : 	PMC_STATUS_CODE q_result;
; 49   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 1), (u_result = ep->PMC_From_B(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_D
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_D
$LN6@TEST_PMC_D:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_D:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET $SG93932
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93933
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 50   : 	TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 2), (q_result = ep->PMC_DivRem_X_I(u, v, &q, &actual_r)) == desired_return_code, FormatTestMesssage("PMC_DivRem_X_Iの復帰コードが期待通りではない(%d)", q_result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r$[ebp]
	push	eax
	lea	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _q_result$[ebp], eax
	mov	eax, DWORD PTR _q_result$[ebp]
	cmp	eax, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN8@TEST_PMC_D
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_D
$LN8@TEST_PMC_D:
	mov	DWORD PTR tv93[ebp], 0
$LN9@TEST_PMC_D:
	mov	ecx, DWORD PTR _q_result$[ebp]
	push	ecx
	push	OFFSET $SG93934
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv93[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG93935
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 51   : 	if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	$LN2@TEST_PMC_D

; 52   : 	{
; 53   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 3), (result = ep->PMC_To_X_B(q, actual_q_buf, sizeof(actual_q_buf), &actual_q_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	edx, DWORD PTR _actual_q_buf_size$[ebp]
	push	edx
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_q_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_D
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_D
$LN10@TEST_PMC_D:
	mov	DWORD PTR tv145[ebp], 0
$LN11@TEST_PMC_D:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET $SG93937
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv145[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG93938
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 54   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q_buf, actual_q_buf_size, desired_q_buf, desired_q_buf_size) == 0, "商の値が一致しない");

	mov	edx, DWORD PTR _desired_q_buf_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _desired_q_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _actual_q_buf_size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _actual_q_buf$[ebp]
	push	edx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_D
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_D
$LN12@TEST_PMC_D:
	mov	DWORD PTR tv160[ebp], 0
$LN13@TEST_PMC_D:
	push	OFFSET $SG93939
	mov	eax, DWORD PTR tv160[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG93940
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 55   : 		TEST_Assert(env, FormatTestLabel("PMC_DivRem_X_I (%d.%d)", no, 5), actual_r == desired_r, "剰余の値が一致しない");

	mov	eax, DWORD PTR _actual_r$[ebp]
	cmp	eax, DWORD PTR _desired_r$[ebp]
	jne	SHORT $LN14@TEST_PMC_D
	mov	DWORD PTR tv170[ebp], 1
	jmp	SHORT $LN15@TEST_PMC_D
$LN14@TEST_PMC_D:
	mov	DWORD PTR tv170[ebp], 0
$LN15@TEST_PMC_D:
	push	OFFSET $SG93941
	mov	ecx, DWORD PTR tv170[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG93942
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_D:

; 56   : 	}
; 57   : 	if (q_result == PMC_STATUS_OK)

	cmp	DWORD PTR _q_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_D

; 58   : 		ep->PMC_Dispose(q);

	mov	esi, esp
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_D:

; 59   : 	if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_D

; 60   : 		ep->PMC_Dispose(u);

	mov	esi, esp
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_D:

; 61   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@TEST_PMC_D
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@TEST_PMC_D:
	DD	5
	DD	$LN21@TEST_PMC_D
$LN21@TEST_PMC_D:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@TEST_PMC_D
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@TEST_PMC_D
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN18@TEST_PMC_D
	DD	-300					; fffffed4H
	DD	4
	DD	$LN19@TEST_PMC_D
	DD	-312					; fffffec8H
	DD	4
	DD	$LN20@TEST_PMC_D
$LN20@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
$LN19@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN18@TEST_PMC_D:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN17@TEST_PMC_D:
	DB	113					; 00000071H
	DB	0
$LN16@TEST_PMC_D:
	DB	117					; 00000075H
	DB	0
_TEST_PMC_DivRem_X_I ENDP
_TEXT	ENDS
END
