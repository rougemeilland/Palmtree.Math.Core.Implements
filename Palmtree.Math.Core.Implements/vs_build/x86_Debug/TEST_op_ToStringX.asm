; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\TEST_op_ToStringX.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__1C66ECB2_pmc_debug@h DB 01H
__78990820_test_op_tostringx@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_ToStringX
PUBLIC	__JustMyCode_Default
EXTRN	__imp__lstrcmpW@8:PROC
EXTRN	__imp__lstrcpyA@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?actual_str_buffer@?1??TEST_PMC_ToStringX@@9@9 DW 01000H DUP (?) ; `TEST_PMC_ToStringX'::`2'::actual_str_buffer
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94508 DB	',', 00H, 00H, 00H
$SG94509 DB	'3', 00H
	ORG $+2
$SG94510 DB	'.', 00H, 00H, 00H
$SG94511 DB	'+', 00H, 00H, 00H
$SG94512 DB	'-', 00H, 00H, 00H
$SG94513 DB	'PMC_FromByteArray', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H
	DB	'R', 081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
$SG94514 DB	'ToStringX (%d.%d)', 00H
	ORG $+2
$SG94515 DB	'PMC_ToString', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H
	ORG $+1
$SG94516 DB	'ToStringX (%d.%d)', 00H
	ORG $+2
$SG94517 DB	083H, 'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H
	DB	'e', 082H, 0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H
	DB	082H, 0a2H, 00H
	ORG $+3
$SG94518 DB	'ToStringX (%d.%d)', 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_tostringx.c
_TEXT	SEGMENT
tv150 = -84						; size = 4
tv137 = -80						; size = 4
tv84 = -76						; size = 4
_opt$ = -68						; size = 40
_x_result$ = -24					; size = 4
_result$ = -20						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_buf$ = 20						; size = 4
_buf_size$ = 24						; size = 4
_format_spec$ = 28					; size = 1
_min_width$ = 32					; size = 4
_desired_str$ = 36					; size = 4
_TEST_PMC_ToStringX PROC

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __78990820_test_op_tostringx@c
	call	@__CheckForDebuggerJustMyCode@4

; 41   :     HANDLE x;
; 42   :     static wchar_t actual_str_buffer[4096];
; 43   :     PMC_STATUS_CODE result;
; 44   :     PMC_STATUS_CODE x_result;
; 45   :     PMC_NUMBER_FORMAT_OPTION opt;
; 46   :     lstrcpyW(opt.GroupSeparator, L",");

	mov	esi, esp
	push	OFFSET $SG94508
	lea	eax, DWORD PTR _opt$[ebp+4]
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 47   :     lstrcpy(opt.GroupSizes, "3");

	mov	esi, esp
	push	OFFSET $SG94509
	lea	ecx, DWORD PTR _opt$[ebp+28]
	push	ecx
	call	DWORD PTR __imp__lstrcpyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 48   :     lstrcpyW(opt.DecimalSeparator, L".");

	mov	esi, esp
	push	OFFSET $SG94510
	lea	edx, DWORD PTR _opt$[ebp+10]
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   :     opt.DecimalDigits = 2;

	mov	DWORD PTR _opt$[ebp], 2

; 50   :     lstrcpyW(opt.PositiveSign, L"+");

	mov	esi, esp
	push	OFFSET $SG94511
	lea	eax, DWORD PTR _opt$[ebp+16]
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 51   :     lstrcpyW(opt.NegativeSign, L"-");

	mov	esi, esp
	push	OFFSET $SG94512
	lea	ecx, DWORD PTR _opt$[ebp+22]
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   :     TEST_Assert(env, FormatTestLabel("ToStringX (%d.%d)", no, 1), (x_result = ep->PMC_FromByteArray(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_T
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_T
$LN4@TEST_PMC_T:
	mov	DWORD PTR tv84[ebp], 0
$LN5@TEST_PMC_T:
	mov	ecx, DWORD PTR _x_result$[ebp]
	push	ecx
	push	OFFSET $SG94513
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv84[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94514
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 53   :     TEST_Assert(env, FormatTestLabel("ToStringX (%d.%d)", no, 2), (result = ep->PMC_ToString(x, actual_str_buffer, sizeof(actual_str_buffer), format_spec, min_width, &opt)) == PMC_STATUS_OK, FormatTestMesssage("PMC_ToStringの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	edx, DWORD PTR _opt$[ebp]
	push	edx
	mov	eax, DWORD PTR _min_width$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _format_spec$[ebp]
	push	ecx
	push	8192					; 00002000H
	push	OFFSET ?actual_str_buffer@?1??TEST_PMC_ToStringX@@9@9
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_T
	mov	DWORD PTR tv137[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_T
$LN6@TEST_PMC_T:
	mov	DWORD PTR tv137[ebp], 0
$LN7@TEST_PMC_T:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG94515
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv137[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94516
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 54   :     TEST_Assert(env, FormatTestLabel("ToStringX (%d.%d)", no, 3), lstrcmpW(actual_str_buffer, desired_str) == 0, "データの内容が一致しない");

	mov	esi, esp
	mov	eax, DWORD PTR _desired_str$[ebp]
	push	eax
	push	OFFSET ?actual_str_buffer@?1??TEST_PMC_ToStringX@@9@9
	call	DWORD PTR __imp__lstrcmpW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN8@TEST_PMC_T
	mov	DWORD PTR tv150[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_T
$LN8@TEST_PMC_T:
	mov	DWORD PTR tv150[ebp], 0
$LN9@TEST_PMC_T:
	push	OFFSET $SG94517
	mov	ecx, DWORD PTR tv150[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94518
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 55   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_T

; 56   :         ep->PMC_Dispose(x);

	mov	esi, esp
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_T:

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_T
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@TEST_PMC_T:
	DD	2
	DD	$LN12@TEST_PMC_T
$LN12@TEST_PMC_T:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN10@TEST_PMC_T
	DD	-68					; ffffffbcH
	DD	40					; 00000028H
	DD	$LN11@TEST_PMC_T
$LN11@TEST_PMC_T:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	0
$LN10@TEST_PMC_T:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_ToStringX ENDP
_TEXT	ENDS
END
