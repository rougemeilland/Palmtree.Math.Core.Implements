; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\memory.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_number_zero:BYTE:01cH
COMM	_number_one:BYTE:01cH
COMM	_hLocalHeap:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__F13F011C_memory@c DB 01H
msvcjmc	ENDS
PUBLIC	_AllocateHeapArea
PUBLIC	_DeallocateHeapArea
PUBLIC	_AllocateBlock
PUBLIC	_DeallocateBlock
PUBLIC	_CheckBlockLight
PUBLIC	_AttatchNumber
PUBLIC	_AllocateNumber
PUBLIC	_DetatchNumber
PUBLIC	_DeallocateNumber
PUBLIC	_CommitNumber
PUBLIC	_CheckNumber
PUBLIC	_DuplicateNumber
PUBLIC	_Initialize_Memory
PUBLIC	_PMC_Dispose@4
PUBLIC	__JustMyCode_Default
EXTRN	__imp__HeapCreate@12:PROC
EXTRN	__imp__HeapDestroy@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_configuration_info:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_bit_count$ = -4					; size = 4
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_GetTrailingZeroBitCount PROC

; 450  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 451  :     __UNIT_TYPE bit_count = 0;

	mov	DWORD PTR _bit_count$[ebp], 0
$LN2@GetTrailin:

; 452  :     while (word_count > 0)

	cmp	DWORD PTR _word_count$[ebp], 0
	jbe	SHORT $LN3@GetTrailin

; 453  :     {
; 454  :         --word_count;

	mov	eax, DWORD PTR _word_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _word_count$[ebp], eax

; 455  :         if (*p != 0)

	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@GetTrailin

; 456  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__TZCNT_ALT_UNIT
	add	esp, 4
	add	eax, DWORD PTR _bit_count$[ebp]
	jmp	SHORT $LN1@GetTrailin
$LN4@GetTrailin:

; 457  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	mov	ecx, DWORD PTR _bit_count$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _bit_count$[ebp], ecx

; 458  :         ++p;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx

; 459  :     }

	jmp	SHORT $LN2@GetTrailin
$LN3@GetTrailin:

; 460  :     // このルートには到達しないはず
; 461  :     return (0);

	xor	eax, eax
$LN1@GetTrailin:

; 462  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetTrailingZeroBitCount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_effective_word_count$ = 16				; size = 4
_GetEffectiveBitLength PROC

; 428  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 429  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN4@GetEffecti

; 430  :     {
; 431  :         *effective_word_count = 0;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [eax], 0

; 432  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GetEffecti
$LN4@GetEffecti:

; 433  :     }
; 434  :     p += word_count;

	mov	ecx, DWORD PTR _word_count$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _p$[ebp], eax
$LN2@GetEffecti:

; 435  :     while (word_count != 0)

	cmp	DWORD PTR _word_count$[ebp], 0
	je	SHORT $LN3@GetEffecti

; 436  :     {
; 437  :         --p;

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 438  :         if (*p != 0)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@GetEffecti

; 439  :         {
; 440  :             *effective_word_count = word_count;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	ecx, DWORD PTR _word_count$[ebp]
	mov	DWORD PTR [eax], ecx

; 441  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	esi, DWORD PTR _word_count$[ebp]
	shl	esi, 5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	sub	esi, eax
	mov	eax, esi
	jmp	SHORT $LN1@GetEffecti
$LN5@GetEffecti:

; 442  :         }
; 443  :         --word_count;

	mov	ecx, DWORD PTR _word_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _word_count$[ebp], ecx

; 444  :     }

	jmp	SHORT $LN2@GetEffecti
$LN3@GetEffecti:

; 445  :     *effective_word_count = 0;

	mov	edx, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [edx], 0

; 446  :     return (0);

	xor	eax, eax
$LN1@GetEffecti:

; 447  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_GetEffectiveBitLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CleanUpNumber PROC

; 381  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 382  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@CleanUpNum

; 383  :     {
; 384  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 385  :         p->BLOCK = NULL;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN1@CleanUpNum:

; 386  :     }
; 387  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_block$1 = -16						; size = 4
_word_count$2 = -8					; size = 4
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_InitializeNumber PROC

; 358  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 359  :     ClearNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ClearNumberHeader
	add	esp, 4

; 360  :     if (bit_count > 0)

	cmp	DWORD PTR _bit_count$[ebp], 0
	jbe	SHORT $LN2@Initialize

; 361  :     {
; 362  :         __UNIT_TYPE word_count;
; 363  :         __UNIT_TYPE* block = AllocateBlock(bit_count, &word_count, light_check_code);

	mov	ecx, DWORD PTR _light_check_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _word_count$2[ebp]
	push	edx
	mov	eax, DWORD PTR _bit_count$[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$1[ebp], eax

; 364  :         if (block == NULL)

	cmp	DWORD PTR _block$1[ebp], 0
	jne	SHORT $LN4@Initialize

; 365  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN1@Initialize
$LN4@Initialize:

; 366  :         p->UNIT_BIT_COUNT = bit_count;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _bit_count$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 367  :         p->BLOCK_COUNT = word_count;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _word_count$2[ebp]
	mov	DWORD PTR [eax+20], ecx

; 368  :         p->BLOCK = block;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _block$1[ebp]
	mov	DWORD PTR [edx+24], eax

; 369  :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 370  :     else
; 371  :     {
; 372  :         // bit_count に 0 が与えられるのは、数値が 0 の場合。
; 373  :         p->UNIT_BIT_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 374  :         p->BLOCK_COUNT = 0;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], 0

; 375  :         p->BLOCK = NULL;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN3@Initialize:

; 376  :     }
; 377  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Initialize:

; 378  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@Initialize:
	DD	1
	DD	$LN7@Initialize
$LN7@Initialize:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@Initialize
$LN6@Initialize:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
___p$1 = -4						; size = 4
_p$ = 8							; size = 4
_FillNumberHeader PROC

; 317  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 318  : #ifdef _M_IX64
; 319  :     if (sizeof(*p) == sizeof(_UINT64_T) * 7)
; 320  :     {
; 321  :         _UINT64_T* __p = (_UINT64_T*)p;
; 322  :         __p[0] = DEFAULT_MEMORY_DATA;
; 323  :         __p[1] = DEFAULT_MEMORY_DATA;
; 324  :         __p[2] = DEFAULT_MEMORY_DATA;
; 325  :         __p[3] = DEFAULT_MEMORY_DATA;
; 326  :         __p[4] = DEFAULT_MEMORY_DATA;
; 327  :         __p[5] = DEFAULT_MEMORY_DATA;
; 328  :         __p[6] = DEFAULT_MEMORY_DATA;
; 329  :     }
; 330  :     else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 331  :         _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));
; 332  :     else
; 333  :     {
; 334  : #endif
; 335  :         if (sizeof(*p) == sizeof(_UINT32_T) * 7)

	mov	eax, 1
	test	eax, eax
	je	$LN2@FillNumber

; 336  :         {
; 337  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], ecx

; 338  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 339  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], -858993460		; ccccccccH

; 340  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 341  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 342  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 343  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 344  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 345  :         }

	jmp	SHORT $LN1@FillNumber
$LN2@FillNumber:

; 346  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@FillNumber

; 347  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));

	push	7
	push	-858993460				; ccccccccH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__FILL_MEMORY_32
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN4@FillNumber:

; 348  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN6@FillNumber

; 349  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));

	push	14					; 0000000eH
	push	52428					; 0000ccccH
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN6@FillNumber:

; 350  :         else
; 351  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));

	push	28					; 0000001cH
	push	204					; 000000ccH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__FILL_MEMORY_BYTE
	add	esp, 12					; 0000000cH
$LN1@FillNumber:

; 352  : #ifdef _M_IX64
; 353  :     }
; 354  : #endif
; 355  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
___p$1 = -4						; size = 4
_p$ = 8							; size = 4
_ClearNumberHeader PROC

; 276  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 277  : #ifdef _M_IX64
; 278  :     if (sizeof(*p) == sizeof(_UINT64_T) * 7)
; 279  :     {
; 280  :         _UINT64_T* __p = (_UINT64_T*)p;
; 281  :         __p[0] = 0;
; 282  :         __p[1] = 0;
; 283  :         __p[2] = 0;
; 284  :         __p[3] = 0;
; 285  :         __p[4] = 0;
; 286  :         __p[5] = 0;
; 287  :         __p[6] = 0;
; 288  :     }
; 289  :     else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 290  :         _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));
; 291  :     else
; 292  :     {
; 293  : #endif
; 294  :         if (sizeof(*p) == sizeof(_UINT32_T) * 7)

	mov	eax, 1
	test	eax, eax
	je	$LN2@ClearNumbe

; 295  :         {
; 296  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], ecx

; 297  :             __p[0] = 0;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 298  :             __p[1] = 0;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], 0

; 299  :             __p[2] = 0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 300  :             __p[3] = 0;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 301  :             __p[4] = 0;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 302  :             __p[5] = 0;

	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 303  :             __p[6] = 0;

	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 304  :         }

	jmp	SHORT $LN1@ClearNumbe
$LN2@ClearNumbe:

; 305  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@ClearNumbe

; 306  :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));

	push	7
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__ZERO_MEMORY_32
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN4@ClearNumbe:

; 307  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN6@ClearNumbe

; 308  :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));

	push	14					; 0000000eH
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__ZERO_MEMORY_16
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN6@ClearNumbe:

; 309  :         else
; 310  :             _ZERO_MEMORY_BYTE(p, sizeof(*p));

	push	28					; 0000001cH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__ZERO_MEMORY_BYTE
	add	esp, 8
$LN1@ClearNumbe:

; 311  : #ifdef _M_IX64
; 312  :     }
; 313  : #endif
; 314  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_code_actual$ = -12					; size = 4
_code_desired$ = -8					; size = 4
_words$ = -4						; size = 4
_buffer$ = 8						; size = 4
_CheckBlock PROC

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 240  : #ifdef _DEBUG
; 241  :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@CheckBlock

; 242  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
$LN2@CheckBlock:

; 243  :     --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 244  :     __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$[ebp], ecx

; 245  :     __UNIT_TYPE code_desired = buffer[words + 1];

	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _code_desired$[ebp], ecx

; 246  :     __UNIT_TYPE code_actual = CalculateCheckCode(&buffer[1], words);

	mov	edx, DWORD PTR _words$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _code_actual$[ebp], eax

; 247  :     if (code_actual == code_desired)

	mov	ecx, DWORD PTR _code_actual$[ebp]
	cmp	ecx, DWORD PTR _code_desired$[ebp]
	jne	SHORT $LN3@CheckBlock

; 248  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
	jmp	SHORT $LN1@CheckBlock
$LN3@CheckBlock:

; 249  :     else
; 250  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
$LN1@CheckBlock:

; 251  : #else
; 252  :     return (PMC_STATUS_OK);
; 253  : #endif
; 254  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_code$1 = -8						; size = 4
_words$2 = -4						; size = 4
_buffer$ = 8						; size = 4
_CommitBlock PROC

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 224  :     if (buffer != NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN1@CommitBloc

; 225  :     {
; 226  :         --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 227  :         __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$2[ebp], ecx

; 228  : #ifdef _DEBUG
; 229  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);

	mov	edx, DWORD PTR _words$2[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _code$1[ebp], eax

; 230  : #else
; 231  :         __UNIT_TYPE code = 0;
; 232  : #endif
; 233  :         buffer[words + 1] = code;

	mov	ecx, DWORD PTR _words$2[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR _code$1[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax
$LN1@CommitBloc:

; 234  :     }
; 235  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CommitBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_code$ = -4						; size = 4
_p$ = 8							; size = 4
_words$ = 12						; size = 4
_CalculateCheckCode PROC

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 59   : 	__UNIT_TYPE code = CHECK_CODE_INIT;

	mov	DWORD PTR _code$[ebp], -2071690108	; 84848484H

; 60   : 	
; 61   :     __UNIT_TYPE count = words >> 5;

	mov	eax, DWORD PTR _words$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@CalculateC:

; 62   : 	while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN3@CalculateC

; 63   : 	{
; 64   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 65   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 66   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 67   :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 68   :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 69   :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 70   :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 71   :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 72   :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 73   :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 74   :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 75   :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 76   :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 77   :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 78   :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 79   :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 80   :         code = _ROTATE_L_UNIT(code, 3) ^ p[16];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 81   :         code = _ROTATE_L_UNIT(code, 3) ^ p[17];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 82   :         code = _ROTATE_L_UNIT(code, 3) ^ p[18];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 18
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 83   :         code = _ROTATE_L_UNIT(code, 3) ^ p[19];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 84   :         code = _ROTATE_L_UNIT(code, 3) ^ p[20];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 85   :         code = _ROTATE_L_UNIT(code, 3) ^ p[21];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 21
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 86   :         code = _ROTATE_L_UNIT(code, 3) ^ p[22];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 87   :         code = _ROTATE_L_UNIT(code, 3) ^ p[23];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 88   :         code = _ROTATE_L_UNIT(code, 3) ^ p[24];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 24
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 89   :         code = _ROTATE_L_UNIT(code, 3) ^ p[25];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 90   :         code = _ROTATE_L_UNIT(code, 3) ^ p[26];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 91   :         code = _ROTATE_L_UNIT(code, 3) ^ p[27];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 27
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 92   :         code = _ROTATE_L_UNIT(code, 3) ^ p[28];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 93   :         code = _ROTATE_L_UNIT(code, 3) ^ p[29];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 94   :         code = _ROTATE_L_UNIT(code, 3) ^ p[30];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 30
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 95   :         code = _ROTATE_L_UNIT(code, 3) ^ p[31];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 96   :         p += 32;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _p$[ebp], edx

; 97   :         --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 98   :     }

	jmp	$LN2@CalculateC
$LN3@CalculateC:

; 99   : 
; 100  : 	if (words & 0x10)

	mov	ecx, DWORD PTR _words$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN4@CalculateC

; 101  : 	{
; 102  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 103  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 104  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 105  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 106  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 107  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 108  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 109  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 110  :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 111  :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 112  :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 113  :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 114  :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 115  :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 116  :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 117  :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 118  :         p += 16;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _p$[ebp], edx
$LN4@CalculateC:

; 119  :     }
; 120  : 
; 121  :     if (words & 0x8)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 8
	je	$LN5@CalculateC

; 122  :     {
; 123  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 124  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 125  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 126  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 127  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 128  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 129  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 130  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 131  :         p += 8;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _p$[ebp], edx
$LN5@CalculateC:

; 132  :     }
; 133  : 
; 134  :     if (words & 0x4)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 4
	je	$LN6@CalculateC

; 135  :     {
; 136  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 137  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 138  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 139  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 140  :         p += 4;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], edx
$LN6@CalculateC:

; 141  :     }
; 142  : 
; 143  :     if (words & 0x2)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 2
	je	SHORT $LN7@CalculateC

; 144  :     {
; 145  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 146  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 147  :         p += 2;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	mov	DWORD PTR _p$[ebp], eax
$LN7@CalculateC:

; 148  :     }
; 149  : 
; 150  :     if (words & 0x1)

	mov	ecx, DWORD PTR _words$[ebp]
	and	ecx, 1
	je	SHORT $LN8@CalculateC

; 151  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax
$LN8@CalculateC:

; 152  :     
; 153  :     return (code);

	mov	eax, DWORD PTR _code$[ebp]

; 154  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateCheckCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC

; 990  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 991  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@TZCNT_ALT_

; 992  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@TZCNT_ALT_
$LN2@TZCNT_ALT_:

; 993  : #ifdef _M_IX86
; 994  :     _UINT32_T pos;
; 995  : #ifdef _MSC_VER
; 996  :     _BitScanForward(&pos, x);

	bsf	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 997  : #elif defined(__GNUC__)
; 998  :     __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 999  : #else
; 1000 : #error unknown compiler
; 1001 : #endif
; 1002 : #elif defined(_M_X64)
; 1003 : #ifdef _MSC_VER
; 1004 :     _UINT32_T pos;
; 1005 :     _BitScanForward64(&pos, x);
; 1006 : #elif defined(__GNUC__)
; 1007 :     _UINT64_T pos;
; 1008 :     __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 1009 : #else
; 1010 : #error unknown compiler
; 1011 : #endif
; 1012 : #else
; 1013 : #error unknown platform
; 1014 : #endif
; 1015 :     return (pos);

	mov	eax, DWORD PTR _pos$[ebp]
$LN1@TZCNT_ALT_:

; 1016 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@TZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@TZCNT_ALT_:
	DD	1
	DD	$LN5@TZCNT_ALT_
$LN5@TZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@TZCNT_ALT_
$LN4@TZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 910  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 911  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 912  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 913  : #ifdef _M_IX86
; 914  :     _UINT32_T pos;
; 915  : #ifdef _MSC_VER
; 916  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 917  : #elif defined(__GNUC__)
; 918  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 919  : #else
; 920  : #error unknown compiler
; 921  : #endif
; 922  : #elif defined(_M_X64)
; 923  : #ifdef _MSC_VER
; 924  :     _UINT32_T pos;
; 925  :     _BitScanReverse64(&pos, x);
; 926  : #elif defined(__GNUC__)
; 927  :     _UINT64_T pos;
; 928  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 929  : #else
; 930  : #error unknown compiler
; 931  : #endif
; 932  : #else
; 933  : #error unknown platform
; 934  : #endif
; 935  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 936  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC

; 762  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 763  : #ifdef _M_IX86
; 764  :     return (_rotl(x, count));

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rol	eax, cl

; 765  : #elif defined(_M_X64)
; 766  :     return (_rotl64(x, count));
; 767  : #else
; 768  : #error unknown platform
; 769  : #endif
; 770  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 474  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 475  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 476  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_UNIT PROC

; 447  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 448  : #ifdef _M_IX86
; 449  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 450  : #elif defined(_M_X64)
; 451  :     __stosq(d, x, count);
; 452  : #else
; 453  : #error unknown platform
; 454  : #endif
; 455  : }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_32 PROC

; 435  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 436  :     __stosd(( unsigned long*)d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 437  : }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC

; 430  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 431  :     __stosw(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 432  : }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 1
_count$ = 16						; size = 4
__FILL_MEMORY_BYTE PROC

; 425  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 426  :     __stosb(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	al, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 427  : }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_32 PROC

; 385  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 386  :     __stosd((unsigned long*)d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 387  : }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_16 PROC

; 380  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 381  :     __stosw(d, 0, count);

	xor	eax, eax
	mov	edi, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 382  : }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC

; 375  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 376  :     __stosb(d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	al, al
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 377  : }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 347  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 348  : #ifdef _M_IX86
; 349  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 350  : #elif defined(_M_X64)
; 351  :     __movsq(d, s, count);
; 352  : #else
; 353  : #error unknown platform
; 354  : #endif
; 355  : }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_PMC_Dispose@4 PROC

; 539  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 540  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], eax

; 541  :     PMC_STATUS_CODE result = CheckNumber(np);

	mov	ecx, DWORD PTR _np$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax

; 542  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@PMC_Dispos

; 543  :         return;

	jmp	SHORT $LN1@PMC_Dispos
$LN2@PMC_Dispos:

; 544  :     DeallocateNumber(np);

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4
$LN1@PMC_Dispos:

; 545  :     return;
; 546  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_PMC_Dispose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_number_one_ok$ = -12					; size = 4
_number_zero_ok$ = -8					; size = 4
_result$ = -4						; size = 4
_feature$ = 8						; size = 4
_Initialize_Memory PROC

; 549  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 550  :     PMC_STATUS_CODE result = PMC_STATUS_OK;

	mov	DWORD PTR _result$[ebp], 0

; 551  : 
; 552  :     BOOL number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1

; 553  :     BOOL number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1

; 554  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 555  :     {
; 556  :         result = AttatchNumber(&number_zero, 0);

	push	0
	push	OFFSET _number_zero
	call	_AttatchNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 557  :         if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 558  :         {
; 559  :             CommitNumber(&number_zero);

	push	OFFSET _number_zero
	call	_CommitNumber
	add	esp, 4

; 560  :             number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1
$LN2@Initialize:

; 561  :         }
; 562  :     }
; 563  : 
; 564  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 565  :     {
; 566  :         result = AttatchNumber(&number_one, 1);

	push	1
	push	OFFSET _number_one
	call	_AttatchNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 567  :         if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 568  :         {
; 569  :             number_one.BLOCK[0] = 1;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _number_one+24
	mov	DWORD PTR [edx+ecx], 1

; 570  :             CommitNumber(&number_one);

	push	OFFSET _number_one
	call	_CommitNumber
	add	esp, 4

; 571  :             number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1
$LN4@Initialize:

; 572  :         }
; 573  :     }
; 574  : 
; 575  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@Initialize

; 576  :     {
; 577  :         if (number_zero_ok)

	cmp	DWORD PTR _number_zero_ok$[ebp], 0
	je	SHORT $LN7@Initialize

; 578  :             DetatchNumber(&number_zero);

	push	OFFSET _number_zero
	call	_DetatchNumber
	add	esp, 4
$LN7@Initialize:

; 579  :         if (number_one_ok)

	cmp	DWORD PTR _number_one_ok$[ebp], 0
	je	SHORT $LN6@Initialize

; 580  :             DetatchNumber(&number_one);

	push	OFFSET _number_one
	call	_DetatchNumber
	add	esp, 4
$LN6@Initialize:

; 581  :     }
; 582  : 
; 583  :     return (result);

	mov	eax, DWORD PTR _result$[ebp]

; 584  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_o$ = -16						; size = 4
_result$ = -8						; size = 4
_x_bit_count$ = -4					; size = 4
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_DuplicateNumber PROC

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 516  :     if (x->IS_STATIC)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	je	SHORT $LN2@DuplicateN

; 517  :     {
; 518  :         *op = x;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], eax

; 519  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN2@DuplicateN:

; 520  :     }
; 521  :     if (x->IS_ZERO)

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN3@DuplicateN

; 522  :     {
; 523  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 524  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN3@DuplicateN:

; 525  :     }
; 526  :     __UNIT_TYPE x_bit_count = x->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _x_bit_count$[ebp], edx

; 527  :     PMC_STATUS_CODE result;
; 528  :     NUMBER_HEADER* o;
; 529  :     if ((result = AllocateNumber(&o, x_bit_count, NULL)) != PMC_STATUS_OK)

	push	0
	mov	eax, DWORD PTR _x_bit_count$[ebp]
	push	eax
	lea	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@DuplicateN

; 530  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@DuplicateN
$LN4@DuplicateN:

; 531  :     _COPY_MEMORY_UNIT(o->BLOCK, x->BLOCK, _DIVIDE_CEILING_UNIT(x_bit_count, __UNIT_TYPE_BIT_COUNT));

	push	32					; 00000020H
	mov	edx, DWORD PTR _x_bit_count$[ebp]
	push	edx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 532  :     CommitNumber(o);

	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 533  :     *op = o;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], eax

; 534  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@DuplicateN:

; 535  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DuplicateN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@DuplicateN:
	DD	1
	DD	$LN7@DuplicateN
$LN7@DuplicateN:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN6@DuplicateN
$LN6@DuplicateN:
	DB	111					; 0000006fH
	DB	0
_DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_desired_hash_code$1 = -8				; size = 4
_result$2 = -4						; size = 4
_p$ = 8							; size = 4
_CheckNumber PROC

; 498  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 499  : #ifdef _DEBUG
; 500  :     if (!p->IS_ZERO)

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	jne	SHORT $LN2@CheckNumbe

; 501  :     {
; 502  :         PMC_STATUS_CODE result;
; 503  :         if ((result = CheckBlock(p->BLOCK)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CheckBlock
	add	esp, 4
	mov	DWORD PTR _result$2[ebp], eax
	cmp	DWORD PTR _result$2[ebp], 0
	je	SHORT $LN3@CheckNumbe

; 504  :             return (result);

	mov	eax, DWORD PTR _result$2[ebp]
	jmp	SHORT $LN1@CheckNumbe
$LN3@CheckNumbe:

; 505  :         __UNIT_TYPE desired_hash_code = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _desired_hash_code$1[ebp], eax

; 506  :         if (desired_hash_code != p->HASH_CODE)

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _desired_hash_code$1[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN2@CheckNumbe

; 507  :             return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN2@CheckNumbe:

; 508  :     }
; 509  : #endif
; 510  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CheckNumbe:

; 511  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
tv186 = -12						; size = 4
tv169 = -8						; size = 4
tv138 = -4						; size = 4
_p$ = 8							; size = 4
_CommitNumber PROC

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 466  :     CommitBlock(p->BLOCK);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_CommitBlock
	add	esp, 4

; 467  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_GetEffectiveBitLength
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 468  :     if (p->UNIT_BIT_COUNT <= 0)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+4], 0
	ja	SHORT $LN2@CommitNumb

; 469  :     {
; 470  :         p->HASH_CODE = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 0

; 471  :         p->IS_ZERO = TRUE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 2
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx

; 472  :         p->IS_ONE = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, -5					; fffffffbH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx

; 473  :         p->IS_EVEN = TRUE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx

; 474  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 475  :         p->IS_POWER_OF_TWO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, -17				; ffffffefH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 476  :     }

	jmp	$LN1@CommitNumb
$LN2@CommitNumb:

; 477  :     else if (p->UNIT_BIT_COUNT == 1)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	$LN4@CommitNumb

; 478  :     {
; 479  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 480  :         p->IS_ZERO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 481  :         p->IS_ONE = p->BLOCK[0] == 1; // 無条件でTRUEでも大丈夫だが念のため。

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	cmp	DWORD PTR [eax+edx], 1
	jne	SHORT $LN7@CommitNumb
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN8@CommitNumb
$LN7@CommitNumb:
	mov	DWORD PTR tv138[ebp], 0
$LN8@CommitNumb:
	mov	eax, DWORD PTR tv138[ebp]
	and	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, -5					; fffffffbH
	or	edx, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx

; 482  :         p->IS_EVEN = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, -9					; fffffff7H
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx

; 483  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 484  :         p->IS_POWER_OF_TWO = TRUE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 485  :     }

	jmp	$LN1@CommitNumb
$LN4@CommitNumb:

; 486  :     else
; 487  :     {
; 488  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_CalculateCheckCode
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 489  :         p->IS_ZERO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 490  :         p->IS_ONE = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, -5					; fffffffbH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 491  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	and	eax, 1
	jne	SHORT $LN9@CommitNumb
	mov	DWORD PTR tv169[ebp], 1
	jmp	SHORT $LN10@CommitNumb
$LN9@CommitNumb:
	mov	DWORD PTR tv169[ebp], 0
$LN10@CommitNumb:
	mov	ecx, DWORD PTR tv169[ebp]
	and	ecx, 1
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, -9					; fffffff7H
	or	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 492  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_GetTrailingZeroBitCount
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 493  :         p->IS_POWER_OF_TWO = p->TRAILING_ZERO_BITS_COUNT + 1 == p->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jne	SHORT $LN11@CommitNumb
	mov	DWORD PTR tv186[ebp], 1
	jmp	SHORT $LN12@CommitNumb
$LN11@CommitNumb:
	mov	DWORD PTR tv186[ebp], 0
$LN12@CommitNumb:
	mov	edx, DWORD PTR tv186[ebp]
	and	edx, 1
	shl	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -17				; ffffffefH
	or	ecx, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN1@CommitNumb:

; 494  :     }
; 495  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CommitNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DeallocateNumber PROC

; 419  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 420  :     if (p == NULL || p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Deallocate
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	je	SHORT $LN2@Deallocate
$LN3@Deallocate:

; 421  :         return;

	jmp	SHORT $LN1@Deallocate
$LN2@Deallocate:

; 422  :     CleanUpNumber(p);

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CleanUpNumber
	add	esp, 4

; 423  :     FillNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_FillNumberHeader
	add	esp, 4

; 424  :     HeapFree(hLocalHeap, 0, p);

	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hLocalHeap
	push	edx
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Deallocate:

; 425  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DetatchNumber PROC

; 412  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 413  :     if (p == NULL || !p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@DetatchNum
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	jne	SHORT $LN2@DetatchNum
$LN3@DetatchNum:

; 414  :         return;

	jmp	SHORT $LN1@DetatchNum
$LN2@DetatchNum:

; 415  :     CleanUpNumber(p);

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CleanUpNumber
	add	esp, 4
$LN1@DetatchNum:

; 416  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_AllocateNumber PROC

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 400  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	esi, esp
	push	28					; 0000001cH
	push	8
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 401  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@AllocateNu

; 402  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN1@AllocateNu
$LN2@AllocateNu:

; 403  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	mov	ecx, DWORD PTR _light_check_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 404  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AllocateNu

; 405  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AllocateNu
$LN3@AllocateNu:

; 406  :     p->IS_STATIC = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx

; 407  :     *pp = p;

	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx

; 408  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:

; 409  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_AttatchNumber PROC

; 390  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 391  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, NULL);

	push	0
	mov	eax, DWORD PTR _bit_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 392  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AttatchNum

; 393  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AttatchNum
$LN2@AttatchNum:

; 394  :     p->IS_STATIC = TRUE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	or	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 395  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AttatchNum:

; 396  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_code_actual$ = -12					; size = 4
_code_desired$ = -8					; size = 4
_words$ = -4						; size = 4
_buffer$ = 8						; size = 4
_code$ = 12						; size = 4
_CheckBlockLight PROC

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 259  : #ifdef _DEBUG
; 260  :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@CheckBlock

; 261  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
$LN2@CheckBlock:

; 262  :     --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 263  :     __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$[ebp], ecx

; 264  :     __UNIT_TYPE code_desired = buffer[words + 1] ^ (__UNIT_TYPE)&buffer[words + 1];

	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	xor	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _code_desired$[ebp], ecx

; 265  :     __UNIT_TYPE code_actual = code;

	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR _code_actual$[ebp], ecx

; 266  :     if (code_actual == code_desired)

	mov	edx, DWORD PTR _code_actual$[ebp]
	cmp	edx, DWORD PTR _code_desired$[ebp]
	jne	SHORT $LN3@CheckBlock

; 267  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
	jmp	SHORT $LN1@CheckBlock
$LN3@CheckBlock:

; 268  :     else
; 269  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
$LN1@CheckBlock:

; 270  : #else
; 271  :     return (PMC_STATUS_OK);
; 272  : #endif
; 273  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckBlockLight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_p$1 = -4						; size = 4
_buffer$ = 8						; size = 4
_buffer_words$ = 12					; size = 4
_DeallocateBlock PROC

; 203  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 204  : 	if (buffer != NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN1@Deallocate

; 205  : 	{
; 206  :         __UNIT_TYPE* p = buffer - 1;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _p$1[ebp], eax

; 207  :         if (*p != buffer_words)

	mov	ecx, DWORD PTR _p$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _buffer_words$[ebp]
	je	SHORT $LN3@Deallocate

; 208  :         {
; 209  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 210  :         }

	jmp	SHORT $LN1@Deallocate
$LN3@Deallocate:

; 211  :         else
; 212  :         {
; 213  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 214  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	mov	eax, DWORD PTR _buffer_words$[ebp]
	add	eax, 2
	push	eax
	push	-858993460				; ccccccccH
	mov	ecx, DWORD PTR _p$1[ebp]
	push	ecx
	call	__FILL_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 215  :             // バッファを解放する。
; 216  :             HeapFree(hLocalHeap, 0, p);

	mov	esi, esp
	mov	edx, DWORD PTR _p$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Deallocate:

; 217  :         }
; 218  : 	}
; 219  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeallocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
tv88 = -28						; size = 4
_check_code$ = -24					; size = 4
_r$ = -20						; size = 4
_buffer$ = -16						; size = 4
_bytes$ = -12						; size = 4
_words2$ = -8						; size = 4
_words1$ = -4						; size = 4
_bits$ = 8						; size = 4
_allocated_block_words$ = 12				; size = 4
_code$ = 16						; size = 4
_AllocateBlock PROC

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 162  :     // 実際に獲得されるメモリ領域は「引数で渡されたワード数+2」のワード数となる。
; 163  :     // 最初のワードには獲得時に引数で渡されたワード数が格納される。
; 164  :     // 最後のワードには格納されている内容の正当性確認のための値が格納される。
; 165  :     // 2番目のワードへのポインタは呼び出し元に通知され利用される。
; 166  :     __UNIT_TYPE words1 = _DIVIDE_CEILING_UNIT(bits, __UNIT_TYPE_BIT_COUNT);

	push	32					; 00000020H
	mov	eax, DWORD PTR _bits$[ebp]
	push	eax
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	mov	DWORD PTR _words1$[ebp], eax

; 167  : 	__UNIT_TYPE words2 = words1 + 2;

	mov	ecx, DWORD PTR _words1$[ebp]
	add	ecx, 2
	mov	DWORD PTR _words2$[ebp], ecx

; 168  : 	__UNIT_TYPE bytes = words2 * __UNIT_TYPE_BYTE_COUNT;

	mov	edx, DWORD PTR _words2$[ebp]
	shl	edx, 2
	mov	DWORD PTR _bytes$[ebp], edx

; 169  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	esi, esp
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _hLocalHeap
	push	ecx
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$[ebp], eax

; 170  : 	if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@AllocateBl

; 171  : 		return (NULL);

	xor	eax, eax
	jmp	$LN1@AllocateBl
$LN2@AllocateBl:

; 172  : 	buffer[0] = words1;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR _words1$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 173  :     *allocated_block_words = words1;

	mov	eax, DWORD PTR _allocated_block_words$[ebp]
	mov	ecx, DWORD PTR _words1$[ebp]
	mov	DWORD PTR [eax], ecx

; 174  : #ifdef _DEBUG
; 175  :     // 乱数もどきを生成する。
; 176  : #ifdef _M_IX86
; 177  :     __UNIT_TYPE r = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax

; 178  : #elif defined(_M_IX64)
; 179  : #ifdef _MSC_VER
; 180  :     __UNIT_TYPE r = GetTickCount64();
; 181  : #elif defined(__GNUC__)
; 182  :     _UINT32_T temp = GetTickCount();
; 183  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 184  : #else
; 185  : #error unknown compiler
; 186  : #endif
; 187  : #else
; 188  : #error unknown platform
; 189  : #endif
; 190  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;

	mov	edx, DWORD PTR _configuration_info
	and	edx, 1
	je	SHORT $LN5@AllocateBl
	mov	eax, DWORD PTR _words1$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN6@AllocateBl
$LN5@AllocateBl:
	mov	edx, DWORD PTR _r$[ebp]
	or	edx, -2071690108			; 84848484H
	mov	DWORD PTR tv88[ebp], edx
$LN6@AllocateBl:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _check_code$[ebp], eax

; 191  : #else
; 192  :     __UNIT_TYPE check_code = 0;
; 193  : #endif
; 194  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	mov	ecx, DWORD PTR _words1$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	xor	eax, DWORD PTR _check_code$[ebp]
	mov	ecx, DWORD PTR _words1$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax

; 195  :     if (code != NULL)

	cmp	DWORD PTR _code$[ebp], 0
	je	SHORT $LN3@AllocateBl

; 196  :         *code = check_code;

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _check_code$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AllocateBl:

; 197  :     return (&buffer[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
$LN1@AllocateBl:

; 198  : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_DeallocateHeapArea PROC

; 595  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 596  :     if (hLocalHeap != NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	je	SHORT $LN1@Deallocate

; 597  :     {
; 598  :         HeapDestroy(hLocalHeap);

	mov	esi, esp
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapDestroy@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 599  :         hLocalHeap = NULL;

	mov	DWORD PTR _hLocalHeap, 0
$LN1@Deallocate:

; 600  :     }
; 601  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
_TEXT	SEGMENT
_AllocateHeapArea PROC

; 587  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __F13F011C_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 588  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	mov	esi, esp
	push	0
	push	4096					; 00001000H
	push	0
	call	DWORD PTR __imp__HeapCreate@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hLocalHeap, eax

; 589  :     if (hLocalHeap == NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	jne	SHORT $LN2@AllocateHe

; 590  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@AllocateHe
$LN2@AllocateHe:

; 591  :     return (TRUE);

	mov	eax, 1
$LN1@AllocateHe:

; 592  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AllocateHeapArea ENDP
_TEXT	ENDS
END
