; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_add.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__89DB6AB9_autogenerated_inline_func@h DB 01H
__A78DCA81_pmc_add@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_Add
PUBLIC	_PMC_Add_I_X@12
PUBLIC	_PMC_Add_L_X@16
PUBLIC	_PMC_Add_X_I@12
PUBLIC	_PMC_Add_X_L@16
PUBLIC	_PMC_Add_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
_BSS	SEGMENT
_fp_Add_Imp DD	01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
_w_light_check_code$1 = -84				; size = 4
_w_bit_count$2 = -76					; size = 4
_v_bit_count$3 = -72					; size = 4
_u_bit_count$4 = -68					; size = 4
_w_light_check_code$5 = -60				; size = 4
_w_bit_count$6 = -52					; size = 4
_v_bit_count$7 = -48					; size = 4
_w_light_check_code$8 = -40				; size = 4
_w_bit_count$9 = -32					; size = 4
_v_bit_count$10 = -28					; size = 4
_v_lo$11 = -24						; size = 4
_v_hi$12 = -16						; size = 4
_u_bit_count$13 = -8					; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Add_X_L_Imp PROC

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 407  :     PMC_STATUS_CODE result;
; 408  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Add_X_

; 409  :     {
; 410  :         // u が 0 である場合
; 411  : 
; 412  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN4@PMC_Add_X_

; 413  :         {
; 414  :             // v が 0 である場合
; 415  : 
; 416  :             // u と v がともに 0 であるので、加算結果の 0 を呼び出し元に返す。
; 417  :             *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 418  :         }

	jmp	SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 419  :         else
; 420  :         {
; 421  :             // v が 0 ではない場合
; 422  : 
; 423  :             // 加算結果となる v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 424  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 425  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 426  :         }
; 427  :     }

	jmp	$LN3@PMC_Add_X_
$LN2@PMC_Add_X_:

; 428  :     else
; 429  :     {
; 430  :         // u が 0 ではない場合
; 431  : 
; 432  :         if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	or	ecx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN7@PMC_Add_X_

; 433  :         {
; 434  :             // v が 0 である場合
; 435  : 
; 436  :             // 加算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 437  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Add_X_

; 438  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN9@PMC_Add_X_:

; 439  :         }

	jmp	$LN3@PMC_Add_X_
$LN7@PMC_Add_X_:

; 440  :         else
; 441  :         {
; 442  :             // u と v がともに 0 ではない場合
; 443  : 
; 444  :             // u と v の和を計算する
; 445  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	mov	ecx, 1
	test	ecx, ecx
	je	$LN10@PMC_Add_X_

; 446  :             {
; 447  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 448  : 
; 449  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _u_bit_count$13[ebp], eax

; 450  :                 _UINT32_T v_hi;
; 451  :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	ecx, DWORD PTR _v_hi$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_lo$11[ebp], eax

; 452  :                 if (v_hi == 0)

	cmp	DWORD PTR _v_hi$12[ebp], 0
	jne	$LN12@PMC_Add_X_

; 453  :                 {
; 454  :                     // y の値が 32bit で表現可能な場合
; 455  :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR _v_lo$11[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$10[ebp], edx

; 456  :                     __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	eax, DWORD PTR _v_bit_count$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_bit_count$13[ebp]
	push	ecx
	call	__MAXIMUM_UNIT
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _w_bit_count$9[ebp], eax

; 457  :                     __UNIT_TYPE w_light_check_code;
; 458  :                     if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _w_light_check_code$8[ebp]
	push	edx
	mov	eax, DWORD PTR _w_bit_count$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_X_

; 459  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN14@PMC_Add_X_:

; 460  :                     if ((result = Add_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, (*w)->BLOCK, (*w)->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _v_lo$11[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_Add_X_1W
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Add_X_

; 461  :                     {
; 462  :                         DeallocateNumber(*w);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 463  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN15@PMC_Add_X_:

; 464  :                     }
; 465  :                     if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_light_check_code$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_X_

; 466  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 467  :                 }

	jmp	$LN13@PMC_Add_X_
$LN12@PMC_Add_X_:

; 468  :                 else
; 469  :                 {
; 470  :                     // y の値が 32bit では表現できない場合
; 471  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	ecx, DWORD PTR _v_hi$12[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$7[ebp], edx

; 472  :                     __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	eax, DWORD PTR _v_bit_count$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_bit_count$13[ebp]
	push	ecx
	call	__MAXIMUM_UNIT
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _w_bit_count$6[ebp], eax

; 473  :                     __UNIT_TYPE w_light_check_code;
; 474  :                     if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _w_light_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _w_bit_count$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 475  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 476  :                     if ((result = Add_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, (*w)->BLOCK, (*w)->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _v_lo$11[ebp]
	push	edx
	mov	eax, DWORD PTR _v_hi$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_Add_X_2W
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Add_X_

; 477  :                     {
; 478  :                         DeallocateNumber(*w);

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 479  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN18@PMC_Add_X_:

; 480  :                     }
; 481  :                     if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w_light_check_code$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_X_

; 482  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN13@PMC_Add_X_:

; 483  :                 }
; 484  :                 CommitNumber(*w);

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 485  :             }

	jmp	$LN3@PMC_Add_X_
$LN10@PMC_Add_X_:

; 486  :             else
; 487  :             {
; 488  :                 // _UINT64_T が 1 ワードで表現できる場合
; 489  : 
; 490  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _u_bit_count$4[ebp], edx

; 491  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$3[ebp], ecx

; 492  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	edx, DWORD PTR _v_bit_count$3[ebp]
	push	edx
	mov	eax, DWORD PTR _u_bit_count$4[ebp]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _w_bit_count$2[ebp], eax

; 493  :                 __UNIT_TYPE w_light_check_code;
; 494  :                 if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _w_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_bit_count$2[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Add_X_

; 495  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN20@PMC_Add_X_:

; 496  :                 if ((result = Add_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK, (*w)->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_Add_X_1W
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_X_

; 497  :                 {
; 498  :                     DeallocateNumber(*w);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 499  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN21@PMC_Add_X_:

; 500  :                 }
; 501  :                 if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_Add_X_

; 502  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN22@PMC_Add_X_:

; 503  :                 CommitNumber(*w);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Add_X_:

; 504  :             }
; 505  : 
; 506  :         }
; 507  :     }
; 508  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 509  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@PMC_Add_X_:
	DD	4
	DD	$LN28@PMC_Add_X_
$LN28@PMC_Add_X_:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN24@PMC_Add_X_
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN25@PMC_Add_X_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN26@PMC_Add_X_
	DD	-84					; ffffffacH
	DD	4
	DD	$LN27@PMC_Add_X_
$LN27@PMC_Add_X_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN26@PMC_Add_X_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN25@PMC_Add_X_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN24@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_Add_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
_nz_check_code$1 = -24					; size = 4
_z_bit_count$2 = -16					; size = 4
_y_bit_count$3 = -12					; size = 4
_x_bit_count$4 = -8					; size = 4
_result$ = -4						; size = 4
_nu$ = 8						; size = 4
_v$ = 12						; size = 4
_nw$ = 16						; size = 4
_PMC_Add_X_I_Imp PROC

; 301  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 302  :     PMC_STATUS_CODE result;
; 303  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Add_X_

; 304  :     {
; 305  :         // x が 0 である場合
; 306  : 
; 307  :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 308  :         {
; 309  :             // y が 0 である場合
; 310  : 
; 311  :             // x と y がともに 0 であるので、加算結果の 0 を呼び出し元に返す。
; 312  :             *nw = &number_zero;

	mov	edx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 313  :         }

	jmp	SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 314  :         else
; 315  :         {
; 316  :             // y が 0 ではない場合
; 317  : 
; 318  :             // 加算結果となる y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 319  :             if ((result = From_I_Imp(v, nw)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_From_I_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 320  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 321  :         }
; 322  :     }

	jmp	$LN3@PMC_Add_X_
$LN2@PMC_Add_X_:

; 323  :     else
; 324  :     {
; 325  :         // x が 0 ではない場合
; 326  : 
; 327  :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN7@PMC_Add_X_

; 328  :         {
; 329  :             // y が 0 である場合
; 330  : 
; 331  :             // 加算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 332  :             if ((result = DuplicateNumber(nu, nw)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nw$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Add_X_

; 333  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN9@PMC_Add_X_:

; 334  :         }

	jmp	$LN3@PMC_Add_X_
$LN7@PMC_Add_X_:

; 335  :         else
; 336  :         {
; 337  :             // x と y がともに 0 ではない場合
; 338  : 
; 339  :             // x と y の和を計算する
; 340  :             __UNIT_TYPE x_bit_count = nu->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _x_bit_count$4[ebp], edx

; 341  :             __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	DWORD PTR _y_bit_count$3[ebp], ecx

; 342  :             __UNIT_TYPE z_bit_count = _MAXIMUM_UNIT(x_bit_count, y_bit_count) + 1;

	mov	edx, DWORD PTR _y_bit_count$3[ebp]
	push	edx
	mov	eax, DWORD PTR _x_bit_count$4[ebp]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _z_bit_count$2[ebp], eax

; 343  :             __UNIT_TYPE nz_check_code;
; 344  :             if ((result = AllocateNumber(nw, z_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nz_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _z_bit_count$2[ebp]
	push	edx
	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Add_X_

; 345  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 346  :             if ((result = Add_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, v, (*nw)->BLOCK, (*nw)->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_Add_X_1W
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Add_X_

; 347  :             {
; 348  :                 DeallocateNumber(*nw);

	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 349  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN11@PMC_Add_X_:

; 350  :             }
; 351  :             if ((result = CheckBlockLight((*nw)->BLOCK, nz_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Add_X_

; 352  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN12@PMC_Add_X_:

; 353  :             CommitNumber(*nw);

	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Add_X_:

; 354  :         }
; 355  :     }
; 356  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 357  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@PMC_Add_X_:
	DD	1
	DD	$LN15@PMC_Add_X_
$LN15@PMC_Add_X_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@PMC_Add_X_
$LN14@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_PMC_Add_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
tv158 = -40						; size = 4
tv155 = -36						; size = 4
tv152 = -32						; size = 4
_count$ = -28						; size = 4
_c$ = -21						; size = 1
_wp$ = -20						; size = 4
_vp$ = -16						; size = 4
_up$ = -12						; size = 4
_t_count$1 = -8						; size = 4
_t_buf$2 = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_w_count$ = 28						; size = 4
_Add_Imp_using_ADCX PROC

; 224  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 225  :     // x のワード長が y のワード長以上であるようにする
; 226  :     if (u_count < v_count)

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _v_count$[ebp]
	jae	SHORT $LN4@Add_Imp_us

; 227  :     {
; 228  :         __UNIT_TYPE* t_buf = u_buf;

	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _t_buf$2[ebp], ecx

; 229  :         u_buf = v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _u_buf$[ebp], edx

; 230  :         v_buf = t_buf;

	mov	eax, DWORD PTR _t_buf$2[ebp]
	mov	DWORD PTR _v_buf$[ebp], eax

; 231  :         __UNIT_TYPE t_count = u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	mov	DWORD PTR _t_count$1[ebp], ecx

; 232  :         u_count = v_count;

	mov	edx, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], edx

; 233  :         v_count = t_count;

	mov	eax, DWORD PTR _t_count$1[ebp]
	mov	DWORD PTR _v_count$[ebp], eax
$LN4@Add_Imp_us:

; 234  :     }
; 235  :     __UNIT_TYPE* up = u_buf;

	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _up$[ebp], ecx

; 236  :     __UNIT_TYPE* vp = v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _vp$[ebp], edx

; 237  :     __UNIT_TYPE* wp = w_buf;

	mov	eax, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR _wp$[ebp], eax

; 238  :     char c = 0;

	mov	BYTE PTR _c$[ebp], 0

; 239  : 
; 240  :     // まず 32 ワードずつ加算をする。
; 241  :     __UNIT_TYPE count = v_count >> 5;

	mov	ecx, DWORD PTR _v_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$[ebp], ecx
$LN2@Add_Imp_us:

; 242  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN3@Add_Imp_us

; 243  :     {
; 244  :         c = _ADD_32WORDS_ADCX(c, up, vp, wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_32WORDS_ADCX
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 245  :         up += 32;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _up$[ebp], eax

; 246  :         vp += 32;

	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _vp$[ebp], ecx

; 247  :         wp += 32;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _wp$[ebp], edx

; 248  :         --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 249  :     }

	jmp	SHORT $LN2@Add_Imp_us
$LN3@Add_Imp_us:

; 250  :     // この時点で未処理の桁は 32 ワード未満のはず
; 251  : 
; 252  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 253  :     if (v_count & 0x10)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN5@Add_Imp_us

; 254  :     {
; 255  :         c = _ADD_16WORDS_ADCX(c, up, vp, wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_16WORDS_ADCX
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 256  :         up += 16;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _up$[ebp], eax

; 257  :         vp += 16;

	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _vp$[ebp], ecx

; 258  :         wp += 16;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _wp$[ebp], edx
$LN5@Add_Imp_us:

; 259  :     }
; 260  :     // この時点で未処理の桁は 16 ワード未満のはず
; 261  : 
; 262  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 263  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 8
	je	SHORT $LN6@Add_Imp_us

; 264  :     {
; 265  :         c = _ADD_8WORDS_ADCX(c, up, vp, wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	push	edx
	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_8WORDS_ADCX
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 266  :         up += 8;

	mov	edx, DWORD PTR _up$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _up$[ebp], edx

; 267  :         vp += 8;

	mov	eax, DWORD PTR _vp$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _vp$[ebp], eax

; 268  :         wp += 8;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _wp$[ebp], ecx
$LN6@Add_Imp_us:

; 269  :     }
; 270  :     // この時点で未処理の桁は 8 ワード未満のはず
; 271  : 
; 272  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 273  :     if (v_count & 0x4)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 4
	je	SHORT $LN7@Add_Imp_us

; 274  :     {
; 275  :         c = _ADD_4WORDS_ADCX(c, up, vp, wp);

	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _up$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_4WORDS_ADCX
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 276  :         up += 4;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _up$[ebp], ecx

; 277  :         vp += 4;

	mov	edx, DWORD PTR _vp$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _vp$[ebp], edx

; 278  :         wp += 4;

	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _wp$[ebp], eax
$LN7@Add_Imp_us:

; 279  :     }
; 280  :     // この時点で未処理の桁は 4 ワード未満のはず
; 281  : 
; 282  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 283  :     if (v_count & 0x2)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 2
	je	SHORT $LN8@Add_Imp_us

; 284  :     {
; 285  :         c = _ADD_2WORDS_ADCX(c, up, vp, wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_2WORDS_ADCX
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 286  :         up += 2;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 8
	mov	DWORD PTR _up$[ebp], eax

; 287  :         vp += 2;

	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _vp$[ebp], ecx

; 288  :         wp += 2;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 8
	mov	DWORD PTR _wp$[ebp], edx
$LN8@Add_Imp_us:

; 289  :     }
; 290  :     // この時点で未処理の桁は 2 ワード未満のはず
; 291  : 
; 292  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 293  :     if (v_count & 0x1)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 1
	je	SHORT $LN9@Add_Imp_us

; 294  :         c = _ADDX_UNIT(c, *up++, *vp++, wp++);

	mov	ecx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv152[ebp], ecx
	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 4
	mov	DWORD PTR _wp$[ebp], edx
	mov	eax, DWORD PTR _vp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv155[ebp], ecx
	mov	edx, DWORD PTR _vp$[ebp]
	add	edx, 4
	mov	DWORD PTR _vp$[ebp], edx
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv158[ebp], ecx
	mov	edx, DWORD PTR _up$[ebp]
	add	edx, 4
	mov	DWORD PTR _up$[ebp], edx
	mov	eax, DWORD PTR tv152[ebp]
	push	eax
	mov	ecx, DWORD PTR tv155[ebp]
	push	ecx
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al
$LN9@Add_Imp_us:

; 295  : 
; 296  :     // 残りの桁の繰り上がりを計算し、復帰する。
; 297  :     return (DoCarry(c, up, u_count - v_count, wp, w_count - v_count));

	mov	ecx, DWORD PTR _w_count$[ebp]
	sub	ecx, DWORD PTR _v_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	sub	eax, DWORD PTR _v_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	_DoCarry
	add	esp, 20					; 00000014H

; 298  : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Add_Imp_using_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
tv158 = -40						; size = 4
tv155 = -36						; size = 4
tv152 = -32						; size = 4
_count$ = -28						; size = 4
_c$ = -21						; size = 1
_wp$ = -20						; size = 4
_vp$ = -16						; size = 4
_up$ = -12						; size = 4
_t_count$1 = -8						; size = 4
_t_buf$2 = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_w_count$ = 28						; size = 4
_Add_Imp_using_ADC PROC

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 148  :     // x のワード長が y のワード長以上であるようにする
; 149  :     if (u_count < v_count)

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _v_count$[ebp]
	jae	SHORT $LN4@Add_Imp_us

; 150  :     {
; 151  :         __UNIT_TYPE* t_buf = u_buf;

	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _t_buf$2[ebp], ecx

; 152  :         u_buf = v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _u_buf$[ebp], edx

; 153  :         v_buf = t_buf;

	mov	eax, DWORD PTR _t_buf$2[ebp]
	mov	DWORD PTR _v_buf$[ebp], eax

; 154  :         __UNIT_TYPE t_count = u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	mov	DWORD PTR _t_count$1[ebp], ecx

; 155  :         u_count = v_count;

	mov	edx, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], edx

; 156  :         v_count = t_count;

	mov	eax, DWORD PTR _t_count$1[ebp]
	mov	DWORD PTR _v_count$[ebp], eax
$LN4@Add_Imp_us:

; 157  :     }
; 158  :     __UNIT_TYPE* up = u_buf;

	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _up$[ebp], ecx

; 159  :     __UNIT_TYPE* vp = v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _vp$[ebp], edx

; 160  :     __UNIT_TYPE* wp = w_buf;

	mov	eax, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR _wp$[ebp], eax

; 161  :     char c = 0;

	mov	BYTE PTR _c$[ebp], 0

; 162  : 
; 163  :     // まず 32 ワードずつ加算をする。
; 164  :     __UNIT_TYPE count = v_count >> 5;

	mov	ecx, DWORD PTR _v_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$[ebp], ecx
$LN2@Add_Imp_us:

; 165  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN3@Add_Imp_us

; 166  :     {
; 167  :         c = _ADD_32WORDS_ADC(c, up, vp, wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_32WORDS_ADC
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 168  :         up += 32;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _up$[ebp], eax

; 169  :         vp += 32;

	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _vp$[ebp], ecx

; 170  :         wp += 32;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _wp$[ebp], edx

; 171  :         --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 172  :     }

	jmp	SHORT $LN2@Add_Imp_us
$LN3@Add_Imp_us:

; 173  :     // この時点で未処理の桁は 32 ワード未満のはず
; 174  : 
; 175  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 176  :     if (v_count & 0x10)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN5@Add_Imp_us

; 177  :     {
; 178  :         c = _ADD_16WORDS_ADC(c, up, vp, wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_16WORDS_ADC
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 179  :         up += 16;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _up$[ebp], eax

; 180  :         vp += 16;

	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _vp$[ebp], ecx

; 181  :         wp += 16;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _wp$[ebp], edx
$LN5@Add_Imp_us:

; 182  :     }
; 183  :     // この時点で未処理の桁は 16 ワード未満のはず
; 184  : 
; 185  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 186  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 8
	je	SHORT $LN6@Add_Imp_us

; 187  :     {
; 188  :         c = _ADD_8WORDS_ADC(c, up, vp, wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	push	edx
	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_8WORDS_ADC
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 189  :         up += 8;

	mov	edx, DWORD PTR _up$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _up$[ebp], edx

; 190  :         vp += 8;

	mov	eax, DWORD PTR _vp$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _vp$[ebp], eax

; 191  :         wp += 8;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _wp$[ebp], ecx
$LN6@Add_Imp_us:

; 192  :     }
; 193  :     // この時点で未処理の桁は 8 ワード未満のはず
; 194  : 
; 195  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 196  :     if (v_count & 0x4)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 4
	je	SHORT $LN7@Add_Imp_us

; 197  :     {
; 198  :         c = _ADD_4WORDS_ADC(c, up, vp, wp);

	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _up$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_4WORDS_ADC
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 199  :         up += 4;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _up$[ebp], ecx

; 200  :         vp += 4;

	mov	edx, DWORD PTR _vp$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _vp$[ebp], edx

; 201  :         wp += 4;

	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _wp$[ebp], eax
$LN7@Add_Imp_us:

; 202  :     }
; 203  :     // この時点で未処理の桁は 4 ワード未満のはず
; 204  : 
; 205  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 206  :     if (v_count & 0x2)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 2
	je	SHORT $LN8@Add_Imp_us

; 207  :     {
; 208  :         c = _ADD_2WORDS_ADC(c, up, vp, wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_2WORDS_ADC
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 209  :         up += 2;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 8
	mov	DWORD PTR _up$[ebp], eax

; 210  :         vp += 2;

	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _vp$[ebp], ecx

; 211  :         wp += 2;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 8
	mov	DWORD PTR _wp$[ebp], edx
$LN8@Add_Imp_us:

; 212  :     }
; 213  :     // この時点で未処理の桁は 2 ワード未満のはず
; 214  : 
; 215  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 216  :     if (v_count & 0x1)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 1
	je	SHORT $LN9@Add_Imp_us

; 217  :         c = _ADD_UNIT(c, *up++, *vp++, wp++);

	mov	ecx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv152[ebp], ecx
	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 4
	mov	DWORD PTR _wp$[ebp], edx
	mov	eax, DWORD PTR _vp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv155[ebp], ecx
	mov	edx, DWORD PTR _vp$[ebp]
	add	edx, 4
	mov	DWORD PTR _vp$[ebp], edx
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv158[ebp], ecx
	mov	edx, DWORD PTR _up$[ebp]
	add	edx, 4
	mov	DWORD PTR _up$[ebp], edx
	mov	eax, DWORD PTR tv152[ebp]
	push	eax
	mov	ecx, DWORD PTR tv155[ebp]
	push	ecx
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al
$LN9@Add_Imp_us:

; 218  : 
; 219  :     // 残りの桁の繰り上がりを計算し、復帰する。
; 220  :     return (DoCarry(c, up, u_count - v_count, wp, w_count - v_count));

	mov	ecx, DWORD PTR _w_count$[ebp]
	sub	ecx, DWORD PTR _v_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	sub	eax, DWORD PTR _v_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	_DoCarry
	add	esp, 20					; 00000014H

; 221  : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Add_Imp_using_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
tv132 = -28						; size = 4
tv128 = -24						; size = 4
tv91 = -20						; size = 4
tv87 = -16						; size = 4
_c$ = -9						; size = 1
_wp$ = -8						; size = 4
_up$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_w_count$ = 28						; size = 4
_Add_X_2W PROC

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 107  :     __UNIT_TYPE* up = u_buf;

	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _up$[ebp], eax

; 108  :     __UNIT_TYPE* wp = w_buf;

	mov	ecx, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR _wp$[ebp], ecx

; 109  :     char c;
; 110  : 
; 111  :     if (u_count < 2)

	cmp	DWORD PTR _u_count$[ebp], 2
	jae	SHORT $LN2@Add_X_2W

; 112  :     {
; 113  :         // x が 1 ワードしかなかった場合
; 114  : 
; 115  :         // 最下位ワードの加算を行う
; 116  :         c = _ADD_UNIT(0, up[0], v_lo, &wp[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_lo$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	0
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 117  : 
; 118  :         // 最下位から 2 番目のワードの加算を行う
; 119  :         c = _ADD_UNIT(c, 0, v_hi, &wp[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_hi$[ebp]
	push	ecx
	push	0
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 120  : 
; 121  :         // 桁上りが発生したら 3 番目のワードに 1 を設定する。
; 122  :         if (c)

	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN4@Add_X_2W

; 123  :             wp[2] = 1;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR [edx+ecx], 1
$LN4@Add_X_2W:

; 124  : 
; 125  :         // 正常復帰する。
; 126  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@Add_X_2W

; 127  :     }

	jmp	$LN1@Add_X_2W
$LN2@Add_X_2W:

; 128  :     else
; 129  :     {
; 130  :         // x が 2 ワード以上あった場合
; 131  : 
; 132  :         // 最下位のワードの加算をする
; 133  :         c = _ADD_UNIT(0, *up++, v_lo, wp++);

	mov	eax, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _wp$[ebp], ecx
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 4
	mov	DWORD PTR _up$[ebp], ecx
	mov	edx, DWORD PTR tv87[ebp]
	push	edx
	mov	eax, DWORD PTR _v_lo$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv91[ebp]
	push	ecx
	push	0
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 134  : 
; 135  :         // 最下位から 2 番目のワードの加算をする。
; 136  :         c = _ADD_UNIT(c, *up++, v_hi, wp++);

	mov	edx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv128[ebp], edx
	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 4
	mov	DWORD PTR _wp$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv132[ebp], edx
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 4
	mov	DWORD PTR _up$[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_hi$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 137  :         u_count -= 2;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 2
	mov	DWORD PTR _u_count$[ebp], edx

; 138  :         w_count -= 2;

	mov	eax, DWORD PTR _w_count$[ebp]
	sub	eax, 2
	mov	DWORD PTR _w_count$[ebp], eax

; 139  : 
; 140  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 141  :         return (DoCarry(c, up, u_count, wp, w_count));

	mov	ecx, DWORD PTR _w_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	_DoCarry
	add	esp, 20					; 00000014H
$LN1@Add_X_2W:

; 142  :     }
; 143  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Add_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
tv70 = -12						; size = 4
tv66 = -8						; size = 4
_c$ = -1						; size = 1
_u_ptr$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_ptr$ = 20						; size = 4
_w_count$ = 24						; size = 4
_Add_X_1W PROC

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 94   :     char c;
; 95   : 
; 96   :     // 最下桁の加算を行う
; 97   :     c = _ADD_UNIT(0, *u_ptr++, v, w_ptr++);

	mov	eax, DWORD PTR _w_ptr$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _w_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _w_ptr$[ebp], ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _u_ptr$[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	push	0
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 98   :     --u_count;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _u_count$[ebp], edx

; 99   :     --w_count;

	mov	eax, DWORD PTR _w_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _w_count$[ebp], eax

; 100  : 
; 101  :     // 残りの桁の繰上りを行い復帰する。
; 102  :     return (DoCarry(c, u_ptr, u_count, w_ptr, w_count));

	mov	ecx, DWORD PTR _w_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	_DoCarry
	add	esp, 20					; 00000014H

; 103  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Add_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
tv76 = -8						; size = 4
tv72 = -4						; size = 4
_c$ = 8							; size = 1
_u_ptr$ = 12						; size = 4
_u_count$ = 16						; size = 4
_w_ptr$ = 20						; size = 4
_w_count$ = 24						; size = 4
_DoCarry PROC

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@DoCarry:

; 42   :     // 繰り上がりを続く限り行う
; 43   :     for (;;)
; 44   :     {
; 45   :         if (u_count <= 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	ja	SHORT $LN7@DoCarry

; 46   :         {
; 47   :             // u の最上位まで達してしまった場合
; 48   : 
; 49   :             if (c)

	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN9@DoCarry

; 50   :             {
; 51   :                 // かつそれでも繰り上がりを行う必要がある場合
; 52   :                 if (w_count <= 0)

	cmp	DWORD PTR _w_count$[ebp], 0
	ja	SHORT $LN10@DoCarry

; 53   :                 {
; 54   :                     // しかし w がもう終端に達してしまった場合
; 55   : 
; 56   :                     // w のバッファはこの余裕を見込んでいるのでこのルートには到達しないはず。
; 57   :                     return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@DoCarry
$LN10@DoCarry:

; 58   :                 }
; 59   :                 *w_ptr = 1;

	mov	ecx, DWORD PTR _w_ptr$[ebp]
	mov	DWORD PTR [ecx], 1
$LN9@DoCarry:

; 60   :             }
; 61   : 
; 62   :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 63   : 
; 64   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DoCarry

; 65   :         }

	jmp	$LN8@DoCarry
$LN7@DoCarry:

; 66   :         else if (c)

	movsx	edx, BYTE PTR _c$[ebp]
	test	edx, edx
	je	SHORT $LN5@DoCarry

; 67   :         {
; 68   :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 69   : 
; 70   :             // 繰り上がりを継続する
; 71   :             c = _ADD_UNIT(c, *u_ptr++, 0, w_ptr++);

	mov	eax, DWORD PTR _w_ptr$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _w_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _w_ptr$[ebp], ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv76[ebp], eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _u_ptr$[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 72   :             --u_count;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _u_count$[ebp], edx

; 73   :             --w_count;

	mov	eax, DWORD PTR _w_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _w_count$[ebp], eax

; 74   :         }

	jmp	SHORT $LN8@DoCarry
$LN5@DoCarry:

; 75   :         else
; 76   :         {
; 77   :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 78   : 
; 79   :             // 繰り上がりを中断し、u の残りのデータをzにそのまま複写し、正常復帰する。
; 80   :             while (u_count > 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	jbe	SHORT $LN6@DoCarry

; 81   :             {
; 82   :                 *w_ptr++ = *u_ptr++;

	mov	ecx, DWORD PTR _w_ptr$[ebp]
	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _w_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _w_ptr$[ebp], ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _u_ptr$[ebp], edx

; 83   :                 --u_count;

	mov	eax, DWORD PTR _u_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _u_count$[ebp], eax

; 84   :                 --w_count;

	mov	ecx, DWORD PTR _w_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _w_count$[ebp], ecx

; 85   :             }

	jmp	SHORT $LN5@DoCarry
$LN6@DoCarry:

; 86   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DoCarry
$LN8@DoCarry:

; 87   :         }
; 88   :     }

	jmp	$LN4@DoCarry
$LN1@DoCarry:

; 89   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DoCarry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADCX PROC

; 4376 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4377 : #ifdef _MSC_VER
; 4378 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4379 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4380 : #elif defined(__GNUC__)
; 4381 : #ifdef _M_IX86
; 4382 :     __asm__ volatile (
; 4383 :         "addb\t$-1, %0\n\t"
; 4384 :         "movl\t(%1), %%ecx\n\t"
; 4385 :         "adcxl\t(%2), %%ecx\n\t"
; 4386 :         "movl\t%%ecx, (%3)\n\t"
; 4387 :         "movl\t4(%1), %%ecx\n\t"
; 4388 :         "adcxl\t4(%2), %%ecx\n\t"
; 4389 :         "movl\t%%ecx, 4(%3)\n\t"
; 4390 :         "setc\t%0"
; 4391 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4392 :         :
; 4393 :         : "cc", "memory", "%ecx"
; 4394 : );
; 4395 : #elif defined(_M_IX64)
; 4396 :     __asm__ volatile (
; 4397 :         "addb\t$-1, %0\n\t"
; 4398 :         "movq\t(%1), %%rcx\n\t"
; 4399 :         "adcxq\t(%2), %%rcx\n\t"
; 4400 :         "movq\t%%rcx, (%3)\n\t"
; 4401 :         "movq\t8(%1), %%rcx\n\t"
; 4402 :         "adcxq\t8(%2), %%rcx\n\t"
; 4403 :         "movq\t%%rcx, 8(%3)\n\t"
; 4404 :         "setc\t%0"
; 4405 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4406 :         :
; 4407 :         : "cc", "memory", "%rcx"
; 4408 : );
; 4409 : #else
; 4410 : #error unknown platform
; 4411 : #endif
; 4412 : #else
; 4413 : #error unknown compiler
; 4414 : #endif
; 4415 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4416 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_2WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADC PROC

; 4333 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4334 : #ifdef _MSC_VER
; 4335 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4336 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4337 : #elif defined(__GNUC__)
; 4338 : #ifdef _M_IX86
; 4339 :     __asm__ volatile (
; 4340 :         "addb\t$-1, %0\n\t"
; 4341 :         "movl\t(%1), %%ecx\n\t"
; 4342 :         "adcl\t(%2), %%ecx\n\t"
; 4343 :         "movl\t%%ecx, (%3)\n\t"
; 4344 :         "movl\t4(%1), %%ecx\n\t"
; 4345 :         "adcl\t4(%2), %%ecx\n\t"
; 4346 :         "movl\t%%ecx, 4(%3)\n\t"
; 4347 :         "setc\t%0"
; 4348 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4349 :         :
; 4350 :         : "cc", "memory", "%ecx"
; 4351 : );
; 4352 : #elif defined(_M_IX64)
; 4353 :     __asm__ volatile (
; 4354 :         "addb\t$-1, %0\n\t"
; 4355 :         "movq\t(%1), %%rcx\n\t"
; 4356 :         "adcq\t(%2), %%rcx\n\t"
; 4357 :         "movq\t%%rcx, (%3)\n\t"
; 4358 :         "movq\t8(%1), %%rcx\n\t"
; 4359 :         "adcq\t8(%2), %%rcx\n\t"
; 4360 :         "movq\t%%rcx, 8(%3)\n\t"
; 4361 :         "setc\t%0"
; 4362 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4363 :         :
; 4364 :         : "cc", "memory", "%rcx"
; 4365 : );
; 4366 : #else
; 4367 : #error unknown platform
; 4368 : #endif
; 4369 : #else
; 4370 : #error unknown compiler
; 4371 : #endif
; 4372 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4373 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_2WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADCX PROC

; 3934 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 3935 : #ifdef _MSC_VER
; 3936 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3937 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3938 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3939 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3940 : #elif defined(__GNUC__)
; 3941 : #ifdef _M_IX86
; 3942 :     __asm__ volatile (
; 3943 :         "addb\t$-1, %0\n\t"
; 3944 :         "movl\t(%1), %%ecx\n\t"
; 3945 :         "adcxl\t(%2), %%ecx\n\t"
; 3946 :         "movl\t%%ecx, (%3)\n\t"
; 3947 :         "movl\t4(%1), %%ecx\n\t"
; 3948 :         "adcxl\t4(%2), %%ecx\n\t"
; 3949 :         "movl\t%%ecx, 4(%3)\n\t"
; 3950 :         "movl\t8(%1), %%ecx\n\t"
; 3951 :         "adcxl\t8(%2), %%ecx\n\t"
; 3952 :         "movl\t%%ecx, 8(%3)\n\t"
; 3953 :         "movl\t12(%1), %%ecx\n\t"
; 3954 :         "adcxl\t12(%2), %%ecx\n\t"
; 3955 :         "movl\t%%ecx, 12(%3)\n\t"
; 3956 :         "setc\t%0"
; 3957 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3958 :         :
; 3959 :         : "cc", "memory", "%ecx"
; 3960 : );
; 3961 : #elif defined(_M_IX64)
; 3962 :     __asm__ volatile (
; 3963 :         "addb\t$-1, %0\n\t"
; 3964 :         "movq\t(%1), %%rcx\n\t"
; 3965 :         "adcxq\t(%2), %%rcx\n\t"
; 3966 :         "movq\t%%rcx, (%3)\n\t"
; 3967 :         "movq\t8(%1), %%rcx\n\t"
; 3968 :         "adcxq\t8(%2), %%rcx\n\t"
; 3969 :         "movq\t%%rcx, 8(%3)\n\t"
; 3970 :         "movq\t16(%1), %%rcx\n\t"
; 3971 :         "adcxq\t16(%2), %%rcx\n\t"
; 3972 :         "movq\t%%rcx, 16(%3)\n\t"
; 3973 :         "movq\t24(%1), %%rcx\n\t"
; 3974 :         "adcxq\t24(%2), %%rcx\n\t"
; 3975 :         "movq\t%%rcx, 24(%3)\n\t"
; 3976 :         "setc\t%0"
; 3977 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3978 :         :
; 3979 :         : "cc", "memory", "%rcx"
; 3980 : );
; 3981 : #else
; 3982 : #error unknown platform
; 3983 : #endif
; 3984 : #else
; 3985 : #error unknown compiler
; 3986 : #endif
; 3987 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 3988 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_4WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADC PROC

; 3877 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 3878 : #ifdef _MSC_VER
; 3879 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3880 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3881 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3882 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3883 : #elif defined(__GNUC__)
; 3884 : #ifdef _M_IX86
; 3885 :     __asm__ volatile (
; 3886 :         "addb\t$-1, %0\n\t"
; 3887 :         "movl\t(%1), %%ecx\n\t"
; 3888 :         "adcl\t(%2), %%ecx\n\t"
; 3889 :         "movl\t%%ecx, (%3)\n\t"
; 3890 :         "movl\t4(%1), %%ecx\n\t"
; 3891 :         "adcl\t4(%2), %%ecx\n\t"
; 3892 :         "movl\t%%ecx, 4(%3)\n\t"
; 3893 :         "movl\t8(%1), %%ecx\n\t"
; 3894 :         "adcl\t8(%2), %%ecx\n\t"
; 3895 :         "movl\t%%ecx, 8(%3)\n\t"
; 3896 :         "movl\t12(%1), %%ecx\n\t"
; 3897 :         "adcl\t12(%2), %%ecx\n\t"
; 3898 :         "movl\t%%ecx, 12(%3)\n\t"
; 3899 :         "setc\t%0"
; 3900 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3901 :         :
; 3902 :         : "cc", "memory", "%ecx"
; 3903 : );
; 3904 : #elif defined(_M_IX64)
; 3905 :     __asm__ volatile (
; 3906 :         "addb\t$-1, %0\n\t"
; 3907 :         "movq\t(%1), %%rcx\n\t"
; 3908 :         "adcq\t(%2), %%rcx\n\t"
; 3909 :         "movq\t%%rcx, (%3)\n\t"
; 3910 :         "movq\t8(%1), %%rcx\n\t"
; 3911 :         "adcq\t8(%2), %%rcx\n\t"
; 3912 :         "movq\t%%rcx, 8(%3)\n\t"
; 3913 :         "movq\t16(%1), %%rcx\n\t"
; 3914 :         "adcq\t16(%2), %%rcx\n\t"
; 3915 :         "movq\t%%rcx, 16(%3)\n\t"
; 3916 :         "movq\t24(%1), %%rcx\n\t"
; 3917 :         "adcq\t24(%2), %%rcx\n\t"
; 3918 :         "movq\t%%rcx, 24(%3)\n\t"
; 3919 :         "setc\t%0"
; 3920 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3921 :         :
; 3922 :         : "cc", "memory", "%rcx"
; 3923 : );
; 3924 : #else
; 3925 : #error unknown platform
; 3926 : #endif
; 3927 : #else
; 3928 : #error unknown compiler
; 3929 : #endif
; 3930 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 3931 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_4WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADCX PROC

; 3282 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 3283 : #ifdef _MSC_VER
; 3284 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3285 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3286 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3287 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3288 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3289 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3290 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3291 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3292 : #elif defined(__GNUC__)
; 3293 : #ifdef _M_IX86
; 3294 :     __asm__ volatile (
; 3295 :         "addb\t$-1, %0\n\t"
; 3296 :         "movl\t(%1), %%ecx\n\t"
; 3297 :         "adcxl\t(%2), %%ecx\n\t"
; 3298 :         "movl\t%%ecx, (%3)\n\t"
; 3299 :         "movl\t4(%1), %%ecx\n\t"
; 3300 :         "adcxl\t4(%2), %%ecx\n\t"
; 3301 :         "movl\t%%ecx, 4(%3)\n\t"
; 3302 :         "movl\t8(%1), %%ecx\n\t"
; 3303 :         "adcxl\t8(%2), %%ecx\n\t"
; 3304 :         "movl\t%%ecx, 8(%3)\n\t"
; 3305 :         "movl\t12(%1), %%ecx\n\t"
; 3306 :         "adcxl\t12(%2), %%ecx\n\t"
; 3307 :         "movl\t%%ecx, 12(%3)\n\t"
; 3308 :         "movl\t16(%1), %%ecx\n\t"
; 3309 :         "adcxl\t16(%2), %%ecx\n\t"
; 3310 :         "movl\t%%ecx, 16(%3)\n\t"
; 3311 :         "movl\t20(%1), %%ecx\n\t"
; 3312 :         "adcxl\t20(%2), %%ecx\n\t"
; 3313 :         "movl\t%%ecx, 20(%3)\n\t"
; 3314 :         "movl\t24(%1), %%ecx\n\t"
; 3315 :         "adcxl\t24(%2), %%ecx\n\t"
; 3316 :         "movl\t%%ecx, 24(%3)\n\t"
; 3317 :         "movl\t28(%1), %%ecx\n\t"
; 3318 :         "adcxl\t28(%2), %%ecx\n\t"
; 3319 :         "movl\t%%ecx, 28(%3)\n\t"
; 3320 :         "setc\t%0"
; 3321 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3322 :         :
; 3323 :         : "cc", "memory", "%ecx"
; 3324 : );
; 3325 : #elif defined(_M_IX64)
; 3326 :     __asm__ volatile (
; 3327 :         "addb\t$-1, %0\n\t"
; 3328 :         "movq\t(%1), %%rcx\n\t"
; 3329 :         "adcxq\t(%2), %%rcx\n\t"
; 3330 :         "movq\t%%rcx, (%3)\n\t"
; 3331 :         "movq\t8(%1), %%rcx\n\t"
; 3332 :         "adcxq\t8(%2), %%rcx\n\t"
; 3333 :         "movq\t%%rcx, 8(%3)\n\t"
; 3334 :         "movq\t16(%1), %%rcx\n\t"
; 3335 :         "adcxq\t16(%2), %%rcx\n\t"
; 3336 :         "movq\t%%rcx, 16(%3)\n\t"
; 3337 :         "movq\t24(%1), %%rcx\n\t"
; 3338 :         "adcxq\t24(%2), %%rcx\n\t"
; 3339 :         "movq\t%%rcx, 24(%3)\n\t"
; 3340 :         "movq\t32(%1), %%rcx\n\t"
; 3341 :         "adcxq\t32(%2), %%rcx\n\t"
; 3342 :         "movq\t%%rcx, 32(%3)\n\t"
; 3343 :         "movq\t40(%1), %%rcx\n\t"
; 3344 :         "adcxq\t40(%2), %%rcx\n\t"
; 3345 :         "movq\t%%rcx, 40(%3)\n\t"
; 3346 :         "movq\t48(%1), %%rcx\n\t"
; 3347 :         "adcxq\t48(%2), %%rcx\n\t"
; 3348 :         "movq\t%%rcx, 48(%3)\n\t"
; 3349 :         "movq\t56(%1), %%rcx\n\t"
; 3350 :         "adcxq\t56(%2), %%rcx\n\t"
; 3351 :         "movq\t%%rcx, 56(%3)\n\t"
; 3352 :         "setc\t%0"
; 3353 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3354 :         :
; 3355 :         : "cc", "memory", "%rcx"
; 3356 : );
; 3357 : #else
; 3358 : #error unknown platform
; 3359 : #endif
; 3360 : #else
; 3361 : #error unknown compiler
; 3362 : #endif
; 3363 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 3364 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_8WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADC PROC

; 3197 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 3198 : #ifdef _MSC_VER
; 3199 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3200 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3201 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3202 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3203 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3204 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3205 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3206 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3207 : #elif defined(__GNUC__)
; 3208 : #ifdef _M_IX86
; 3209 :     __asm__ volatile (
; 3210 :         "addb\t$-1, %0\n\t"
; 3211 :         "movl\t(%1), %%ecx\n\t"
; 3212 :         "adcl\t(%2), %%ecx\n\t"
; 3213 :         "movl\t%%ecx, (%3)\n\t"
; 3214 :         "movl\t4(%1), %%ecx\n\t"
; 3215 :         "adcl\t4(%2), %%ecx\n\t"
; 3216 :         "movl\t%%ecx, 4(%3)\n\t"
; 3217 :         "movl\t8(%1), %%ecx\n\t"
; 3218 :         "adcl\t8(%2), %%ecx\n\t"
; 3219 :         "movl\t%%ecx, 8(%3)\n\t"
; 3220 :         "movl\t12(%1), %%ecx\n\t"
; 3221 :         "adcl\t12(%2), %%ecx\n\t"
; 3222 :         "movl\t%%ecx, 12(%3)\n\t"
; 3223 :         "movl\t16(%1), %%ecx\n\t"
; 3224 :         "adcl\t16(%2), %%ecx\n\t"
; 3225 :         "movl\t%%ecx, 16(%3)\n\t"
; 3226 :         "movl\t20(%1), %%ecx\n\t"
; 3227 :         "adcl\t20(%2), %%ecx\n\t"
; 3228 :         "movl\t%%ecx, 20(%3)\n\t"
; 3229 :         "movl\t24(%1), %%ecx\n\t"
; 3230 :         "adcl\t24(%2), %%ecx\n\t"
; 3231 :         "movl\t%%ecx, 24(%3)\n\t"
; 3232 :         "movl\t28(%1), %%ecx\n\t"
; 3233 :         "adcl\t28(%2), %%ecx\n\t"
; 3234 :         "movl\t%%ecx, 28(%3)\n\t"
; 3235 :         "setc\t%0"
; 3236 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3237 :         :
; 3238 :         : "cc", "memory", "%ecx"
; 3239 : );
; 3240 : #elif defined(_M_IX64)
; 3241 :     __asm__ volatile (
; 3242 :         "addb\t$-1, %0\n\t"
; 3243 :         "movq\t(%1), %%rcx\n\t"
; 3244 :         "adcq\t(%2), %%rcx\n\t"
; 3245 :         "movq\t%%rcx, (%3)\n\t"
; 3246 :         "movq\t8(%1), %%rcx\n\t"
; 3247 :         "adcq\t8(%2), %%rcx\n\t"
; 3248 :         "movq\t%%rcx, 8(%3)\n\t"
; 3249 :         "movq\t16(%1), %%rcx\n\t"
; 3250 :         "adcq\t16(%2), %%rcx\n\t"
; 3251 :         "movq\t%%rcx, 16(%3)\n\t"
; 3252 :         "movq\t24(%1), %%rcx\n\t"
; 3253 :         "adcq\t24(%2), %%rcx\n\t"
; 3254 :         "movq\t%%rcx, 24(%3)\n\t"
; 3255 :         "movq\t32(%1), %%rcx\n\t"
; 3256 :         "adcq\t32(%2), %%rcx\n\t"
; 3257 :         "movq\t%%rcx, 32(%3)\n\t"
; 3258 :         "movq\t40(%1), %%rcx\n\t"
; 3259 :         "adcq\t40(%2), %%rcx\n\t"
; 3260 :         "movq\t%%rcx, 40(%3)\n\t"
; 3261 :         "movq\t48(%1), %%rcx\n\t"
; 3262 :         "adcq\t48(%2), %%rcx\n\t"
; 3263 :         "movq\t%%rcx, 48(%3)\n\t"
; 3264 :         "movq\t56(%1), %%rcx\n\t"
; 3265 :         "adcq\t56(%2), %%rcx\n\t"
; 3266 :         "movq\t%%rcx, 56(%3)\n\t"
; 3267 :         "setc\t%0"
; 3268 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3269 :         :
; 3270 :         : "cc", "memory", "%rcx"
; 3271 : );
; 3272 : #else
; 3273 : #error unknown platform
; 3274 : #endif
; 3275 : #else
; 3276 : #error unknown compiler
; 3277 : #endif
; 3278 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 3279 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_8WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADCX PROC

; 2210 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 2211 : #ifdef _MSC_VER
; 2212 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2213 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2214 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2215 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2216 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2217 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2218 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2219 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2220 :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2221 :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2222 :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2223 :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2224 :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2225 :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2226 :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2227 :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2228 : #elif defined(__GNUC__)
; 2229 : #ifdef _M_IX86
; 2230 :     __asm__ volatile (
; 2231 :         "addb\t$-1, %0\n\t"
; 2232 :         "movl\t(%1), %%ecx\n\t"
; 2233 :         "adcxl\t(%2), %%ecx\n\t"
; 2234 :         "movl\t%%ecx, (%3)\n\t"
; 2235 :         "movl\t4(%1), %%ecx\n\t"
; 2236 :         "adcxl\t4(%2), %%ecx\n\t"
; 2237 :         "movl\t%%ecx, 4(%3)\n\t"
; 2238 :         "movl\t8(%1), %%ecx\n\t"
; 2239 :         "adcxl\t8(%2), %%ecx\n\t"
; 2240 :         "movl\t%%ecx, 8(%3)\n\t"
; 2241 :         "movl\t12(%1), %%ecx\n\t"
; 2242 :         "adcxl\t12(%2), %%ecx\n\t"
; 2243 :         "movl\t%%ecx, 12(%3)\n\t"
; 2244 :         "movl\t16(%1), %%ecx\n\t"
; 2245 :         "adcxl\t16(%2), %%ecx\n\t"
; 2246 :         "movl\t%%ecx, 16(%3)\n\t"
; 2247 :         "movl\t20(%1), %%ecx\n\t"
; 2248 :         "adcxl\t20(%2), %%ecx\n\t"
; 2249 :         "movl\t%%ecx, 20(%3)\n\t"
; 2250 :         "movl\t24(%1), %%ecx\n\t"
; 2251 :         "adcxl\t24(%2), %%ecx\n\t"
; 2252 :         "movl\t%%ecx, 24(%3)\n\t"
; 2253 :         "movl\t28(%1), %%ecx\n\t"
; 2254 :         "adcxl\t28(%2), %%ecx\n\t"
; 2255 :         "movl\t%%ecx, 28(%3)\n\t"
; 2256 :         "movl\t32(%1), %%ecx\n\t"
; 2257 :         "adcxl\t32(%2), %%ecx\n\t"
; 2258 :         "movl\t%%ecx, 32(%3)\n\t"
; 2259 :         "movl\t36(%1), %%ecx\n\t"
; 2260 :         "adcxl\t36(%2), %%ecx\n\t"
; 2261 :         "movl\t%%ecx, 36(%3)\n\t"
; 2262 :         "movl\t40(%1), %%ecx\n\t"
; 2263 :         "adcxl\t40(%2), %%ecx\n\t"
; 2264 :         "movl\t%%ecx, 40(%3)\n\t"
; 2265 :         "movl\t44(%1), %%ecx\n\t"
; 2266 :         "adcxl\t44(%2), %%ecx\n\t"
; 2267 :         "movl\t%%ecx, 44(%3)\n\t"
; 2268 :         "movl\t48(%1), %%ecx\n\t"
; 2269 :         "adcxl\t48(%2), %%ecx\n\t"
; 2270 :         "movl\t%%ecx, 48(%3)\n\t"
; 2271 :         "movl\t52(%1), %%ecx\n\t"
; 2272 :         "adcxl\t52(%2), %%ecx\n\t"
; 2273 :         "movl\t%%ecx, 52(%3)\n\t"
; 2274 :         "movl\t56(%1), %%ecx\n\t"
; 2275 :         "adcxl\t56(%2), %%ecx\n\t"
; 2276 :         "movl\t%%ecx, 56(%3)\n\t"
; 2277 :         "movl\t60(%1), %%ecx\n\t"
; 2278 :         "adcxl\t60(%2), %%ecx\n\t"
; 2279 :         "movl\t%%ecx, 60(%3)\n\t"
; 2280 :         "setc\t%0"
; 2281 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2282 :         :
; 2283 :         : "cc", "memory", "%ecx"
; 2284 : );
; 2285 : #elif defined(_M_IX64)
; 2286 :     __asm__ volatile (
; 2287 :         "addb\t$-1, %0\n\t"
; 2288 :         "movq\t(%1), %%rcx\n\t"
; 2289 :         "adcxq\t(%2), %%rcx\n\t"
; 2290 :         "movq\t%%rcx, (%3)\n\t"
; 2291 :         "movq\t8(%1), %%rcx\n\t"
; 2292 :         "adcxq\t8(%2), %%rcx\n\t"
; 2293 :         "movq\t%%rcx, 8(%3)\n\t"
; 2294 :         "movq\t16(%1), %%rcx\n\t"
; 2295 :         "adcxq\t16(%2), %%rcx\n\t"
; 2296 :         "movq\t%%rcx, 16(%3)\n\t"
; 2297 :         "movq\t24(%1), %%rcx\n\t"
; 2298 :         "adcxq\t24(%2), %%rcx\n\t"
; 2299 :         "movq\t%%rcx, 24(%3)\n\t"
; 2300 :         "movq\t32(%1), %%rcx\n\t"
; 2301 :         "adcxq\t32(%2), %%rcx\n\t"
; 2302 :         "movq\t%%rcx, 32(%3)\n\t"
; 2303 :         "movq\t40(%1), %%rcx\n\t"
; 2304 :         "adcxq\t40(%2), %%rcx\n\t"
; 2305 :         "movq\t%%rcx, 40(%3)\n\t"
; 2306 :         "movq\t48(%1), %%rcx\n\t"
; 2307 :         "adcxq\t48(%2), %%rcx\n\t"
; 2308 :         "movq\t%%rcx, 48(%3)\n\t"
; 2309 :         "movq\t56(%1), %%rcx\n\t"
; 2310 :         "adcxq\t56(%2), %%rcx\n\t"
; 2311 :         "movq\t%%rcx, 56(%3)\n\t"
; 2312 :         "movq\t64(%1), %%rcx\n\t"
; 2313 :         "adcxq\t64(%2), %%rcx\n\t"
; 2314 :         "movq\t%%rcx, 64(%3)\n\t"
; 2315 :         "movq\t72(%1), %%rcx\n\t"
; 2316 :         "adcxq\t72(%2), %%rcx\n\t"
; 2317 :         "movq\t%%rcx, 72(%3)\n\t"
; 2318 :         "movq\t80(%1), %%rcx\n\t"
; 2319 :         "adcxq\t80(%2), %%rcx\n\t"
; 2320 :         "movq\t%%rcx, 80(%3)\n\t"
; 2321 :         "movq\t88(%1), %%rcx\n\t"
; 2322 :         "adcxq\t88(%2), %%rcx\n\t"
; 2323 :         "movq\t%%rcx, 88(%3)\n\t"
; 2324 :         "movq\t96(%1), %%rcx\n\t"
; 2325 :         "adcxq\t96(%2), %%rcx\n\t"
; 2326 :         "movq\t%%rcx, 96(%3)\n\t"
; 2327 :         "movq\t104(%1), %%rcx\n\t"
; 2328 :         "adcxq\t104(%2), %%rcx\n\t"
; 2329 :         "movq\t%%rcx, 104(%3)\n\t"
; 2330 :         "movq\t112(%1), %%rcx\n\t"
; 2331 :         "adcxq\t112(%2), %%rcx\n\t"
; 2332 :         "movq\t%%rcx, 112(%3)\n\t"
; 2333 :         "movq\t120(%1), %%rcx\n\t"
; 2334 :         "adcxq\t120(%2), %%rcx\n\t"
; 2335 :         "movq\t%%rcx, 120(%3)\n\t"
; 2336 :         "setc\t%0"
; 2337 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2338 :         :
; 2339 :         : "cc", "memory", "%rcx"
; 2340 : );
; 2341 : #else
; 2342 : #error unknown platform
; 2343 : #endif
; 2344 : #else
; 2345 : #error unknown compiler
; 2346 : #endif
; 2347 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 2348 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_16WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADC PROC

; 2069 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 2070 : #ifdef _MSC_VER
; 2071 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2072 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2073 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2074 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2075 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2076 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2077 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2078 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2079 :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2080 :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2081 :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2082 :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2083 :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2084 :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2085 :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2086 :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2087 : #elif defined(__GNUC__)
; 2088 : #ifdef _M_IX86
; 2089 :     __asm__ volatile (
; 2090 :         "addb\t$-1, %0\n\t"
; 2091 :         "movl\t(%1), %%ecx\n\t"
; 2092 :         "adcl\t(%2), %%ecx\n\t"
; 2093 :         "movl\t%%ecx, (%3)\n\t"
; 2094 :         "movl\t4(%1), %%ecx\n\t"
; 2095 :         "adcl\t4(%2), %%ecx\n\t"
; 2096 :         "movl\t%%ecx, 4(%3)\n\t"
; 2097 :         "movl\t8(%1), %%ecx\n\t"
; 2098 :         "adcl\t8(%2), %%ecx\n\t"
; 2099 :         "movl\t%%ecx, 8(%3)\n\t"
; 2100 :         "movl\t12(%1), %%ecx\n\t"
; 2101 :         "adcl\t12(%2), %%ecx\n\t"
; 2102 :         "movl\t%%ecx, 12(%3)\n\t"
; 2103 :         "movl\t16(%1), %%ecx\n\t"
; 2104 :         "adcl\t16(%2), %%ecx\n\t"
; 2105 :         "movl\t%%ecx, 16(%3)\n\t"
; 2106 :         "movl\t20(%1), %%ecx\n\t"
; 2107 :         "adcl\t20(%2), %%ecx\n\t"
; 2108 :         "movl\t%%ecx, 20(%3)\n\t"
; 2109 :         "movl\t24(%1), %%ecx\n\t"
; 2110 :         "adcl\t24(%2), %%ecx\n\t"
; 2111 :         "movl\t%%ecx, 24(%3)\n\t"
; 2112 :         "movl\t28(%1), %%ecx\n\t"
; 2113 :         "adcl\t28(%2), %%ecx\n\t"
; 2114 :         "movl\t%%ecx, 28(%3)\n\t"
; 2115 :         "movl\t32(%1), %%ecx\n\t"
; 2116 :         "adcl\t32(%2), %%ecx\n\t"
; 2117 :         "movl\t%%ecx, 32(%3)\n\t"
; 2118 :         "movl\t36(%1), %%ecx\n\t"
; 2119 :         "adcl\t36(%2), %%ecx\n\t"
; 2120 :         "movl\t%%ecx, 36(%3)\n\t"
; 2121 :         "movl\t40(%1), %%ecx\n\t"
; 2122 :         "adcl\t40(%2), %%ecx\n\t"
; 2123 :         "movl\t%%ecx, 40(%3)\n\t"
; 2124 :         "movl\t44(%1), %%ecx\n\t"
; 2125 :         "adcl\t44(%2), %%ecx\n\t"
; 2126 :         "movl\t%%ecx, 44(%3)\n\t"
; 2127 :         "movl\t48(%1), %%ecx\n\t"
; 2128 :         "adcl\t48(%2), %%ecx\n\t"
; 2129 :         "movl\t%%ecx, 48(%3)\n\t"
; 2130 :         "movl\t52(%1), %%ecx\n\t"
; 2131 :         "adcl\t52(%2), %%ecx\n\t"
; 2132 :         "movl\t%%ecx, 52(%3)\n\t"
; 2133 :         "movl\t56(%1), %%ecx\n\t"
; 2134 :         "adcl\t56(%2), %%ecx\n\t"
; 2135 :         "movl\t%%ecx, 56(%3)\n\t"
; 2136 :         "movl\t60(%1), %%ecx\n\t"
; 2137 :         "adcl\t60(%2), %%ecx\n\t"
; 2138 :         "movl\t%%ecx, 60(%3)\n\t"
; 2139 :         "setc\t%0"
; 2140 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2141 :         :
; 2142 :         : "cc", "memory", "%ecx"
; 2143 : );
; 2144 : #elif defined(_M_IX64)
; 2145 :     __asm__ volatile (
; 2146 :         "addb\t$-1, %0\n\t"
; 2147 :         "movq\t(%1), %%rcx\n\t"
; 2148 :         "adcq\t(%2), %%rcx\n\t"
; 2149 :         "movq\t%%rcx, (%3)\n\t"
; 2150 :         "movq\t8(%1), %%rcx\n\t"
; 2151 :         "adcq\t8(%2), %%rcx\n\t"
; 2152 :         "movq\t%%rcx, 8(%3)\n\t"
; 2153 :         "movq\t16(%1), %%rcx\n\t"
; 2154 :         "adcq\t16(%2), %%rcx\n\t"
; 2155 :         "movq\t%%rcx, 16(%3)\n\t"
; 2156 :         "movq\t24(%1), %%rcx\n\t"
; 2157 :         "adcq\t24(%2), %%rcx\n\t"
; 2158 :         "movq\t%%rcx, 24(%3)\n\t"
; 2159 :         "movq\t32(%1), %%rcx\n\t"
; 2160 :         "adcq\t32(%2), %%rcx\n\t"
; 2161 :         "movq\t%%rcx, 32(%3)\n\t"
; 2162 :         "movq\t40(%1), %%rcx\n\t"
; 2163 :         "adcq\t40(%2), %%rcx\n\t"
; 2164 :         "movq\t%%rcx, 40(%3)\n\t"
; 2165 :         "movq\t48(%1), %%rcx\n\t"
; 2166 :         "adcq\t48(%2), %%rcx\n\t"
; 2167 :         "movq\t%%rcx, 48(%3)\n\t"
; 2168 :         "movq\t56(%1), %%rcx\n\t"
; 2169 :         "adcq\t56(%2), %%rcx\n\t"
; 2170 :         "movq\t%%rcx, 56(%3)\n\t"
; 2171 :         "movq\t64(%1), %%rcx\n\t"
; 2172 :         "adcq\t64(%2), %%rcx\n\t"
; 2173 :         "movq\t%%rcx, 64(%3)\n\t"
; 2174 :         "movq\t72(%1), %%rcx\n\t"
; 2175 :         "adcq\t72(%2), %%rcx\n\t"
; 2176 :         "movq\t%%rcx, 72(%3)\n\t"
; 2177 :         "movq\t80(%1), %%rcx\n\t"
; 2178 :         "adcq\t80(%2), %%rcx\n\t"
; 2179 :         "movq\t%%rcx, 80(%3)\n\t"
; 2180 :         "movq\t88(%1), %%rcx\n\t"
; 2181 :         "adcq\t88(%2), %%rcx\n\t"
; 2182 :         "movq\t%%rcx, 88(%3)\n\t"
; 2183 :         "movq\t96(%1), %%rcx\n\t"
; 2184 :         "adcq\t96(%2), %%rcx\n\t"
; 2185 :         "movq\t%%rcx, 96(%3)\n\t"
; 2186 :         "movq\t104(%1), %%rcx\n\t"
; 2187 :         "adcq\t104(%2), %%rcx\n\t"
; 2188 :         "movq\t%%rcx, 104(%3)\n\t"
; 2189 :         "movq\t112(%1), %%rcx\n\t"
; 2190 :         "adcq\t112(%2), %%rcx\n\t"
; 2191 :         "movq\t%%rcx, 112(%3)\n\t"
; 2192 :         "movq\t120(%1), %%rcx\n\t"
; 2193 :         "adcq\t120(%2), %%rcx\n\t"
; 2194 :         "movq\t%%rcx, 120(%3)\n\t"
; 2195 :         "setc\t%0"
; 2196 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2197 :         :
; 2198 :         : "cc", "memory", "%rcx"
; 2199 : );
; 2200 : #else
; 2201 : #error unknown platform
; 2202 : #endif
; 2203 : #else
; 2204 : #error unknown compiler
; 2205 : #endif
; 2206 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 2207 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_16WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADCX PROC

; 298  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 299  : #ifdef _MSC_VER
; 300  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 301  :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 302  :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 303  :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 304  :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 305  :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 306  :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 307  :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 308  :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 309  :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 310  :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 311  :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 312  :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 313  :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 314  :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 315  :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 316  :     c = _ADDX_UNIT(c, xp[16], yp[16], &zp[16]);

	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 317  :     c = _ADDX_UNIT(c, xp[17], yp[17], &zp[17]);

	mov	ecx, 4
	imul	edx, ecx, 17
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 318  :     c = _ADDX_UNIT(c, xp[18], yp[18], &zp[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 18
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 319  :     c = _ADDX_UNIT(c, xp[19], yp[19], &zp[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 19
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 320  :     c = _ADDX_UNIT(c, xp[20], yp[20], &zp[20]);

	mov	ecx, 4
	imul	edx, ecx, 20
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 321  :     c = _ADDX_UNIT(c, xp[21], yp[21], &zp[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 21
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 322  :     c = _ADDX_UNIT(c, xp[22], yp[22], &zp[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 22
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 323  :     c = _ADDX_UNIT(c, xp[23], yp[23], &zp[23]);

	mov	ecx, 4
	imul	edx, ecx, 23
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 324  :     c = _ADDX_UNIT(c, xp[24], yp[24], &zp[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 24
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 325  :     c = _ADDX_UNIT(c, xp[25], yp[25], &zp[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 25
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 326  :     c = _ADDX_UNIT(c, xp[26], yp[26], &zp[26]);

	mov	ecx, 4
	imul	edx, ecx, 26
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 327  :     c = _ADDX_UNIT(c, xp[27], yp[27], &zp[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 27
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 328  :     c = _ADDX_UNIT(c, xp[28], yp[28], &zp[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 28
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 329  :     c = _ADDX_UNIT(c, xp[29], yp[29], &zp[29]);

	mov	ecx, 4
	imul	edx, ecx, 29
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 330  :     c = _ADDX_UNIT(c, xp[30], yp[30], &zp[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 30
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 331  :     c = _ADDX_UNIT(c, xp[31], yp[31], &zp[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 31
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 332  : #elif defined(__GNUC__)
; 333  : #ifdef _M_IX86
; 334  :     __asm__ volatile (
; 335  :         "addb\t$-1, %0\n\t"
; 336  :         "movl\t(%1), %%ecx\n\t"
; 337  :         "adcxl\t(%2), %%ecx\n\t"
; 338  :         "movl\t%%ecx, (%3)\n\t"
; 339  :         "movl\t4(%1), %%ecx\n\t"
; 340  :         "adcxl\t4(%2), %%ecx\n\t"
; 341  :         "movl\t%%ecx, 4(%3)\n\t"
; 342  :         "movl\t8(%1), %%ecx\n\t"
; 343  :         "adcxl\t8(%2), %%ecx\n\t"
; 344  :         "movl\t%%ecx, 8(%3)\n\t"
; 345  :         "movl\t12(%1), %%ecx\n\t"
; 346  :         "adcxl\t12(%2), %%ecx\n\t"
; 347  :         "movl\t%%ecx, 12(%3)\n\t"
; 348  :         "movl\t16(%1), %%ecx\n\t"
; 349  :         "adcxl\t16(%2), %%ecx\n\t"
; 350  :         "movl\t%%ecx, 16(%3)\n\t"
; 351  :         "movl\t20(%1), %%ecx\n\t"
; 352  :         "adcxl\t20(%2), %%ecx\n\t"
; 353  :         "movl\t%%ecx, 20(%3)\n\t"
; 354  :         "movl\t24(%1), %%ecx\n\t"
; 355  :         "adcxl\t24(%2), %%ecx\n\t"
; 356  :         "movl\t%%ecx, 24(%3)\n\t"
; 357  :         "movl\t28(%1), %%ecx\n\t"
; 358  :         "adcxl\t28(%2), %%ecx\n\t"
; 359  :         "movl\t%%ecx, 28(%3)\n\t"
; 360  :         "movl\t32(%1), %%ecx\n\t"
; 361  :         "adcxl\t32(%2), %%ecx\n\t"
; 362  :         "movl\t%%ecx, 32(%3)\n\t"
; 363  :         "movl\t36(%1), %%ecx\n\t"
; 364  :         "adcxl\t36(%2), %%ecx\n\t"
; 365  :         "movl\t%%ecx, 36(%3)\n\t"
; 366  :         "movl\t40(%1), %%ecx\n\t"
; 367  :         "adcxl\t40(%2), %%ecx\n\t"
; 368  :         "movl\t%%ecx, 40(%3)\n\t"
; 369  :         "movl\t44(%1), %%ecx\n\t"
; 370  :         "adcxl\t44(%2), %%ecx\n\t"
; 371  :         "movl\t%%ecx, 44(%3)\n\t"
; 372  :         "movl\t48(%1), %%ecx\n\t"
; 373  :         "adcxl\t48(%2), %%ecx\n\t"
; 374  :         "movl\t%%ecx, 48(%3)\n\t"
; 375  :         "movl\t52(%1), %%ecx\n\t"
; 376  :         "adcxl\t52(%2), %%ecx\n\t"
; 377  :         "movl\t%%ecx, 52(%3)\n\t"
; 378  :         "movl\t56(%1), %%ecx\n\t"
; 379  :         "adcxl\t56(%2), %%ecx\n\t"
; 380  :         "movl\t%%ecx, 56(%3)\n\t"
; 381  :         "movl\t60(%1), %%ecx\n\t"
; 382  :         "adcxl\t60(%2), %%ecx\n\t"
; 383  :         "movl\t%%ecx, 60(%3)\n\t"
; 384  :         "movl\t64(%1), %%ecx\n\t"
; 385  :         "adcxl\t64(%2), %%ecx\n\t"
; 386  :         "movl\t%%ecx, 64(%3)\n\t"
; 387  :         "movl\t68(%1), %%ecx\n\t"
; 388  :         "adcxl\t68(%2), %%ecx\n\t"
; 389  :         "movl\t%%ecx, 68(%3)\n\t"
; 390  :         "movl\t72(%1), %%ecx\n\t"
; 391  :         "adcxl\t72(%2), %%ecx\n\t"
; 392  :         "movl\t%%ecx, 72(%3)\n\t"
; 393  :         "movl\t76(%1), %%ecx\n\t"
; 394  :         "adcxl\t76(%2), %%ecx\n\t"
; 395  :         "movl\t%%ecx, 76(%3)\n\t"
; 396  :         "movl\t80(%1), %%ecx\n\t"
; 397  :         "adcxl\t80(%2), %%ecx\n\t"
; 398  :         "movl\t%%ecx, 80(%3)\n\t"
; 399  :         "movl\t84(%1), %%ecx\n\t"
; 400  :         "adcxl\t84(%2), %%ecx\n\t"
; 401  :         "movl\t%%ecx, 84(%3)\n\t"
; 402  :         "movl\t88(%1), %%ecx\n\t"
; 403  :         "adcxl\t88(%2), %%ecx\n\t"
; 404  :         "movl\t%%ecx, 88(%3)\n\t"
; 405  :         "movl\t92(%1), %%ecx\n\t"
; 406  :         "adcxl\t92(%2), %%ecx\n\t"
; 407  :         "movl\t%%ecx, 92(%3)\n\t"
; 408  :         "movl\t96(%1), %%ecx\n\t"
; 409  :         "adcxl\t96(%2), %%ecx\n\t"
; 410  :         "movl\t%%ecx, 96(%3)\n\t"
; 411  :         "movl\t100(%1), %%ecx\n\t"
; 412  :         "adcxl\t100(%2), %%ecx\n\t"
; 413  :         "movl\t%%ecx, 100(%3)\n\t"
; 414  :         "movl\t104(%1), %%ecx\n\t"
; 415  :         "adcxl\t104(%2), %%ecx\n\t"
; 416  :         "movl\t%%ecx, 104(%3)\n\t"
; 417  :         "movl\t108(%1), %%ecx\n\t"
; 418  :         "adcxl\t108(%2), %%ecx\n\t"
; 419  :         "movl\t%%ecx, 108(%3)\n\t"
; 420  :         "movl\t112(%1), %%ecx\n\t"
; 421  :         "adcxl\t112(%2), %%ecx\n\t"
; 422  :         "movl\t%%ecx, 112(%3)\n\t"
; 423  :         "movl\t116(%1), %%ecx\n\t"
; 424  :         "adcxl\t116(%2), %%ecx\n\t"
; 425  :         "movl\t%%ecx, 116(%3)\n\t"
; 426  :         "movl\t120(%1), %%ecx\n\t"
; 427  :         "adcxl\t120(%2), %%ecx\n\t"
; 428  :         "movl\t%%ecx, 120(%3)\n\t"
; 429  :         "movl\t124(%1), %%ecx\n\t"
; 430  :         "adcxl\t124(%2), %%ecx\n\t"
; 431  :         "movl\t%%ecx, 124(%3)\n\t"
; 432  :         "setc\t%0"
; 433  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 434  :         :
; 435  :         : "cc", "memory", "%ecx"
; 436  : );
; 437  : #elif defined(_M_IX64)
; 438  :     __asm__ volatile (
; 439  :         "addb\t$-1, %0\n\t"
; 440  :         "movq\t(%1), %%rcx\n\t"
; 441  :         "adcxq\t(%2), %%rcx\n\t"
; 442  :         "movq\t%%rcx, (%3)\n\t"
; 443  :         "movq\t8(%1), %%rcx\n\t"
; 444  :         "adcxq\t8(%2), %%rcx\n\t"
; 445  :         "movq\t%%rcx, 8(%3)\n\t"
; 446  :         "movq\t16(%1), %%rcx\n\t"
; 447  :         "adcxq\t16(%2), %%rcx\n\t"
; 448  :         "movq\t%%rcx, 16(%3)\n\t"
; 449  :         "movq\t24(%1), %%rcx\n\t"
; 450  :         "adcxq\t24(%2), %%rcx\n\t"
; 451  :         "movq\t%%rcx, 24(%3)\n\t"
; 452  :         "movq\t32(%1), %%rcx\n\t"
; 453  :         "adcxq\t32(%2), %%rcx\n\t"
; 454  :         "movq\t%%rcx, 32(%3)\n\t"
; 455  :         "movq\t40(%1), %%rcx\n\t"
; 456  :         "adcxq\t40(%2), %%rcx\n\t"
; 457  :         "movq\t%%rcx, 40(%3)\n\t"
; 458  :         "movq\t48(%1), %%rcx\n\t"
; 459  :         "adcxq\t48(%2), %%rcx\n\t"
; 460  :         "movq\t%%rcx, 48(%3)\n\t"
; 461  :         "movq\t56(%1), %%rcx\n\t"
; 462  :         "adcxq\t56(%2), %%rcx\n\t"
; 463  :         "movq\t%%rcx, 56(%3)\n\t"
; 464  :         "movq\t64(%1), %%rcx\n\t"
; 465  :         "adcxq\t64(%2), %%rcx\n\t"
; 466  :         "movq\t%%rcx, 64(%3)\n\t"
; 467  :         "movq\t72(%1), %%rcx\n\t"
; 468  :         "adcxq\t72(%2), %%rcx\n\t"
; 469  :         "movq\t%%rcx, 72(%3)\n\t"
; 470  :         "movq\t80(%1), %%rcx\n\t"
; 471  :         "adcxq\t80(%2), %%rcx\n\t"
; 472  :         "movq\t%%rcx, 80(%3)\n\t"
; 473  :         "movq\t88(%1), %%rcx\n\t"
; 474  :         "adcxq\t88(%2), %%rcx\n\t"
; 475  :         "movq\t%%rcx, 88(%3)\n\t"
; 476  :         "movq\t96(%1), %%rcx\n\t"
; 477  :         "adcxq\t96(%2), %%rcx\n\t"
; 478  :         "movq\t%%rcx, 96(%3)\n\t"
; 479  :         "movq\t104(%1), %%rcx\n\t"
; 480  :         "adcxq\t104(%2), %%rcx\n\t"
; 481  :         "movq\t%%rcx, 104(%3)\n\t"
; 482  :         "movq\t112(%1), %%rcx\n\t"
; 483  :         "adcxq\t112(%2), %%rcx\n\t"
; 484  :         "movq\t%%rcx, 112(%3)\n\t"
; 485  :         "movq\t120(%1), %%rcx\n\t"
; 486  :         "adcxq\t120(%2), %%rcx\n\t"
; 487  :         "movq\t%%rcx, 120(%3)\n\t"
; 488  :         "movq\t128(%1), %%rcx\n\t"
; 489  :         "adcxq\t128(%2), %%rcx\n\t"
; 490  :         "movq\t%%rcx, 128(%3)\n\t"
; 491  :         "movq\t136(%1), %%rcx\n\t"
; 492  :         "adcxq\t136(%2), %%rcx\n\t"
; 493  :         "movq\t%%rcx, 136(%3)\n\t"
; 494  :         "movq\t144(%1), %%rcx\n\t"
; 495  :         "adcxq\t144(%2), %%rcx\n\t"
; 496  :         "movq\t%%rcx, 144(%3)\n\t"
; 497  :         "movq\t152(%1), %%rcx\n\t"
; 498  :         "adcxq\t152(%2), %%rcx\n\t"
; 499  :         "movq\t%%rcx, 152(%3)\n\t"
; 500  :         "movq\t160(%1), %%rcx\n\t"
; 501  :         "adcxq\t160(%2), %%rcx\n\t"
; 502  :         "movq\t%%rcx, 160(%3)\n\t"
; 503  :         "movq\t168(%1), %%rcx\n\t"
; 504  :         "adcxq\t168(%2), %%rcx\n\t"
; 505  :         "movq\t%%rcx, 168(%3)\n\t"
; 506  :         "movq\t176(%1), %%rcx\n\t"
; 507  :         "adcxq\t176(%2), %%rcx\n\t"
; 508  :         "movq\t%%rcx, 176(%3)\n\t"
; 509  :         "movq\t184(%1), %%rcx\n\t"
; 510  :         "adcxq\t184(%2), %%rcx\n\t"
; 511  :         "movq\t%%rcx, 184(%3)\n\t"
; 512  :         "movq\t192(%1), %%rcx\n\t"
; 513  :         "adcxq\t192(%2), %%rcx\n\t"
; 514  :         "movq\t%%rcx, 192(%3)\n\t"
; 515  :         "movq\t200(%1), %%rcx\n\t"
; 516  :         "adcxq\t200(%2), %%rcx\n\t"
; 517  :         "movq\t%%rcx, 200(%3)\n\t"
; 518  :         "movq\t208(%1), %%rcx\n\t"
; 519  :         "adcxq\t208(%2), %%rcx\n\t"
; 520  :         "movq\t%%rcx, 208(%3)\n\t"
; 521  :         "movq\t216(%1), %%rcx\n\t"
; 522  :         "adcxq\t216(%2), %%rcx\n\t"
; 523  :         "movq\t%%rcx, 216(%3)\n\t"
; 524  :         "movq\t224(%1), %%rcx\n\t"
; 525  :         "adcxq\t224(%2), %%rcx\n\t"
; 526  :         "movq\t%%rcx, 224(%3)\n\t"
; 527  :         "movq\t232(%1), %%rcx\n\t"
; 528  :         "adcxq\t232(%2), %%rcx\n\t"
; 529  :         "movq\t%%rcx, 232(%3)\n\t"
; 530  :         "movq\t240(%1), %%rcx\n\t"
; 531  :         "adcxq\t240(%2), %%rcx\n\t"
; 532  :         "movq\t%%rcx, 240(%3)\n\t"
; 533  :         "movq\t248(%1), %%rcx\n\t"
; 534  :         "adcxq\t248(%2), %%rcx\n\t"
; 535  :         "movq\t%%rcx, 248(%3)\n\t"
; 536  :         "setc\t%0"
; 537  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 538  :         :
; 539  :         : "cc", "memory", "%rcx"
; 540  : );
; 541  : #else
; 542  : #error unknown platform
; 543  : #endif
; 544  : #else
; 545  : #error unknown compiler
; 546  : #endif
; 547  :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 548  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_32WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADC PROC

; 45   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 46   : #ifdef _MSC_VER
; 47   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 48   :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 49   :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 50   :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 51   :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 52   :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 53   :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 54   :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 55   :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 56   :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 57   :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 58   :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 59   :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 60   :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 61   :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 62   :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 63   :     c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);

	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 64   :     c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);

	mov	ecx, 4
	imul	edx, ecx, 17
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 65   :     c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 18
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 66   :     c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 19
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 67   :     c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);

	mov	ecx, 4
	imul	edx, ecx, 20
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 68   :     c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 21
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 69   :     c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 22
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 70   :     c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);

	mov	ecx, 4
	imul	edx, ecx, 23
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 71   :     c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 24
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 72   :     c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 25
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 73   :     c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);

	mov	ecx, 4
	imul	edx, ecx, 26
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 74   :     c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 27
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 75   :     c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 28
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 76   :     c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);

	mov	ecx, 4
	imul	edx, ecx, 29
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 77   :     c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 30
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 78   :     c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 31
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 79   : #elif defined(__GNUC__)
; 80   : #ifdef _M_IX86
; 81   :     __asm__ volatile (
; 82   :         "addb\t$-1, %0\n\t"
; 83   :         "movl\t(%1), %%ecx\n\t"
; 84   :         "adcl\t(%2), %%ecx\n\t"
; 85   :         "movl\t%%ecx, (%3)\n\t"
; 86   :         "movl\t4(%1), %%ecx\n\t"
; 87   :         "adcl\t4(%2), %%ecx\n\t"
; 88   :         "movl\t%%ecx, 4(%3)\n\t"
; 89   :         "movl\t8(%1), %%ecx\n\t"
; 90   :         "adcl\t8(%2), %%ecx\n\t"
; 91   :         "movl\t%%ecx, 8(%3)\n\t"
; 92   :         "movl\t12(%1), %%ecx\n\t"
; 93   :         "adcl\t12(%2), %%ecx\n\t"
; 94   :         "movl\t%%ecx, 12(%3)\n\t"
; 95   :         "movl\t16(%1), %%ecx\n\t"
; 96   :         "adcl\t16(%2), %%ecx\n\t"
; 97   :         "movl\t%%ecx, 16(%3)\n\t"
; 98   :         "movl\t20(%1), %%ecx\n\t"
; 99   :         "adcl\t20(%2), %%ecx\n\t"
; 100  :         "movl\t%%ecx, 20(%3)\n\t"
; 101  :         "movl\t24(%1), %%ecx\n\t"
; 102  :         "adcl\t24(%2), %%ecx\n\t"
; 103  :         "movl\t%%ecx, 24(%3)\n\t"
; 104  :         "movl\t28(%1), %%ecx\n\t"
; 105  :         "adcl\t28(%2), %%ecx\n\t"
; 106  :         "movl\t%%ecx, 28(%3)\n\t"
; 107  :         "movl\t32(%1), %%ecx\n\t"
; 108  :         "adcl\t32(%2), %%ecx\n\t"
; 109  :         "movl\t%%ecx, 32(%3)\n\t"
; 110  :         "movl\t36(%1), %%ecx\n\t"
; 111  :         "adcl\t36(%2), %%ecx\n\t"
; 112  :         "movl\t%%ecx, 36(%3)\n\t"
; 113  :         "movl\t40(%1), %%ecx\n\t"
; 114  :         "adcl\t40(%2), %%ecx\n\t"
; 115  :         "movl\t%%ecx, 40(%3)\n\t"
; 116  :         "movl\t44(%1), %%ecx\n\t"
; 117  :         "adcl\t44(%2), %%ecx\n\t"
; 118  :         "movl\t%%ecx, 44(%3)\n\t"
; 119  :         "movl\t48(%1), %%ecx\n\t"
; 120  :         "adcl\t48(%2), %%ecx\n\t"
; 121  :         "movl\t%%ecx, 48(%3)\n\t"
; 122  :         "movl\t52(%1), %%ecx\n\t"
; 123  :         "adcl\t52(%2), %%ecx\n\t"
; 124  :         "movl\t%%ecx, 52(%3)\n\t"
; 125  :         "movl\t56(%1), %%ecx\n\t"
; 126  :         "adcl\t56(%2), %%ecx\n\t"
; 127  :         "movl\t%%ecx, 56(%3)\n\t"
; 128  :         "movl\t60(%1), %%ecx\n\t"
; 129  :         "adcl\t60(%2), %%ecx\n\t"
; 130  :         "movl\t%%ecx, 60(%3)\n\t"
; 131  :         "movl\t64(%1), %%ecx\n\t"
; 132  :         "adcl\t64(%2), %%ecx\n\t"
; 133  :         "movl\t%%ecx, 64(%3)\n\t"
; 134  :         "movl\t68(%1), %%ecx\n\t"
; 135  :         "adcl\t68(%2), %%ecx\n\t"
; 136  :         "movl\t%%ecx, 68(%3)\n\t"
; 137  :         "movl\t72(%1), %%ecx\n\t"
; 138  :         "adcl\t72(%2), %%ecx\n\t"
; 139  :         "movl\t%%ecx, 72(%3)\n\t"
; 140  :         "movl\t76(%1), %%ecx\n\t"
; 141  :         "adcl\t76(%2), %%ecx\n\t"
; 142  :         "movl\t%%ecx, 76(%3)\n\t"
; 143  :         "movl\t80(%1), %%ecx\n\t"
; 144  :         "adcl\t80(%2), %%ecx\n\t"
; 145  :         "movl\t%%ecx, 80(%3)\n\t"
; 146  :         "movl\t84(%1), %%ecx\n\t"
; 147  :         "adcl\t84(%2), %%ecx\n\t"
; 148  :         "movl\t%%ecx, 84(%3)\n\t"
; 149  :         "movl\t88(%1), %%ecx\n\t"
; 150  :         "adcl\t88(%2), %%ecx\n\t"
; 151  :         "movl\t%%ecx, 88(%3)\n\t"
; 152  :         "movl\t92(%1), %%ecx\n\t"
; 153  :         "adcl\t92(%2), %%ecx\n\t"
; 154  :         "movl\t%%ecx, 92(%3)\n\t"
; 155  :         "movl\t96(%1), %%ecx\n\t"
; 156  :         "adcl\t96(%2), %%ecx\n\t"
; 157  :         "movl\t%%ecx, 96(%3)\n\t"
; 158  :         "movl\t100(%1), %%ecx\n\t"
; 159  :         "adcl\t100(%2), %%ecx\n\t"
; 160  :         "movl\t%%ecx, 100(%3)\n\t"
; 161  :         "movl\t104(%1), %%ecx\n\t"
; 162  :         "adcl\t104(%2), %%ecx\n\t"
; 163  :         "movl\t%%ecx, 104(%3)\n\t"
; 164  :         "movl\t108(%1), %%ecx\n\t"
; 165  :         "adcl\t108(%2), %%ecx\n\t"
; 166  :         "movl\t%%ecx, 108(%3)\n\t"
; 167  :         "movl\t112(%1), %%ecx\n\t"
; 168  :         "adcl\t112(%2), %%ecx\n\t"
; 169  :         "movl\t%%ecx, 112(%3)\n\t"
; 170  :         "movl\t116(%1), %%ecx\n\t"
; 171  :         "adcl\t116(%2), %%ecx\n\t"
; 172  :         "movl\t%%ecx, 116(%3)\n\t"
; 173  :         "movl\t120(%1), %%ecx\n\t"
; 174  :         "adcl\t120(%2), %%ecx\n\t"
; 175  :         "movl\t%%ecx, 120(%3)\n\t"
; 176  :         "movl\t124(%1), %%ecx\n\t"
; 177  :         "adcl\t124(%2), %%ecx\n\t"
; 178  :         "movl\t%%ecx, 124(%3)\n\t"
; 179  :         "setc\t%0"
; 180  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 181  :         :
; 182  :         : "cc", "memory", "%ecx"
; 183  : );
; 184  : #elif defined(_M_IX64)
; 185  :     __asm__ volatile (
; 186  :         "addb\t$-1, %0\n\t"
; 187  :         "movq\t(%1), %%rcx\n\t"
; 188  :         "adcq\t(%2), %%rcx\n\t"
; 189  :         "movq\t%%rcx, (%3)\n\t"
; 190  :         "movq\t8(%1), %%rcx\n\t"
; 191  :         "adcq\t8(%2), %%rcx\n\t"
; 192  :         "movq\t%%rcx, 8(%3)\n\t"
; 193  :         "movq\t16(%1), %%rcx\n\t"
; 194  :         "adcq\t16(%2), %%rcx\n\t"
; 195  :         "movq\t%%rcx, 16(%3)\n\t"
; 196  :         "movq\t24(%1), %%rcx\n\t"
; 197  :         "adcq\t24(%2), %%rcx\n\t"
; 198  :         "movq\t%%rcx, 24(%3)\n\t"
; 199  :         "movq\t32(%1), %%rcx\n\t"
; 200  :         "adcq\t32(%2), %%rcx\n\t"
; 201  :         "movq\t%%rcx, 32(%3)\n\t"
; 202  :         "movq\t40(%1), %%rcx\n\t"
; 203  :         "adcq\t40(%2), %%rcx\n\t"
; 204  :         "movq\t%%rcx, 40(%3)\n\t"
; 205  :         "movq\t48(%1), %%rcx\n\t"
; 206  :         "adcq\t48(%2), %%rcx\n\t"
; 207  :         "movq\t%%rcx, 48(%3)\n\t"
; 208  :         "movq\t56(%1), %%rcx\n\t"
; 209  :         "adcq\t56(%2), %%rcx\n\t"
; 210  :         "movq\t%%rcx, 56(%3)\n\t"
; 211  :         "movq\t64(%1), %%rcx\n\t"
; 212  :         "adcq\t64(%2), %%rcx\n\t"
; 213  :         "movq\t%%rcx, 64(%3)\n\t"
; 214  :         "movq\t72(%1), %%rcx\n\t"
; 215  :         "adcq\t72(%2), %%rcx\n\t"
; 216  :         "movq\t%%rcx, 72(%3)\n\t"
; 217  :         "movq\t80(%1), %%rcx\n\t"
; 218  :         "adcq\t80(%2), %%rcx\n\t"
; 219  :         "movq\t%%rcx, 80(%3)\n\t"
; 220  :         "movq\t88(%1), %%rcx\n\t"
; 221  :         "adcq\t88(%2), %%rcx\n\t"
; 222  :         "movq\t%%rcx, 88(%3)\n\t"
; 223  :         "movq\t96(%1), %%rcx\n\t"
; 224  :         "adcq\t96(%2), %%rcx\n\t"
; 225  :         "movq\t%%rcx, 96(%3)\n\t"
; 226  :         "movq\t104(%1), %%rcx\n\t"
; 227  :         "adcq\t104(%2), %%rcx\n\t"
; 228  :         "movq\t%%rcx, 104(%3)\n\t"
; 229  :         "movq\t112(%1), %%rcx\n\t"
; 230  :         "adcq\t112(%2), %%rcx\n\t"
; 231  :         "movq\t%%rcx, 112(%3)\n\t"
; 232  :         "movq\t120(%1), %%rcx\n\t"
; 233  :         "adcq\t120(%2), %%rcx\n\t"
; 234  :         "movq\t%%rcx, 120(%3)\n\t"
; 235  :         "movq\t128(%1), %%rcx\n\t"
; 236  :         "adcq\t128(%2), %%rcx\n\t"
; 237  :         "movq\t%%rcx, 128(%3)\n\t"
; 238  :         "movq\t136(%1), %%rcx\n\t"
; 239  :         "adcq\t136(%2), %%rcx\n\t"
; 240  :         "movq\t%%rcx, 136(%3)\n\t"
; 241  :         "movq\t144(%1), %%rcx\n\t"
; 242  :         "adcq\t144(%2), %%rcx\n\t"
; 243  :         "movq\t%%rcx, 144(%3)\n\t"
; 244  :         "movq\t152(%1), %%rcx\n\t"
; 245  :         "adcq\t152(%2), %%rcx\n\t"
; 246  :         "movq\t%%rcx, 152(%3)\n\t"
; 247  :         "movq\t160(%1), %%rcx\n\t"
; 248  :         "adcq\t160(%2), %%rcx\n\t"
; 249  :         "movq\t%%rcx, 160(%3)\n\t"
; 250  :         "movq\t168(%1), %%rcx\n\t"
; 251  :         "adcq\t168(%2), %%rcx\n\t"
; 252  :         "movq\t%%rcx, 168(%3)\n\t"
; 253  :         "movq\t176(%1), %%rcx\n\t"
; 254  :         "adcq\t176(%2), %%rcx\n\t"
; 255  :         "movq\t%%rcx, 176(%3)\n\t"
; 256  :         "movq\t184(%1), %%rcx\n\t"
; 257  :         "adcq\t184(%2), %%rcx\n\t"
; 258  :         "movq\t%%rcx, 184(%3)\n\t"
; 259  :         "movq\t192(%1), %%rcx\n\t"
; 260  :         "adcq\t192(%2), %%rcx\n\t"
; 261  :         "movq\t%%rcx, 192(%3)\n\t"
; 262  :         "movq\t200(%1), %%rcx\n\t"
; 263  :         "adcq\t200(%2), %%rcx\n\t"
; 264  :         "movq\t%%rcx, 200(%3)\n\t"
; 265  :         "movq\t208(%1), %%rcx\n\t"
; 266  :         "adcq\t208(%2), %%rcx\n\t"
; 267  :         "movq\t%%rcx, 208(%3)\n\t"
; 268  :         "movq\t216(%1), %%rcx\n\t"
; 269  :         "adcq\t216(%2), %%rcx\n\t"
; 270  :         "movq\t%%rcx, 216(%3)\n\t"
; 271  :         "movq\t224(%1), %%rcx\n\t"
; 272  :         "adcq\t224(%2), %%rcx\n\t"
; 273  :         "movq\t%%rcx, 224(%3)\n\t"
; 274  :         "movq\t232(%1), %%rcx\n\t"
; 275  :         "adcq\t232(%2), %%rcx\n\t"
; 276  :         "movq\t%%rcx, 232(%3)\n\t"
; 277  :         "movq\t240(%1), %%rcx\n\t"
; 278  :         "adcq\t240(%2), %%rcx\n\t"
; 279  :         "movq\t%%rcx, 240(%3)\n\t"
; 280  :         "movq\t248(%1), %%rcx\n\t"
; 281  :         "adcq\t248(%2), %%rcx\n\t"
; 282  :         "movq\t%%rcx, 248(%3)\n\t"
; 283  :         "setc\t%0"
; 284  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 285  :         :
; 286  :         : "cc", "memory", "%rcx"
; 287  : );
; 288  : #else
; 289  : #error unknown platform
; 290  : #endif
; 291  : #else
; 292  : #error unknown compiler
; 293  : #endif
; 294  :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 295  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_32WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 915  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 916  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 917  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 918  : #ifdef _M_IX86
; 919  :     _UINT32_T pos;
; 920  : #ifdef _MSC_VER
; 921  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 922  : #elif defined(__GNUC__)
; 923  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 924  : #else
; 925  : #error unknown compiler
; 926  : #endif
; 927  : #elif defined(_M_X64)
; 928  : #ifdef _MSC_VER
; 929  :     _UINT32_T pos;
; 930  :     _BitScanReverse64(&pos, x);
; 931  : #elif defined(__GNUC__)
; 932  :     _UINT64_T pos;
; 933  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 934  : #else
; 935  : #error unknown compiler
; 936  : #endif
; 937  : #else
; 938  : #error unknown platform
; 939  : #endif
; 940  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 941  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 882  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 883  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 884  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 885  :     _UINT32_T pos;
; 886  : #ifdef _MSC_VER
; 887  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 888  : #elif defined(__GNUC__)
; 889  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 890  : #else
; 891  : #error unknown compiler
; 892  : #endif
; 893  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 894  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 527  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 528  : #ifdef _M_IX86
; 529  :     return (_addcarryx_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adcx	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 530  : #elif defined(_M_X64)
; 531  :     return (_addcarryx_u64(carry, u, v, w));
; 532  : #else
; 533  : #error unknown platform
; 534  : #endif
; 535  : }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 499  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 500  : #ifdef _M_IX86
; 501  :     return (_addcarry_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adc	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 502  : #elif defined(_M_X64)
; 503  :     return (_addcarry_u64(carry, u, v, w));
; 504  : #else
; 505  : #error unknown platform
; 506  : #endif
; 507  : }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC

; 489  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 490  :     return (x >= y ? x : y);

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	jb	SHORT $LN3@MAXIMUM_UN
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MAXIMUM_UN:
	mov	eax, DWORD PTR tv65[ebp]

; 491  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 468  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 469  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 470  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 471  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
_w_light_check_code$1 = -44				; size = 4
_w_bit_count$2 = -36					; size = 4
_v_bit_count$3 = -32					; size = 4
_u_bit_count$4 = -28					; size = 4
_nw$ = -20						; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_X@12 PROC

; 558  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 559  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 560  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 561  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 562  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 563  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 564  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 565  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 566  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 567  :     PMC_STATUS_CODE result;
; 568  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 569  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 570  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 571  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 572  :     NUMBER_HEADER* nw;
; 573  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Add_X_

; 574  :     {
; 575  :         if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN9@PMC_Add_X_

; 576  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero
	jmp	SHORT $LN10@PMC_Add_X_
$LN9@PMC_Add_X_:

; 577  :         else
; 578  :         {
; 579  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nw$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Add_X_

; 580  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 581  :         }
; 582  :     }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 583  :     else
; 584  :     {
; 585  :         if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN12@PMC_Add_X_

; 586  :         {
; 587  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_X_

; 588  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN14@PMC_Add_X_:

; 589  :         }

	jmp	$LN8@PMC_Add_X_
$LN12@PMC_Add_X_:

; 590  :         else
; 591  :         {
; 592  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _u_bit_count$4[ebp], eax

; 593  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _v_bit_count$3[ebp], edx

; 594  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	eax, DWORD PTR _v_bit_count$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_bit_count$4[ebp]
	push	ecx
	call	__MAXIMUM_UNIT
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _w_bit_count$2[ebp], eax

; 595  :             __UNIT_TYPE w_light_check_code;
; 596  :             if ((result = AllocateNumber(&nw, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _w_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _w_bit_count$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Add_X_

; 597  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN15@PMC_Add_X_:

; 598  :             if ((result = (*fp_Add_Imp)(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK, nw->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	edx, DWORD PTR _nw$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR _fp_Add_Imp
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_X_

; 599  :             {
; 600  :                 DeallocateNumber(nw);

	mov	edx, DWORD PTR _nw$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 601  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 602  :             }
; 603  :             if ((result = CheckBlockLight(nw->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 604  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 605  :             CommitNumber(nw);

	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_CommitNumber
	add	esp, 4
$LN8@PMC_Add_X_:

; 606  :         }
; 607  :     }
; 608  :     *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [ecx], edx

; 609  : #ifdef _DEBUG
; 610  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Add_X_

; 611  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN18@PMC_Add_X_:

; 612  : #endif
; 613  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 614  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN23@PMC_Add_X_:
	DD	2
	DD	$LN22@PMC_Add_X_
$LN22@PMC_Add_X_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN20@PMC_Add_X_
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN21@PMC_Add_X_
$LN21@PMC_Add_X_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN20@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Add_X_L@16 PROC

; 535  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 536  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Add_X_

; 537  :     {
; 538  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 539  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 540  :     }
; 541  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 542  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 543  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 544  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 545  :     PMC_STATUS_CODE result;
; 546  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 547  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 548  :     if ((result = PMC_Add_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_PMC_Add_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 549  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 550  : #ifdef _DEBUG
; 551  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Add_X_

; 552  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN7@PMC_Add_X_:

; 553  : #endif
; 554  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 555  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_Add_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_I@12 PROC

; 383  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 384  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Add_X_

; 385  :     {
; 386  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 387  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 388  :     }
; 389  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 390  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 391  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 392  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 393  :     PMC_STATUS_CODE result;
; 394  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 395  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 396  :     if ((result = PMC_Add_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_PMC_Add_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 397  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 398  : #ifdef _DEBUG
; 399  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Add_X_

; 400  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN7@PMC_Add_X_:

; 401  : #endif
; 402  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 403  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Add_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Add_L_X@16 PROC

; 512  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 513  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Add_L_

; 514  :     {
; 515  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 516  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Add_L_
$LN2@PMC_Add_L_:

; 517  :     }
; 518  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_L_

; 519  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Add_L_
$LN3@PMC_Add_L_:

; 520  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_L_

; 521  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Add_L_
$LN4@PMC_Add_L_:

; 522  :     PMC_STATUS_CODE result;
; 523  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_L_

; 524  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN5@PMC_Add_L_:

; 525  :     if ((result = PMC_Add_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_PMC_Add_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_L_

; 526  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN6@PMC_Add_L_:

; 527  : #ifdef _DEBUG
; 528  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Add_L_

; 529  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN7@PMC_Add_L_:

; 530  : #endif
; 531  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_L_:

; 532  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_Add_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_I_X@12 PROC

; 360  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 361  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Add_I_

; 362  :     {
; 363  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 364  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Add_I_
$LN2@PMC_Add_I_:

; 365  :     }
; 366  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_I_

; 367  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Add_I_
$LN3@PMC_Add_I_:

; 368  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_I_

; 369  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Add_I_
$LN4@PMC_Add_I_:

; 370  :     PMC_STATUS_CODE result;
; 371  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_I_

; 372  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN5@PMC_Add_I_:

; 373  :     if ((result = PMC_Add_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_PMC_Add_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_I_

; 374  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN6@PMC_Add_I_:

; 375  : #ifdef _DEBUG
; 376  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Add_I_

; 377  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN7@PMC_Add_I_:

; 378  : #endif
; 379  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_I_:

; 380  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Add_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_add.c
_TEXT	SEGMENT
tv68 = -4						; size = 4
_feature$ = 8						; size = 4
_Initialize_Add PROC

; 617  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A78DCA81_pmc_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 618  :     fp_Add_Imp = feature->PROCESSOR_FEATURE_ADX ? Add_Imp_using_ADCX : Add_Imp_using_ADC;

	mov	eax, DWORD PTR _feature$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN3@Initialize
	mov	DWORD PTR tv68[ebp], OFFSET _Add_Imp_using_ADCX
	jmp	SHORT $LN4@Initialize
$LN3@Initialize:
	mov	DWORD PTR tv68[ebp], OFFSET _Add_Imp_using_ADC
$LN4@Initialize:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _fp_Add_Imp, edx

; 619  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 620  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Initialize_Add ENDP
_TEXT	ENDS
END
