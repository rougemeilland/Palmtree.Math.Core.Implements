; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_bitwiseand.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__B93DAC51_pmc_bitwiseand@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_BitwiseAnd
PUBLIC	_PMC_BitwiseAnd_X_I@12
PUBLIC	_PMC_BitwiseAnd_X_L@16
PUBLIC	_PMC_BitwiseAnd_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseand.c
_TEXT	SEGMENT
_count$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_w_count$ = 20						; size = 4
_BitwiseAnd_X_X PROC

; 38   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __B93DAC51_pmc_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 39   :     __UNIT_TYPE count = w_count >> 5;

	mov	eax, DWORD PTR _w_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@BitwiseAnd:

; 40   :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN3@BitwiseAnd

; 41   :     {
; 42   :         w[0] = u[0] & v[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 43   :         w[1] = u[1] & v[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 44   :         w[2] = u[2] & v[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 45   :         w[3] = u[3] & v[3];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 46   :         w[4] = u[4] & v[4];

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 47   :         w[5] = u[5] & v[5];

	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, 4
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 48   :         w[6] = u[6] & v[6];

	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 49   :         w[7] = u[7] & v[7];

	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, 4
	imul	ecx, eax, 7
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 7
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 50   :         w[8] = u[8] & v[8];

	mov	ecx, 4
	shl	ecx, 3
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 51   :         w[9] = u[9] & v[9];

	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, 4
	imul	ecx, eax, 9
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 9
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 52   :         w[10] = u[10] & v[10];

	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, 4
	imul	ecx, eax, 10
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 10
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 53   :         w[11] = u[11] & v[11];

	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, 4
	imul	ecx, eax, 11
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 11
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 54   :         w[12] = u[12] & v[12];

	mov	ecx, 4
	imul	edx, ecx, 12
	mov	eax, 4
	imul	ecx, eax, 12
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 12
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 55   :         w[13] = u[13] & v[13];

	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, 4
	imul	ecx, eax, 13
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 13
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 56   :         w[14] = u[14] & v[14];

	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, 4
	imul	ecx, eax, 14
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 14
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 57   :         w[15] = u[15] & v[15];

	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, 4
	imul	ecx, eax, 15
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 15
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 58   :         w[16] = u[16] & v[16];

	mov	ecx, 4
	shl	ecx, 4
	mov	edx, 4
	shl	edx, 4
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 4
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 59   :         w[17] = u[17] & v[17];

	mov	ecx, 4
	imul	edx, ecx, 17
	mov	eax, 4
	imul	ecx, eax, 17
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 17
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 60   :         w[18] = u[18] & v[18];

	mov	ecx, 4
	imul	edx, ecx, 18
	mov	eax, 4
	imul	ecx, eax, 18
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 18
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 61   :         w[19] = u[19] & v[19];

	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, 4
	imul	ecx, eax, 19
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 19
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 62   :         w[20] = u[20] & v[20];

	mov	ecx, 4
	imul	edx, ecx, 20
	mov	eax, 4
	imul	ecx, eax, 20
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 20
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 63   :         w[21] = u[21] & v[21];

	mov	ecx, 4
	imul	edx, ecx, 21
	mov	eax, 4
	imul	ecx, eax, 21
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 21
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 64   :         w[22] = u[22] & v[22];

	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, 4
	imul	ecx, eax, 22
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 22
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 65   :         w[23] = u[23] & v[23];

	mov	ecx, 4
	imul	edx, ecx, 23
	mov	eax, 4
	imul	ecx, eax, 23
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 23
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 66   :         w[24] = u[24] & v[24];

	mov	ecx, 4
	imul	edx, ecx, 24
	mov	eax, 4
	imul	ecx, eax, 24
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 24
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 67   :         w[25] = u[25] & v[25];

	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, 4
	imul	ecx, eax, 25
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 25
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 68   :         w[26] = u[26] & v[26];

	mov	ecx, 4
	imul	edx, ecx, 26
	mov	eax, 4
	imul	ecx, eax, 26
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 26
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 69   :         w[27] = u[27] & v[27];

	mov	ecx, 4
	imul	edx, ecx, 27
	mov	eax, 4
	imul	ecx, eax, 27
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 27
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 70   :         w[28] = u[28] & v[28];

	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, 4
	imul	ecx, eax, 28
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 28
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 71   :         w[29] = u[29] & v[29];

	mov	ecx, 4
	imul	edx, ecx, 29
	mov	eax, 4
	imul	ecx, eax, 29
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 29
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 72   :         w[30] = u[30] & v[30];

	mov	ecx, 4
	imul	edx, ecx, 30
	mov	eax, 4
	imul	ecx, eax, 30
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 30
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 73   :         w[31] = u[31] & v[31];

	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, 4
	imul	ecx, eax, 31
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 31
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 74   :         u += 32;

	mov	ecx, DWORD PTR _u$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _u$[ebp], ecx

; 75   :         v += 32;

	mov	edx, DWORD PTR _v$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _v$[ebp], edx

; 76   :         w += 32;

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _w$[ebp], eax

; 77   :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 78   :     }

	jmp	$LN2@BitwiseAnd
$LN3@BitwiseAnd:

; 79   : 
; 80   :     if (w_count & 0x10)

	mov	edx, DWORD PTR _w_count$[ebp]
	and	edx, 16					; 00000010H
	je	$LN4@BitwiseAnd

; 81   :     {
; 82   :         w[0] = u[0] & v[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 83   :         w[1] = u[1] & v[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	and	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 84   :         w[2] = u[2] & v[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	and	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 85   :         w[3] = u[3] & v[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 86   :         w[4] = u[4] & v[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	and	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 87   :         w[5] = u[5] & v[5];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 88   :         w[6] = u[6] & v[6];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 89   :         w[7] = u[7] & v[7];

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 90   :         w[8] = u[8] & v[8];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	and	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 91   :         w[9] = u[9] & v[9];

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 92   :         w[10] = u[10] & v[10];

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 93   :         w[11] = u[11] & v[11];

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 94   :         w[12] = u[12] & v[12];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 95   :         w[13] = u[13] & v[13];

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	imul	eax, edx, 13
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 13
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 96   :         w[14] = u[14] & v[14];

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 97   :         w[15] = u[15] & v[15];

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 98   :         u += 16;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u$[ebp], eax

; 99   :         v += 16;

	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v$[ebp], ecx

; 100  :         w += 16;

	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _w$[ebp], edx
$LN4@BitwiseAnd:

; 101  :     }
; 102  : 
; 103  :     if (w_count & 0x8)

	mov	eax, DWORD PTR _w_count$[ebp]
	and	eax, 8
	je	$LN5@BitwiseAnd

; 104  :     {
; 105  :         w[0] = u[0] & v[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 106  :         w[1] = u[1] & v[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 107  :         w[2] = u[2] & v[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 108  :         w[3] = u[3] & v[3];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 109  :         w[4] = u[4] & v[4];

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 110  :         w[5] = u[5] & v[5];

	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, 4
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 111  :         w[6] = u[6] & v[6];

	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 112  :         w[7] = u[7] & v[7];

	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, 4
	imul	ecx, eax, 7
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 7
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 113  :         u += 8;

	mov	ecx, DWORD PTR _u$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _u$[ebp], ecx

; 114  :         v += 8;

	mov	edx, DWORD PTR _v$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _v$[ebp], edx

; 115  :         w += 8;

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _w$[ebp], eax
$LN5@BitwiseAnd:

; 116  :     }
; 117  : 
; 118  :     if (w_count & 0x4)

	mov	ecx, DWORD PTR _w_count$[ebp]
	and	ecx, 4
	je	$LN6@BitwiseAnd

; 119  :     {
; 120  :         w[0] = u[0] & v[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	and	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 121  :         w[1] = u[1] & v[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	and	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 122  :         w[2] = u[2] & v[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	and	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 123  :         w[3] = u[3] & v[3];

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	and	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 124  :         u += 4;

	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _u$[ebp], edx

; 125  :         v += 4;

	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _v$[ebp], eax

; 126  :         w += 4;

	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], ecx
$LN6@BitwiseAnd:

; 127  :     }
; 128  : 
; 129  :     if (w_count & 0x2)

	mov	edx, DWORD PTR _w_count$[ebp]
	and	edx, 2
	je	SHORT $LN7@BitwiseAnd

; 130  :     {
; 131  :         w[0] = u[0] & v[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	and	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 132  :         w[1] = u[1] & v[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	and	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 133  :         u += 2;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 8
	mov	DWORD PTR _u$[ebp], eax

; 134  :         v += 2;

	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 8
	mov	DWORD PTR _v$[ebp], ecx

; 135  :         w += 2;

	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 8
	mov	DWORD PTR _w$[ebp], edx
$LN7@BitwiseAnd:

; 136  :     }
; 137  : 
; 138  :     if (w_count & 0x1)

	mov	eax, DWORD PTR _w_count$[ebp]
	and	eax, 1
	je	SHORT $LN1@BitwiseAnd

; 139  :     {
; 140  :         w[0] = u[0] & v[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	and	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 141  :         u += 1;

	mov	ecx, DWORD PTR _u$[ebp]
	add	ecx, 4
	mov	DWORD PTR _u$[ebp], ecx

; 142  :         v += 1;

	mov	edx, DWORD PTR _v$[ebp]
	add	edx, 4
	mov	DWORD PTR _v$[ebp], edx

; 143  :         w += 1;

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, 4
	mov	DWORD PTR _w$[ebp], eax
$LN1@BitwiseAnd:

; 144  :     }
; 145  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BitwiseAnd_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MINIMUM_UNIT PROC

; 419  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 420  :     return (x <= y ? x : y);

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	ja	SHORT $LN3@MINIMUM_UN
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MINIMUM_UN
$LN3@MINIMUM_UN:
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MINIMUM_UN:
	mov	eax, DWORD PTR tv65[ebp]

; 421  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 404  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 405  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 406  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 393  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 395  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 396  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 388  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	edx, edx
	mov	eax, DWORD PTR _value_high$[ebp]
	mov	cl, 32					; 00000020H
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _value_low$[ebp]
	or	edx, ecx

; 390  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseand.c
_TEXT	SEGMENT
_w_word_count$1 = -52					; size = 4
_nw_light_check_code$2 = -44				; size = 4
_w_bit_count$3 = -36					; size = 4
_v_bit_count$4 = -32					; size = 4
_u_bit_count$5 = -28					; size = 4
_nw$ = -20						; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseAnd_X_X@12 PROC

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B93DAC51_pmc_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 233  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Bitwis

; 234  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 235  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 236  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 237  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 238  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 239  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 240  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 241  :     PMC_STATUS_CODE result;
; 242  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 243  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 244  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Bitwis

; 245  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 246  :     NUMBER_HEADER* nw;
; 247  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Bitwis

; 248  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
	jmp	$LN8@PMC_Bitwis
$LN7@PMC_Bitwis:

; 249  :     else if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN9@PMC_Bitwis

; 250  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
	jmp	$LN8@PMC_Bitwis
$LN9@PMC_Bitwis:

; 251  :     else
; 252  :     {
; 253  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _u_bit_count$5[ebp], edx

; 254  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v_bit_count$4[ebp], ecx

; 255  :         __UNIT_TYPE w_bit_count = _MINIMUM_UNIT(u_bit_count, v_bit_count);

	mov	edx, DWORD PTR _v_bit_count$4[ebp]
	push	edx
	mov	eax, DWORD PTR _u_bit_count$5[ebp]
	push	eax
	call	__MINIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _w_bit_count$3[ebp], eax

; 256  :         __UNIT_TYPE nw_light_check_code;
; 257  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nw_light_check_code$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_bit_count$3[ebp]
	push	edx
	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Bitwis

; 258  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN11@PMC_Bitwis:

; 259  :         __UNIT_TYPE w_word_count = _DIVIDE_CEILING_UNIT(w_bit_count, __UNIT_TYPE_BIT_COUNT);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _w_bit_count$3[ebp]
	push	ecx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	mov	DWORD PTR _w_word_count$1[ebp], eax

; 260  :         BitwiseAnd_X_X(nu->BLOCK, nv->BLOCK, nw->BLOCK, w_word_count);

	mov	edx, DWORD PTR _w_word_count$1[ebp]
	push	edx
	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_BitwiseAnd_X_X
	add	esp, 16					; 00000010H

; 261  :         if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw_light_check_code$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Bitwis

; 262  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN12@PMC_Bitwis:

; 263  :         CommitNumber(nw);

	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 264  :         if (nw->IS_ZERO)

	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN13@PMC_Bitwis

; 265  :         {
; 266  :             DeallocateNumber(nw);

	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 267  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero
$LN13@PMC_Bitwis:

; 268  :         }
; 269  :         *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [ecx], edx
$LN8@PMC_Bitwis:

; 270  :     }
; 271  : #ifdef _DEBUG
; 272  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Bitwis

; 273  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN14@PMC_Bitwis:

; 274  : #endif
; 275  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 276  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PMC_Bitwis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN19@PMC_Bitwis:
	DD	2
	DD	$LN18@PMC_Bitwis
$LN18@PMC_Bitwis:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN16@PMC_Bitwis
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN17@PMC_Bitwis
$LN17@PMC_Bitwis:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN16@PMC_Bitwis:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_BitwiseAnd_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseand.c
_TEXT	SEGMENT
tv85 = -36						; size = 4
_w_lo$1 = -32						; size = 4
_w_hi$2 = -28						; size = 4
_v_lo$3 = -24						; size = 4
_v_hi$4 = -16						; size = 4
_result$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_BitwiseAnd_X_L@16 PROC

; 183  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __B93DAC51_pmc_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 184  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 185  :     {
; 186  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 187  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 188  :     }
; 189  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 190  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 191  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 192  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 193  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], ecx

; 194  :     PMC_STATUS_CODE result;
; 195  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 196  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 197  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_Bitwis

; 198  :     {
; 199  :         // u が 0 である場合
; 200  :         *w = 0;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0

; 201  :     }

	jmp	$LN7@PMC_Bitwis
$LN6@PMC_Bitwis:

; 202  :     else if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN8@PMC_Bitwis

; 203  :     {
; 204  :         // v が 0 である場合
; 205  :         *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0

; 206  :     }

	jmp	$LN7@PMC_Bitwis
$LN8@PMC_Bitwis:

; 207  :     else
; 208  :     {
; 209  :         // u と v がともに 0 ではない場合
; 210  : 
; 211  :         // x と y の和を計算する
; 212  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN10@PMC_Bitwis

; 213  :         {
; 214  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 215  : 
; 216  :             _UINT32_T v_hi;
; 217  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	eax, DWORD PTR _v_hi$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_lo$3[ebp], eax

; 218  :             _UINT32_T w_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] & v_hi : 0;

	mov	eax, DWORD PTR _nu$[ebp]
	cmp	DWORD PTR [eax], 1
	jbe	SHORT $LN13@PMC_Bitwis
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR _v_hi$4[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN14@PMC_Bitwis
$LN13@PMC_Bitwis:
	mov	DWORD PTR tv85[ebp], 0
$LN14@PMC_Bitwis:
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _w_hi$2[ebp], edx

; 219  :             _UINT32_T w_lo = nu->BLOCK[0] & v_lo;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+ecx]
	and	ecx, DWORD PTR _v_lo$3[ebp]
	mov	DWORD PTR _w_lo$1[ebp], ecx

; 220  :             *w = _FROMWORDTODWORD(w_hi, w_lo);

	mov	edx, DWORD PTR _w_lo$1[ebp]
	push	edx
	mov	eax, DWORD PTR _w_hi$2[ebp]
	push	eax
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 221  :         }

	jmp	SHORT $LN7@PMC_Bitwis
$LN10@PMC_Bitwis:

; 222  :         else
; 223  :         {
; 224  :             // _UINT64_T が 1 ワードで表現できる場合
; 225  :             *w = nu->BLOCK[0] & v;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+eax]
	xor	ecx, ecx
	and	eax, DWORD PTR _v$[ebp]
	and	ecx, DWORD PTR _v$[ebp+4]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
$LN7@PMC_Bitwis:

; 226  :         }
; 227  :     }
; 228  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 229  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@PMC_Bitwis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN17@PMC_Bitwis:
	DD	1
	DD	$LN16@PMC_Bitwis
$LN16@PMC_Bitwis:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN15@PMC_Bitwis
$LN15@PMC_Bitwis:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_BitwiseAnd_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseand.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseAnd_X_I@12 PROC

; 148  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __B93DAC51_pmc_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 149  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 150  :     {
; 151  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 152  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 153  :     }
; 154  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 155  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 156  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 157  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 158  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], ecx

; 159  :     PMC_STATUS_CODE result;
; 160  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 161  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 162  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_Bitwis

; 163  :     {
; 164  :         // x が 0 である場合
; 165  :         *w = 0;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], 0

; 166  :     }

	jmp	SHORT $LN7@PMC_Bitwis
$LN6@PMC_Bitwis:

; 167  :     else  if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN8@PMC_Bitwis

; 168  :     {
; 169  :         // v が 0 である場合
; 170  :         *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 171  :     }

	jmp	SHORT $LN7@PMC_Bitwis
$LN8@PMC_Bitwis:

; 172  :     else
; 173  :     {
; 174  :         // u と v がともに 0 ではない場合
; 175  : 
; 176  :         // u と v の bit AND を計算する
; 177  :         *w = nu->BLOCK[0] & v;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+edx]
	and	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], edx
$LN7@PMC_Bitwis:

; 178  :     }
; 179  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 180  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_BitwiseAnd_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseand.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_BitwiseAnd PROC

; 280  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __B93DAC51_pmc_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 281  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 282  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_BitwiseAnd ENDP
_TEXT	ENDS
END
