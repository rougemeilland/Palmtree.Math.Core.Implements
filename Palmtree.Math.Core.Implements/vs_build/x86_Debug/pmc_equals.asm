; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_equals.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__3006EDED_pmc_equals@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_Equals
PUBLIC	_PMC_Equals_X_I@12
PUBLIC	_PMC_Equals_X_L@16
PUBLIC	_PMC_Equals_X_X@12
PUBLIC	_Equals_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_count$ = 16						; size = 4
_Equals_X_X PROC

; 38   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __3006EDED_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@Equals_X_X:

; 39   :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@Equals_X_X

; 40   :     {
; 41   :         if (*u != *v)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN4@Equals_X_X

; 42   :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@Equals_X_X
$LN4@Equals_X_X:

; 43   :         ++u;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 4
	mov	DWORD PTR _u$[ebp], eax

; 44   :         ++v;

	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 4
	mov	DWORD PTR _v$[ebp], ecx

; 45   :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 46   :     }

	jmp	SHORT $LN2@Equals_X_X
$LN3@Equals_X_X:

; 47   :     return (1);

	mov	eax, 1
$LN1@Equals_X_X:

; 48   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 840  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 841  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 842  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 843  : #ifdef _M_IX86
; 844  :     _UINT32_T pos;
; 845  : #ifdef _MSC_VER
; 846  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 847  : #elif defined(__GNUC__)
; 848  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 849  : #else
; 850  : #error unknown compiler
; 851  : #endif
; 852  : #elif defined(_M_X64)
; 853  : #ifdef _MSC_VER
; 854  :     _UINT32_T pos;
; 855  :     _BitScanReverse64(&pos, x);
; 856  : #elif defined(__GNUC__)
; 857  :     _UINT64_T pos;
; 858  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 859  : #else
; 860  : #error unknown compiler
; 861  : #endif
; 862  : #else
; 863  : #error unknown platform
; 864  : #endif
; 865  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 866  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 807  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 808  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 809  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 810  :     _UINT32_T pos;
; 811  : #ifdef _MSC_VER
; 812  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 813  : #elif defined(__GNUC__)
; 814  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 815  : #else
; 816  : #error unknown compiler
; 817  : #endif
; 818  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 819  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 393  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 395  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 396  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
_TEXT	SEGMENT
tv81 = -24						; size = 4
_v_bit_count$1 = -20					; size = 4
_u_bit_count$2 = -16					; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_X@12 PROC

; 205  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __3006EDED_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 206  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Equals

; 207  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 208  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Equals

; 209  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 210  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 211  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 212  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 213  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 214  :     PMC_STATUS_CODE result;
; 215  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Equals

; 216  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 217  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Equals

; 218  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Equals
$LN6@PMC_Equals:

; 219  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Equals

; 220  :     {
; 221  :         *w = nv->IS_ZERO ? 1 : 0;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN14@PMC_Equals
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN15@PMC_Equals
$LN14@PMC_Equals:
	mov	DWORD PTR tv81[ebp], 0
$LN15@PMC_Equals:
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR [edx], eax

; 222  :     }

	jmp	SHORT $LN8@PMC_Equals
$LN7@PMC_Equals:

; 223  :     else if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN9@PMC_Equals

; 224  :     {
; 225  :         *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 226  :     }

	jmp	SHORT $LN8@PMC_Equals
$LN9@PMC_Equals:

; 227  :     else
; 228  :     {
; 229  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _u_bit_count$2[ebp], edx

; 230  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v_bit_count$1[ebp], ecx

; 231  :         if (u_bit_count != v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$2[ebp]
	cmp	edx, DWORD PTR _v_bit_count$1[ebp]
	je	SHORT $LN11@PMC_Equals

; 232  :         {
; 233  :             // 明らかに u > v である場合
; 234  :             *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 235  :         }

	jmp	SHORT $LN8@PMC_Equals
$LN11@PMC_Equals:

; 236  :         else
; 237  :         {
; 238  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 239  :             *w = Equals_X_X(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_Equals_X_X
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax
$LN8@PMC_Equals:

; 240  :         }
; 241  :     }
; 242  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 243  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
_TEXT	SEGMENT
tv147 = -64						; size = 4
tv214 = -60						; size = 8
tv135 = -52						; size = 4
tv90 = -48						; size = 4
_v_bit_count$1 = -44					; size = 4
_u_bit_count$2 = -40					; size = 4
_v_bit_count$3 = -36					; size = 4
_v_bit_count$4 = -32					; size = 4
_v_lo$5 = -28						; size = 4
_v_hi$6 = -20						; size = 4
_u_bit_count$7 = -12					; size = 4
_result$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Equals_X_L@16 PROC

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3006EDED_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 107  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Equals

; 108  :     {
; 109  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 110  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 111  :     }
; 112  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Equals

; 113  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 114  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 115  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 116  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], ecx

; 117  :     PMC_STATUS_CODE result;
; 118  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Equals

; 119  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 120  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_Equals

; 121  :     {
; 122  :         // u が 0 である場合
; 123  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN8@PMC_Equals

; 124  :         {
; 125  :             // v が 0 である場合
; 126  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 127  :         }

	jmp	SHORT $LN9@PMC_Equals
$LN8@PMC_Equals:

; 128  :         else
; 129  :         {
; 130  :             // v が 0 でない場合
; 131  :             *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0
$LN9@PMC_Equals:

; 132  :         }
; 133  :     }

	jmp	$LN7@PMC_Equals
$LN6@PMC_Equals:

; 134  :     else if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN10@PMC_Equals

; 135  :     {
; 136  :         // v が 0 である場合
; 137  :         *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 138  :     }

	jmp	$LN7@PMC_Equals
$LN10@PMC_Equals:

; 139  :     else
; 140  :     {
; 141  :         // u と v がともに 0 ではない場合
; 142  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	mov	ecx, 1
	test	ecx, ecx
	je	$LN12@PMC_Equals

; 143  :         {
; 144  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 145  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _u_bit_count$7[ebp], eax

; 146  :             _UINT32_T v_hi;
; 147  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	ecx, DWORD PTR _v_hi$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_lo$5[ebp], eax

; 148  :             if (v_hi == 0)

	cmp	DWORD PTR _v_hi$6[ebp], 0
	jne	SHORT $LN14@PMC_Equals

; 149  :             {
; 150  :                 // v の値が 32bit では表現できる場合
; 151  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR _v_lo$5[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$4[ebp], edx

; 152  :                 if (u_bit_count != v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$7[ebp]
	cmp	eax, DWORD PTR _v_bit_count$4[ebp]
	je	SHORT $LN16@PMC_Equals

; 153  :                 {
; 154  :                     // 明らかに u > v である場合
; 155  :                     *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0

; 156  :                 }

	jmp	SHORT $LN17@PMC_Equals
$LN16@PMC_Equals:

; 157  :                 else
; 158  :                 {
; 159  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 160  :                     // ⇒ u と v はともに 1 ワードで表現できる
; 161  :                     *w = nu->BLOCK[0] == v_lo;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [eax+edx]
	cmp	eax, DWORD PTR _v_lo$5[ebp]
	jne	SHORT $LN23@PMC_Equals
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN24@PMC_Equals
$LN23@PMC_Equals:
	mov	DWORD PTR tv90[ebp], 0
$LN24@PMC_Equals:
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR [ecx], edx
$LN17@PMC_Equals:

; 162  :                 }
; 163  :             }

	jmp	SHORT $LN15@PMC_Equals
$LN14@PMC_Equals:

; 164  :             else
; 165  :             {
; 166  :                 // v の値が 32bit では表現できない場合
; 167  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	eax, DWORD PTR _v_hi$6[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$3[ebp], ecx

; 168  :                 if (u_bit_count != v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$7[ebp]
	cmp	edx, DWORD PTR _v_bit_count$3[ebp]
	je	SHORT $LN18@PMC_Equals

; 169  :                 {
; 170  :                     // 明らかに u > v である場合
; 171  :                     *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 172  :                 }

	jmp	SHORT $LN15@PMC_Equals
$LN18@PMC_Equals:

; 173  :                 else
; 174  :                 {
; 175  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 176  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 177  :                     *w = nu->BLOCK[1] == v_hi && nu->BLOCK[0] == v_lo;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+eax]
	cmp	ecx, DWORD PTR _v_hi$6[ebp]
	jne	SHORT $LN25@PMC_Equals
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [eax+edx]
	cmp	eax, DWORD PTR _v_lo$5[ebp]
	jne	SHORT $LN25@PMC_Equals
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN26@PMC_Equals
$LN25@PMC_Equals:
	mov	DWORD PTR tv135[ebp], 0
$LN26@PMC_Equals:
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [ecx], edx
$LN15@PMC_Equals:

; 178  :                 }
; 179  :             }
; 180  :         }

	jmp	SHORT $LN7@PMC_Equals
$LN12@PMC_Equals:

; 181  :         else
; 182  :         {
; 183  :             // _UINT64_T が 1 ワードで表現できる場合
; 184  : 
; 185  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _u_bit_count$2[ebp], ecx

; 186  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$1[ebp], ecx

; 187  :             if (u_bit_count != v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$2[ebp]
	cmp	edx, DWORD PTR _v_bit_count$1[ebp]
	je	SHORT $LN20@PMC_Equals

; 188  :             {
; 189  :                 // 明らかに u > v である場合
; 190  :                 *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 191  :             }

	jmp	SHORT $LN7@PMC_Equals
$LN20@PMC_Equals:

; 192  :             else
; 193  :             {
; 194  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 195  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 196  :                 *w = nu->BLOCK[0] == v;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+edx]
	xor	eax, eax
	mov	DWORD PTR tv214[ebp], edx
	mov	DWORD PTR tv214[ebp+4], eax
	mov	ecx, DWORD PTR tv214[ebp]
	cmp	ecx, DWORD PTR _v$[ebp]
	jne	SHORT $LN27@PMC_Equals
	mov	edx, DWORD PTR tv214[ebp+4]
	cmp	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN27@PMC_Equals
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN28@PMC_Equals
$LN27@PMC_Equals:
	mov	DWORD PTR tv147[ebp], 0
$LN28@PMC_Equals:
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR tv147[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@PMC_Equals:

; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 202  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_Equals
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN31@PMC_Equals:
	DD	1
	DD	$LN30@PMC_Equals
$LN30@PMC_Equals:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN29@PMC_Equals
$LN29@PMC_Equals:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_Equals_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
_TEXT	SEGMENT
tv85 = -20						; size = 4
_v_bit_count$1 = -16					; size = 4
_u_bit_count$2 = -12					; size = 4
_result$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_I@12 PROC

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __3006EDED_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Equals

; 54   :     {
; 55   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 56   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 57   :     }
; 58   :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Equals

; 59   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 60   :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 61   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 62   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], ecx

; 63   :     PMC_STATUS_CODE result;
; 64   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Equals

; 65   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 66   :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_Equals

; 67   :     {
; 68   :         // u が 0 である場合
; 69   :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN8@PMC_Equals

; 70   :         {
; 71   :             // v が 0 である場合
; 72   :             *w = 1;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], 1

; 73   :         }

	jmp	SHORT $LN9@PMC_Equals
$LN8@PMC_Equals:

; 74   :         else
; 75   :         {
; 76   :             // v が 0 でない場合
; 77   :             *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0
$LN9@PMC_Equals:

; 78   :         }
; 79   :     }

	jmp	SHORT $LN7@PMC_Equals
$LN6@PMC_Equals:

; 80   :     else if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN10@PMC_Equals

; 81   :     {
; 82   :         // v が 0 である場合
; 83   :         *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0

; 84   :     }

	jmp	SHORT $LN7@PMC_Equals
$LN10@PMC_Equals:

; 85   :     else
; 86   :     {
; 87   :         // x と y がともに 0 ではない場合
; 88   :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _u_bit_count$2[ebp], eax

; 89   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$1[ebp], edx

; 90   :         if (u_bit_count != v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$2[ebp]
	cmp	eax, DWORD PTR _v_bit_count$1[ebp]
	je	SHORT $LN12@PMC_Equals

; 91   :         {
; 92   :             // 明らかに u != v である場合
; 93   :             *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0

; 94   :         }

	jmp	SHORT $LN7@PMC_Equals
$LN12@PMC_Equals:

; 95   :         else
; 96   :         {
; 97   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 98   :             // ⇒ u と v はともに 1 ワードで表現できる
; 99   :             *w = nu->BLOCK[0] == v;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [eax+edx]
	cmp	eax, DWORD PTR _v$[ebp]
	jne	SHORT $LN15@PMC_Equals
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN16@PMC_Equals
$LN15@PMC_Equals:
	mov	DWORD PTR tv85[ebp], 0
$LN16@PMC_Equals:
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR [ecx], edx
$LN7@PMC_Equals:

; 100  :         }
; 101  :     }
; 102  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 103  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Equals PROC

; 246  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __3006EDED_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 247  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 248  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Equals ENDP
_TEXT	ENDS
END
