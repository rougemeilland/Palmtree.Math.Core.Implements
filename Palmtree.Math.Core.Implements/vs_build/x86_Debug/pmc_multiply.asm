; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_multiply.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__C53FCF4E_pmc_multiply@c DB 01H
msvcjmc	ENDS
PUBLIC	_Multiply_X_X_Imp
PUBLIC	_Initialize_Multiply
PUBLIC	_PMC_Multiply_I_X@12
PUBLIC	_PMC_Multiply_L_X@16
PUBLIC	_PMC_Multiply_X_I@12
PUBLIC	_PMC_Multiply_X_L@16
PUBLIC	_PMC_Multiply_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
_BSS	SEGMENT
_fp_Multiply_X_1W DD 01H DUP (?)
_fp_Multiply_X_2W DD 01H DUP (?)
_fp_Multiply_X_X DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_nz_light_check_code$1 = -84				; size = 4
_z_bit_count$2 = -76					; size = 4
_y_bit_count$3 = -72					; size = 4
_x_bit_count$4 = -68					; size = 4
_nz_light_check_code$5 = -60				; size = 4
_z_bit_count$6 = -52					; size = 4
_y_bit_count$7 = -48					; size = 4
_nz_light_check_code$8 = -40				; size = 4
_z_bit_count$9 = -32					; size = 4
_y_bit_count$10 = -28					; size = 4
_y_lo$11 = -24						; size = 4
_y_hi$12 = -16						; size = 4
_x_bit_count$13 = -8					; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Multiply_X_L_Imp PROC

; 552  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 553  :     PMC_STATUS_CODE result;
; 554  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Multip

; 555  :     {
; 556  :         // x が 0 である場合
; 557  : 
; 558  :         // y の値にかかわらず 0 を返す。
; 559  :         *w = &number_zero;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 560  :     }

	jmp	$LN3@PMC_Multip
$LN2@PMC_Multip:

; 561  :     else if (u->IS_ONE)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN4@PMC_Multip

; 562  :     {
; 563  :         // x が 1 である場合
; 564  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN6@PMC_Multip

; 565  :         {
; 566  :             // y が 0 である場合
; 567  : 
; 568  :             //  0  を返す。
; 569  :             *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 570  :         }

	jmp	SHORT $LN7@PMC_Multip
$LN6@PMC_Multip:

; 571  :         else
; 572  :         {
; 573  :             // y が 0 ではない場合
; 574  : 
; 575  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 576  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Multip

; 577  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN7@PMC_Multip:

; 578  :         }
; 579  :     }

	jmp	$LN3@PMC_Multip
$LN4@PMC_Multip:

; 580  :     else
; 581  :     {
; 582  :         // x が 0 と 1 のどちらでもない場合
; 583  : 
; 584  :         if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	or	ecx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN9@PMC_Multip

; 585  :         {
; 586  :             // y が 0 である場合
; 587  : 
; 588  :             //  0  を返す。
; 589  :             *w = &number_zero;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 590  :         }

	jmp	$LN3@PMC_Multip
$LN9@PMC_Multip:

; 591  :         else if (v == 1)

	cmp	DWORD PTR _v$[ebp], 1
	jne	SHORT $LN11@PMC_Multip
	cmp	DWORD PTR _v$[ebp+4], 0
	jne	SHORT $LN11@PMC_Multip

; 592  :         {
; 593  :             // y が 1 である場合
; 594  : 
; 595  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 596  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Multip

; 597  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN13@PMC_Multip:

; 598  :         }

	jmp	$LN3@PMC_Multip
$LN11@PMC_Multip:

; 599  :         else
; 600  :         {
; 601  :             // x と y がともに 0 、1 のどちらでもない場合
; 602  : 
; 603  :             // x と y の積を計算する
; 604  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	mov	edx, 1
	test	edx, edx
	je	$LN14@PMC_Multip

; 605  :             {
; 606  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 607  : 
; 608  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _x_bit_count$13[ebp], ecx

; 609  :                 _UINT32_T y_hi;
; 610  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(v, &y_hi);

	lea	edx, DWORD PTR _y_hi$12[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _y_lo$11[ebp], eax

; 611  :                 if (y_hi == 0)

	cmp	DWORD PTR _y_hi$12[ebp], 0
	jne	$LN16@PMC_Multip

; 612  :                 {
; 613  :                     // y の値が 32bit で表現可能な場合
; 614  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);

	mov	edx, DWORD PTR _y_lo$11[ebp]
	push	edx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	DWORD PTR _y_bit_count$10[ebp], ecx

; 615  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	edx, DWORD PTR _x_bit_count$13[ebp]
	add	edx, DWORD PTR _y_bit_count$10[ebp]
	mov	DWORD PTR _z_bit_count$9[ebp], edx

; 616  :                     __UNIT_TYPE nz_light_check_code;
; 617  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz_light_check_code$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _z_bit_count$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Multip

; 618  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN18@PMC_Multip:

; 619  :                     (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, y_lo, (*w)->BLOCK);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _y_lo$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR _fp_Multiply_X_1W
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 620  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz_light_check_code$8[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Multip

; 621  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN19@PMC_Multip:

; 622  :                 }

	jmp	$LN17@PMC_Multip
$LN16@PMC_Multip:

; 623  :                 else
; 624  :                 {
; 625  :                     // y の値が 32bit では表現できない場合
; 626  :                     __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(y_hi);

	mov	eax, DWORD PTR _y_hi$12[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _y_bit_count$7[ebp], ecx

; 627  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	edx, DWORD PTR _x_bit_count$13[ebp]
	add	edx, DWORD PTR _y_bit_count$7[ebp]
	mov	DWORD PTR _z_bit_count$6[ebp], edx

; 628  :                     __UNIT_TYPE nz_light_check_code;
; 629  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz_light_check_code$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _z_bit_count$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Multip

; 630  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN20@PMC_Multip:

; 631  :                     (*fp_Multiply_X_2W)(u->BLOCK, u->UNIT_WORD_COUNT, y_hi, y_lo, (*w)->BLOCK);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _y_lo$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_hi$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR _fp_Multiply_X_2W
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 632  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz_light_check_code$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Multip

; 633  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN17@PMC_Multip:

; 634  :                 }
; 635  :                 CommitNumber(*w);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4

; 636  :             }

	jmp	$LN3@PMC_Multip
$LN14@PMC_Multip:

; 637  :             else
; 638  :             {
; 639  :                 // _UINT64_T が 1 ワードで表現できる場合
; 640  : 
; 641  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _x_bit_count$4[ebp], ecx

; 642  :                 __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _y_bit_count$3[ebp], ecx

; 643  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	edx, DWORD PTR _x_bit_count$4[ebp]
	add	edx, DWORD PTR _y_bit_count$3[ebp]
	mov	DWORD PTR _z_bit_count$2[ebp], edx

; 644  :                 __UNIT_TYPE nz_light_check_code;
; 645  :                 if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _z_bit_count$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_Multip

; 646  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN22@PMC_Multip:

; 647  :                 (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR _fp_Multiply_X_1W
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 648  :                 if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Multip

; 649  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN23@PMC_Multip:

; 650  :                 CommitNumber(*w);

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Multip:

; 651  :             }
; 652  :         }
; 653  :     }
; 654  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 655  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Multip
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@PMC_Multip:
	DD	4
	DD	$LN29@PMC_Multip
$LN29@PMC_Multip:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN25@PMC_Multip
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN26@PMC_Multip
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN27@PMC_Multip
	DD	-84					; ffffffacH
	DD	4
	DD	$LN28@PMC_Multip
$LN28@PMC_Multip:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN27@PMC_Multip:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN26@PMC_Multip:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN25@PMC_Multip:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_Multiply_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_w_light_check_code$1 = -24				; size = 4
_w_bit_count$2 = -16					; size = 4
_v_bit_count$3 = -12					; size = 4
_u_bit_count$4 = -8					; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_X_I_Imp PROC

; 438  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 439  :     PMC_STATUS_CODE result;
; 440  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Multip

; 441  :     {
; 442  :         // u が 0 である場合
; 443  : 
; 444  :         // v の値にかかわらず 0 を返す。
; 445  :         *w = &number_zero;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 446  :     }

	jmp	$LN3@PMC_Multip
$LN2@PMC_Multip:

; 447  :     else if (u->IS_ONE)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN4@PMC_Multip

; 448  :     {
; 449  :         // u が 1 である場合
; 450  :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN6@PMC_Multip

; 451  :         {
; 452  :             // v が 0 である場合
; 453  : 
; 454  :             //  0  を返す。
; 455  :             *w = &number_zero;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 456  :         }

	jmp	SHORT $LN7@PMC_Multip
$LN6@PMC_Multip:

; 457  :         else
; 458  :         {
; 459  :             // y が 0 ではない場合
; 460  : 
; 461  :             // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 462  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_From_I_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Multip

; 463  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN7@PMC_Multip:

; 464  :         }
; 465  :     }

	jmp	$LN3@PMC_Multip
$LN4@PMC_Multip:

; 466  :     else
; 467  :     {
; 468  :         // u が 0 と 1 のどちらでもない場合
; 469  : 
; 470  :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN9@PMC_Multip

; 471  :         {
; 472  :             // v が 0 である場合
; 473  : 
; 474  :             //  0  を返す。
; 475  :             *w = &number_zero;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 476  :         }

	jmp	$LN3@PMC_Multip
$LN9@PMC_Multip:

; 477  :         else if (v == 1)

	cmp	DWORD PTR _v$[ebp], 1
	jne	SHORT $LN11@PMC_Multip

; 478  :         {
; 479  :             // v が 1 である場合
; 480  : 
; 481  :             // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 482  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Multip

; 483  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN13@PMC_Multip:

; 484  :         }

	jmp	$LN3@PMC_Multip
$LN11@PMC_Multip:

; 485  :         else
; 486  :         {
; 487  :             // u と v がともに 0 、1 のどちらでもない場合
; 488  : 
; 489  :             // u と v の積を計算する
; 490  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _u_bit_count$4[ebp], eax

; 491  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$3[ebp], edx

; 492  :             __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

	mov	eax, DWORD PTR _u_bit_count$4[ebp]
	add	eax, DWORD PTR _v_bit_count$3[ebp]
	mov	DWORD PTR _w_bit_count$2[ebp], eax

; 493  :             __UNIT_TYPE w_light_check_code;
; 494  :             if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _w_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_bit_count$2[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Multip

; 495  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN14@PMC_Multip:

; 496  :             (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, v, (*w)->BLOCK);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR _fp_Multiply_X_1W
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 497  :             if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Multip

; 498  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN15@PMC_Multip:

; 499  :             CommitNumber(*w);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Multip:

; 500  :         }
; 501  :     }
; 502  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 503  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PMC_Multip
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@PMC_Multip:
	DD	1
	DD	$LN18@PMC_Multip
$LN18@PMC_Multip:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@PMC_Multip
$LN17@PMC_Multip:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_PMC_Multiply_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_wp$ = -20						; size = 4
_vp$ = -16						; size = 4
_up$ = -12						; size = 4
_t_count$1 = -8						; size = 4
_t_buf$2 = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_Multiply_X_X_using_MULX_ADCX PROC

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 414  :     // x のワード長が y のワード長以上であるようにする
; 415  :     if (u_count < v_count)

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _v_count$[ebp]
	jae	SHORT $LN5@Multiply_X

; 416  :     {
; 417  :         __UNIT_TYPE* t_buf = u_buf;

	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _t_buf$2[ebp], ecx

; 418  :         u_buf = v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _u_buf$[ebp], edx

; 419  :         v_buf = t_buf;

	mov	eax, DWORD PTR _t_buf$2[ebp]
	mov	DWORD PTR _v_buf$[ebp], eax

; 420  :         __UNIT_TYPE t_count = u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	mov	DWORD PTR _t_count$1[ebp], ecx

; 421  :         u_count = v_count;

	mov	edx, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], edx

; 422  :         v_count = t_count;

	mov	eax, DWORD PTR _t_count$1[ebp]
	mov	DWORD PTR _v_count$[ebp], eax
$LN5@Multiply_X:

; 423  :     }
; 424  :     __UNIT_TYPE* up = u_buf;

	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _up$[ebp], ecx

; 425  :     __UNIT_TYPE* vp = v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _vp$[ebp], edx

; 426  :     __UNIT_TYPE* wp = w_buf;

	mov	eax, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR _wp$[ebp], eax
$LN4@Multiply_X:

; 427  : 
; 428  :     do
; 429  :     {
; 430  :         Multiply_WORD_using_MULX_ADCX(up, u_count, *vp, wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _u_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _up$[ebp]
	push	edx
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 16					; 00000010H

; 431  :         ++vp;

	mov	eax, DWORD PTR _vp$[ebp]
	add	eax, 4
	mov	DWORD PTR _vp$[ebp], eax

; 432  :         ++wp;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _wp$[ebp], ecx

; 433  :         --v_count;

	mov	edx, DWORD PTR _v_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _v_count$[ebp], edx

; 434  :     } while (v_count != 0);

	jne	SHORT $LN4@Multiply_X

; 435  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_X_X_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_wp$ = -20						; size = 4
_vp$ = -16						; size = 4
_up$ = -12						; size = 4
_t_count$1 = -8						; size = 4
_t_buf$2 = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_Multiply_X_X_using_MUL_ADC PROC

; 388  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 389  :     // x のワード長が y のワード長以上であるようにする
; 390  :     if (u_count < v_count)

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _v_count$[ebp]
	jae	SHORT $LN5@Multiply_X

; 391  :     {
; 392  :         __UNIT_TYPE* t_buf = u_buf;

	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _t_buf$2[ebp], ecx

; 393  :         u_buf = v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _u_buf$[ebp], edx

; 394  :         v_buf = t_buf;

	mov	eax, DWORD PTR _t_buf$2[ebp]
	mov	DWORD PTR _v_buf$[ebp], eax

; 395  :         __UNIT_TYPE t_count = u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	mov	DWORD PTR _t_count$1[ebp], ecx

; 396  :         u_count = v_count;

	mov	edx, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], edx

; 397  :         v_count = t_count;

	mov	eax, DWORD PTR _t_count$1[ebp]
	mov	DWORD PTR _v_count$[ebp], eax
$LN5@Multiply_X:

; 398  :     }
; 399  :     __UNIT_TYPE* up = u_buf;

	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _up$[ebp], ecx

; 400  :     __UNIT_TYPE* vp = v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _vp$[ebp], edx

; 401  :     __UNIT_TYPE* wp = w_buf;

	mov	eax, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR _wp$[ebp], eax
$LN4@Multiply_X:

; 402  : 
; 403  :     do
; 404  :     {
; 405  :         Multiply_WORD_using_MUL_ADC(up, u_count, *vp, wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _u_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _up$[ebp]
	push	edx
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 16					; 00000010H

; 406  :         ++vp;

	mov	eax, DWORD PTR _vp$[ebp]
	add	eax, 4
	mov	DWORD PTR _vp$[ebp], eax

; 407  :         ++wp;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _wp$[ebp], ecx

; 408  :         --v_count;

	mov	edx, DWORD PTR _v_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _v_count$[ebp], edx

; 409  :     } while (v_count != 0);

	jne	SHORT $LN4@Multiply_X

; 410  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_X_X_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_Multiply_X_2W_using_MULX_ADCX PROC

; 382  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 383  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_lo, &w_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_lo$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 16					; 00000010H

; 384  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_hi, &w_buf[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 16					; 00000010H

; 385  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Multiply_X_2W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_Multiply_X_2W_using_MUL_ADC PROC

; 376  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 377  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_lo, &w_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_lo$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 16					; 00000010H

; 378  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_hi, &w_buf[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 16					; 00000010H

; 379  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Multiply_X_2W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_buf$ = 20						; size = 4
_Multiply_X_1W_using_MULX_ADCX PROC

; 371  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 372  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v, w_buf);

	mov	eax, DWORD PTR _w_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 16					; 00000010H

; 373  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Multiply_X_1W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_buf$ = 20						; size = 4
_Multiply_X_1W_using_MUL_ADC PROC

; 366  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 367  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v, w_buf);

	mov	eax, DWORD PTR _w_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 16					; 00000010H

; 368  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Multiply_X_1W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_Multiply_WORD_using_MULX_ADCX PROC

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 219  :     __UNIT_TYPE k = 0;

	mov	DWORD PTR _k$[ebp], 0

; 220  :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@Multiply_W:

; 221  : 
; 222  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN3@Multiply_W

; 223  :     {
; 224  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 225  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 226  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 227  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 228  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 229  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 230  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 231  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 232  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[8], v, &wp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 233  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[9], v, &wp[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 234  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[10], v, &wp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 235  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[11], v, &wp[11]);

	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 236  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[12], v, &wp[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 237  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[13], v, &wp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 238  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[14], v, &wp[14]);

	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 239  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[15], v, &wp[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 240  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[16], v, &wp[16]);

	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 241  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[17], v, &wp[17]);

	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 242  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[18], v, &wp[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 243  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[19], v, &wp[19]);

	mov	eax, 4
	imul	ecx, eax, 19
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 19
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 244  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[20], v, &wp[20]);

	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 245  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[21], v, &wp[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 246  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[22], v, &wp[22]);

	mov	eax, 4
	imul	ecx, eax, 22
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 22
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 247  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[23], v, &wp[23]);

	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 248  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[24], v, &wp[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 249  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[25], v, &wp[25]);

	mov	eax, 4
	imul	ecx, eax, 25
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 25
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 250  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[26], v, &wp[26]);

	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 251  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[27], v, &wp[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 252  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[28], v, &wp[28]);

	mov	eax, 4
	imul	ecx, eax, 28
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 28
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 253  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[29], v, &wp[29]);

	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 254  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[30], v, &wp[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 255  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[31], v, &wp[31]);

	mov	eax, 4
	imul	ecx, eax, 31
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 31
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 256  :         up += 32;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _up$[ebp], eax

; 257  :         wp += 32;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _wp$[ebp], ecx

; 258  :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 259  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 260  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@Multiply_W

; 261  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN5@Multiply_W
$LN4@Multiply_W:

; 262  :         else
; 263  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN5@Multiply_W:

; 264  : #endif
; 265  :     }

	jmp	$LN2@Multiply_W
$LN3@Multiply_W:

; 266  : 
; 267  :     if (u_count & 0x10)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN6@Multiply_W

; 268  :     {
; 269  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 270  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 271  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 272  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 273  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 274  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 275  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 276  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 277  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[8], v, &wp[8]);

	mov	edx, 4
	shl	edx, 3
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 278  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[9], v, &wp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 279  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[10], v, &wp[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 280  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[11], v, &wp[11]);

	mov	eax, 4
	imul	ecx, eax, 11
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 281  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[12], v, &wp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 282  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[13], v, &wp[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 283  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[14], v, &wp[14]);

	mov	eax, 4
	imul	ecx, eax, 14
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 284  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[15], v, &wp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 285  :         up += 16;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _up$[ebp], eax

; 286  :         wp += 16;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _wp$[ebp], ecx

; 287  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 288  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN7@Multiply_W

; 289  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN6@Multiply_W
$LN7@Multiply_W:

; 290  :         else
; 291  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN6@Multiply_W:

; 292  : #endif
; 293  :     }
; 294  : 
; 295  :     if (u_count & 0x8)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 8
	je	$LN9@Multiply_W

; 296  :     {
; 297  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 298  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 299  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 300  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 301  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 302  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 303  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 304  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 305  :         up += 8;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _up$[ebp], ecx

; 306  :         wp += 8;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _wp$[ebp], edx

; 307  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 308  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@Multiply_W

; 309  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN9@Multiply_W
$LN10@Multiply_W:

; 310  :         else
; 311  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
$LN9@Multiply_W:

; 312  : #endif
; 313  :     }
; 314  : 
; 315  :     if (u_count & 0x4)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 4
	je	$LN12@Multiply_W

; 316  :     {
; 317  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 318  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 319  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 320  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 321  :         up += 4;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _up$[ebp], ecx

; 322  :         wp += 4;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _wp$[ebp], edx

; 323  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 324  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN13@Multiply_W

; 325  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN12@Multiply_W
$LN13@Multiply_W:

; 326  :         else
; 327  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
$LN12@Multiply_W:

; 328  : #endif
; 329  :     }
; 330  : 
; 331  :     if (u_count & 0x2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 2
	je	$LN15@Multiply_W

; 332  :     {
; 333  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 334  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 335  :         up += 2;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 8
	mov	DWORD PTR _up$[ebp], eax

; 336  :         wp += 2;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _wp$[ebp], ecx

; 337  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 338  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN16@Multiply_W

; 339  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN15@Multiply_W
$LN16@Multiply_W:

; 340  :         else
; 341  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
$LN15@Multiply_W:

; 342  : #endif
; 343  :     }
; 344  : 
; 345  :     if (u_count & 0x1)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 1
	je	SHORT $LN18@Multiply_W

; 346  :     {
; 347  :         k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 348  :         up += 1;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 4
	mov	DWORD PTR _up$[ebp], ecx

; 349  :         wp += 1;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 4
	mov	DWORD PTR _wp$[ebp], edx

; 350  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 351  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN19@Multiply_W

; 352  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
	jmp	SHORT $LN18@Multiply_W
$LN19@Multiply_W:

; 353  :         else
; 354  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
$LN18@Multiply_W:

; 355  : #endif
; 356  :     }
; 357  : 
; 358  :     if (k != 0)

	cmp	DWORD PTR _k$[ebp], 0
	je	SHORT $LN21@Multiply_W

; 359  :         *wp = k;

	mov	ecx, DWORD PTR _wp$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx], edx
$LN21@Multiply_W:

; 360  : 
; 361  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 362  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_WORD_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_Multiply_WORD_using_MUL_ADC PROC

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 72   :     __UNIT_TYPE k = 0;

	mov	DWORD PTR _k$[ebp], 0

; 73   :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@Multiply_W:

; 74   : 
; 75   :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN3@Multiply_W

; 76   :     {
; 77   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 78   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 79   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 80   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 81   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 82   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 83   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 84   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 85   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[8], v, &wp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 86   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[9], v, &wp[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 87   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[10], v, &wp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 88   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[11], v, &wp[11]);

	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 89   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[12], v, &wp[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 90   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[13], v, &wp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 91   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[14], v, &wp[14]);

	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 92   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[15], v, &wp[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 93   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[16], v, &wp[16]);

	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 94   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[17], v, &wp[17]);

	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 95   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[18], v, &wp[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 96   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[19], v, &wp[19]);

	mov	eax, 4
	imul	ecx, eax, 19
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 19
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 97   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[20], v, &wp[20]);

	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 98   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[21], v, &wp[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 99   :         k = _MULTIPLY_DIGIT_UNIT(k, &up[22], v, &wp[22]);

	mov	eax, 4
	imul	ecx, eax, 22
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 22
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 100  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[23], v, &wp[23]);

	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 101  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[24], v, &wp[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 102  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[25], v, &wp[25]);

	mov	eax, 4
	imul	ecx, eax, 25
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 25
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 103  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[26], v, &wp[26]);

	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 104  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[27], v, &wp[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 105  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[28], v, &wp[28]);

	mov	eax, 4
	imul	ecx, eax, 28
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 28
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 106  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[29], v, &wp[29]);

	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 107  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[30], v, &wp[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 108  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[31], v, &wp[31]);

	mov	eax, 4
	imul	ecx, eax, 31
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 31
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 109  :         up += 32;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _up$[ebp], eax

; 110  :         wp += 32;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _wp$[ebp], ecx

; 111  :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 112  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 113  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@Multiply_W

; 114  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN5@Multiply_W
$LN4@Multiply_W:

; 115  :         else
; 116  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN5@Multiply_W:

; 117  : #endif
; 118  :     }

	jmp	$LN2@Multiply_W
$LN3@Multiply_W:

; 119  : 
; 120  :     if (u_count & 0x10)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN6@Multiply_W

; 121  :     {
; 122  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 123  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 124  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 125  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 126  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 127  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 128  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 129  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 130  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[8], v, &wp[8]);

	mov	edx, 4
	shl	edx, 3
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 131  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[9], v, &wp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 132  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[10], v, &wp[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 133  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[11], v, &wp[11]);

	mov	eax, 4
	imul	ecx, eax, 11
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 134  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[12], v, &wp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 135  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[13], v, &wp[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 136  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[14], v, &wp[14]);

	mov	eax, 4
	imul	ecx, eax, 14
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 137  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[15], v, &wp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 138  :         up += 16;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _up$[ebp], eax

; 139  :         wp += 16;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _wp$[ebp], ecx

; 140  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 141  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN7@Multiply_W

; 142  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN6@Multiply_W
$LN7@Multiply_W:

; 143  :         else
; 144  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN6@Multiply_W:

; 145  : #endif
; 146  :     }
; 147  : 
; 148  :     if (u_count & 0x8)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 8
	je	$LN9@Multiply_W

; 149  :     {
; 150  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 151  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 152  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 153  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 154  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 155  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 156  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 157  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 158  :         up += 8;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _up$[ebp], ecx

; 159  :         wp += 8;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _wp$[ebp], edx

; 160  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 161  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@Multiply_W

; 162  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN9@Multiply_W
$LN10@Multiply_W:

; 163  :         else
; 164  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
$LN9@Multiply_W:

; 165  : #endif
; 166  :     }
; 167  : 
; 168  :     if (u_count & 0x4)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 4
	je	$LN12@Multiply_W

; 169  :     {
; 170  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 171  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 172  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 173  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 174  :         up += 4;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _up$[ebp], ecx

; 175  :         wp += 4;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _wp$[ebp], edx

; 176  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 177  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN13@Multiply_W

; 178  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN12@Multiply_W
$LN13@Multiply_W:

; 179  :         else
; 180  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
$LN12@Multiply_W:

; 181  : #endif
; 182  :     }
; 183  : 
; 184  :     if (u_count & 0x2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 2
	je	$LN15@Multiply_W

; 185  :     {
; 186  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 187  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _up$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 188  :         up += 2;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 8
	mov	DWORD PTR _up$[ebp], eax

; 189  :         wp += 2;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _wp$[ebp], ecx

; 190  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 191  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN16@Multiply_W

; 192  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN15@Multiply_W
$LN16@Multiply_W:

; 193  :         else
; 194  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
$LN15@Multiply_W:

; 195  : #endif
; 196  :     }
; 197  : 
; 198  :     if (u_count & 0x1)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 1
	je	SHORT $LN18@Multiply_W

; 199  :     {
; 200  :         k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _k$[ebp], eax

; 201  :         up += 1;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 4
	mov	DWORD PTR _up$[ebp], ecx

; 202  :         wp += 1;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 4
	mov	DWORD PTR _wp$[ebp], edx

; 203  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 204  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN19@Multiply_W

; 205  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
	jmp	SHORT $LN18@Multiply_W
$LN19@Multiply_W:

; 206  :         else
; 207  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
$LN18@Multiply_W:

; 208  : #endif
; 209  :     }
; 210  : 
; 211  :     if (k != 0)

	cmp	DWORD PTR _k$[ebp], 0
	je	SHORT $LN21@Multiply_W

; 212  :         *wp = k;

	mov	ecx, DWORD PTR _wp$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx], edx
$LN21@Multiply_W:

; 213  : 
; 214  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 215  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_WORD_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -8						; size = 4
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
__MULTIPLYX_DIGIT_UNIT PROC

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 60   :     __UNIT_TYPE t_hi;
; 61   :     __UNIT_TYPE t_lo;
; 62   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__MULTIPLYX_UNIT
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 63   :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	lea	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _t_hi$[ebp]
	push	edx
	lea	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	push	0
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	movzx	ecx, al
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H

; 64   :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, &t_lo), t_hi, 0, &t_hi);

	lea	edx, DWORD PTR _t_hi$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _t_lo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	mov	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	push	0
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	movzx	ecx, al
	push	ecx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H

; 65   :     *wp = t_lo;

	mov	edx, DWORD PTR _wp$[ebp]
	mov	eax, DWORD PTR _t_lo$[ebp]
	mov	DWORD PTR [edx], eax

; 66   :     k = t_hi;

	mov	ecx, DWORD PTR _t_hi$[ebp]
	mov	DWORD PTR _k$[ebp], ecx

; 67   :     return (k);

	mov	eax, DWORD PTR _k$[ebp]

; 68   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MULTIPLYX_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@MULTIPLYX_:
	DD	2
	DD	$LN5@MULTIPLYX_
$LN5@MULTIPLYX_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@MULTIPLYX_
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@MULTIPLYX_
$LN4@MULTIPLYX_:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN3@MULTIPLYX_:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
__MULTIPLYX_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -8						; size = 4
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
__MULTIPLY_DIGIT_UNIT PROC

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 48   :     __UNIT_TYPE t_hi;
; 49   :     __UNIT_TYPE t_lo;
; 50   :     t_lo = _MULTIPLY_UNIT(*up, v, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__MULTIPLY_UNIT
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 51   :     _ADD_UNIT(_ADD_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	lea	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _t_hi$[ebp]
	push	edx
	lea	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	push	0
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	movzx	ecx, al
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H

; 52   :     _ADD_UNIT(_ADD_UNIT(0, t_lo, k, &t_lo), t_hi, 0, &t_hi);

	lea	edx, DWORD PTR _t_hi$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _t_lo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	mov	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	push	0
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	movzx	ecx, al
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H

; 53   :     *wp = t_lo;

	mov	edx, DWORD PTR _wp$[ebp]
	mov	eax, DWORD PTR _t_lo$[ebp]
	mov	DWORD PTR [edx], eax

; 54   :     k = t_hi;

	mov	ecx, DWORD PTR _t_hi$[ebp]
	mov	DWORD PTR _k$[ebp], ecx

; 55   :     return (k);

	mov	eax, DWORD PTR _k$[ebp]

; 56   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MULTIPLY_D
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@MULTIPLY_D:
	DD	2
	DD	$LN5@MULTIPLY_D
$LN5@MULTIPLY_D:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@MULTIPLY_D
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@MULTIPLY_D
$LN4@MULTIPLY_D:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN3@MULTIPLY_D:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
__MULTIPLY_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC

; 1102 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 1103 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 1104 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC

; 1096 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 1097 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 1098 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC

; 1079 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 1080 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 1081 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC

; 1073 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 1074 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 1075 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 905  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 906  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 907  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 908  : #ifdef _M_IX86
; 909  :     _UINT32_T pos;
; 910  : #ifdef _MSC_VER
; 911  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 912  : #elif defined(__GNUC__)
; 913  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 914  : #else
; 915  : #error unknown compiler
; 916  : #endif
; 917  : #elif defined(_M_X64)
; 918  : #ifdef _MSC_VER
; 919  :     _UINT32_T pos;
; 920  :     _BitScanReverse64(&pos, x);
; 921  : #elif defined(__GNUC__)
; 922  :     _UINT64_T pos;
; 923  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 924  : #else
; 925  : #error unknown compiler
; 926  : #endif
; 927  : #else
; 928  : #error unknown platform
; 929  : #endif
; 930  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 931  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 872  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 873  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 874  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 875  :     _UINT32_T pos;
; 876  : #ifdef _MSC_VER
; 877  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 878  : #elif defined(__GNUC__)
; 879  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 880  : #else
; 881  : #error unknown compiler
; 882  : #endif
; 883  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 884  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC

; 611  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 612  : #ifdef _MSC_VER
; 613  : #ifdef _M_IX86
; 614  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 615  : #elif defined(_M_X64)
; 616  :     return (_mulx_u64(u, v, w_hi));
; 617  : #else
; 618  : #error unknown platform
; 619  : #endif
; 620  : #elif defined(__GNUC__)
; 621  : #ifdef _M_IX86
; 622  :     _UINT32_T w_lo;
; 623  :     __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 624  :     return (w_lo);
; 625  : #elif defined(_M_X64)
; 626  :     _UINT64_T w_lo;
; 627  :     __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 628  :     return (w_lo);
; 629  : #else
; 630  : #error unknown platform
; 631  : #endif
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC

; 573  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 574  : #ifdef _M_IX86
; 575  : #ifdef _MSC_VER
; 576  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 577  : #elif defined(__GNUC__)
; 578  :     _UINT32_T w_lo;
; 579  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 580  :     return (w_lo);
; 581  : #else
; 582  : #error unknown compiler
; 583  : #endif
; 584  : #elif defined(_M_X64)
; 585  :     return (_umul128(u, v, w_hi));
; 586  : #else
; 587  : #error unknown platform
; 588  : #endif
; 589  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 517  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 518  : #ifdef _M_IX86
; 519  :     return (_addcarryx_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adcx	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 520  : #elif defined(_M_X64)
; 521  :     return (_addcarryx_u64(carry, u, v, w));
; 522  : #else
; 523  : #error unknown platform
; 524  : #endif
; 525  : }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 489  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 490  : #ifdef _M_IX86
; 491  :     return (_addcarry_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adc	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 492  : #elif defined(_M_X64)
; 493  :     return (_addcarry_u64(carry, u, v, w));
; 494  : #else
; 495  : #error unknown platform
; 496  : #endif
; 497  : }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 458  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 459  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 460  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 461  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_w_light_check_code$1 = -44				; size = 4
_w_bit_count$2 = -36					; size = 4
_v_bit_count$3 = -32					; size = 4
_u_bit_count$4 = -28					; size = 4
_nw$ = -20						; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_X_X@12 PROC

; 704  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 705  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Multip

; 706  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 707  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Multip

; 708  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 709  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Multip

; 710  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 711  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 712  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 713  :     PMC_STATUS_CODE result;
; 714  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Multip

; 715  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN5@PMC_Multip:

; 716  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Multip

; 717  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN6@PMC_Multip:

; 718  :     NUMBER_HEADER* nw;
; 719  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Multip

; 720  :     {
; 721  :         // x が 0 である場合
; 722  : 
; 723  :         // y の値にかかわらず 0 を返す。
; 724  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 725  :     }

	jmp	$LN8@PMC_Multip
$LN7@PMC_Multip:

; 726  :     else if (nu->IS_ONE)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 2
	and	edx, 1
	je	SHORT $LN9@PMC_Multip

; 727  :     {
; 728  :         // x が 1 である場合
; 729  :         if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN11@PMC_Multip

; 730  :         {
; 731  :             // y が 0 である場合
; 732  : 
; 733  :             //  0  を返す。
; 734  :             *w = &number_zero;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 735  :         }

	jmp	SHORT $LN12@PMC_Multip
$LN11@PMC_Multip:

; 736  :         else
; 737  :         {
; 738  :             // y が 0 ではない場合
; 739  : 
; 740  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 741  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Multip

; 742  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN13@PMC_Multip:

; 743  :             *w = nw;

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edx], eax
$LN12@PMC_Multip:

; 744  :         }
; 745  :     }

	jmp	$LN8@PMC_Multip
$LN9@PMC_Multip:

; 746  :     else
; 747  :     {
; 748  :         // x が 0 と 1 のどちらでもない場合
; 749  : 
; 750  :         if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN14@PMC_Multip

; 751  :         {
; 752  :             // y が 0 である場合
; 753  : 
; 754  :             //  0  を返す。
; 755  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 756  :         }

	jmp	$LN15@PMC_Multip
$LN14@PMC_Multip:

; 757  :         else if (nv->IS_ONE)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN16@PMC_Multip

; 758  :         {
; 759  :             // y が 1 である場合
; 760  : 
; 761  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 762  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nw$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Multip

; 763  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN18@PMC_Multip:

; 764  :         }

	jmp	$LN15@PMC_Multip
$LN16@PMC_Multip:

; 765  :         else
; 766  :         {
; 767  :             // x と y がともに 0 、1 のどちらでもない場合
; 768  : 
; 769  :             // x と y の積を計算する
; 770  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _u_bit_count$4[ebp], edx

; 771  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v_bit_count$3[ebp], ecx

; 772  :             __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

	mov	edx, DWORD PTR _u_bit_count$4[ebp]
	add	edx, DWORD PTR _v_bit_count$3[ebp]
	mov	DWORD PTR _w_bit_count$2[ebp], edx

; 773  :             __UNIT_TYPE w_light_check_code;
; 774  :             if ((result = AllocateNumber(&nw, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _w_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w_bit_count$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _nw$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Multip

; 775  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Multip
$LN19@PMC_Multip:

; 776  :             (*fp_Multiply_X_X)(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK);

	mov	esi, esp
	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	DWORD PTR _fp_Multiply_X_X
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 777  :             if ((result = CheckBlockLight(nw->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _nw$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Multip

; 778  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN20@PMC_Multip:

; 779  :             CommitNumber(nw);

	mov	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4
$LN15@PMC_Multip:

; 780  :         }
; 781  :         *w = nw;

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edx], eax
$LN8@PMC_Multip:

; 782  :     }
; 783  : #ifdef _DEBUG
; 784  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Multip

; 785  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN21@PMC_Multip:

; 786  : #endif
; 787  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 788  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@PMC_Multip
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN26@PMC_Multip:
	DD	2
	DD	$LN25@PMC_Multip
$LN25@PMC_Multip:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN23@PMC_Multip
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN24@PMC_Multip
$LN24@PMC_Multip:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN23@PMC_Multip:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Multiply_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Multiply_X_L@16 PROC

; 681  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 682  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Multip

; 683  :     {
; 684  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 685  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Multip
$LN2@PMC_Multip:

; 686  :     }
; 687  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Multip

; 688  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN3@PMC_Multip:

; 689  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Multip

; 690  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN4@PMC_Multip:

; 691  :     PMC_STATUS_CODE result;
; 692  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Multip

; 693  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN5@PMC_Multip:

; 694  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_PMC_Multiply_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Multip

; 695  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 696  : #ifdef _DEBUG
; 697  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Multip

; 698  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN7@PMC_Multip:

; 699  : #endif
; 700  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 701  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_Multiply_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_X_I@12 PROC

; 529  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 530  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Multip

; 531  :     {
; 532  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 533  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Multip
$LN2@PMC_Multip:

; 534  :     }
; 535  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Multip

; 536  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN3@PMC_Multip:

; 537  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Multip

; 538  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN4@PMC_Multip:

; 539  :     PMC_STATUS_CODE result;
; 540  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Multip

; 541  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN5@PMC_Multip:

; 542  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_PMC_Multiply_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Multip

; 543  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 544  : #ifdef _DEBUG
; 545  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Multip

; 546  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN7@PMC_Multip:

; 547  : #endif
; 548  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 549  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Multiply_L_X@16 PROC

; 658  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 659  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Multip

; 660  :     {
; 661  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 662  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Multip
$LN2@PMC_Multip:

; 663  :     }
; 664  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Multip

; 665  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN3@PMC_Multip:

; 666  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Multip

; 667  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN4@PMC_Multip:

; 668  :     PMC_STATUS_CODE result;
; 669  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Multip

; 670  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN5@PMC_Multip:

; 671  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_PMC_Multiply_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Multip

; 672  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 673  : #ifdef _DEBUG
; 674  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Multip

; 675  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN7@PMC_Multip:

; 676  : #endif
; 677  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 678  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_Multiply_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_I_X@12 PROC

; 506  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 507  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Multip

; 508  :     {
; 509  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 510  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Multip
$LN2@PMC_Multip:

; 511  :     }
; 512  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Multip

; 513  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN3@PMC_Multip:

; 514  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Multip

; 515  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Multip
$LN4@PMC_Multip:

; 516  :     PMC_STATUS_CODE result;
; 517  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Multip

; 518  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN5@PMC_Multip:

; 519  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_PMC_Multiply_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Multip

; 520  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 521  : #ifdef _DEBUG
; 522  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Multip

; 523  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Multip
$LN7@PMC_Multip:

; 524  : #endif
; 525  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 526  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Multiply PROC

; 791  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 792  :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

	mov	eax, DWORD PTR _feature$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@Initialize
	mov	edx, DWORD PTR _feature$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 3
	and	eax, 1
	je	SHORT $LN2@Initialize

; 793  :     {
; 794  :         fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;

	mov	DWORD PTR _fp_Multiply_X_1W, OFFSET _Multiply_X_1W_using_MULX_ADCX

; 795  :         fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;

	mov	DWORD PTR _fp_Multiply_X_2W, OFFSET _Multiply_X_2W_using_MULX_ADCX

; 796  :         fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;

	mov	DWORD PTR _fp_Multiply_X_X, OFFSET _Multiply_X_X_using_MULX_ADCX

; 797  :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 798  :     else
; 799  :     {
; 800  :         fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;

	mov	DWORD PTR _fp_Multiply_X_1W, OFFSET _Multiply_X_1W_using_MUL_ADC

; 801  :         fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;

	mov	DWORD PTR _fp_Multiply_X_2W, OFFSET _Multiply_X_2W_using_MUL_ADC

; 802  :         fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;

	mov	DWORD PTR _fp_Multiply_X_X, OFFSET _Multiply_X_X_using_MUL_ADC
$LN3@Initialize:

; 803  :     }
; 804  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 805  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Multiply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w$ = 24						; size = 4
_Multiply_X_X_Imp PROC

; 42   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __C53FCF4E_pmc_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 43   :     (*fp_Multiply_X_X)(u, u_count,  v,  v_count,  w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	DWORD PTR _fp_Multiply_X_X
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 44   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Multiply_X_X_Imp ENDP
_TEXT	ENDS
END
