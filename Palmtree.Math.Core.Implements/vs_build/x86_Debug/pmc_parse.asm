; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_parse.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__C5BBD3C1_pmc_parse@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_Parse
PUBLIC	_PMC_TryParse@16
PUBLIC	__JustMyCode_Default
EXTRN	__imp__lstrcpyA@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_default_number_format_option DB 028H DUP (?)
_fp_MultiplyAndAdd DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94817 DB	',', 00H, 00H, 00H
$SG94818 DB	'.', 00H, 00H, 00H
$SG94819 DB	'3', 00H
	ORG $+2
$SG94820 DB	'+', 00H, 00H, 00H
$SG94821 DB	'-', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_o_light_check_code$ = -52				; size = 4
_o_bit_count$ = -44					; size = 4
_result_parsing$ = -40					; size = 4
_int_part_buf$ = -36					; size = 4
_int_part_buf_words$ = -28				; size = 4
_int_part_buf_code$ = -16				; size = 4
_source_len$ = -8					; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o$ = 20						; size = 4
_TryParseX PROC

; 967  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 968  :     PMC_STATUS_CODE result;
; 969  :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_len$[ebp], eax

; 970  :     __UNIT_TYPE int_part_buf_code;
; 971  :     __UNIT_TYPE int_part_buf_words;
; 972  :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	ecx, DWORD PTR _int_part_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	shl	ecx, 3
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _int_part_buf$[ebp], eax

; 973  :     if (int_part_buf == NULL)

	cmp	DWORD PTR _int_part_buf$[ebp], 0
	jne	SHORT $LN2@TryParseX

; 974  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseX
$LN2@TryParseX:

; 975  :     int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf);

	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR _number_styles$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_ParseAsHexNumberString
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result_parsing$[ebp], eax

; 976  :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _int_part_buf_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@TryParseX

; 977  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseX
$LN3@TryParseX:

; 978  :     if (!result_parsing || int_part_buf[0] == L'\0')

	cmp	DWORD PTR _result_parsing$[ebp], 0
	je	SHORT $LN5@TryParseX
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN4@TryParseX
$LN5@TryParseX:

; 979  :     {
; 980  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 981  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseX
$LN4@TryParseX:

; 982  :     }
; 983  :     __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

	mov	esi, esp
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	shl	eax, 2
	mov	DWORD PTR _o_bit_count$[ebp], eax

; 984  :     __UNIT_TYPE o_light_check_code;
; 985  :     if ((result = AllocateNumber(o, o_bit_count, &o_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _o_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_bit_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@TryParseX

; 986  :     {
; 987  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 988  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@TryParseX
$LN6@TryParseX:

; 989  :     }
; 990  :     BuildBinaryFromHexString(int_part_buf, (*o)->BLOCK);

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_BuildBinaryFromHexString
	add	esp, 8

; 991  :     if ((result = CheckBlockLight((*o)->BLOCK, o_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@TryParseX

; 992  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@TryParseX
$LN7@TryParseX:

; 993  :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	ecx, DWORD PTR _int_part_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 994  :     CommitNumber(*o);

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 995  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseX:

; 996  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TryParseX
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@TryParseX:
	DD	3
	DD	$LN12@TryParseX
$LN12@TryParseX:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN9@TryParseX
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN10@TryParseX
	DD	-52					; ffffffccH
	DD	4
	DD	$LN11@TryParseX
$LN11@TryParseX:
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN10@TryParseX:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN9@TryParseX:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TryParseX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_r$ = -20						; size = 4
_out_ptr$ = -16						; size = 4
_in_ptr$ = -12						; size = 4
_source_count$ = -8					; size = 4
_word_digit_count$ = -4					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_BuildBinaryFromHexString PROC

; 946  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 947  :     int word_digit_count = __UNIT_TYPE_BIT_COUNT / 4;

	mov	DWORD PTR _word_digit_count$[ebp], 8

; 948  :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_count$[ebp], eax

; 949  :     wchar_t* in_ptr = source;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 950  :     __UNIT_TYPE* out_ptr = out_buf + _DIVIDE_CEILING_UNIT(source_count, word_digit_count) - 1;

	mov	edx, DWORD PTR _word_digit_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_count$[ebp]
	push	eax
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	mov	ecx, DWORD PTR _out_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _out_ptr$[ebp], edx

; 951  :     int r = source_count % word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	xor	edx, edx
	div	DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 952  :     if (r > 0)

	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN2@BuildBinar

; 953  :     {
; 954  :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	push	ecx
	call	_BuildLeading1WordFromHexString
	add	esp, 8
	mov	edx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _out_ptr$[ebp]
	sub	eax, 4
	mov	DWORD PTR _out_ptr$[ebp], eax

; 955  :         in_ptr += r;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _in_ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 956  :         source_count -= r;

	mov	ecx, DWORD PTR _source_count$[ebp]
	sub	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _source_count$[ebp], ecx
$LN2@BuildBinar:

; 957  :     }
; 958  :     while (source_count > 0)

	cmp	DWORD PTR _source_count$[ebp], 0
	jbe	SHORT $LN1@BuildBinar

; 959  :     {
; 960  :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	push	edx
	call	_Build1WordFromHexString
	add	esp, 4
	mov	ecx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _out_ptr$[ebp]
	sub	edx, 4
	mov	DWORD PTR _out_ptr$[ebp], edx

; 961  :         in_ptr += word_digit_count;

	mov	eax, DWORD PTR _word_digit_count$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _in_ptr$[ebp], edx

; 962  :         source_count -= word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	sub	eax, DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _source_count$[ebp], eax

; 963  :     }

	jmp	SHORT $LN2@BuildBinar
$LN1@BuildBinar:

; 964  : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildBinaryFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
tv191 = -36						; size = 2
tv184 = -34						; size = 2
tv178 = -32						; size = 2
tv171 = -30						; size = 2
tv165 = -28						; size = 2
tv159 = -26						; size = 2
tv153 = -24						; size = 2
tv146 = -22						; size = 2
tv140 = -20						; size = 2
tv134 = -18						; size = 2
tv128 = -16						; size = 2
tv90 = -14						; size = 2
tv84 = -12						; size = 2
tv78 = -10						; size = 2
tv72 = -8						; size = 2
tv66 = -6						; size = 2
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_Build1WordFromHexString PROC

; 913  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 914  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv66[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv66[ebp]
	push	eax
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax

; 915  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

	xor	ecx, ecx
	je	$LN2@Build1Word

; 916  :     {
; 917  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv72[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv72[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 918  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv78[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv78[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 919  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv84[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv84[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 920  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv90[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv90[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 921  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv128[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv128[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 922  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv134[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv134[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 923  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv140[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv140[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 924  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv146[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv146[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN2@Build1Word:

; 925  :     }
; 926  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	$LN3@Build1Word

; 927  :     {
; 928  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv153[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv153[ebp]
	push	eax
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 929  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv159[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv159[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 930  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv165[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv165[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 931  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv171[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv171[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN3@Build1Word:

; 932  :     }
; 933  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@Build1Word

; 934  :     {
; 935  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv178[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 936  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv184[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv184[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN4@Build1Word:

; 937  :     }
; 938  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@Build1Word

; 939  :     {
; 940  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv191[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv191[ebp]
	push	eax
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN5@Build1Word:

; 941  :     }
; 942  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 943  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Build1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_BuildLeading1WordFromHexString PROC

; 899  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 900  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax

; 901  :     ++in_ptr;

	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 902  :     --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN2@BuildLeadi:

; 903  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@BuildLeadi

; 904  :     {
; 905  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	mov	esi, DWORD PTR _x$[ebp]
	shl	esi, 4
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _x$[ebp], esi

; 906  :         ++in_ptr;

	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 907  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 908  :     }

	jmp	SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 909  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 910  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildLeading1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
tv65 = -4						; size = 4
_c$ = 8							; size = 2
_Parse1DigitFromHexChar PROC

; 865  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 866  :     switch (c)

	movzx	eax, WORD PTR _c$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 54			; 00000036H
	ja	SHORT $LN7@Parse1Digi
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN9@Parse1Digi[edx]
	jmp	DWORD PTR $LN10@Parse1Digi[eax*4]
$LN4@Parse1Digi:

; 867  :     {
; 868  :     case L'0':
; 869  :     case L'1':
; 870  :     case L'2':
; 871  :     case L'3':
; 872  :     case L'4':
; 873  :     case L'5':
; 874  :     case L'6':
; 875  :     case L'7':
; 876  :     case L'8':
; 877  :     case L'9':
; 878  :         return (c - L'0');

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN1@Parse1Digi
$LN5@Parse1Digi:

; 879  :     case L'a':
; 880  :     case L'b':
; 881  :     case L'c':
; 882  :     case L'd':
; 883  :     case L'e':
; 884  :     case L'f':
; 885  :         return (c - L'a' + 10);

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 87					; 00000057H
	jmp	SHORT $LN1@Parse1Digi
$LN6@Parse1Digi:

; 886  :     case L'A':
; 887  :     case L'B':
; 888  :     case L'C':
; 889  :     case L'D':
; 890  :     case L'E':
; 891  :     case L'F':
; 892  :         return (c - L'A' + 10);

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 55					; 00000037H
	jmp	SHORT $LN1@Parse1Digi
$LN7@Parse1Digi:

; 893  :     default:
; 894  :         return ((_UINT32_T)-1);

	or	eax, -1
$LN1@Parse1Digi:

; 895  :     }
; 896  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Parse1Digi:
	DD	$LN4@Parse1Digi
	DD	$LN6@Parse1Digi
	DD	$LN5@Parse1Digi
	DD	$LN7@Parse1Digi
$LN9@Parse1Digi:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
_Parse1DigitFromHexChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_no_light_check_code$ = -148				; size = 4
_o_bit_count$ = -140					; size = 4
_bin_buf_count$ = -132					; size = 4
_bin_buf$ = -124					; size = 4
_bin_buf_words$ = -116					; size = 4
_bin_buf_code$ = -104					; size = 4
_frac_ptr$ = -96					; size = 4
_d_ptr$1 = -92						; size = 4
_s_ptr$2 = -88						; size = 4
_result_parsing$ = -84					; size = 4
_sign$ = -76						; size = 4
_frac_part_buf$ = -68					; size = 4
_frac_part_buf_words$ = -60				; size = 4
_frac_part_buf_code$ = -48				; size = 4
_int_part_buf$ = -40					; size = 4
_int_part_buf_words$ = -32				; size = 4
_int_part_buf_code$ = -20				; size = 4
_source_len$ = -12					; size = 4
_word_digit_count$ = -8					; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o$ = 20						; size = 4
_TryParseDN PROC

; 721  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 722  :     PMC_STATUS_CODE result;
; 723  : #ifdef _M_IX86
; 724  :     int word_digit_count = 9;

	mov	DWORD PTR _word_digit_count$[ebp], 9

; 725  : #elif defined(_M_IX64)
; 726  :     int word_digit_count = 19;
; 727  : #else
; 728  : #error unknown platform
; 729  : #endif
; 730  :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_len$[ebp], eax

; 731  : 
; 732  :     __UNIT_TYPE int_part_buf_code;
; 733  :     __UNIT_TYPE int_part_buf_words;
; 734  :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	ecx, DWORD PTR _int_part_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	shl	ecx, 3
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _int_part_buf$[ebp], eax

; 735  :     if (int_part_buf == NULL)

	cmp	DWORD PTR _int_part_buf$[ebp], 0
	jne	SHORT $LN9@TryParseDN

; 736  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN9@TryParseDN:

; 737  : 
; 738  :     __UNIT_TYPE frac_part_buf_code;
; 739  :     __UNIT_TYPE frac_part_buf_words;
; 740  :     wchar_t* frac_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &frac_part_buf_words, &frac_part_buf_code);

	lea	edx, DWORD PTR _frac_part_buf_code$[ebp]
	push	edx
	lea	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source_len$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	shl	edx, 3
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _frac_part_buf$[ebp], eax

; 741  :     if (frac_part_buf == NULL)

	cmp	DWORD PTR _frac_part_buf$[ebp], 0
	jne	SHORT $LN10@TryParseDN

; 742  :     {
; 743  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 744  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN10@TryParseDN:

; 745  :     }
; 746  :     int sign;
; 747  :     int result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, &sign, int_part_buf, frac_part_buf);

	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format_option$[ebp]
	push	edx
	mov	eax, DWORD PTR _number_styles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_ParseAsDecimalNumberString
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result_parsing$[ebp], eax

; 748  :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _int_part_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@TryParseDN

; 749  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN11@TryParseDN:

; 750  :     if ((result = CheckBlockLight((__UNIT_TYPE*)frac_part_buf, frac_part_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _frac_part_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@TryParseDN

; 751  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN12@TryParseDN:

; 752  :     if (!result_parsing)

	cmp	DWORD PTR _result_parsing$[ebp], 0
	jne	SHORT $LN13@TryParseDN

; 753  :     {
; 754  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 755  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 756  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN13@TryParseDN:

; 757  :     }
; 758  :     // 整数部と小数部がともに空ならばエラーとする
; 759  :     if (int_part_buf[0] == L'\0' && frac_part_buf[0] == L'\0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN14@TryParseDN
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN14@TryParseDN

; 760  :     {
; 761  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 762  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 763  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN14@TryParseDN:

; 764  :     }
; 765  : 
; 766  :     if (int_part_buf[0] == L'0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN15@TryParseDN

; 767  :     {
; 768  :         // 整数部の先行する 0 を削除する
; 769  :         wchar_t* s_ptr = int_part_buf;

	mov	edx, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR _s_ptr$2[ebp], edx

; 770  :         wchar_t* d_ptr = int_part_buf;

	mov	eax, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR _d_ptr$1[ebp], eax
$LN2@TryParseDN:

; 771  :         while (*s_ptr == L'0')

	mov	ecx, DWORD PTR _s_ptr$2[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN6@TryParseDN

; 772  :             ++s_ptr;

	mov	eax, DWORD PTR _s_ptr$2[ebp]
	add	eax, 2
	mov	DWORD PTR _s_ptr$2[ebp], eax
	jmp	SHORT $LN2@TryParseDN
$LN6@TryParseDN:

; 773  :         for (;;)
; 774  :         {
; 775  :             *d_ptr = *s_ptr;

	mov	ecx, DWORD PTR _d_ptr$1[ebp]
	mov	edx, DWORD PTR _s_ptr$2[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax

; 776  :             if (*s_ptr == L'\0')

	mov	ecx, DWORD PTR _s_ptr$2[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	jne	SHORT $LN16@TryParseDN

; 777  :                 break;

	jmp	SHORT $LN15@TryParseDN
$LN16@TryParseDN:

; 778  :             ++s_ptr;

	mov	eax, DWORD PTR _s_ptr$2[ebp]
	add	eax, 2
	mov	DWORD PTR _s_ptr$2[ebp], eax

; 779  :             ++d_ptr;

	mov	ecx, DWORD PTR _d_ptr$1[ebp]
	add	ecx, 2
	mov	DWORD PTR _d_ptr$1[ebp], ecx

; 780  :         }

	jmp	SHORT $LN6@TryParseDN
$LN15@TryParseDN:

; 781  :     }
; 782  : 
; 783  :     // 小数部の末尾の 0 を削除する
; 784  :     wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

	mov	esi, esp
	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _frac_ptr$[ebp], edx
$LN7@TryParseDN:

; 785  :     while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

	mov	eax, DWORD PTR _frac_ptr$[ebp]
	cmp	eax, DWORD PTR _frac_part_buf$[ebp]
	jbe	SHORT $LN8@TryParseDN
	mov	ecx, 2
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _frac_ptr$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN8@TryParseDN

; 786  :         --frac_ptr;

	mov	edx, DWORD PTR _frac_ptr$[ebp]
	sub	edx, 2
	mov	DWORD PTR _frac_ptr$[ebp], edx
	jmp	SHORT $LN7@TryParseDN
$LN8@TryParseDN:

; 787  :     *frac_ptr = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _frac_ptr$[ebp]
	mov	WORD PTR [ecx], ax

; 788  : 
; 789  :     // 小数部が 0 ではない場合、エラーとする
; 790  :     if (frac_part_buf[0] != L'\0')

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN17@TryParseDN

; 791  :     {
; 792  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 793  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 794  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN17@TryParseDN:

; 795  :     }
; 796  : 
; 797  :     if (sign < 0)

	cmp	DWORD PTR _sign$[ebp], 0
	jge	SHORT $LN18@TryParseDN

; 798  :     {
; 799  :         if (int_part_buf[0] == L'\0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN19@TryParseDN

; 800  :         {
; 801  :             // - 符号が与えられていてかつ整数部が 0 であるなら符号を修正する
; 802  :             sign = 0;

	mov	DWORD PTR _sign$[ebp], 0

; 803  :         }

	jmp	SHORT $LN18@TryParseDN
$LN19@TryParseDN:

; 804  :         else
; 805  :         {
; 806  :             // - 符号が与えられていてかつ整数部が 0 ではないなら、エラーとする
; 807  :             DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	edx, DWORD PTR _frac_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _frac_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 808  :             DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	ecx, DWORD PTR _int_part_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 809  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@TryParseDN
$LN18@TryParseDN:

; 810  :         }
; 811  :     }
; 812  : 
; 813  :     // 整数部が空である場合、1桁の 0 を設定する
; 814  :     if (int_part_buf[0] == L'\0')

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN21@TryParseDN

; 815  :     {
; 816  :         int_part_buf[0] = L'0';

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 817  :         int_part_buf[1] = L'\0';

	mov	edx, 2
	shl	edx, 0
	xor	eax, eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	mov	WORD PTR [ecx+edx], ax
$LN21@TryParseDN:

; 818  :     }
; 819  : 
; 820  :     // 小数部は捨てる
; 821  :     DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	edx, DWORD PTR _frac_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _frac_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 822  : 
; 823  :     __UNIT_TYPE bin_buf_code;
; 824  :     __UNIT_TYPE bin_buf_words;
; 825  :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	lea	ecx, DWORD PTR _bin_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bin_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _word_digit_count$[ebp]
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__DIVIDE_CEILING_SIZE
	add	esp, 8
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bin_buf$[ebp], eax

; 826  :     if (bin_buf == NULL)

	cmp	DWORD PTR _bin_buf$[ebp], 0
	jne	SHORT $LN22@TryParseDN

; 827  :     {
; 828  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 829  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN22@TryParseDN:

; 830  :     }
; 831  :     __UNIT_TYPE bin_buf_count;
; 832  :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);

	lea	ecx, DWORD PTR _bin_buf_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bin_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_BuildBinaryFromDecimalString
	add	esp, 12					; 0000000cH

; 833  :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _bin_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bin_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@TryParseDN

; 834  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN23@TryParseDN:

; 835  :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 836  : 
; 837  :     __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

	mov	edx, DWORD PTR _bin_buf_count$[ebp]
	shl	edx, 5
	mov	DWORD PTR _o_bit_count$[ebp], edx

; 838  :     __UNIT_TYPE no_light_check_code;
; 839  :     if ((result = AllocateNumber(o, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_bit_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@TryParseDN

; 840  :     {
; 841  :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 842  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN24@TryParseDN:

; 843  :     }
; 844  : 
; 845  :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o)->BLOCK)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bin_buf_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _bin_buf$[ebp]
	push	eax
	call	_ConvertCardinalNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN25@TryParseDN

; 846  :     {
; 847  :         DeallocateNumber(*o);

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 848  :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 849  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@TryParseDN
$LN25@TryParseDN:

; 850  :     }
; 851  :     if ((result = CheckBlockLight((*o)->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _no_light_check_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@TryParseDN

; 852  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@TryParseDN
$LN26@TryParseDN:

; 853  :     DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 854  :     CommitNumber(*o);

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 855  :     if ((*o)->IS_ZERO)

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	shr	eax, 1
	and	eax, 1
	je	SHORT $LN27@TryParseDN

; 856  :     {
; 857  :         DeallocateNumber(*o);

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 858  :         *o = &number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
$LN27@TryParseDN:

; 859  :     }
; 860  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseDN:

; 861  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@TryParseDN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 152				; 00000098H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN39@TryParseDN:
	DD	9
	DD	$LN38@TryParseDN
$LN38@TryParseDN:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN29@TryParseDN
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN30@TryParseDN
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN31@TryParseDN
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN32@TryParseDN
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN33@TryParseDN
	DD	-104					; ffffff98H
	DD	4
	DD	$LN34@TryParseDN
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN35@TryParseDN
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN36@TryParseDN
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN37@TryParseDN
$LN37@TryParseDN:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN36@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN35@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN34@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN33@TryParseDN:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN32@TryParseDN:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN31@TryParseDN:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN30@TryParseDN:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN29@TryParseDN:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TryParseDN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_w_tail$1 = -40						; size = 4
_work_buf_count$ = -36					; size = 4
_work_buf$ = -32					; size = 4
_work_buf_words$ = -24					; size = 4
_work_buf_code$ = -12					; size = 4
_result$ = -4						; size = 4
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_ConvertCardinalNumber PROC

; 693  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 694  :     PMC_STATUS_CODE result;
; 695  :     __UNIT_TYPE work_buf_code;
; 696  :     __UNIT_TYPE work_buf_words;
; 697  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	eax, DWORD PTR _work_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in_buf_count$[ebp]
	add	edx, 1
	shl	edx, 5
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf$[ebp], eax

; 698  :     if (work_buf == NULL)

	cmp	DWORD PTR _work_buf$[ebp], 0
	jne	SHORT $LN4@ConvertCar

; 699  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ConvertCar
$LN4@ConvertCar:

; 700  : 
; 701  :     __UNIT_TYPE work_buf_count = 1;

	mov	DWORD PTR _work_buf_count$[ebp], 1

; 702  :     work_buf[0] = in_buf[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _work_buf$[ebp]
	mov	esi, DWORD PTR _in_buf$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 703  :     ++in_buf;

	mov	edx, DWORD PTR _in_buf$[ebp]
	add	edx, 4
	mov	DWORD PTR _in_buf$[ebp], edx

; 704  :     --in_buf_count;

	mov	eax, DWORD PTR _in_buf_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _in_buf_count$[ebp], eax
$LN2@ConvertCar:

; 705  : 
; 706  :     while (in_buf_count > 0)

	cmp	DWORD PTR _in_buf_count$[ebp], 0
	jbe	SHORT $LN3@ConvertCar

; 707  :     {
; 708  :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	mov	esi, esp
	mov	ecx, DWORD PTR _in_buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _work_buf_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_buf$[ebp]
	push	ecx
	call	DWORD PTR _fp_MultiplyAndAdd
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_tail$1[ebp], eax

; 709  :         work_buf_count = w_tail - work_buf;

	mov	edx, DWORD PTR _w_tail$1[ebp]
	sub	edx, DWORD PTR _work_buf$[ebp]
	sar	edx, 2
	mov	DWORD PTR _work_buf_count$[ebp], edx

; 710  :         ++in_buf;

	mov	eax, DWORD PTR _in_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _in_buf$[ebp], eax

; 711  :         --in_buf_count;

	mov	ecx, DWORD PTR _in_buf_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _in_buf_count$[ebp], ecx

; 712  :     }

	jmp	SHORT $LN2@ConvertCar
$LN3@ConvertCar:

; 713  :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@ConvertCar

; 714  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@ConvertCar
$LN5@ConvertCar:

; 715  :     _COPY_MEMORY_UNIT(out_buf, work_buf, work_buf_count);

	mov	ecx, DWORD PTR _work_buf_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _out_buf$[ebp]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 716  :     DeallocateBlock(work_buf, work_buf_words);

	mov	ecx, DWORD PTR _work_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 717  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ConvertCar:

; 718  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ConvertCar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ConvertCar:
	DD	2
	DD	$LN9@ConvertCar
$LN9@ConvertCar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@ConvertCar
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@ConvertCar
$LN8@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN7@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
_MultiplyAndAdd_using_ADCX_MULX PROC

; 550  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 551  :     __UNIT_TYPE k = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 552  :     __UNIT_TYPE count = u_count >> 5;

	mov	ecx, DWORD PTR _u_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$[ebp], ecx
$LN2@MultiplyAn:

; 553  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN3@MultiplyAn

; 554  :     {
; 555  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 556  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 557  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 558  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 559  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 560  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 561  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 562  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	eax, 4
	imul	ecx, eax, 7
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 563  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 564  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 565  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	ecx, 4
	imul	edx, ecx, 10
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 566  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 567  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 568  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	ecx, 4
	imul	edx, ecx, 13
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 569  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 570  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 571  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

	mov	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 4
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 572  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 17
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 573  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

	mov	ecx, 4
	imul	edx, ecx, 18
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 574  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 575  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 576  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

	mov	ecx, 4
	imul	edx, ecx, 21
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 577  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 578  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 23
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 579  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

	mov	ecx, 4
	imul	edx, ecx, 24
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 580  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 581  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 26
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 582  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

	mov	ecx, 4
	imul	edx, ecx, 27
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 583  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 584  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 29
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 585  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

	mov	ecx, 4
	imul	edx, ecx, 30
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 586  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 587  :         u_buf += 32;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _u_buf$[ebp], eax

; 588  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 589  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 590  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@MultiplyAn

; 591  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 592  :         else
; 593  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN5@MultiplyAn:

; 594  : #endif
; 595  :     }

	jmp	$LN2@MultiplyAn
$LN3@MultiplyAn:

; 596  : 
; 597  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN6@MultiplyAn

; 598  :     {
; 599  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 600  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 601  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 602  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 603  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 604  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 605  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 606  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 607  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 608  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 609  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 610  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 611  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 612  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 613  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 614  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 615  :         u_buf += 16;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u_buf$[ebp], eax

; 616  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 617  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@MultiplyAn

; 618  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN6@MultiplyAn
$LN7@MultiplyAn:

; 619  :         else
; 620  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN6@MultiplyAn:

; 621  : #endif
; 622  :     }
; 623  : 
; 624  :     if (u_count & 0x8)

	mov	edx, DWORD PTR _u_count$[ebp]
	and	edx, 8
	je	$LN9@MultiplyAn

; 625  :     {
; 626  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 627  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 628  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 629  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	edx, 4
	imul	eax, edx, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 630  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 631  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 632  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 633  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 634  :         u_buf += 8;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _u_buf$[ebp], edx

; 635  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 636  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@MultiplyAn

; 637  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN9@MultiplyAn
$LN10@MultiplyAn:

; 638  :         else
; 639  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
$LN9@MultiplyAn:

; 640  : #endif
; 641  :     }
; 642  : 
; 643  :     if (u_count & 0x4)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 4
	je	$LN12@MultiplyAn

; 644  :     {
; 645  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 646  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 647  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 648  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 649  :         u_buf += 4;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _u_buf$[ebp], edx

; 650  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 651  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN13@MultiplyAn

; 652  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN12@MultiplyAn
$LN13@MultiplyAn:

; 653  :         else
; 654  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
$LN12@MultiplyAn:

; 655  : #endif
; 656  :     }
; 657  : 
; 658  :     if (u_count & 0x2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 2
	je	SHORT $LN15@MultiplyAn

; 659  :     {
; 660  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 661  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 662  :         u_buf += 2;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 8
	mov	DWORD PTR _u_buf$[ebp], edx

; 663  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 664  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN16@MultiplyAn

; 665  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN15@MultiplyAn
$LN16@MultiplyAn:

; 666  :         else
; 667  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
$LN15@MultiplyAn:

; 668  : #endif
; 669  :     }
; 670  : 
; 671  :     if (u_count & 0x1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 1
	je	SHORT $LN18@MultiplyAn

; 672  :     {
; 673  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 674  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax

; 675  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 676  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@MultiplyAn

; 677  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
	jmp	SHORT $LN18@MultiplyAn
$LN19@MultiplyAn:

; 678  :         else
; 679  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
$LN18@MultiplyAn:

; 680  : #endif
; 681  :     }
; 682  : 
; 683  :     if (k > 0)

	cmp	DWORD PTR _k$[ebp], 0
	jbe	SHORT $LN21@MultiplyAn

; 684  :     {
; 685  :         u_buf[0] = k;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 686  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax
$LN21@MultiplyAn:

; 687  :     }
; 688  : 
; 689  :     return (u_buf);

	mov	eax, DWORD PTR _u_buf$[ebp]

; 690  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MultiplyAndAdd_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
_MultiplyAndAdd_using_ADC_MUL PROC

; 407  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 408  :     __UNIT_TYPE k = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 409  :     __UNIT_TYPE count = u_count >> 5;

	mov	ecx, DWORD PTR _u_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$[ebp], ecx
$LN2@MultiplyAn:

; 410  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN3@MultiplyAn

; 411  :     {
; 412  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 413  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 414  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 415  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 416  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 417  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 418  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 419  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	eax, 4
	imul	ecx, eax, 7
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 420  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 421  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 422  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

	mov	ecx, 4
	imul	edx, ecx, 10
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 423  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 424  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 425  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

	mov	ecx, 4
	imul	edx, ecx, 13
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 426  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 427  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 428  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[16], &u_buf[16]);

	mov	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 4
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 429  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[17], &u_buf[17]);

	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 17
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 430  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[18], &u_buf[18]);

	mov	ecx, 4
	imul	edx, ecx, 18
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 431  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[19], &u_buf[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 432  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[20], &u_buf[20]);

	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 433  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[21], &u_buf[21]);

	mov	ecx, 4
	imul	edx, ecx, 21
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 434  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[22], &u_buf[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 435  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[23], &u_buf[23]);

	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 23
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 436  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[24], &u_buf[24]);

	mov	ecx, 4
	imul	edx, ecx, 24
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 437  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[25], &u_buf[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 438  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[26], &u_buf[26]);

	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 26
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 439  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[27], &u_buf[27]);

	mov	ecx, 4
	imul	edx, ecx, 27
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 440  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[28], &u_buf[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 441  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[29], &u_buf[29]);

	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 29
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 442  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[30], &u_buf[30]);

	mov	ecx, 4
	imul	edx, ecx, 30
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 443  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[31], &u_buf[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 444  :         u_buf += 32;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _u_buf$[ebp], eax

; 445  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 446  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 447  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@MultiplyAn

; 448  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 449  :         else
; 450  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN5@MultiplyAn:

; 451  : #endif
; 452  :     }

	jmp	$LN2@MultiplyAn
$LN3@MultiplyAn:

; 453  : 
; 454  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN6@MultiplyAn

; 455  :     {
; 456  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 457  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 458  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 459  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 460  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 461  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 462  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 463  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 464  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 465  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 466  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 467  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 468  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 469  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 470  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 471  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 472  :         u_buf += 16;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u_buf$[ebp], eax

; 473  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 474  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@MultiplyAn

; 475  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN6@MultiplyAn
$LN7@MultiplyAn:

; 476  :         else
; 477  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN6@MultiplyAn:

; 478  : #endif
; 479  :     }
; 480  : 
; 481  :     if (u_count & 0x8)

	mov	edx, DWORD PTR _u_count$[ebp]
	and	edx, 8
	je	$LN9@MultiplyAn

; 482  :     {
; 483  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 484  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 485  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 486  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	edx, 4
	imul	eax, edx, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 487  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 488  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 489  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 490  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 491  :         u_buf += 8;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _u_buf$[ebp], edx

; 492  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 493  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@MultiplyAn

; 494  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN9@MultiplyAn
$LN10@MultiplyAn:

; 495  :         else
; 496  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
$LN9@MultiplyAn:

; 497  : #endif
; 498  :     }
; 499  : 
; 500  :     if (u_count & 0x4)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 4
	je	$LN12@MultiplyAn

; 501  :     {
; 502  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 503  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 504  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 505  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 506  :         u_buf += 4;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _u_buf$[ebp], edx

; 507  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 508  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN13@MultiplyAn

; 509  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN12@MultiplyAn
$LN13@MultiplyAn:

; 510  :         else
; 511  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
$LN12@MultiplyAn:

; 512  : #endif
; 513  :     }
; 514  : 
; 515  :     if (u_count & 0x2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 2
	je	SHORT $LN15@MultiplyAn

; 516  :     {
; 517  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 518  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 519  :         u_buf += 2;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 8
	mov	DWORD PTR _u_buf$[ebp], edx

; 520  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 521  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN16@MultiplyAn

; 522  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN15@MultiplyAn
$LN16@MultiplyAn:

; 523  :         else
; 524  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
$LN15@MultiplyAn:

; 525  : #endif
; 526  :     }
; 527  : 
; 528  :     if (u_count & 0x1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 1
	je	SHORT $LN18@MultiplyAn

; 529  :     {
; 530  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 531  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax

; 532  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 533  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@MultiplyAn

; 534  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
	jmp	SHORT $LN18@MultiplyAn
$LN19@MultiplyAn:

; 535  :         else
; 536  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
$LN18@MultiplyAn:

; 537  : #endif
; 538  :     }
; 539  : 
; 540  :     if (k > 0)

	cmp	DWORD PTR _k$[ebp], 0
	jbe	SHORT $LN21@MultiplyAn

; 541  :     {
; 542  :         u_buf[0] = k;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 543  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax
$LN21@MultiplyAn:

; 544  :     }
; 545  : 
; 546  :     return (u_buf);

	mov	eax, DWORD PTR _u_buf$[ebp]

; 547  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MultiplyAndAdd_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -12						; size = 4
_base_value$ = -4					; size = 4
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
_MultiplyAndAdd1Word_using_ADCX_MULX PROC

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 393  : #ifdef _M_IX86
; 394  :     __UNIT_TYPE base_value = 1000000000U; // 10^9

	mov	DWORD PTR _base_value$[ebp], 1000000000	; 3b9aca00H

; 395  : #elif defined(_M_IX64)
; 396  :     __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19
; 397  : #else
; 398  : #error unknown platform
; 399  : #endif
; 400  :     __UNIT_TYPE t_hi;
; 401  :     __UNIT_TYPE t_lo = _MULTIPLYX_UNIT(u, base_value, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__MULTIPLYX_UNIT
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 402  :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t_lo$[ebp]
	push	ecx
	push	0
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	movzx	edx, al
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H

; 403  :     return (k);

	mov	eax, DWORD PTR _k$[ebp]

; 404  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MultiplyAn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@MultiplyAn:
	DD	1
	DD	$LN4@MultiplyAn
$LN4@MultiplyAn:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@MultiplyAn
$LN3@MultiplyAn:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_MultiplyAndAdd1Word_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -12						; size = 4
_base_value$ = -4					; size = 4
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
_MultiplyAndAdd1Word_using_ADC_MUL PROC

; 377  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 378  : #ifdef _M_IX86
; 379  :     __UNIT_TYPE base_value = 1000000000U; // 10^9

	mov	DWORD PTR _base_value$[ebp], 1000000000	; 3b9aca00H

; 380  : #elif defined(_M_IX64)
; 381  :     __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19
; 382  : #else
; 383  : #error unknown platform
; 384  : #endif
; 385  :     __UNIT_TYPE t_hi;
; 386  :     __UNIT_TYPE t_lo = _MULTIPLY_UNIT(u, base_value, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__MULTIPLY_UNIT
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 387  :     _ADD_UNIT(_ADD_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t_lo$[ebp]
	push	ecx
	push	0
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	movzx	edx, al
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H

; 388  :     return (k);

	mov	eax, DWORD PTR _k$[ebp]

; 389  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MultiplyAn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@MultiplyAn:
	DD	1
	DD	$LN4@MultiplyAn
$LN4@MultiplyAn:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@MultiplyAn
$LN3@MultiplyAn:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_MultiplyAndAdd1Word_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_r$ = -20						; size = 4
_source_count$ = -16					; size = 4
_out_ptr$ = -12						; size = 4
_in_ptr$ = -8						; size = 4
_word_digit_count$ = -4					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_out_buf_count$ = 16					; size = 4
_BuildBinaryFromDecimalString PROC

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 350  : #ifdef _M_IX86
; 351  :     int word_digit_count = 9;

	mov	DWORD PTR _word_digit_count$[ebp], 9

; 352  : #elif defined(_M_IX64)
; 353  :     int word_digit_count = 19;
; 354  : #else
; 355  : #error unknown platform
; 356  : #endif
; 357  :     wchar_t* in_ptr = source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 358  :     __UNIT_TYPE* out_ptr = out_buf;

	mov	ecx, DWORD PTR _out_buf$[ebp]
	mov	DWORD PTR _out_ptr$[ebp], ecx

; 359  :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	esi, esp
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_count$[ebp], eax

; 360  :     int r = source_count % word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	xor	edx, edx
	div	DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 361  :     if (r > 0)

	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN2@BuildBinar

; 362  :     {
; 363  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	push	ecx
	call	_BuildLeading1WordFromDecimalString
	add	esp, 8
	mov	edx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _out_ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _out_ptr$[ebp], eax

; 364  :         in_ptr += r;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _in_ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 365  :         source_count -= r;

	mov	ecx, DWORD PTR _source_count$[ebp]
	sub	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _source_count$[ebp], ecx
$LN2@BuildBinar:

; 366  :     }
; 367  :     while (source_count > 0)

	cmp	DWORD PTR _source_count$[ebp], 0
	jbe	SHORT $LN3@BuildBinar

; 368  :     {
; 369  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	push	edx
	call	_Build1WordFromDecimalString
	add	esp, 4
	mov	ecx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _out_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _out_ptr$[ebp], edx

; 370  :         in_ptr += word_digit_count;

	mov	eax, DWORD PTR _word_digit_count$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _in_ptr$[ebp], edx

; 371  :         source_count -= word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	sub	eax, DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _source_count$[ebp], eax

; 372  :     }

	jmp	SHORT $LN2@BuildBinar
$LN3@BuildBinar:

; 373  :     *out_buf_count = out_ptr - out_buf;

	mov	ecx, DWORD PTR _out_ptr$[ebp]
	sub	ecx, DWORD PTR _out_buf$[ebp]
	sar	ecx, 2
	mov	edx, DWORD PTR _out_buf_count$[ebp]
	mov	DWORD PTR [edx], ecx

; 374  : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildBinaryFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_Build1WordFromDecimalString PROC

; 312  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 313  :     __UNIT_TYPE x = (*in_ptr++ - L'0');

	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 314  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

	xor	eax, eax
	je	$LN2@Build1Word

; 315  :     {
; 316  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 317  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 318  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 319  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 320  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 321  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 322  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 323  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 324  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 325  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
$LN2@Build1Word:

; 326  :     }
; 327  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	$LN3@Build1Word

; 328  :     {
; 329  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 330  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 331  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 332  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 333  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
$LN3@Build1Word:

; 334  :     }
; 335  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@Build1Word

; 336  :     {
; 337  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 338  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax
$LN4@Build1Word:

; 339  :     }
; 340  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@Build1Word

; 341  :     {
; 342  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax
$LN5@Build1Word:

; 343  :     }
; 344  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 345  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Build1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_BuildLeading1WordFromDecimalString PROC

; 301  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 302  :     __UNIT_TYPE x = 0;

	mov	DWORD PTR _x$[ebp], 0
$LN2@BuildLeadi:

; 303  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@BuildLeadi

; 304  :     {
; 305  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 306  :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 307  :     }

	jmp	SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 308  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 309  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildLeading1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_state$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_int_part_buf$ = 20					; size = 4
_ParseAsHexNumberString PROC

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 287  :     struct __tag_PARSER_STATE state;
; 288  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	push	0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format_option$[ebp]
	push	ecx
	mov	edx, DWORD PTR _number_styles$[ebp]
	push	edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_InitializeParserState
	add	esp, 24					; 00000018H

; 289  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 1
	je	SHORT $LN2@ParseAsHex

; 290  :         SkipSpace(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_SkipSpace
	add	esp, 4
$LN2@ParseAsHex:

; 291  :     ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4

; 292  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 2
	je	SHORT $LN3@ParseAsHex

; 293  :         SkipSpace(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_SkipSpace
	add	esp, 4
$LN3@ParseAsHex:

; 294  :     if (*state.IN_PTR != L'\0')

	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN4@ParseAsHex

; 295  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsHex
$LN4@ParseAsHex:

; 296  :     FinalizeParserState(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_FinalizeParserState
	add	esp, 4

; 297  :     return (1);

	mov	eax, 1
$LN1@ParseAsHex:

; 298  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ParseAsHex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@ParseAsHex:
	DD	1
	DD	$LN7@ParseAsHex
$LN7@ParseAsHex:
	DD	-88					; ffffffa8H
	DD	80					; 00000050H
	DD	$LN6@ParseAsHex
$LN6@ParseAsHex:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_ParseAsHexNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_state$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_sign$ = 20						; size = 4
_int_part_buf$ = 24					; size = 4
_frac_part_buf$ = 28					; size = 4
_ParseAsDecimalNumberString PROC

; 189  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 190  :     struct __tag_PARSER_STATE state;
; 191  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, frac_part_buf);

	mov	eax, DWORD PTR _frac_part_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format_option$[ebp]
	push	edx
	mov	eax, DWORD PTR _number_styles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_InitializeParserState
	add	esp, 24					; 00000018H

; 192  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 1
	je	SHORT $LN2@ParseAsDec

; 193  :         SkipSpace(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_SkipSpace
	add	esp, 4
$LN2@ParseAsDec:

; 194  :     if ((number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && *state.IN_PTR == L'(')

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 16					; 00000010H
	je	$LN3@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 40					; 00000028H
	jne	$LN3@ParseAsDec

; 195  :     {
; 196  :         state.SIGN = -1;

	mov	DWORD PTR _state$[ebp+8], -1

; 197  :         state.IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 2
	mov	DWORD PTR _state$[ebp], edx

; 198  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN5@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN5@ParseAsDec

; 199  :             ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN5@ParseAsDec:

; 200  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN6@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ParseAsDec

; 201  :         {
; 202  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 203  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN6@ParseAsDec:

; 204  :         }
; 205  :         if (*state.IN_PTR != L')')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 41					; 00000029H
	je	SHORT $LN7@ParseAsDec

; 206  :             return (0);

	xor	eax, eax
	jmp	$LN1@ParseAsDec
$LN7@ParseAsDec:

; 207  :         state.IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 2
	mov	DWORD PTR _state$[ebp], edx

; 208  :     }

	jmp	$LN4@ParseAsDec
$LN3@ParseAsDec:

; 209  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 4
	je	$LN8@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@ParseAsDec

; 210  :     {
; 211  :         state.SIGN = 1;

	mov	DWORD PTR _state$[ebp+8], 1

; 212  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+20]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 213  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN10@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN10@ParseAsDec

; 214  :             ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN10@ParseAsDec:

; 215  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN11@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@ParseAsDec

; 216  :         {
; 217  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 218  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN11@ParseAsDec:

; 219  :         }
; 220  :     }

	jmp	$LN4@ParseAsDec
$LN8@ParseAsDec:

; 221  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 4
	je	$LN12@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+24]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@ParseAsDec

; 222  :     {
; 223  :         state.SIGN = -1;

	mov	DWORD PTR _state$[ebp+8], -1

; 224  :         state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+32]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 225  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN14@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN14@ParseAsDec

; 226  :             ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN14@ParseAsDec:

; 227  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN15@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@ParseAsDec

; 228  :         {
; 229  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 230  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN15@ParseAsDec:

; 231  :         }
; 232  :     }

	jmp	$LN4@ParseAsDec
$LN12@ParseAsDec:

; 233  :     else if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	$LN16@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	$LN16@ParseAsDec

; 234  :     {
; 235  :         ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4

; 236  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN18@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@ParseAsDec

; 237  :         {
; 238  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 239  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN18@ParseAsDec:

; 240  :         }
; 241  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN19@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@ParseAsDec

; 242  :         {
; 243  :             state.SIGN = 1;

	mov	DWORD PTR _state$[ebp+8], 1

; 244  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+20]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 245  :         }

	jmp	SHORT $LN20@ParseAsDec
$LN19@ParseAsDec:

; 246  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN20@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+24]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@ParseAsDec

; 247  :         {
; 248  :             state.SIGN = -1;

	mov	DWORD PTR _state$[ebp+8], -1

; 249  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+32]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx
$LN20@ParseAsDec:

; 250  :         }
; 251  :         else
; 252  :         {
; 253  :         }
; 254  :     }

	jmp	$LN4@ParseAsDec
$LN16@ParseAsDec:

; 255  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 32					; 00000020H
	je	$LN23@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+36]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@ParseAsDec

; 256  :     {
; 257  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+44]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 258  :         ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4

; 259  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN25@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN25@ParseAsDec

; 260  :         {
; 261  :             state.SIGN = 1;

	mov	DWORD PTR _state$[ebp+8], 1

; 262  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+20]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 263  :         }

	jmp	SHORT $LN26@ParseAsDec
$LN25@ParseAsDec:

; 264  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN26@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+24]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@ParseAsDec

; 265  :         {
; 266  :             state.SIGN = -1;

	mov	DWORD PTR _state$[ebp+8], -1

; 267  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+32]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN26@ParseAsDec:

; 268  :         }
; 269  :         else
; 270  :         {
; 271  :         }
; 272  :     }

	jmp	SHORT $LN4@ParseAsDec
$LN23@ParseAsDec:

; 273  :     else
; 274  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsDec
$LN4@ParseAsDec:

; 275  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 2
	je	SHORT $LN29@ParseAsDec

; 276  :         SkipSpace(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_SkipSpace
	add	esp, 4
$LN29@ParseAsDec:

; 277  :     if (*state.IN_PTR != L'\0')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN30@ParseAsDec

; 278  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsDec
$LN30@ParseAsDec:

; 279  :     FinalizeParserState(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_FinalizeParserState
	add	esp, 4

; 280  :     *sign = state.SIGN;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _state$[ebp+8]
	mov	DWORD PTR [eax], ecx

; 281  :     return (1);

	mov	eax, 1
$LN1@ParseAsDec:

; 282  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@ParseAsDec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN34@ParseAsDec:
	DD	1
	DD	$LN33@ParseAsDec
$LN33@ParseAsDec:
	DD	-88					; ffffffa8H
	DD	80					; 00000050H
	DD	$LN32@ParseAsDec
$LN32@ParseAsDec:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_ParseAsDecimalNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ParseAsFractionPartNumberSequence PROC

; 161  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@ParseAsFra:

; 162  :     for (;;)
; 163  :     {
; 164  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN5@ParseAsFra
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN5@ParseAsFra

; 165  :         {
; 166  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	cx, WORD PTR [ecx]
	mov	WORD PTR [eax], cx

; 167  :             state->FRAC_PART_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 168  :             state->IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], eax

; 169  :         }

	jmp	$LN6@ParseAsFra
$LN5@ParseAsFra:

; 170  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 512				; 00000200H
	je	SHORT $LN7@ParseAsFra
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN7@ParseAsFra
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN7@ParseAsFra

; 171  :         {
; 172  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	dx, WORD PTR [edx]
	mov	WORD PTR [ecx], dx

; 173  :             state->FRAC_PART_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+76], ecx

; 174  :             state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 175  :         }

	jmp	SHORT $LN6@ParseAsFra
$LN7@ParseAsFra:

; 176  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	SHORT $LN9@ParseAsFra
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN9@ParseAsFra
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 70					; 00000046H
	jg	SHORT $LN9@ParseAsFra

; 177  :         {
; 178  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [edx], ax

; 179  :             state->FRAC_PART_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+76], edx

; 180  :             state->IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], edx

; 181  :         }

	jmp	SHORT $LN6@ParseAsFra
$LN9@ParseAsFra:

; 182  :         else
; 183  :             break;

	jmp	SHORT $LN1@ParseAsFra
$LN6@ParseAsFra:

; 184  :     }

	jmp	$LN4@ParseAsFra
$LN1@ParseAsFra:

; 185  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ParseAsFractionPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ParseAsIntegerPartNumberSequence PROC

; 130  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@ParseAsInt:

; 131  :     for (;;)
; 132  :     {
; 133  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN5@ParseAsInt
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN5@ParseAsInt

; 134  :         {
; 135  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	cx, WORD PTR [ecx]
	mov	WORD PTR [eax], cx

; 136  :             state->INT_PART_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+72]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 137  :             state->IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], eax

; 138  :         }

	jmp	$LN6@ParseAsInt
$LN5@ParseAsInt:

; 139  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 512				; 00000200H
	je	SHORT $LN7@ParseAsInt
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN7@ParseAsInt
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN7@ParseAsInt

; 140  :         {
; 141  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	dx, WORD PTR [edx]
	mov	WORD PTR [ecx], dx

; 142  :             state->INT_PART_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 143  :             state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 144  :         }

	jmp	$LN6@ParseAsInt
$LN7@ParseAsInt:

; 145  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	SHORT $LN9@ParseAsInt
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN9@ParseAsInt
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 70					; 00000046H
	jg	SHORT $LN9@ParseAsInt

; 146  :         {
; 147  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [edx], ax

; 148  :             state->INT_PART_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+72], edx

; 149  :             state->IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], edx

; 150  :         }

	jmp	SHORT $LN6@ParseAsInt
$LN9@ParseAsInt:

; 151  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 64					; 00000040H
	je	SHORT $LN11@ParseAsInt
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@ParseAsInt

; 152  :             state->IN_PTR += state->GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@ParseAsInt
$LN11@ParseAsInt:

; 153  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 64					; 00000040H
	je	SHORT $LN13@ParseAsInt
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jle	SHORT $LN13@ParseAsInt
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@ParseAsInt

; 154  :             state->IN_PTR += state->SECONDARY_GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@ParseAsInt
$LN13@ParseAsInt:

; 155  :         else
; 156  :             break;

	jmp	SHORT $LN1@ParseAsInt
$LN6@ParseAsInt:

; 157  :     }

	jmp	$LN4@ParseAsInt
$LN1@ParseAsInt:

; 158  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ParseAsIntegerPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
tv67 = -4						; size = 4
_state$ = 8						; size = 4
_SkipSpace PROC

; 109  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@SkipSpace:

; 110  :     for (;;)
; 111  :     {
; 112  :         switch (*state->IN_PTR)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 9
	jl	SHORT $LN8@SkipSpace
	cmp	DWORD PTR tv67[ebp], 13			; 0000000dH
	jle	SHORT $LN7@SkipSpace
	cmp	DWORD PTR tv67[ebp], 32			; 00000020H
	je	SHORT $LN7@SkipSpace
	jmp	SHORT $LN8@SkipSpace
$LN7@SkipSpace:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;

	jmp	SHORT $LN5@SkipSpace
$LN8@SkipSpace:

; 121  : 
; 122  :         default:
; 123  :             return;

	jmp	SHORT $LN1@SkipSpace
$LN5@SkipSpace:

; 124  :         }
; 125  :         state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 126  :     }

	jmp	SHORT $LN4@SkipSpace
$LN1@SkipSpace:

; 127  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SkipSpace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_FinalizeParserState PROC

; 101  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 102  :     *state->INT_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	xor	edx, edx
	mov	WORD PTR [ecx], dx

; 103  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32					; 00000020H
	je	SHORT $LN1@FinalizePa

; 104  :         *state->FRAC_PART_PTR = L'\0';

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	xor	ecx, ecx
	mov	WORD PTR [eax], cx
$LN1@FinalizePa:

; 105  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FinalizeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_in_ptr$ = 12						; size = 4
_number_styles$ = 16					; size = 4
_format_option$ = 20					; size = 4
_int_part_buf$ = 24					; size = 4
_frac_part_buf$ = 28					; size = 4
_InitializeParserState PROC

; 73   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 74   :     state->IN_PTR = in_ptr;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   :     state->NUMBER_STYLES = number_styles;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _number_styles$[ebp]
	mov	DWORD PTR [edx+4], eax

; 76   :     state->SIGN = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 77   :     lstrcpyW(state->POSITIVE_SIGN, format_option->PositiveSign);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 16					; 00000010H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   :     state->POSITIVE_SIGN_LENGTH = lstrlenW(state->POSITIVE_SIGN);

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+20], eax

; 79   :     lstrcpyW(state->NEGATIVE_SIGN, format_option->NegativeSign);

	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 22					; 00000016H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   :     state->NEGATIVE_SIGN_LENGTH = lstrlenW(state->NEGATIVE_SIGN);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 24					; 00000018H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 81   :     lstrcpyW(state->DECIMAL_SEPARATOR, format_option->DecimalSeparator);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 10					; 0000000aH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 82   :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(state->DECIMAL_SEPARATOR);

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 36					; 00000024H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+44], eax

; 83   :     lstrcpyW(state->GROUP_SEPARATOR, format_option->GroupSeparator);

	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(state->GROUP_SEPARATOR);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 48					; 00000030H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 85   :     if (state->GROUP_SEPARATOR[0] == L'\xa0' && state->GROUP_SEPARATOR[1] == L'\0')

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx+eax+48]
	cmp	edx, 160				; 000000a0H
	jne	SHORT $LN2@Initialize
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx+eax+48]
	test	edx, edx
	jne	SHORT $LN2@Initialize

; 86   :     {
; 87   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\x20';

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, 32					; 00000020H
	mov	eax, DWORD PTR _state$[ebp]
	mov	WORD PTR [eax+ecx+60], dx

; 88   :         state->SECONDARY_GROUP_SEPARATOR[1] = L'\0';

	mov	ecx, 2
	shl	ecx, 0
	xor	edx, edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	WORD PTR [eax+ecx+60], dx

; 89   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], 1

; 90   :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 91   :     else
; 92   :     {
; 93   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\0';

	mov	edx, 2
	imul	eax, edx, 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+eax+60], cx

; 94   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+68], 0
$LN3@Initialize:

; 95   :     }
; 96   :     state->INT_PART_PTR = int_part_buf;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR [ecx+72], edx

; 97   :     state->FRAC_PART_PTR = frac_part_buf;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 98   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_InitializeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_StartsWith PROC

; 61   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@StartsWith:

; 62   :     while (*b != L'\0')

	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StartsWith

; 63   :     {
; 64   :         if (*a != *b)

	mov	edx, DWORD PTR _a$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _b$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN4@StartsWith

; 65   :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@StartsWith
$LN4@StartsWith:

; 66   :         ++a;

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 2
	mov	DWORD PTR _a$[ebp], eax

; 67   :         ++b;

	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, 2
	mov	DWORD PTR _b$[ebp], ecx

; 68   :     }

	jmp	SHORT $LN2@StartsWith
$LN3@StartsWith:

; 69   :     return (1);

	mov	eax, 1
$LN1@StartsWith:

; 70   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_StartsWith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC

; 1085 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 1086 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 1087 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC

; 1079 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 1081 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC

; 1062 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 1063 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 1064 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC

; 1056 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 1057 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 1058 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC

; 594  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 595  : #ifdef _MSC_VER
; 596  : #ifdef _M_IX86
; 597  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 598  : #elif defined(_M_X64)
; 599  :     return (_mulx_u64(u, v, w_hi));
; 600  : #else
; 601  : #error unknown platform
; 602  : #endif
; 603  : #elif defined(__GNUC__)
; 604  : #ifdef _M_IX86
; 605  :     _UINT32_T w_lo;
; 606  :     __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 607  :     return (w_lo);
; 608  : #elif defined(_M_X64)
; 609  :     _UINT64_T w_lo;
; 610  :     __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 611  :     return (w_lo);
; 612  : #else
; 613  : #error unknown platform
; 614  : #endif
; 615  : #else
; 616  : #error unknown compiler
; 617  : #endif
; 618  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC

; 556  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 557  : #ifdef _M_IX86
; 558  : #ifdef _MSC_VER
; 559  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 560  : #elif defined(__GNUC__)
; 561  :     _UINT32_T w_lo;
; 562  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 563  :     return (w_lo);
; 564  : #else
; 565  : #error unknown compiler
; 566  : #endif
; 567  : #elif defined(_M_X64)
; 568  :     return (_umul128(u, v, w_hi));
; 569  : #else
; 570  : #error unknown platform
; 571  : #endif
; 572  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 500  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 501  : #ifdef _M_IX86
; 502  :     return (_addcarryx_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adcx	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 503  : #elif defined(_M_X64)
; 504  :     return (_addcarryx_u64(carry, u, v, w));
; 505  : #else
; 506  : #error unknown platform
; 507  : #endif
; 508  : }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 472  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 473  : #ifdef _M_IX86
; 474  :     return (_addcarry_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adc	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 475  : #elif defined(_M_X64)
; 476  :     return (_addcarry_u64(carry, u, v, w));
; 477  : #else
; 478  : #error unknown platform
; 479  : #endif
; 480  : }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC

; 457  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 458  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 459  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 452  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 453  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 454  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 441  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 442  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 444  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 325  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 326  : #ifdef _M_IX86
; 327  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 328  : #elif defined(_M_X64)
; 329  :     __movsq(d, s, count);
; 330  : #else
; 331  : #error unknown platform
; 332  : #endif
; 333  : }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_mask$1 = -20						; size = 4
_no$ = -12						; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o$ = 20						; size = 4
_PMC_TryParse@16 PROC

; 999  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1000 :     PMC_STATUS_CODE result;
; 1001 :     if (source == NULL)

	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN2@PMC_TryPar

; 1002 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_TryPar
$LN2@PMC_TryPar:

; 1003 :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@PMC_TryPar

; 1004 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_TryPar
$LN3@PMC_TryPar:

; 1005 :     if (format_option == NULL)

	cmp	DWORD PTR _format_option$[ebp], 0
	jne	SHORT $LN4@PMC_TryPar

; 1006 :         format_option = &default_number_format_option;

	mov	DWORD PTR _format_option$[ebp], OFFSET _default_number_format_option
$LN4@PMC_TryPar:

; 1007 :     NUMBER_HEADER* no;
; 1008 :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN5@PMC_TryPar

; 1009 :     {
; 1010 :         // 許可されている組み合わせのフラグ
; 1011 :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;

	mov	DWORD PTR _mask$1[ebp], 515		; 00000203H

; 1012 : 
; 1013 :         // 許可されていないフラグが指定されていればエラー
; 1014 :         if (number_styles & ~mask)

	mov	ecx, DWORD PTR _mask$1[ebp]
	not	ecx
	and	ecx, DWORD PTR _number_styles$[ebp]
	je	SHORT $LN7@PMC_TryPar

; 1015 :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_TryPar
$LN7@PMC_TryPar:

; 1016 : 
; 1017 :         if ((result = TryParseX(source, number_styles, format_option, &no)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _no$[ebp]
	push	edx
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR _number_styles$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_TryParseX
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_TryPar

; 1018 :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN8@PMC_TryPar:

; 1019 :     }

	jmp	SHORT $LN6@PMC_TryPar
$LN5@PMC_TryPar:

; 1020 :     else
; 1021 :     {
; 1022 :         if ((result = TryParseDN(source, number_styles, format_option, &no)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format_option$[ebp]
	push	ecx
	mov	edx, DWORD PTR _number_styles$[ebp]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_TryParseDN
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_TryPar

; 1023 :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN6@PMC_TryPar:

; 1024 :     }
; 1025 :     *o = no;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [ecx], edx

; 1026 : #ifdef _DEBUG
; 1027 :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_TryPar

; 1028 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN10@PMC_TryPar:

; 1029 : #endif
; 1030 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_TryPar:

; 1031 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@PMC_TryPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN14@PMC_TryPar:
	DD	1
	DD	$LN13@PMC_TryPar
$LN13@PMC_TryPar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN12@PMC_TryPar
$LN12@PMC_TryPar:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	0
_PMC_TryParse@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_parse.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Parse PROC

; 1034 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __C5BBD3C1_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1035 :     default_number_format_option.DecimalDigits = 2;

	mov	DWORD PTR _default_number_format_option, 2

; 1036 :     lstrcpyW(default_number_format_option.GroupSeparator, L",");

	mov	esi, esp
	push	OFFSET $SG94817
	push	OFFSET _default_number_format_option+4
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1037 :     lstrcpyW(default_number_format_option.DecimalSeparator, L".");

	mov	esi, esp
	push	OFFSET $SG94818
	push	OFFSET _default_number_format_option+10
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1038 :     lstrcpy(default_number_format_option.GroupSizes, "3");

	mov	esi, esp
	push	OFFSET $SG94819
	push	OFFSET _default_number_format_option+28
	call	DWORD PTR __imp__lstrcpyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1039 :     lstrcpyW(default_number_format_option.PositiveSign, L"+");

	mov	esi, esp
	push	OFFSET $SG94820
	push	OFFSET _default_number_format_option+16
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1040 :     lstrcpyW(default_number_format_option.NegativeSign, L"-");

	mov	esi, esp
	push	OFFSET $SG94821
	push	OFFSET _default_number_format_option+22
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1041 : 
; 1042 :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

	mov	eax, DWORD PTR _feature$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@Initialize
	mov	edx, DWORD PTR _feature$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 3
	and	eax, 1
	je	SHORT $LN2@Initialize

; 1043 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;

	mov	DWORD PTR _fp_MultiplyAndAdd, OFFSET _MultiplyAndAdd_using_ADCX_MULX
	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 1044 :     else
; 1045 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;

	mov	DWORD PTR _fp_MultiplyAndAdd, OFFSET _MultiplyAndAdd_using_ADC_MUL
$LN3@Initialize:

; 1046 : 
; 1047 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1048 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Parse ENDP
_TEXT	ENDS
END
