; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_pow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__336CEE9B_pmc_pow@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_Pow
PUBLIC	_PMC_Pow_X_I@12
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_Multiply_X_X_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_number_zero:BYTE
EXTRN	_number_one:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_pow.c
_TEXT	SEGMENT
_r_check_code$1 = -76					; size = 4
_work2_buf$2 = -68					; size = 4
_work2_buf_words$3 = -60				; size = 4
_work2_buf_code$4 = -48					; size = 4
_work1_buf$5 = -40					; size = 4
_work1_buf_words$6 = -32				; size = 4
_work1_buf_code$7 = -20					; size = 4
_work_bit_count$8 = -12					; size = 4
_v_bit_count$9 = -8					; size = 4
_result$ = -4						; size = 4
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_r$ = 16						; size = 4
_PMC_Pow_X_I_Imp PROC

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __336CEE9B_pmc_pow@c
	call	@__CheckForDebuggerJustMyCode@4

; 84   :     PMC_STATUS_CODE result;
; 85   :     if (v->IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Pow_X_

; 86   :     {
; 87   :         // v が 0 である場合
; 88   : 
; 89   :         if (e == 0)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN4@PMC_Pow_X_

; 90   :         {
; 91   :             // e が 0 である場合
; 92   : 
; 93   :             // 0 の 0 乗となるので、エラーを返す
; 94   :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Pow_X_

; 95   :         }

	jmp	SHORT $LN5@PMC_Pow_X_
$LN4@PMC_Pow_X_:

; 96   :         else
; 97   :         {
; 98   :             // e が 0 ではない場合
; 99   : 
; 100  :             *r = &number_zero;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero
$LN5@PMC_Pow_X_:

; 101  :         }
; 102  :     }

	jmp	$LN3@PMC_Pow_X_
$LN2@PMC_Pow_X_:

; 103  :     else if (v->IS_ONE)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN6@PMC_Pow_X_

; 104  :     {
; 105  :         // v が 1 である場合
; 106  :         
; 107  :         // e が何であってもべき乗は 1 となる。
; 108  :         *r = &number_one;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_one

; 109  :     }

	jmp	$LN3@PMC_Pow_X_
$LN6@PMC_Pow_X_:

; 110  :     else
; 111  :     {
; 112  :         // v が 2 以上である場合
; 113  : 
; 114  :         if (e == 0)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN8@PMC_Pow_X_

; 115  :         {
; 116  :             // e が 0 である場合
; 117  : 
; 118  :             // 計算結果の 1 を返す
; 119  :             *r = &number_one;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one

; 120  :         }

	jmp	$LN3@PMC_Pow_X_
$LN8@PMC_Pow_X_:

; 121  :         else if (e == 1)

	cmp	DWORD PTR _e$[ebp], 1
	jne	SHORT $LN10@PMC_Pow_X_

; 122  :         {
; 123  :             // e が 1 である場合
; 124  : 
; 125  :             // 計算結果の v を返す
; 126  :             if ((result = DuplicateNumber(v, r)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Pow_X_

; 127  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Pow_X_
$LN12@PMC_Pow_X_:

; 128  :         }

	jmp	$LN3@PMC_Pow_X_
$LN10@PMC_Pow_X_:

; 129  :         else
; 130  :         {
; 131  :             // v と e がともに 2 以上である場合
; 132  : 
; 133  :             // v の e 乗を計算する
; 134  :             __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v_bit_count$9[ebp], ecx

; 135  : 
; 136  :             // べき乗の計算結果のビット長が論理的な限界を超えると思われる場合、エラーを返す
; 137  :             if (v_bit_count > ((__UNIT_TYPE)-1 - __UNIT_TYPE_BIT_COUNT) / e)

	mov	eax, -33				; ffffffdfH
	xor	edx, edx
	div	DWORD PTR _e$[ebp]
	cmp	DWORD PTR _v_bit_count$9[ebp], eax
	jbe	SHORT $LN13@PMC_Pow_X_

; 138  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Pow_X_
$LN13@PMC_Pow_X_:

; 139  : 
; 140  :             __UNIT_TYPE work_bit_count = v_bit_count * e + __UNIT_TYPE_BIT_COUNT;

	mov	edx, DWORD PTR _v_bit_count$9[ebp]
	imul	edx, DWORD PTR _e$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _work_bit_count$8[ebp], edx

; 141  : 
; 142  :             __UNIT_TYPE work1_buf_code;
; 143  :             __UNIT_TYPE work1_buf_words;
; 144  :             __UNIT_TYPE* work1_buf = AllocateBlock(work_bit_count, &work1_buf_words, &work1_buf_code);

	lea	eax, DWORD PTR _work1_buf_code$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _work1_buf_words$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_bit_count$8[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work1_buf$5[ebp], eax

; 145  :             if (work1_buf == NULL)

	cmp	DWORD PTR _work1_buf$5[ebp], 0
	jne	SHORT $LN14@PMC_Pow_X_

; 146  :             {
; 147  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Pow_X_
$LN14@PMC_Pow_X_:

; 148  :             }
; 149  :             __UNIT_TYPE work2_buf_code;
; 150  :             __UNIT_TYPE work2_buf_words;
; 151  :             __UNIT_TYPE* work2_buf = AllocateBlock(work_bit_count, &work2_buf_words, &work2_buf_code);

	lea	eax, DWORD PTR _work2_buf_code$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _work2_buf_words$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_bit_count$8[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work2_buf$2[ebp], eax

; 152  :             if (work1_buf == NULL)

	cmp	DWORD PTR _work1_buf$5[ebp], 0
	jne	SHORT $LN15@PMC_Pow_X_

; 153  :             {
; 154  :                 DeallocateBlock(work1_buf, work1_buf_words);

	mov	eax, DWORD PTR _work1_buf_words$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _work1_buf$5[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 155  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Pow_X_
$LN15@PMC_Pow_X_:

; 156  :             }
; 157  :             __UNIT_TYPE r_check_code;
; 158  :             if ((result = AllocateNumber(r, work_bit_count, &r_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _r_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _work_bit_count$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Pow_X_

; 159  :             {
; 160  :                 DeallocateBlock(work1_buf, work1_buf_words);

	mov	edx, DWORD PTR _work1_buf_words$6[ebp]
	push	edx
	mov	eax, DWORD PTR _work1_buf$5[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 161  :                 DeallocateBlock(work2_buf, work2_buf_words);

	mov	ecx, DWORD PTR _work2_buf_words$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _work2_buf$2[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 162  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Pow_X_
$LN16@PMC_Pow_X_:

; 163  :             }
; 164  : 
; 165  :             Pow_Imp(v->BLOCK, v->UNIT_WORD_COUNT, e, work1_buf, work2_buf, (*r)->BLOCK);

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _work2_buf$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _work1_buf$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_Pow_Imp
	add	esp, 24					; 00000018H

; 166  : 
; 167  :             if ((result = CheckBlockLight(work1_buf, work1_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work1_buf_code$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _work1_buf$5[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Pow_X_

; 168  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Pow_X_
$LN17@PMC_Pow_X_:

; 169  :             if ((result = CheckBlockLight(work2_buf, work2_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _work2_buf_code$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _work2_buf$2[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Pow_X_

; 170  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Pow_X_
$LN18@PMC_Pow_X_:

; 171  :             if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _r_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Pow_X_

; 172  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Pow_X_
$LN19@PMC_Pow_X_:

; 173  :             DeallocateBlock(work1_buf, work1_buf_words);

	mov	eax, DWORD PTR _work1_buf_words$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _work1_buf$5[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 174  :             DeallocateBlock(work2_buf, work2_buf_words);

	mov	edx, DWORD PTR _work2_buf_words$3[ebp]
	push	edx
	mov	eax, DWORD PTR _work2_buf$2[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 175  :             CommitNumber(*r);

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Pow_X_:

; 176  :         }
; 177  :     }
; 178  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Pow_X_:

; 179  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@PMC_Pow_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@PMC_Pow_X_:
	DD	5
	DD	$LN26@PMC_Pow_X_
$LN26@PMC_Pow_X_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN21@PMC_Pow_X_
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN22@PMC_Pow_X_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN23@PMC_Pow_X_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN24@PMC_Pow_X_
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN25@PMC_Pow_X_
$LN25@PMC_Pow_X_:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN24@PMC_Pow_X_:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN23@PMC_Pow_X_:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN22@PMC_Pow_X_:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN21@PMC_Pow_X_:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_PMC_Pow_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_pow.c
_TEXT	SEGMENT
_t_ptr$1 = -28						; size = 4
_v_count$ = -24						; size = 4
_u_count$ = -20						; size = 4
_w_ptr$ = -16						; size = 4
_v_ptr$ = -12						; size = 4
_u_ptr$ = -8						; size = 4
_e_mask$ = -4						; size = 4
_v_buf$ = 8						; size = 4
_v_buf_count$ = 12					; size = 4
_e$ = 16						; size = 4
_work1_buf$ = 20					; size = 4
_work2_buf$ = 24					; size = 4
_r_buf$ = 28						; size = 4
_Pow_Imp PROC

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __336CEE9B_pmc_pow@c
	call	@__CheckForDebuggerJustMyCode@4

; 39   :     _UINT32_T e_mask = _rotr(1, _LZCNT_ALT_32(e) + 1);

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	add	eax, 1
	mov	edx, 1
	mov	ecx, eax
	ror	edx, cl
	mov	DWORD PTR _e_mask$[ebp], edx

; 40   : 
; 41   :     // この時点で e & e_mask は 0ではないはず
; 42   : 
; 43   :     __UNIT_TYPE* u_ptr = work1_buf;

	mov	eax, DWORD PTR _work1_buf$[ebp]
	mov	DWORD PTR _u_ptr$[ebp], eax

; 44   :     __UNIT_TYPE* v_ptr = v_buf;

	mov	ecx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 45   :     __UNIT_TYPE* w_ptr = work2_buf;

	mov	edx, DWORD PTR _work2_buf$[ebp]
	mov	DWORD PTR _w_ptr$[ebp], edx

; 46   :     __UNIT_TYPE u_count = v_buf_count;

	mov	eax, DWORD PTR _v_buf_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], eax

; 47   :     __UNIT_TYPE v_count = v_buf_count;

	mov	ecx, DWORD PTR _v_buf_count$[ebp]
	mov	DWORD PTR _v_count$[ebp], ecx

; 48   :     _COPY_MEMORY_UNIT(work1_buf, v_buf, v_buf_count);

	mov	edx, DWORD PTR _v_buf_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work1_buf$[ebp]
	push	ecx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 49   :     e_mask >>= 1;

	mov	edx, DWORD PTR _e_mask$[ebp]
	shr	edx, 1
	mov	DWORD PTR _e_mask$[ebp], edx
$LN2@Pow_Imp:

; 50   :     while (e_mask != 0)

	cmp	DWORD PTR _e_mask$[ebp], 0
	je	$LN3@Pow_Imp

; 51   :     {
; 52   :         // u を自乗して w に格納する
; 53   :         _ZERO_MEMORY_UNIT(w_ptr, u_count * 2);

	mov	eax, DWORD PTR _u_count$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _w_ptr$[ebp]
	push	ecx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 54   :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	edx, DWORD PTR _w_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	call	_Multiply_X_X_Imp
	add	esp, 20					; 00000014H

; 55   :         u_count *= 2;

	mov	ecx, DWORD PTR _u_count$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _u_count$[ebp], ecx

; 56   :         if (w_ptr[u_count - 1] == 0)

	mov	edx, DWORD PTR _u_count$[ebp]
	mov	eax, DWORD PTR _w_ptr$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], 0
	jne	SHORT $LN4@Pow_Imp

; 57   :             --u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _u_count$[ebp], ecx
$LN4@Pow_Imp:

; 58   : 
; 59   :         // e の該当桁の bit を調べる
; 60   :         if (e & e_mask)

	mov	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _e_mask$[ebp]
	je	SHORT $LN5@Pow_Imp

; 61   :         {
; 62   :             // bit が立っていたら u = w * v とする
; 63   :             _ZERO_MEMORY_UNIT(u_ptr, u_count + v_count);

	mov	eax, DWORD PTR _u_count$[ebp]
	add	eax, DWORD PTR _v_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 64   :             Multiply_X_X_Imp(w_ptr, u_count, v_ptr, v_count, u_ptr);

	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _w_ptr$[ebp]
	push	eax
	call	_Multiply_X_X_Imp
	add	esp, 20					; 00000014H

; 65   :             u_count += v_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	add	ecx, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], ecx

; 66   :             if (u_ptr[u_count - 1] == 0)

	mov	edx, DWORD PTR _u_count$[ebp]
	mov	eax, DWORD PTR _u_ptr$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], 0
	jne	SHORT $LN7@Pow_Imp

; 67   :                 --u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _u_count$[ebp], ecx
$LN7@Pow_Imp:

; 68   :         }

	jmp	SHORT $LN6@Pow_Imp
$LN5@Pow_Imp:

; 69   :         else
; 70   :         {
; 71   :             // u と w を交換する
; 72   :             __UNIT_TYPE* t_ptr = u_ptr;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	DWORD PTR _t_ptr$1[ebp], edx

; 73   :             u_ptr = w_ptr;

	mov	eax, DWORD PTR _w_ptr$[ebp]
	mov	DWORD PTR _u_ptr$[ebp], eax

; 74   :             w_ptr = t_ptr;

	mov	ecx, DWORD PTR _t_ptr$1[ebp]
	mov	DWORD PTR _w_ptr$[ebp], ecx
$LN6@Pow_Imp:

; 75   :         }
; 76   : 
; 77   :         e_mask >>= 1;

	mov	edx, DWORD PTR _e_mask$[ebp]
	shr	edx, 1
	mov	DWORD PTR _e_mask$[ebp], edx

; 78   :     }

	jmp	$LN2@Pow_Imp
$LN3@Pow_Imp:

; 79   :     _COPY_MEMORY_UNIT(r_buf, u_ptr, u_count);

	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 80   : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Pow_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 872  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 873  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 874  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 875  :     _UINT32_T pos;
; 876  : #ifdef _MSC_VER
; 877  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 878  : #elif defined(__GNUC__)
; 879  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 880  : #else
; 881  : #error unknown compiler
; 882  : #endif
; 883  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 884  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT PROC

; 392  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 393  : #ifdef _M_IX86
; 394  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 395  : #elif defined(_M_X64)
; 396  :     __stosq(d, 0, count);
; 397  : #else
; 398  : #error unknown platform
; 399  : #endif
; 400  : }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 342  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 343  : #ifdef _M_IX86
; 344  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 345  : #elif defined(_M_X64)
; 346  :     __movsq(d, s, count);
; 347  : #else
; 348  : #error unknown platform
; 349  : #endif
; 350  : }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_pow.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_r$ = 16						; size = 4
_PMC_Pow_X_I@12 PROC

; 182  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __336CEE9B_pmc_pow@c
	call	@__CheckForDebuggerJustMyCode@4

; 183  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(e) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Pow_X_

; 184  :     {
; 185  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 186  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Pow_X_
$LN2@PMC_Pow_X_:

; 187  :     }
; 188  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Pow_X_

; 189  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Pow_X_
$LN3@PMC_Pow_X_:

; 190  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN4@PMC_Pow_X_

; 191  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Pow_X_
$LN4@PMC_Pow_X_:

; 192  :     PMC_STATUS_CODE result;
; 193  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Pow_X_

; 194  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Pow_X_
$LN5@PMC_Pow_X_:

; 195  :     if ((result = PMC_Pow_X_I_Imp((NUMBER_HEADER*)v, e, (NUMBER_HEADER**)r)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_PMC_Pow_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Pow_X_

; 196  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Pow_X_
$LN6@PMC_Pow_X_:

; 197  : #ifdef _DEBUG
; 198  :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Pow_X_

; 199  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Pow_X_
$LN7@PMC_Pow_X_:

; 200  : #endif
; 201  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Pow_X_:

; 202  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Pow_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_pow.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Pow PROC

; 205  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __336CEE9B_pmc_pow@c
	call	@__CheckForDebuggerJustMyCode@4

; 206  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 207  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Pow ENDP
_TEXT	ENDS
END
