; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_subtruct.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__4522B509_pmc_internal@h DB 01H
__89DB6AB9_autogenerated_inline_func@h DB 01H
__1898920A_pmc_subtruct@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_Subtruct
PUBLIC	_PMC_Subtruct_X_I@12
PUBLIC	_PMC_Subtruct_X_L@16
PUBLIC	_PMC_Subtruct_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
_TEXT	SEGMENT
tv169 = -44						; size = 4
tv166 = -40						; size = 4
tv163 = -36						; size = 4
_count$ = -32						; size = 4
_c$ = -25						; size = 1
_zp$ = -24						; size = 4
_yp$ = -20						; size = 4
_xp$ = -16						; size = 4
_z_count$ = -12						; size = 4
_y_count$ = -8						; size = 4
_x_count$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_Subtruct_X_X PROC

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1898920A_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 139  :     __UNIT_TYPE x_count = x->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x_count$[ebp], ecx

; 140  :     __UNIT_TYPE y_count = y->UNIT_WORD_COUNT;

	mov	edx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _y_count$[ebp], eax

; 141  :     __UNIT_TYPE z_count = z->BLOCK_COUNT;

	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _z_count$[ebp], edx

; 142  :     __UNIT_TYPE* xp = &x->BLOCK[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _xp$[ebp], ecx

; 143  :     __UNIT_TYPE* yp = &y->BLOCK[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _yp$[ebp], ecx

; 144  :     __UNIT_TYPE* zp = &z->BLOCK[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _z$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _zp$[ebp], ecx

; 145  :     char c = 0;

	mov	BYTE PTR _c$[ebp], 0

; 146  : 
; 147  :     // まず 32 ワードずつ減算をする。
; 148  :     __UNIT_TYPE count = y_count >> 5;

	mov	eax, DWORD PTR _y_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@Subtruct_X:

; 149  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN3@Subtruct_X

; 150  :     {
; 151  :         c= _SUBTRUCT_32WORDS_SBB(c, xp, yp, zp);

	mov	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yp$[ebp]
	push	edx
	mov	eax, DWORD PTR _xp$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_32WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 152  :         xp += 32;

	mov	edx, DWORD PTR _xp$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _xp$[ebp], edx

; 153  :         yp += 32;

	mov	eax, DWORD PTR _yp$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _yp$[ebp], eax

; 154  :         zp += 32;

	mov	ecx, DWORD PTR _zp$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _zp$[ebp], ecx

; 155  :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 156  :     }

	jmp	SHORT $LN2@Subtruct_X
$LN3@Subtruct_X:

; 157  :     // この時点で未処理の桁は 32 ワード未満のはず
; 158  : 
; 159  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード減算を行う。
; 160  :     if (y_count & 0x10)

	mov	eax, DWORD PTR _y_count$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@Subtruct_X

; 161  :     {
; 162  :         c = _SUBTRUCT_16WORDS_SBB(c, xp, yp, zp);

	mov	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yp$[ebp]
	push	edx
	mov	eax, DWORD PTR _xp$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_16WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 163  :         xp += 16;

	mov	edx, DWORD PTR _xp$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _xp$[ebp], edx

; 164  :         yp += 16;

	mov	eax, DWORD PTR _yp$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _yp$[ebp], eax

; 165  :         zp += 16;

	mov	ecx, DWORD PTR _zp$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _zp$[ebp], ecx
$LN4@Subtruct_X:

; 166  :     }
; 167  :     // この時点で未処理の桁は 16 ワード未満のはず
; 168  : 
; 169  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード減算を行う。
; 170  :     if (y_count & 0x8)

	mov	edx, DWORD PTR _y_count$[ebp]
	and	edx, 8
	je	SHORT $LN5@Subtruct_X

; 171  :     {
; 172  :         c = _SUBTRUCT_8WORDS_SBB(c, xp, yp, zp);

	mov	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xp$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_8WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 173  :         xp += 8;

	mov	ecx, DWORD PTR _xp$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _xp$[ebp], ecx

; 174  :         yp += 8;

	mov	edx, DWORD PTR _yp$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _yp$[ebp], edx

; 175  :         zp += 8;

	mov	eax, DWORD PTR _zp$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _zp$[ebp], eax
$LN5@Subtruct_X:

; 176  :     }
; 177  :     // この時点で未処理の桁は 8 ワード未満のはず
; 178  : 
; 179  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード減算を行う。
; 180  :     if (y_count & 0x4)

	mov	ecx, DWORD PTR _y_count$[ebp]
	and	ecx, 4
	je	SHORT $LN6@Subtruct_X

; 181  :     {
; 182  :         c = _SUBTRUCT_4WORDS_SBB(c, xp, yp, zp);

	mov	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, DWORD PTR _yp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xp$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_4WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 183  :         xp += 4;

	mov	eax, DWORD PTR _xp$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _xp$[ebp], eax

; 184  :         yp += 4;

	mov	ecx, DWORD PTR _yp$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _yp$[ebp], ecx

; 185  :         zp += 4;

	mov	edx, DWORD PTR _zp$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _zp$[ebp], edx
$LN6@Subtruct_X:

; 186  :     }
; 187  :     // この時点で未処理の桁は 4 ワード未満のはず
; 188  : 
; 189  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード減算を行う。
; 190  :     if (y_count & 0x2)

	mov	eax, DWORD PTR _y_count$[ebp]
	and	eax, 2
	je	SHORT $LN7@Subtruct_X

; 191  :     {
; 192  :         c = _SUBTRUCT_2WORDS_SBB(c, xp, yp, zp);

	mov	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yp$[ebp]
	push	edx
	mov	eax, DWORD PTR _xp$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_2WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 193  :         xp += 2;

	mov	edx, DWORD PTR _xp$[ebp]
	add	edx, 8
	mov	DWORD PTR _xp$[ebp], edx

; 194  :         yp += 2;

	mov	eax, DWORD PTR _yp$[ebp]
	add	eax, 8
	mov	DWORD PTR _yp$[ebp], eax

; 195  :         zp += 2;

	mov	ecx, DWORD PTR _zp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _zp$[ebp], ecx
$LN7@Subtruct_X:

; 196  :     }
; 197  :     // この時点で未処理の桁は 2 ワード未満のはず
; 198  : 
; 199  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード減算を行う。
; 200  :     if (y_count & 1)

	mov	edx, DWORD PTR _y_count$[ebp]
	and	edx, 1
	je	SHORT $LN8@Subtruct_X

; 201  :         c = _SUBTRUCT_UNIT(c, *xp++, *yp++, zp++);

	mov	eax, DWORD PTR _zp$[ebp]
	mov	DWORD PTR tv163[ebp], eax
	mov	ecx, DWORD PTR _zp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _zp$[ebp], ecx
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv166[ebp], eax
	mov	ecx, DWORD PTR _yp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _yp$[ebp], ecx
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv169[ebp], eax
	mov	ecx, DWORD PTR _xp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _xp$[ebp], ecx
	mov	edx, DWORD PTR tv163[ebp]
	push	edx
	mov	eax, DWORD PTR tv166[ebp]
	push	eax
	mov	ecx, DWORD PTR tv169[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al
$LN8@Subtruct_X:

; 202  : 
; 203  :     // 残りの桁の繰り上がりを計算し、復帰する。
; 204  :     return (DoBorrow(c, xp, x_count - y_count, zp, z_count - y_count));

	mov	eax, DWORD PTR _z_count$[ebp]
	sub	eax, DWORD PTR _y_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_count$[ebp]
	sub	edx, DWORD PTR _y_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _xp$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	_DoBorrow
	add	esp, 20					; 00000014H

; 205  : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Subtruct_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
_TEXT	SEGMENT
tv88 = -36						; size = 4
tv84 = -32						; size = 4
tv79 = -28						; size = 4
tv75 = -24						; size = 4
_c$ = -17						; size = 1
_zp$ = -16						; size = 4
_xp$ = -12						; size = 4
_z_count$ = -8						; size = 4
_x_count$ = -4						; size = 4
_x$ = 8							; size = 4
_y_hi$ = 12						; size = 4
_y_lo$ = 16						; size = 4
_z$ = 20						; size = 4
_Subtruct_X_2W PROC

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __1898920A_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 106  :     __UNIT_TYPE x_count = x->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x_count$[ebp], ecx

; 107  :     __UNIT_TYPE z_count = z->BLOCK_COUNT;

	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _z_count$[ebp], eax

; 108  :     __UNIT_TYPE* xp = &x->BLOCK[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	DWORD PTR _xp$[ebp], edx

; 109  :     __UNIT_TYPE* zp = &z->BLOCK[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	DWORD PTR _zp$[ebp], edx

; 110  :     char c;
; 111  : 
; 112  :     if (x_count < 2)

	cmp	DWORD PTR _x_count$[ebp], 2
	jae	SHORT $LN2@Subtruct_X

; 113  :     {
; 114  :         // x が 1 ワードしかなかった場合
; 115  : 
; 116  :         // 明らかに演算結果が負になるのでエラーを通知する。
; 117  :         return (PMC_STATUS_INTERNAL_BORROW);

	mov	eax, -258				; fffffefeH
	jmp	$LN1@Subtruct_X

; 118  :     }

	jmp	$LN1@Subtruct_X
$LN2@Subtruct_X:

; 119  :     else
; 120  :     {
; 121  :         // x が 2 ワード以上あった場合
; 122  : 
; 123  :         // 最下位のワードの減算をする
; 124  :         c = _SUBTRUCT_UNIT(0, *xp++, y_lo, zp++);

	mov	ecx, DWORD PTR _zp$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR _zp$[ebp]
	add	edx, 4
	mov	DWORD PTR _zp$[ebp], edx
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv79[ebp], ecx
	mov	edx, DWORD PTR _xp$[ebp]
	add	edx, 4
	mov	DWORD PTR _xp$[ebp], edx
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_lo$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv79[ebp]
	push	edx
	push	0
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 125  : 
; 126  :         // 最下位から 2 番目のワードの減算をする。
; 127  :         c = _SUBTRUCT_UNIT(c, *xp++, y_hi, zp++);

	mov	eax, DWORD PTR _zp$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR _zp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _zp$[ebp], ecx
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR _xp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _xp$[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	push	edx
	mov	eax, DWORD PTR _y_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv88[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 128  :         x_count -= 2;

	mov	eax, DWORD PTR _x_count$[ebp]
	sub	eax, 2
	mov	DWORD PTR _x_count$[ebp], eax

; 129  :         z_count -= 2;

	mov	ecx, DWORD PTR _z_count$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _z_count$[ebp], ecx

; 130  : 
; 131  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 132  :         return (DoBorrow(c, xp, x_count, zp, z_count));

	mov	edx, DWORD PTR _z_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xp$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	_DoBorrow
	add	esp, 20					; 00000014H
$LN1@Subtruct_X:

; 133  :     }
; 134  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Subtruct_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
_TEXT	SEGMENT
tv78 = -28						; size = 4
tv74 = -24						; size = 4
_c$ = -17						; size = 1
_zp$ = -16						; size = 4
_xp$ = -12						; size = 4
_z_count$ = -8						; size = 4
_x_count$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_Subtruct_X_1W PROC

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __1898920A_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 86   :     __UNIT_TYPE x_count = x->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x_count$[ebp], ecx

; 87   :     __UNIT_TYPE z_count = z->BLOCK_COUNT;

	mov	edx, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _z_count$[ebp], eax

; 88   :     __UNIT_TYPE* xp = &x->BLOCK[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	DWORD PTR _xp$[ebp], edx

; 89   :     __UNIT_TYPE* zp = &z->BLOCK[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _z$[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	DWORD PTR _zp$[ebp], edx

; 90   :     char c;
; 91   : 
; 92   : 
; 93   : 
; 94   :     // 最下桁の減算を行う
; 95   :     c = _SUBTRUCT_UNIT(0, *xp++, y, zp++);

	mov	ecx, DWORD PTR _zp$[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR _zp$[ebp]
	add	edx, 4
	mov	DWORD PTR _zp$[ebp], edx
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR _xp$[ebp]
	add	edx, 4
	mov	DWORD PTR _xp$[ebp], edx
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	push	0
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 96   :     --x_count;

	mov	eax, DWORD PTR _x_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x_count$[ebp], eax

; 97   :     --z_count;

	mov	ecx, DWORD PTR _z_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _z_count$[ebp], ecx

; 98   : 
; 99   :     // 残りの桁の繰上りを行い復帰する。
; 100  :     return (DoBorrow(c, xp, x_count, zp, z_count));

	mov	edx, DWORD PTR _z_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xp$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	_DoBorrow
	add	esp, 20					; 00000014H

; 101  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Subtruct_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
_TEXT	SEGMENT
tv75 = -8						; size = 4
tv71 = -4						; size = 4
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_x_count$ = 16						; size = 4
_op$ = 20						; size = 4
_o_count$ = 24						; size = 4
_DoBorrow PROC

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __1898920A_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@DoBorrow:

; 40   :     // 桁借りを続く限り行う
; 41   :     for (;;)
; 42   :     {
; 43   :         if (x_count <= 0)

	cmp	DWORD PTR _x_count$[ebp], 0
	ja	SHORT $LN7@DoBorrow

; 44   :         {
; 45   :             // x の最上位まで達してしまった場合
; 46   : 
; 47   :             if (c)

	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN9@DoBorrow

; 48   :             {
; 49   :                 // かつそれでも桁借りを行う必要がある場合
; 50   : 
; 51   :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 52   :                 return (PMC_STATUS_INTERNAL_BORROW);

	mov	eax, -258				; fffffefeH
	jmp	$LN1@DoBorrow
$LN9@DoBorrow:

; 53   :             }
; 54   : 
; 55   :             // xの最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 56   : 
; 57   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DoBorrow

; 58   :         }

	jmp	$LN8@DoBorrow
$LN7@DoBorrow:

; 59   :         else if (c)

	movsx	ecx, BYTE PTR _c$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@DoBorrow

; 60   :         {
; 61   :             // xの最上位に達しておらず、かつボローが立っている場合
; 62   : 
; 63   :             // 桁借りを継続する
; 64   :             c = _SUBTRUCT_UNIT(c, *xp++, 0, op++);

	mov	edx, DWORD PTR _op$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	mov	eax, DWORD PTR _op$[ebp]
	add	eax, 4
	mov	DWORD PTR _op$[ebp], eax
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv75[ebp], edx
	mov	eax, DWORD PTR _xp$[ebp]
	add	eax, 4
	mov	DWORD PTR _xp$[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 65   :             --x_count;

	mov	ecx, DWORD PTR _x_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _x_count$[ebp], ecx

; 66   :             --o_count;

	mov	edx, DWORD PTR _o_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _o_count$[ebp], edx

; 67   :         }

	jmp	SHORT $LN8@DoBorrow
$LN5@DoBorrow:

; 68   :         else
; 69   :         {
; 70   :             // xの最上位に達しておらず、かつボローが立っていない場合
; 71   : 
; 72   :             // 桁借りを中断し、xの残りのデータをzにそのまま複写し、正常復帰する。
; 73   :             while (x_count > 0)

	cmp	DWORD PTR _x_count$[ebp], 0
	jbe	SHORT $LN6@DoBorrow

; 74   :             {
; 75   :                 *op++ = *xp++;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _op$[ebp]
	add	eax, 4
	mov	DWORD PTR _op$[ebp], eax
	mov	ecx, DWORD PTR _xp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _xp$[ebp], ecx

; 76   :                 --x_count;

	mov	edx, DWORD PTR _x_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _x_count$[ebp], edx

; 77   :                 --o_count;

	mov	eax, DWORD PTR _o_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _o_count$[ebp], eax

; 78   :             }

	jmp	SHORT $LN5@DoBorrow
$LN6@DoBorrow:

; 79   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DoBorrow
$LN8@DoBorrow:

; 80   :         }
; 81   :     }

	jmp	$LN4@DoBorrow
$LN1@DoBorrow:

; 82   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_2WORDS_SBB PROC

; 4462 :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4463 : #ifdef _MSC_VER
; 4464 :         c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4465 :         c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4466 : #elif defined(__GNUC__)
; 4467 : #ifdef _M_IX86
; 4468 :         __asm__ volatile (
; 4469 :             "addb\t$-1, %0\n\t"
; 4470 :             "movl\t(%1), %%ecx\n\t"
; 4471 :             "sbbl\t(%2), %%ecx\n\t"
; 4472 :             "movl\t%%ecx, (%3)\n\t"
; 4473 :             "movl\t4(%1), %%ecx\n\t"
; 4474 :             "sbbl\t4(%2), %%ecx\n\t"
; 4475 :             "movl\t%%ecx, 4(%3)\n\t"
; 4476 :             "setc\t%0"
; 4477 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4478 :             :
; 4479 :             : "cc", "memory", "%ecx"
; 4480 :             );
; 4481 : #elif defined(_M_IX64)
; 4482 :         __asm__ volatile (
; 4483 :             "addb\t$-1, %0\n\t"
; 4484 :             "movq\t(%1), %%rcx\n\t"
; 4485 :             "sbbq\t(%2), %%rcx\n\t"
; 4486 :             "movq\t%%rcx, (%3)\n\t"
; 4487 :             "movq\t8(%1), %%rcx\n\t"
; 4488 :             "sbbq\t8(%2), %%rcx\n\t"
; 4489 :             "movq\t%%rcx, 8(%3)\n\t"
; 4490 :             "setc\t%0"
; 4491 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4492 :             :
; 4493 :             : "cc", "memory", "%rcx"
; 4494 :             );
; 4495 : #else
; 4496 : #error unknown platform
; 4497 : #endif
; 4498 : #else
; 4499 : #error unknown compiler
; 4500 : #endif
; 4501 :         return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4502 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_2WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_4WORDS_SBB PROC

; 4048 :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4049 : #ifdef _MSC_VER
; 4050 :         c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4051 :         c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4052 :         c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4053 :         c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4054 : #elif defined(__GNUC__)
; 4055 : #ifdef _M_IX86
; 4056 :         __asm__ volatile (
; 4057 :             "addb\t$-1, %0\n\t"
; 4058 :             "movl\t(%1), %%ecx\n\t"
; 4059 :             "sbbl\t(%2), %%ecx\n\t"
; 4060 :             "movl\t%%ecx, (%3)\n\t"
; 4061 :             "movl\t4(%1), %%ecx\n\t"
; 4062 :             "sbbl\t4(%2), %%ecx\n\t"
; 4063 :             "movl\t%%ecx, 4(%3)\n\t"
; 4064 :             "movl\t8(%1), %%ecx\n\t"
; 4065 :             "sbbl\t8(%2), %%ecx\n\t"
; 4066 :             "movl\t%%ecx, 8(%3)\n\t"
; 4067 :             "movl\t12(%1), %%ecx\n\t"
; 4068 :             "sbbl\t12(%2), %%ecx\n\t"
; 4069 :             "movl\t%%ecx, 12(%3)\n\t"
; 4070 :             "setc\t%0"
; 4071 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4072 :             :
; 4073 :             : "cc", "memory", "%ecx"
; 4074 :             );
; 4075 : #elif defined(_M_IX64)
; 4076 :         __asm__ volatile (
; 4077 :             "addb\t$-1, %0\n\t"
; 4078 :             "movq\t(%1), %%rcx\n\t"
; 4079 :             "sbbq\t(%2), %%rcx\n\t"
; 4080 :             "movq\t%%rcx, (%3)\n\t"
; 4081 :             "movq\t8(%1), %%rcx\n\t"
; 4082 :             "sbbq\t8(%2), %%rcx\n\t"
; 4083 :             "movq\t%%rcx, 8(%3)\n\t"
; 4084 :             "movq\t16(%1), %%rcx\n\t"
; 4085 :             "sbbq\t16(%2), %%rcx\n\t"
; 4086 :             "movq\t%%rcx, 16(%3)\n\t"
; 4087 :             "movq\t24(%1), %%rcx\n\t"
; 4088 :             "sbbq\t24(%2), %%rcx\n\t"
; 4089 :             "movq\t%%rcx, 24(%3)\n\t"
; 4090 :             "setc\t%0"
; 4091 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4092 :             :
; 4093 :             : "cc", "memory", "%rcx"
; 4094 :             );
; 4095 : #else
; 4096 : #error unknown platform
; 4097 : #endif
; 4098 : #else
; 4099 : #error unknown compiler
; 4100 : #endif
; 4101 :         return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4102 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_4WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_8WORDS_SBB PROC

; 3452 :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 3453 : #ifdef _MSC_VER
; 3454 :         c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3455 :         c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3456 :         c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3457 :         c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3458 :         c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3459 :         c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3460 :         c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3461 :         c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3462 : #elif defined(__GNUC__)
; 3463 : #ifdef _M_IX86
; 3464 :         __asm__ volatile (
; 3465 :             "addb\t$-1, %0\n\t"
; 3466 :             "movl\t(%1), %%ecx\n\t"
; 3467 :             "sbbl\t(%2), %%ecx\n\t"
; 3468 :             "movl\t%%ecx, (%3)\n\t"
; 3469 :             "movl\t4(%1), %%ecx\n\t"
; 3470 :             "sbbl\t4(%2), %%ecx\n\t"
; 3471 :             "movl\t%%ecx, 4(%3)\n\t"
; 3472 :             "movl\t8(%1), %%ecx\n\t"
; 3473 :             "sbbl\t8(%2), %%ecx\n\t"
; 3474 :             "movl\t%%ecx, 8(%3)\n\t"
; 3475 :             "movl\t12(%1), %%ecx\n\t"
; 3476 :             "sbbl\t12(%2), %%ecx\n\t"
; 3477 :             "movl\t%%ecx, 12(%3)\n\t"
; 3478 :             "movl\t16(%1), %%ecx\n\t"
; 3479 :             "sbbl\t16(%2), %%ecx\n\t"
; 3480 :             "movl\t%%ecx, 16(%3)\n\t"
; 3481 :             "movl\t20(%1), %%ecx\n\t"
; 3482 :             "sbbl\t20(%2), %%ecx\n\t"
; 3483 :             "movl\t%%ecx, 20(%3)\n\t"
; 3484 :             "movl\t24(%1), %%ecx\n\t"
; 3485 :             "sbbl\t24(%2), %%ecx\n\t"
; 3486 :             "movl\t%%ecx, 24(%3)\n\t"
; 3487 :             "movl\t28(%1), %%ecx\n\t"
; 3488 :             "sbbl\t28(%2), %%ecx\n\t"
; 3489 :             "movl\t%%ecx, 28(%3)\n\t"
; 3490 :             "setc\t%0"
; 3491 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3492 :             :
; 3493 :             : "cc", "memory", "%ecx"
; 3494 :             );
; 3495 : #elif defined(_M_IX64)
; 3496 :         __asm__ volatile (
; 3497 :             "addb\t$-1, %0\n\t"
; 3498 :             "movq\t(%1), %%rcx\n\t"
; 3499 :             "sbbq\t(%2), %%rcx\n\t"
; 3500 :             "movq\t%%rcx, (%3)\n\t"
; 3501 :             "movq\t8(%1), %%rcx\n\t"
; 3502 :             "sbbq\t8(%2), %%rcx\n\t"
; 3503 :             "movq\t%%rcx, 8(%3)\n\t"
; 3504 :             "movq\t16(%1), %%rcx\n\t"
; 3505 :             "sbbq\t16(%2), %%rcx\n\t"
; 3506 :             "movq\t%%rcx, 16(%3)\n\t"
; 3507 :             "movq\t24(%1), %%rcx\n\t"
; 3508 :             "sbbq\t24(%2), %%rcx\n\t"
; 3509 :             "movq\t%%rcx, 24(%3)\n\t"
; 3510 :             "movq\t32(%1), %%rcx\n\t"
; 3511 :             "sbbq\t32(%2), %%rcx\n\t"
; 3512 :             "movq\t%%rcx, 32(%3)\n\t"
; 3513 :             "movq\t40(%1), %%rcx\n\t"
; 3514 :             "sbbq\t40(%2), %%rcx\n\t"
; 3515 :             "movq\t%%rcx, 40(%3)\n\t"
; 3516 :             "movq\t48(%1), %%rcx\n\t"
; 3517 :             "sbbq\t48(%2), %%rcx\n\t"
; 3518 :             "movq\t%%rcx, 48(%3)\n\t"
; 3519 :             "movq\t56(%1), %%rcx\n\t"
; 3520 :             "sbbq\t56(%2), %%rcx\n\t"
; 3521 :             "movq\t%%rcx, 56(%3)\n\t"
; 3522 :             "setc\t%0"
; 3523 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3524 :             :
; 3525 :             : "cc", "memory", "%rcx"
; 3526 :             );
; 3527 : #else
; 3528 : #error unknown platform
; 3529 : #endif
; 3530 : #else
; 3531 : #error unknown compiler
; 3532 : #endif
; 3533 :         return (c);

	mov	al, BYTE PTR _c$[ebp]

; 3534 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_8WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_16WORDS_SBB PROC

; 2492 :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 2493 : #ifdef _MSC_VER
; 2494 :         c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2495 :         c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2496 :         c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2497 :         c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2498 :         c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2499 :         c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2500 :         c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2501 :         c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2502 :         c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2503 :         c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2504 :         c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2505 :         c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2506 :         c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2507 :         c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2508 :         c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2509 :         c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2510 : #elif defined(__GNUC__)
; 2511 : #ifdef _M_IX86
; 2512 :         __asm__ volatile (
; 2513 :             "addb\t$-1, %0\n\t"
; 2514 :             "movl\t(%1), %%ecx\n\t"
; 2515 :             "sbbl\t(%2), %%ecx\n\t"
; 2516 :             "movl\t%%ecx, (%3)\n\t"
; 2517 :             "movl\t4(%1), %%ecx\n\t"
; 2518 :             "sbbl\t4(%2), %%ecx\n\t"
; 2519 :             "movl\t%%ecx, 4(%3)\n\t"
; 2520 :             "movl\t8(%1), %%ecx\n\t"
; 2521 :             "sbbl\t8(%2), %%ecx\n\t"
; 2522 :             "movl\t%%ecx, 8(%3)\n\t"
; 2523 :             "movl\t12(%1), %%ecx\n\t"
; 2524 :             "sbbl\t12(%2), %%ecx\n\t"
; 2525 :             "movl\t%%ecx, 12(%3)\n\t"
; 2526 :             "movl\t16(%1), %%ecx\n\t"
; 2527 :             "sbbl\t16(%2), %%ecx\n\t"
; 2528 :             "movl\t%%ecx, 16(%3)\n\t"
; 2529 :             "movl\t20(%1), %%ecx\n\t"
; 2530 :             "sbbl\t20(%2), %%ecx\n\t"
; 2531 :             "movl\t%%ecx, 20(%3)\n\t"
; 2532 :             "movl\t24(%1), %%ecx\n\t"
; 2533 :             "sbbl\t24(%2), %%ecx\n\t"
; 2534 :             "movl\t%%ecx, 24(%3)\n\t"
; 2535 :             "movl\t28(%1), %%ecx\n\t"
; 2536 :             "sbbl\t28(%2), %%ecx\n\t"
; 2537 :             "movl\t%%ecx, 28(%3)\n\t"
; 2538 :             "movl\t32(%1), %%ecx\n\t"
; 2539 :             "sbbl\t32(%2), %%ecx\n\t"
; 2540 :             "movl\t%%ecx, 32(%3)\n\t"
; 2541 :             "movl\t36(%1), %%ecx\n\t"
; 2542 :             "sbbl\t36(%2), %%ecx\n\t"
; 2543 :             "movl\t%%ecx, 36(%3)\n\t"
; 2544 :             "movl\t40(%1), %%ecx\n\t"
; 2545 :             "sbbl\t40(%2), %%ecx\n\t"
; 2546 :             "movl\t%%ecx, 40(%3)\n\t"
; 2547 :             "movl\t44(%1), %%ecx\n\t"
; 2548 :             "sbbl\t44(%2), %%ecx\n\t"
; 2549 :             "movl\t%%ecx, 44(%3)\n\t"
; 2550 :             "movl\t48(%1), %%ecx\n\t"
; 2551 :             "sbbl\t48(%2), %%ecx\n\t"
; 2552 :             "movl\t%%ecx, 48(%3)\n\t"
; 2553 :             "movl\t52(%1), %%ecx\n\t"
; 2554 :             "sbbl\t52(%2), %%ecx\n\t"
; 2555 :             "movl\t%%ecx, 52(%3)\n\t"
; 2556 :             "movl\t56(%1), %%ecx\n\t"
; 2557 :             "sbbl\t56(%2), %%ecx\n\t"
; 2558 :             "movl\t%%ecx, 56(%3)\n\t"
; 2559 :             "movl\t60(%1), %%ecx\n\t"
; 2560 :             "sbbl\t60(%2), %%ecx\n\t"
; 2561 :             "movl\t%%ecx, 60(%3)\n\t"
; 2562 :             "setc\t%0"
; 2563 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2564 :             :
; 2565 :             : "cc", "memory", "%ecx"
; 2566 :             );
; 2567 : #elif defined(_M_IX64)
; 2568 :         __asm__ volatile (
; 2569 :             "addb\t$-1, %0\n\t"
; 2570 :             "movq\t(%1), %%rcx\n\t"
; 2571 :             "sbbq\t(%2), %%rcx\n\t"
; 2572 :             "movq\t%%rcx, (%3)\n\t"
; 2573 :             "movq\t8(%1), %%rcx\n\t"
; 2574 :             "sbbq\t8(%2), %%rcx\n\t"
; 2575 :             "movq\t%%rcx, 8(%3)\n\t"
; 2576 :             "movq\t16(%1), %%rcx\n\t"
; 2577 :             "sbbq\t16(%2), %%rcx\n\t"
; 2578 :             "movq\t%%rcx, 16(%3)\n\t"
; 2579 :             "movq\t24(%1), %%rcx\n\t"
; 2580 :             "sbbq\t24(%2), %%rcx\n\t"
; 2581 :             "movq\t%%rcx, 24(%3)\n\t"
; 2582 :             "movq\t32(%1), %%rcx\n\t"
; 2583 :             "sbbq\t32(%2), %%rcx\n\t"
; 2584 :             "movq\t%%rcx, 32(%3)\n\t"
; 2585 :             "movq\t40(%1), %%rcx\n\t"
; 2586 :             "sbbq\t40(%2), %%rcx\n\t"
; 2587 :             "movq\t%%rcx, 40(%3)\n\t"
; 2588 :             "movq\t48(%1), %%rcx\n\t"
; 2589 :             "sbbq\t48(%2), %%rcx\n\t"
; 2590 :             "movq\t%%rcx, 48(%3)\n\t"
; 2591 :             "movq\t56(%1), %%rcx\n\t"
; 2592 :             "sbbq\t56(%2), %%rcx\n\t"
; 2593 :             "movq\t%%rcx, 56(%3)\n\t"
; 2594 :             "movq\t64(%1), %%rcx\n\t"
; 2595 :             "sbbq\t64(%2), %%rcx\n\t"
; 2596 :             "movq\t%%rcx, 64(%3)\n\t"
; 2597 :             "movq\t72(%1), %%rcx\n\t"
; 2598 :             "sbbq\t72(%2), %%rcx\n\t"
; 2599 :             "movq\t%%rcx, 72(%3)\n\t"
; 2600 :             "movq\t80(%1), %%rcx\n\t"
; 2601 :             "sbbq\t80(%2), %%rcx\n\t"
; 2602 :             "movq\t%%rcx, 80(%3)\n\t"
; 2603 :             "movq\t88(%1), %%rcx\n\t"
; 2604 :             "sbbq\t88(%2), %%rcx\n\t"
; 2605 :             "movq\t%%rcx, 88(%3)\n\t"
; 2606 :             "movq\t96(%1), %%rcx\n\t"
; 2607 :             "sbbq\t96(%2), %%rcx\n\t"
; 2608 :             "movq\t%%rcx, 96(%3)\n\t"
; 2609 :             "movq\t104(%1), %%rcx\n\t"
; 2610 :             "sbbq\t104(%2), %%rcx\n\t"
; 2611 :             "movq\t%%rcx, 104(%3)\n\t"
; 2612 :             "movq\t112(%1), %%rcx\n\t"
; 2613 :             "sbbq\t112(%2), %%rcx\n\t"
; 2614 :             "movq\t%%rcx, 112(%3)\n\t"
; 2615 :             "movq\t120(%1), %%rcx\n\t"
; 2616 :             "sbbq\t120(%2), %%rcx\n\t"
; 2617 :             "movq\t%%rcx, 120(%3)\n\t"
; 2618 :             "setc\t%0"
; 2619 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2620 :             :
; 2621 :             : "cc", "memory", "%rcx"
; 2622 :             );
; 2623 : #else
; 2624 : #error unknown platform
; 2625 : #endif
; 2626 : #else
; 2627 : #error unknown compiler
; 2628 : #endif
; 2629 :         return (c);

	mov	al, BYTE PTR _c$[ebp]

; 2630 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_16WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_32WORDS_SBB PROC

; 804  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89DB6AB9_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 805  : #ifdef _MSC_VER
; 806  :         c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 807  :         c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 808  :         c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 809  :         c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 810  :         c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 811  :         c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 812  :         c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 813  :         c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 814  :         c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 815  :         c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 816  :         c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 817  :         c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 818  :         c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 819  :         c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 820  :         c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 821  :         c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 822  :         c = _SUBTRUCT_UNIT(c, xp[16], yp[16], &zp[16]);

	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 823  :         c = _SUBTRUCT_UNIT(c, xp[17], yp[17], &zp[17]);

	mov	ecx, 4
	imul	edx, ecx, 17
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 824  :         c = _SUBTRUCT_UNIT(c, xp[18], yp[18], &zp[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 18
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 825  :         c = _SUBTRUCT_UNIT(c, xp[19], yp[19], &zp[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 19
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 826  :         c = _SUBTRUCT_UNIT(c, xp[20], yp[20], &zp[20]);

	mov	ecx, 4
	imul	edx, ecx, 20
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 827  :         c = _SUBTRUCT_UNIT(c, xp[21], yp[21], &zp[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 21
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 828  :         c = _SUBTRUCT_UNIT(c, xp[22], yp[22], &zp[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 22
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 829  :         c = _SUBTRUCT_UNIT(c, xp[23], yp[23], &zp[23]);

	mov	ecx, 4
	imul	edx, ecx, 23
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 830  :         c = _SUBTRUCT_UNIT(c, xp[24], yp[24], &zp[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 24
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 831  :         c = _SUBTRUCT_UNIT(c, xp[25], yp[25], &zp[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 25
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 832  :         c = _SUBTRUCT_UNIT(c, xp[26], yp[26], &zp[26]);

	mov	ecx, 4
	imul	edx, ecx, 26
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 833  :         c = _SUBTRUCT_UNIT(c, xp[27], yp[27], &zp[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 27
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 834  :         c = _SUBTRUCT_UNIT(c, xp[28], yp[28], &zp[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 28
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 835  :         c = _SUBTRUCT_UNIT(c, xp[29], yp[29], &zp[29]);

	mov	ecx, 4
	imul	edx, ecx, 29
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 836  :         c = _SUBTRUCT_UNIT(c, xp[30], yp[30], &zp[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 30
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 837  :         c = _SUBTRUCT_UNIT(c, xp[31], yp[31], &zp[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 31
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 838  : #elif defined(__GNUC__)
; 839  : #ifdef _M_IX86
; 840  :         __asm__ volatile (
; 841  :             "addb\t$-1, %0\n\t"
; 842  :             "movl\t(%1), %%ecx\n\t"
; 843  :             "sbbl\t(%2), %%ecx\n\t"
; 844  :             "movl\t%%ecx, (%3)\n\t"
; 845  :             "movl\t4(%1), %%ecx\n\t"
; 846  :             "sbbl\t4(%2), %%ecx\n\t"
; 847  :             "movl\t%%ecx, 4(%3)\n\t"
; 848  :             "movl\t8(%1), %%ecx\n\t"
; 849  :             "sbbl\t8(%2), %%ecx\n\t"
; 850  :             "movl\t%%ecx, 8(%3)\n\t"
; 851  :             "movl\t12(%1), %%ecx\n\t"
; 852  :             "sbbl\t12(%2), %%ecx\n\t"
; 853  :             "movl\t%%ecx, 12(%3)\n\t"
; 854  :             "movl\t16(%1), %%ecx\n\t"
; 855  :             "sbbl\t16(%2), %%ecx\n\t"
; 856  :             "movl\t%%ecx, 16(%3)\n\t"
; 857  :             "movl\t20(%1), %%ecx\n\t"
; 858  :             "sbbl\t20(%2), %%ecx\n\t"
; 859  :             "movl\t%%ecx, 20(%3)\n\t"
; 860  :             "movl\t24(%1), %%ecx\n\t"
; 861  :             "sbbl\t24(%2), %%ecx\n\t"
; 862  :             "movl\t%%ecx, 24(%3)\n\t"
; 863  :             "movl\t28(%1), %%ecx\n\t"
; 864  :             "sbbl\t28(%2), %%ecx\n\t"
; 865  :             "movl\t%%ecx, 28(%3)\n\t"
; 866  :             "movl\t32(%1), %%ecx\n\t"
; 867  :             "sbbl\t32(%2), %%ecx\n\t"
; 868  :             "movl\t%%ecx, 32(%3)\n\t"
; 869  :             "movl\t36(%1), %%ecx\n\t"
; 870  :             "sbbl\t36(%2), %%ecx\n\t"
; 871  :             "movl\t%%ecx, 36(%3)\n\t"
; 872  :             "movl\t40(%1), %%ecx\n\t"
; 873  :             "sbbl\t40(%2), %%ecx\n\t"
; 874  :             "movl\t%%ecx, 40(%3)\n\t"
; 875  :             "movl\t44(%1), %%ecx\n\t"
; 876  :             "sbbl\t44(%2), %%ecx\n\t"
; 877  :             "movl\t%%ecx, 44(%3)\n\t"
; 878  :             "movl\t48(%1), %%ecx\n\t"
; 879  :             "sbbl\t48(%2), %%ecx\n\t"
; 880  :             "movl\t%%ecx, 48(%3)\n\t"
; 881  :             "movl\t52(%1), %%ecx\n\t"
; 882  :             "sbbl\t52(%2), %%ecx\n\t"
; 883  :             "movl\t%%ecx, 52(%3)\n\t"
; 884  :             "movl\t56(%1), %%ecx\n\t"
; 885  :             "sbbl\t56(%2), %%ecx\n\t"
; 886  :             "movl\t%%ecx, 56(%3)\n\t"
; 887  :             "movl\t60(%1), %%ecx\n\t"
; 888  :             "sbbl\t60(%2), %%ecx\n\t"
; 889  :             "movl\t%%ecx, 60(%3)\n\t"
; 890  :             "movl\t64(%1), %%ecx\n\t"
; 891  :             "sbbl\t64(%2), %%ecx\n\t"
; 892  :             "movl\t%%ecx, 64(%3)\n\t"
; 893  :             "movl\t68(%1), %%ecx\n\t"
; 894  :             "sbbl\t68(%2), %%ecx\n\t"
; 895  :             "movl\t%%ecx, 68(%3)\n\t"
; 896  :             "movl\t72(%1), %%ecx\n\t"
; 897  :             "sbbl\t72(%2), %%ecx\n\t"
; 898  :             "movl\t%%ecx, 72(%3)\n\t"
; 899  :             "movl\t76(%1), %%ecx\n\t"
; 900  :             "sbbl\t76(%2), %%ecx\n\t"
; 901  :             "movl\t%%ecx, 76(%3)\n\t"
; 902  :             "movl\t80(%1), %%ecx\n\t"
; 903  :             "sbbl\t80(%2), %%ecx\n\t"
; 904  :             "movl\t%%ecx, 80(%3)\n\t"
; 905  :             "movl\t84(%1), %%ecx\n\t"
; 906  :             "sbbl\t84(%2), %%ecx\n\t"
; 907  :             "movl\t%%ecx, 84(%3)\n\t"
; 908  :             "movl\t88(%1), %%ecx\n\t"
; 909  :             "sbbl\t88(%2), %%ecx\n\t"
; 910  :             "movl\t%%ecx, 88(%3)\n\t"
; 911  :             "movl\t92(%1), %%ecx\n\t"
; 912  :             "sbbl\t92(%2), %%ecx\n\t"
; 913  :             "movl\t%%ecx, 92(%3)\n\t"
; 914  :             "movl\t96(%1), %%ecx\n\t"
; 915  :             "sbbl\t96(%2), %%ecx\n\t"
; 916  :             "movl\t%%ecx, 96(%3)\n\t"
; 917  :             "movl\t100(%1), %%ecx\n\t"
; 918  :             "sbbl\t100(%2), %%ecx\n\t"
; 919  :             "movl\t%%ecx, 100(%3)\n\t"
; 920  :             "movl\t104(%1), %%ecx\n\t"
; 921  :             "sbbl\t104(%2), %%ecx\n\t"
; 922  :             "movl\t%%ecx, 104(%3)\n\t"
; 923  :             "movl\t108(%1), %%ecx\n\t"
; 924  :             "sbbl\t108(%2), %%ecx\n\t"
; 925  :             "movl\t%%ecx, 108(%3)\n\t"
; 926  :             "movl\t112(%1), %%ecx\n\t"
; 927  :             "sbbl\t112(%2), %%ecx\n\t"
; 928  :             "movl\t%%ecx, 112(%3)\n\t"
; 929  :             "movl\t116(%1), %%ecx\n\t"
; 930  :             "sbbl\t116(%2), %%ecx\n\t"
; 931  :             "movl\t%%ecx, 116(%3)\n\t"
; 932  :             "movl\t120(%1), %%ecx\n\t"
; 933  :             "sbbl\t120(%2), %%ecx\n\t"
; 934  :             "movl\t%%ecx, 120(%3)\n\t"
; 935  :             "movl\t124(%1), %%ecx\n\t"
; 936  :             "sbbl\t124(%2), %%ecx\n\t"
; 937  :             "movl\t%%ecx, 124(%3)\n\t"
; 938  :             "setc\t%0"
; 939  :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 940  :             :
; 941  :             : "cc", "memory", "%ecx"
; 942  :             );
; 943  : #elif defined(_M_IX64)
; 944  :         __asm__ volatile (
; 945  :             "addb\t$-1, %0\n\t"
; 946  :             "movq\t(%1), %%rcx\n\t"
; 947  :             "sbbq\t(%2), %%rcx\n\t"
; 948  :             "movq\t%%rcx, (%3)\n\t"
; 949  :             "movq\t8(%1), %%rcx\n\t"
; 950  :             "sbbq\t8(%2), %%rcx\n\t"
; 951  :             "movq\t%%rcx, 8(%3)\n\t"
; 952  :             "movq\t16(%1), %%rcx\n\t"
; 953  :             "sbbq\t16(%2), %%rcx\n\t"
; 954  :             "movq\t%%rcx, 16(%3)\n\t"
; 955  :             "movq\t24(%1), %%rcx\n\t"
; 956  :             "sbbq\t24(%2), %%rcx\n\t"
; 957  :             "movq\t%%rcx, 24(%3)\n\t"
; 958  :             "movq\t32(%1), %%rcx\n\t"
; 959  :             "sbbq\t32(%2), %%rcx\n\t"
; 960  :             "movq\t%%rcx, 32(%3)\n\t"
; 961  :             "movq\t40(%1), %%rcx\n\t"
; 962  :             "sbbq\t40(%2), %%rcx\n\t"
; 963  :             "movq\t%%rcx, 40(%3)\n\t"
; 964  :             "movq\t48(%1), %%rcx\n\t"
; 965  :             "sbbq\t48(%2), %%rcx\n\t"
; 966  :             "movq\t%%rcx, 48(%3)\n\t"
; 967  :             "movq\t56(%1), %%rcx\n\t"
; 968  :             "sbbq\t56(%2), %%rcx\n\t"
; 969  :             "movq\t%%rcx, 56(%3)\n\t"
; 970  :             "movq\t64(%1), %%rcx\n\t"
; 971  :             "sbbq\t64(%2), %%rcx\n\t"
; 972  :             "movq\t%%rcx, 64(%3)\n\t"
; 973  :             "movq\t72(%1), %%rcx\n\t"
; 974  :             "sbbq\t72(%2), %%rcx\n\t"
; 975  :             "movq\t%%rcx, 72(%3)\n\t"
; 976  :             "movq\t80(%1), %%rcx\n\t"
; 977  :             "sbbq\t80(%2), %%rcx\n\t"
; 978  :             "movq\t%%rcx, 80(%3)\n\t"
; 979  :             "movq\t88(%1), %%rcx\n\t"
; 980  :             "sbbq\t88(%2), %%rcx\n\t"
; 981  :             "movq\t%%rcx, 88(%3)\n\t"
; 982  :             "movq\t96(%1), %%rcx\n\t"
; 983  :             "sbbq\t96(%2), %%rcx\n\t"
; 984  :             "movq\t%%rcx, 96(%3)\n\t"
; 985  :             "movq\t104(%1), %%rcx\n\t"
; 986  :             "sbbq\t104(%2), %%rcx\n\t"
; 987  :             "movq\t%%rcx, 104(%3)\n\t"
; 988  :             "movq\t112(%1), %%rcx\n\t"
; 989  :             "sbbq\t112(%2), %%rcx\n\t"
; 990  :             "movq\t%%rcx, 112(%3)\n\t"
; 991  :             "movq\t120(%1), %%rcx\n\t"
; 992  :             "sbbq\t120(%2), %%rcx\n\t"
; 993  :             "movq\t%%rcx, 120(%3)\n\t"
; 994  :             "movq\t128(%1), %%rcx\n\t"
; 995  :             "sbbq\t128(%2), %%rcx\n\t"
; 996  :             "movq\t%%rcx, 128(%3)\n\t"
; 997  :             "movq\t136(%1), %%rcx\n\t"
; 998  :             "sbbq\t136(%2), %%rcx\n\t"
; 999  :             "movq\t%%rcx, 136(%3)\n\t"
; 1000 :             "movq\t144(%1), %%rcx\n\t"
; 1001 :             "sbbq\t144(%2), %%rcx\n\t"
; 1002 :             "movq\t%%rcx, 144(%3)\n\t"
; 1003 :             "movq\t152(%1), %%rcx\n\t"
; 1004 :             "sbbq\t152(%2), %%rcx\n\t"
; 1005 :             "movq\t%%rcx, 152(%3)\n\t"
; 1006 :             "movq\t160(%1), %%rcx\n\t"
; 1007 :             "sbbq\t160(%2), %%rcx\n\t"
; 1008 :             "movq\t%%rcx, 160(%3)\n\t"
; 1009 :             "movq\t168(%1), %%rcx\n\t"
; 1010 :             "sbbq\t168(%2), %%rcx\n\t"
; 1011 :             "movq\t%%rcx, 168(%3)\n\t"
; 1012 :             "movq\t176(%1), %%rcx\n\t"
; 1013 :             "sbbq\t176(%2), %%rcx\n\t"
; 1014 :             "movq\t%%rcx, 176(%3)\n\t"
; 1015 :             "movq\t184(%1), %%rcx\n\t"
; 1016 :             "sbbq\t184(%2), %%rcx\n\t"
; 1017 :             "movq\t%%rcx, 184(%3)\n\t"
; 1018 :             "movq\t192(%1), %%rcx\n\t"
; 1019 :             "sbbq\t192(%2), %%rcx\n\t"
; 1020 :             "movq\t%%rcx, 192(%3)\n\t"
; 1021 :             "movq\t200(%1), %%rcx\n\t"
; 1022 :             "sbbq\t200(%2), %%rcx\n\t"
; 1023 :             "movq\t%%rcx, 200(%3)\n\t"
; 1024 :             "movq\t208(%1), %%rcx\n\t"
; 1025 :             "sbbq\t208(%2), %%rcx\n\t"
; 1026 :             "movq\t%%rcx, 208(%3)\n\t"
; 1027 :             "movq\t216(%1), %%rcx\n\t"
; 1028 :             "sbbq\t216(%2), %%rcx\n\t"
; 1029 :             "movq\t%%rcx, 216(%3)\n\t"
; 1030 :             "movq\t224(%1), %%rcx\n\t"
; 1031 :             "sbbq\t224(%2), %%rcx\n\t"
; 1032 :             "movq\t%%rcx, 224(%3)\n\t"
; 1033 :             "movq\t232(%1), %%rcx\n\t"
; 1034 :             "sbbq\t232(%2), %%rcx\n\t"
; 1035 :             "movq\t%%rcx, 232(%3)\n\t"
; 1036 :             "movq\t240(%1), %%rcx\n\t"
; 1037 :             "sbbq\t240(%2), %%rcx\n\t"
; 1038 :             "movq\t%%rcx, 240(%3)\n\t"
; 1039 :             "movq\t248(%1), %%rcx\n\t"
; 1040 :             "sbbq\t248(%2), %%rcx\n\t"
; 1041 :             "movq\t%%rcx, 248(%3)\n\t"
; 1042 :             "setc\t%0"
; 1043 :             : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1044 :             :
; 1045 :             : "cc", "memory", "%rcx"
; 1046 :             );
; 1047 : #else
; 1048 : #error unknown platform
; 1049 : #endif
; 1050 : #else
; 1051 : #error unknown compiler
; 1052 : #endif
; 1053 :         return (c);

	mov	al, BYTE PTR _c$[ebp]

; 1054 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_32WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 840  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 841  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 842  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 843  : #ifdef _M_IX86
; 844  :     _UINT32_T pos;
; 845  : #ifdef _MSC_VER
; 846  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 847  : #elif defined(__GNUC__)
; 848  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 849  : #else
; 850  : #error unknown compiler
; 851  : #endif
; 852  : #elif defined(_M_X64)
; 853  : #ifdef _MSC_VER
; 854  :     _UINT32_T pos;
; 855  :     _BitScanReverse64(&pos, x);
; 856  : #elif defined(__GNUC__)
; 857  :     _UINT64_T pos;
; 858  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 859  : #else
; 860  : #error unknown compiler
; 861  : #endif
; 862  : #else
; 863  : #error unknown platform
; 864  : #endif
; 865  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 866  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 807  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 808  :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 809  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 810  :     _UINT32_T pos;
; 811  : #ifdef _MSC_VER
; 812  :     _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 813  : #elif defined(__GNUC__)
; 814  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 815  : #else
; 816  : #error unknown compiler
; 817  : #endif
; 818  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 819  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT PROC

; 480  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 481  : #ifdef _M_IX86
; 482  :     return (_subborrow_u32(borrow, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _borrow$[ebp]
	add	bl, 255					; 000000ffH
	sbb	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 483  : #elif defined(_M_X64)
; 484  :     return (_subborrow_u64(borrow, u, v, w));
; 485  : #else
; 486  : #error unknown platform
; 487  : #endif
; 488  : }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 393  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4522B509_pmc_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 395  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 396  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
_TEXT	SEGMENT
tv136 = -52						; size = 4
_nz_light_check_code$1 = -44				; size = 4
_z_bit_count$2 = -36					; size = 4
_y_bit_count$3 = -32					; size = 4
_x_bit_count$4 = -28					; size = 4
_nz$ = -20						; size = 4
_result$ = -12						; size = 4
_ny$ = -8						; size = 4
_nx$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_Subtruct_X_X@12 PROC

; 435  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1898920A_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 436  :     if (x == NULL)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 437  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 438  :     if (y == NULL)

	cmp	DWORD PTR _y$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 439  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 440  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 441  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 442  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _nx$[ebp], eax

; 443  :     NUMBER_HEADER* ny = (NUMBER_HEADER*)y;

	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _ny$[ebp], ecx

; 444  :     PMC_STATUS_CODE result;
; 445  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nx$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 446  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 447  :     if ((result = CheckNumber(ny)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _ny$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 448  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 449  :     NUMBER_HEADER* nz;
; 450  :     if (nx->IS_ZERO)

	mov	ecx, DWORD PTR _nx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Subtru

; 451  :     {
; 452  :         if (ny->IS_ZERO)

	mov	eax, DWORD PTR _ny$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN9@PMC_Subtru

; 453  :         {
; 454  :             // y が 0 である場合
; 455  : 
; 456  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 457  :             *o = &number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 458  :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 459  :         else
; 460  :         {
; 461  :             // y が 0 ではない場合
; 462  : 
; 463  :             // 演算結果は負となってしまうのでエラーを返す。
; 464  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 465  :         }
; 466  :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 467  :     else
; 468  :     {
; 469  :         // x が 0 ではない場合
; 470  : 
; 471  :         if (ny->IS_ZERO)

	mov	eax, DWORD PTR _ny$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN11@PMC_Subtru

; 472  :         {
; 473  :             // y が 0 である場合
; 474  : 
; 475  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 476  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz$[ebp]
	push	edx
	mov	eax, DWORD PTR _nx$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 477  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 478  :         }

	jmp	$LN12@PMC_Subtru
$LN11@PMC_Subtru:

; 479  :         else
; 480  :         {
; 481  :             // x と y がともに 0 ではない場合
; 482  : 
; 483  :             // x と y の差を計算する
; 484  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _x_bit_count$4[ebp], edx

; 485  :             __UNIT_TYPE y_bit_count = ny->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _ny$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y_bit_count$3[ebp], ecx

; 486  :             if (x_bit_count < y_bit_count)

	mov	edx, DWORD PTR _x_bit_count$4[ebp]
	cmp	edx, DWORD PTR _y_bit_count$3[ebp]
	jae	SHORT $LN14@PMC_Subtru

; 487  :             {
; 488  :                 // 演算結果は負となってしまうのでエラーを返す。
; 489  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 490  :             }
; 491  :             __UNIT_TYPE z_bit_count = x_bit_count;

	mov	eax, DWORD PTR _x_bit_count$4[ebp]
	mov	DWORD PTR _z_bit_count$2[ebp], eax

; 492  :             __UNIT_TYPE nz_light_check_code;
; 493  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nz_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _z_bit_count$2[ebp]
	push	edx
	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 494  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 495  :             if ((result = Subtruct_X_X(nx, ny, nz)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ny$[ebp]
	push	edx
	mov	eax, DWORD PTR _nx$[ebp]
	push	eax
	call	_Subtruct_X_X
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 496  :             {
; 497  :                 DeallocateNumber(nz);

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 498  :                 return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN20@PMC_Subtru
	mov	DWORD PTR tv136[ebp], -2		; fffffffeH
	jmp	SHORT $LN21@PMC_Subtru
$LN20@PMC_Subtru:
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv136[ebp], edx
$LN21@PMC_Subtru:
	mov	eax, DWORD PTR tv136[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 499  :             }
; 500  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _nz$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 501  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 502  :             CommitNumber(nz);

	mov	eax, DWORD PTR _nz$[ebp]
	push	eax
	call	_CommitNumber
	add	esp, 4
$LN12@PMC_Subtru:

; 503  :         }
; 504  :         *o = nz;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR _nz$[ebp]
	mov	DWORD PTR [ecx], edx
$LN8@PMC_Subtru:

; 505  :     }
; 506  : #ifdef _DEBUG
; 507  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Subtru

; 508  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 509  : #endif
; 510  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 511  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN25@PMC_Subtru:
	DD	2
	DD	$LN24@PMC_Subtru
$LN24@PMC_Subtru:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN22@PMC_Subtru
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN23@PMC_Subtru
$LN23@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN22@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	0
_PMC_Subtruct_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
_TEXT	SEGMENT
tv182 = -116						; size = 4
tv157 = -112						; size = 4
tv134 = -108						; size = 4
_nz_light_check_code$1 = -100				; size = 4
_z_bit_count$2 = -92					; size = 4
_y_bit_count$3 = -88					; size = 4
_x_bit_count$4 = -84					; size = 4
_nz_light_check_code$5 = -76				; size = 4
_z_bit_count$6 = -68					; size = 4
_y_bit_count$7 = -64					; size = 4
_nz_light_check_code$8 = -56				; size = 4
_z_bit_count$9 = -48					; size = 4
_y_bit_count$10 = -44					; size = 4
_y_lo$11 = -40						; size = 4
_y_hi$12 = -32						; size = 4
_x_bit_count$13 = -24					; size = 4
_nz$ = -16						; size = 4
_result$ = -8						; size = 4
_nx$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 8
_o$ = 20						; size = 4
_PMC_Subtruct_X_L@16 PROC

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1898920A_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 295  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(y) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 296  :     {
; 297  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 298  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 299  :     }
; 300  :     if (x == NULL)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 301  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 302  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 303  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 304  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _nx$[ebp], ecx

; 305  :     PMC_STATUS_CODE result;
; 306  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nx$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 307  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 308  :     NUMBER_HEADER* nz;
; 309  :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_Subtru

; 310  :     {
; 311  :         // x が 0 である場合
; 312  : 
; 313  :         if (y == 0)

	mov	edx, DWORD PTR _y$[ebp]
	or	edx, DWORD PTR _y$[ebp+4]
	jne	SHORT $LN8@PMC_Subtru

; 314  :         {
; 315  :             // y が 0 である場合
; 316  : 
; 317  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 318  :             *o = &number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 319  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 320  :         else
; 321  :         {
; 322  :             // y が 0 ではない場合
; 323  : 
; 324  :             // 演算結果は負となってしまうのでエラーを返す。
; 325  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 326  :         }
; 327  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 328  :     else
; 329  :     {
; 330  :         // x が 0 ではない場合
; 331  : 
; 332  :         if (y == 0)

	mov	ecx, DWORD PTR _y$[ebp]
	or	ecx, DWORD PTR _y$[ebp+4]
	jne	SHORT $LN10@PMC_Subtru

; 333  :         {
; 334  :             // y が 0 である場合
; 335  : 
; 336  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 337  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz$[ebp]
	push	edx
	mov	eax, DWORD PTR _nx$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Subtru

; 338  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN12@PMC_Subtru:

; 339  :         }

	jmp	$LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 340  :         else
; 341  :         {
; 342  :             // x と y がともに 0 ではない場合
; 343  : 
; 344  :             // x と y の差を計算する
; 345  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(y) * 8)

	mov	ecx, 1
	test	ecx, ecx
	je	$LN13@PMC_Subtru

; 346  :             {
; 347  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 348  : 
; 349  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _x_bit_count$13[ebp], eax

; 350  :                 _UINT32_T y_hi;
; 351  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(y, &y_hi);

	lea	ecx, DWORD PTR _y_hi$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _y_lo$11[ebp], eax

; 352  :                 if (y_hi == 0)

	cmp	DWORD PTR _y_hi$12[ebp], 0
	jne	$LN15@PMC_Subtru

; 353  :                 {
; 354  :                     // y の値が 32bit で表現可能な場合
; 355  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);

	mov	ecx, DWORD PTR _y_lo$11[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _y_bit_count$10[ebp], edx

; 356  :                     if (x_bit_count < y_bit_count)

	mov	eax, DWORD PTR _x_bit_count$13[ebp]
	cmp	eax, DWORD PTR _y_bit_count$10[ebp]
	jae	SHORT $LN17@PMC_Subtru

; 357  :                     {
; 358  :                         // 演算結果は負となってしまうのでエラーを返す。
; 359  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 360  :                     }
; 361  :                     __UNIT_TYPE z_bit_count = x_bit_count;

	mov	ecx, DWORD PTR _x_bit_count$13[ebp]
	mov	DWORD PTR _z_bit_count$9[ebp], ecx

; 362  :                     __UNIT_TYPE nz_light_check_code;
; 363  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz_light_check_code$8[ebp]
	push	edx
	mov	eax, DWORD PTR _z_bit_count$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Subtru

; 364  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 365  :                     if ((result = Subtruct_X_1W(nx, y_lo, nz)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_lo$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_Subtruct_X_1W
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Subtru

; 366  :                     {
; 367  :                         DeallocateNumber(nz);

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 368  :                         return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN32@PMC_Subtru
	mov	DWORD PTR tv134[ebp], -2		; fffffffeH
	jmp	SHORT $LN33@PMC_Subtru
$LN32@PMC_Subtru:
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN33@PMC_Subtru:
	mov	eax, DWORD PTR tv134[ebp]
	jmp	$LN1@PMC_Subtru
$LN19@PMC_Subtru:

; 369  :                     }
; 370  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nz_light_check_code$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Subtru

; 371  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN20@PMC_Subtru:

; 372  :                 }

	jmp	$LN16@PMC_Subtru
$LN15@PMC_Subtru:

; 373  :                 else
; 374  :                 {
; 375  :                     // y の値が 32bit では表現できない場合
; 376  :                     __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_32(y_hi);

	mov	ecx, DWORD PTR _y_hi$12[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _y_bit_count$7[ebp], edx

; 377  :                     if (x_bit_count < y_bit_count)

	mov	eax, DWORD PTR _x_bit_count$13[ebp]
	cmp	eax, DWORD PTR _y_bit_count$7[ebp]
	jae	SHORT $LN21@PMC_Subtru

; 378  :                     {
; 379  :                         // 演算結果は負となってしまうのでエラーを返す。
; 380  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 381  :                     }
; 382  :                     __UNIT_TYPE z_bit_count = x_bit_count;

	mov	ecx, DWORD PTR _x_bit_count$13[ebp]
	mov	DWORD PTR _z_bit_count$6[ebp], ecx

; 383  :                     __UNIT_TYPE nz_light_check_code;
; 384  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz_light_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _z_bit_count$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_Subtru

; 385  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN22@PMC_Subtru:

; 386  :                     if ((result = Subtruct_X_2W(nx, y_hi, y_lo, nz)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_lo$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_hi$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _nx$[ebp]
	push	edx
	call	_Subtruct_X_2W
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Subtru

; 387  :                     {
; 388  :                         DeallocateNumber(nz);

	mov	eax, DWORD PTR _nz$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 389  :                         return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN34@PMC_Subtru
	mov	DWORD PTR tv157[ebp], -2		; fffffffeH
	jmp	SHORT $LN35@PMC_Subtru
$LN34@PMC_Subtru:
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv157[ebp], ecx
$LN35@PMC_Subtru:
	mov	eax, DWORD PTR tv157[ebp]
	jmp	$LN1@PMC_Subtru
$LN23@PMC_Subtru:

; 390  :                     }
; 391  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz_light_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _nz$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 392  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 393  :                 }
; 394  :             }

	jmp	$LN14@PMC_Subtru
$LN13@PMC_Subtru:

; 395  :             else
; 396  :             {
; 397  :                 // _UINT64_T が 1 ワードで表現できる場合
; 398  : 
; 399  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _x_bit_count$4[ebp], eax

; 400  :                 __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _y_bit_count$3[ebp], edx

; 401  :                 if (x_bit_count < y_bit_count)

	mov	eax, DWORD PTR _x_bit_count$4[ebp]
	cmp	eax, DWORD PTR _y_bit_count$3[ebp]
	jae	SHORT $LN25@PMC_Subtru

; 402  :                 {
; 403  :                     // 演算結果は負となってしまうのでエラーを返す。
; 404  :                     return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN25@PMC_Subtru:

; 405  :                 }
; 406  :                 __UNIT_TYPE z_bit_count = x_bit_count;

	mov	ecx, DWORD PTR _x_bit_count$4[ebp]
	mov	DWORD PTR _z_bit_count$2[ebp], ecx

; 407  :                 __UNIT_TYPE nz_light_check_code;
; 408  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _z_bit_count$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Subtru

; 409  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN26@PMC_Subtru:

; 410  :                 if ((result = Subtruct_X_1W(nx, (__UNIT_TYPE)y, nz)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_Subtruct_X_1W
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN27@PMC_Subtru

; 411  :                 {
; 412  :                     DeallocateNumber(nz);

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 413  :                     return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN36@PMC_Subtru
	mov	DWORD PTR tv182[ebp], -2		; fffffffeH
	jmp	SHORT $LN37@PMC_Subtru
$LN36@PMC_Subtru:
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv182[ebp], eax
$LN37@PMC_Subtru:
	mov	eax, DWORD PTR tv182[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN27@PMC_Subtru:

; 414  :                 }
; 415  :                 if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nz_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 416  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 417  :             }
; 418  :             CommitNumber(nz);

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 419  :             if (nz->IS_ZERO)

	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shr	eax, 1
	and	eax, 1
	je	SHORT $LN11@PMC_Subtru

; 420  :             {
; 421  :                 DeallocateNumber(nz);

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 422  :                 nz = &number_zero;

	mov	DWORD PTR _nz$[ebp], OFFSET _number_zero
$LN11@PMC_Subtru:

; 423  :             }
; 424  :         }
; 425  :         *o = nz;

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR _nz$[ebp]
	mov	DWORD PTR [edx], eax
$LN7@PMC_Subtru:

; 426  :     }
; 427  : #ifdef _DEBUG
; 428  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN30@PMC_Subtru

; 429  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN30@PMC_Subtru:

; 430  : #endif
; 431  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 432  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN44@PMC_Subtru:
	DD	5
	DD	$LN43@PMC_Subtru
$LN43@PMC_Subtru:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN38@PMC_Subtru
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN39@PMC_Subtru
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN40@PMC_Subtru
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN41@PMC_Subtru
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN42@PMC_Subtru
$LN42@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN41@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN40@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN39@PMC_Subtru:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN38@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	0
_PMC_Subtruct_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
_TEXT	SEGMENT
tv129 = -48						; size = 4
_nz_light_check_code$1 = -40				; size = 4
_z_bit_count$2 = -32					; size = 4
_y_bit_count$3 = -28					; size = 4
_x_bit_count$4 = -24					; size = 4
_nz$ = -16						; size = 4
_result$ = -8						; size = 4
_nx$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_Subtruct_X_I@12 PROC

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1898920A_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 209  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(y) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 210  :     {
; 211  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 212  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 213  :     }
; 214  :     if (x == NULL)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 215  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 216  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 217  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 218  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _nx$[ebp], ecx

; 219  :     PMC_STATUS_CODE result;
; 220  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nx$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 221  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 222  :     NUMBER_HEADER* nz;
; 223  :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_Subtru

; 224  :     {
; 225  :         // x が 0 である場合
; 226  : 
; 227  :         if (y == 0)

	cmp	DWORD PTR _y$[ebp], 0
	jne	SHORT $LN8@PMC_Subtru

; 228  :         {
; 229  :             // y が 0 である場合
; 230  : 
; 231  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 232  :             *o = &number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 233  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 234  :         else
; 235  :         {
; 236  :             // y が 0 ではない場合
; 237  : 
; 238  :             // 演算結果は負となってしまうのでエラーを返す。
; 239  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 240  :         }
; 241  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 242  :     else
; 243  :     {
; 244  :         // x が 0 ではない場合
; 245  : 
; 246  :         if (y == 0)

	cmp	DWORD PTR _y$[ebp], 0
	jne	SHORT $LN10@PMC_Subtru

; 247  :         {
; 248  :             // y が 0 である場合
; 249  : 
; 250  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 251  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Subtru

; 252  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN12@PMC_Subtru:

; 253  :         }

	jmp	$LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 254  :         else
; 255  :         {
; 256  :             // x と y がともに 0 ではない場合
; 257  : 
; 258  :             // x と y の差を計算する
; 259  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _x_bit_count$4[ebp], eax

; 260  :             __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_32(y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _y_bit_count$3[ebp], edx

; 261  :             if (x_bit_count < y_bit_count)

	mov	eax, DWORD PTR _x_bit_count$4[ebp]
	cmp	eax, DWORD PTR _y_bit_count$3[ebp]
	jae	SHORT $LN13@PMC_Subtru

; 262  :             {
; 263  :                 // 演算結果は負となってしまうのでエラーを返す。
; 264  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 265  :             }
; 266  :             __UNIT_TYPE z_bit_count = x_bit_count;

	mov	ecx, DWORD PTR _x_bit_count$4[ebp]
	mov	DWORD PTR _z_bit_count$2[ebp], ecx

; 267  :             __UNIT_TYPE nz_light_check_code;
; 268  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _z_bit_count$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 269  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 270  :             if ((result = Subtruct_X_1W(nx, y, nz)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_Subtruct_X_1W
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 271  :             {
; 272  :                 DeallocateNumber(nz);

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 273  :                 return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN20@PMC_Subtru
	mov	DWORD PTR tv129[ebp], -2		; fffffffeH
	jmp	SHORT $LN21@PMC_Subtru
$LN20@PMC_Subtru:
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv129[ebp], eax
$LN21@PMC_Subtru:
	mov	eax, DWORD PTR tv129[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 274  :             }
; 275  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nz_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 276  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 277  :             CommitNumber(nz);

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 278  :             if (nz->IS_ZERO)

	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shr	eax, 1
	and	eax, 1
	je	SHORT $LN11@PMC_Subtru

; 279  :             {
; 280  :                 DeallocateNumber(nz);

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 281  :                 nz = &number_zero;

	mov	DWORD PTR _nz$[ebp], OFFSET _number_zero
$LN11@PMC_Subtru:

; 282  :             }
; 283  :         }
; 284  :         *o = nz;

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR _nz$[ebp]
	mov	DWORD PTR [edx], eax
$LN7@PMC_Subtru:

; 285  :     }
; 286  : #ifdef _DEBUG
; 287  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Subtru

; 288  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 289  : #endif
; 290  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 291  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN25@PMC_Subtru:
	DD	2
	DD	$LN24@PMC_Subtru
$LN24@PMC_Subtru:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN22@PMC_Subtru
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN23@PMC_Subtru
$LN23@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN22@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	0
_PMC_Subtruct_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_subtruct.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Subtruct PROC

; 514  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __1898920A_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 515  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 516  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Subtruct ENDP
_TEXT	ENDS
END
