; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\CALC_divrem_critical.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_CalculateCriticalDataOfDivision
PUBLIC	??_C@_0FE@HJGKBDLB@found?3?5u0?$DN0x?$CF08x?0?5u1?$DN0x?$CF08x?0?5u2@ ; `string'
EXTRN	__aulldiv:PROC
EXTRN	__aulldvrm:PROC
;	COMDAT ??_C@_0FE@HJGKBDLB@found?3?5u0?$DN0x?$CF08x?0?5u1?$DN0x?$CF08x?0?5u2@
CONST	SEGMENT
??_C@_0FE@HJGKBDLB@found?3?5u0?$DN0x?$CF08x?0?5u1?$DN0x?$CF08x?0?5u2@ DB 'f'
	DB	'ound: u0=0x%08x, u1=0x%08x, u2=0x%08x, u3=0x%08x, v1=0x%08x, '
	DB	'v2=0x%08x, v3=0x%08x', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT _CheckQ_
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_u0$ = 12						; size = 4
_u1$ = 16						; size = 4
_u2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_ PROC						; COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _q_$[ebp]
	mul	DWORD PTR _v2$[ebp]

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _u1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 68   : {

	push	esi
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, eax
	mov	esi, edx
	mov	eax, DWORD PTR _q_$[ebp]
	mul	DWORD PTR _v1$[ebp]

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
	mov	eax, DWORD PTR _u0$[ebp]
	sbb	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 78   :     else if (lh_hi < rh_hi)

	jne	SHORT $LN23@CheckQ_

; 79   :         return (FALSE);
; 80   :     else if (lh_mi > rh_mi)

	cmp	esi, ecx
	jbe	SHORT $LN6@CheckQ_

; 81   :         return (TRUE);

	pop	edi
	mov	eax, 1

; 86   : }

	pop	esi
	pop	ebp
	ret	0
$LN6@CheckQ_:

; 82   :     else if (lh_mi < rh_mi)

	jb	SHORT $LN23@CheckQ_

; 84   :     else
; 85   :         return (lh_lo > rh_lo);

	cmp	DWORD PTR _u2$[ebp], edi
	pop	edi
	sbb	eax, eax
	neg	eax

; 86   : }

	pop	esi
	pop	ebp
	ret	0
$LN23@CheckQ_:
	pop	edi

; 83   :         return (FALSE);

	xor	eax, eax

; 86   : }

	pop	esi
	pop	ebp
	ret	0
_CheckQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT _AsumeQ_
_TEXT	SEGMENT
_u0$ = 8						; size = 4
_u1$ = 12						; size = 4
_v1$ = 16						; size = 4
_AsumeQ_ PROC						; COMDAT

; 59   : {

	push	ebp
	mov	ebp, esp

; 60   :     if (u0 == v1)

	mov	ecx, DWORD PTR _u0$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@AsumeQ_

; 61   :         return ((__UNIT_TYPE_DIV)-1);

	or	eax, -1

; 65   : }

	pop	ebp
	ret	0
$LN2@AsumeQ_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 602  :         return ((_UINT32_T)(t / v));

	push	0
	push	edx

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR _u1$[ebp]

; 602  :         return ((_UINT32_T)(t / v));

	push	ecx
	push	eax
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 65   : }

	pop	ebp
	ret	0
_AsumeQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT _SUBTRUCT_4W_UNIT
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_y$ = 24						; size = 4
_SUBTRUCT_4W_UNIT PROC					; COMDAT

; 54   : {

	push	ebp
	mov	ebp, esp

; 55   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x4$[ebp]
	mov	edx, DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 55   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x3$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, 0
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 55   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x2$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, 0
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 55   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 56   : }

	pop	ebp
	ret	0
_SUBTRUCT_4W_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT _SUBTRUCT_3W_UNIT
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_y$ = 20						; size = 4
_SUBTRUCT_3W_UNIT PROC					; COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x3$[ebp]
	mov	edx, DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 50   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x2$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, 0
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 50   :     return (_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 51   : }

	pop	ebp
	ret	0
_SUBTRUCT_3W_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT _ADD_4W_UNIT
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_x4$ = 20						; size = 4
_y$ = 24						; size = 4
_ADD_4W_UNIT PROC					; COMDAT

; 44   : {

	push	ebp
	mov	ebp, esp

; 45   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x4$[ebp]
	mov	edx, DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 45   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x3$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 45   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x2$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 45   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x4, y, x4), *x3, 0, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 46   : }

	pop	ebp
	ret	0
_ADD_4W_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT _ADD_3W_UNIT
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_x2$ = 12						; size = 4
_x3$ = 16						; size = 4
_y$ = 20						; size = 4
_ADD_3W_UNIT PROC					; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp

; 40   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x3$[ebp]
	mov	edx, DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 40   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR _x2$[ebp]
	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 40   :     return (_ADD_UNIT_DIV(_ADD_UNIT_DIV(_ADD_UNIT_DIV(0, *x3, y, x3), *x2, 0, x2), *x1, 0, x1));

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	adc	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 41   : }

	pop	ebp
	ret	0
_ADD_3W_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c
;	COMDAT _CalculateCriticalDataOfDivision
_TEXT	SEGMENT
_v$1$ = -64						; size = 4
_rh_mi$1 = -64						; size = 4
_rh_mi$2 = -64						; size = 4
_bu0$3 = -64						; size = 4
_value$1$ = -60						; size = 4
_rh_hi$1$ = -60						; size = 4
_bu2$1$ = -60						; size = 4
_bu3$4 = -60						; size = 4
_bu2$5 = -60						; size = 4
_bu1$6 = -60						; size = 4
_lh_mi$1$ = -56						; size = 4
_lh_mi$1$ = -56						; size = 4
_mv2_lo$1$ = -56					; size = 4
_value$1$ = -52						; size = 4
_v$1$ = -52						; size = 4
_rh_hi$1$ = -52						; size = 4
_u_count_0$1$ = -48					; size = 4
_u_count_1$1$ = -44					; size = 4
_u_count_2$1$ = -40					; size = 4
_u_count_3$1$ = -36					; size = 4
_v_count_1$1$ = -32					; size = 4
_v_count_2$1$ = -28					; size = 4
_v_count_3$1$ = -24					; size = 4
_rh_mi$1$ = -20						; size = 4
_rh_mi$1$ = -20						; size = 4
_mv1_lo$1$ = -20					; size = 4
_u3$1$ = -16						; size = 4
_v3$1$ = -12						; size = 4
_u1$1$ = -8						; size = 4
_u2$1$ = -4						; size = 4
_env$ = 8						; size = 4
_CalculateCriticalDataOfDivision PROC			; COMDAT

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx

; 90   :     const __UNIT_TYPE_DIV v_min_1 = ~((__UNIT_TYPE_DIV)-1 >> 1);    // 0x80000000
; 91   :     const __UNIT_TYPE_DIV v_min_2 = 0;                              // 0x00000000
; 92   :     const __UNIT_TYPE_DIV v_min_3 = 0;
; 93   : 
; 94   :     const __UNIT_TYPE_DIV u_min_0 = 0;                              // 0x00000000
; 95   :     const __UNIT_TYPE_DIV u_min_1 = ~((__UNIT_TYPE_DIV)-1 >> 1);    // 0x80000000
; 96   :     const __UNIT_TYPE_DIV u_min_2 = 0;                              // 0x00000000
; 97   :     const __UNIT_TYPE_DIV u_min_3 = 0;                              // 0x00000000
; 98   : 
; 99   :     __UNIT_TYPE_DIV u_count_0 = (__UNIT_TYPE_DIV)-1;                // 0xffffffff
; 100  :     __UNIT_TYPE_DIV u_count_1 = ~((__UNIT_TYPE_DIV)-1 >> 1);        // 0x80000000
; 101  :     __UNIT_TYPE_DIV u_count_2 = 0;                                  // 0x00000000
; 102  :     __UNIT_TYPE_DIV u_count_3 = 0;                                  // 0x00000000
; 103  : 
; 104  :     __UNIT_TYPE_DIV u0 = u_min_0;

	xor	ebx, ebx
	mov	DWORD PTR _u_count_0$1$[ebp], -1
	push	esi
	push	edi
	mov	DWORD PTR _u_count_1$1$[ebp], -2147483648 ; 80000000H

; 105  :     __UNIT_TYPE_DIV u1 = u_min_1;

	mov	edx, -2147483648			; 80000000H
	mov	DWORD PTR _u_count_2$1$[ebp], 0
	mov	DWORD PTR _u_count_3$1$[ebp], 0

; 106  :     __UNIT_TYPE_DIV u2 = u_min_2;

	mov	DWORD PTR _u2$1$[ebp], ebx

; 107  :     __UNIT_TYPE_DIV u3 = u_min_3;

	mov	DWORD PTR _u3$1$[ebp], ebx
$LN150@CalculateC:

; 108  : 
; 109  :     for (;;)
; 110  :     {
; 111  :         __UNIT_TYPE_DIV v_count_1 = ~((__UNIT_TYPE_DIV)-1 >> 1);    // 0x80000000
; 112  :         __UNIT_TYPE_DIV v_count_2 = 0;                              // 0x00000000
; 113  :         __UNIT_TYPE_DIV v_count_3 = 0;                              // 0x00000000
; 114  :         __UNIT_TYPE_DIV v1 = v_min_1;
; 115  :         __UNIT_TYPE_DIV v2 = v_min_2;

	xor	edi, edi
	mov	DWORD PTR _u1$1$[ebp], edx
	mov	DWORD PTR _v_count_1$1$[ebp], -2147483648 ; 80000000H
	mov	esi, -2147483648			; 80000000H
	mov	DWORD PTR _v_count_2$1$[ebp], 0
	mov	DWORD PTR _v_count_3$1$[ebp], 0

; 116  :         __UNIT_TYPE_DIV v3 = v_min_3;

	mov	DWORD PTR _v3$1$[ebp], edi
$LL5@CalculateC:

; 60   :     if (u0 == v1)

	cmp	ebx, esi
	jne	SHORT $LN18@CalculateC

; 61   :         return ((__UNIT_TYPE_DIV)-1);

	or	ecx, -1
	jmp	SHORT $LN17@CalculateC
$LN18@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 602  :         return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, ebx
	or	ecx, edx

; 602  :         return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 64   :     return (q);

	mov	ecx, eax
$LN17@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, edi
	mul	ecx
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	ecx
	mov	DWORD PTR _rh_hi$1$[ebp], edx

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	edx, DWORD PTR _u1$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 73   :     __UNIT_TYPE_DIV rh_mi = _MULTIPLY_UNIT_DIV(q_, v1, &rh_hi);

	mov	DWORD PTR _rh_mi$2[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], edx
	sub	DWORD PTR _rh_mi$1$[ebp], eax
	mov	eax, ebx
	sbb	eax, DWORD PTR _rh_hi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 78   :     else if (lh_hi < rh_hi)

	jne	SHORT $LN9@CalculateC

; 79   :         return (FALSE);
; 80   :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN148@CalculateC

; 81   :         return (TRUE);
; 82   :     else if (lh_mi < rh_mi)

	jb	SHORT $LN9@CalculateC

; 117  :         for (;;)
; 118  :         {
; 119  :             __UNIT_TYPE_DIV q_ = AsumeQ_(u0, u1, v1);
; 120  :             if (CheckQ_(q_, u0, u1, u2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR _u2$1$[ebp]
	jbe	SHORT $LN9@CalculateC
$LN148@CalculateC:

; 121  :             {
; 122  :                 --q_;

	dec	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, edi
	mul	ecx
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	ecx
	mov	DWORD PTR _rh_hi$1$[ebp], edx

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	edx, DWORD PTR _u1$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 73   :     __UNIT_TYPE_DIV rh_mi = _MULTIPLY_UNIT_DIV(q_, v1, &rh_hi);

	mov	DWORD PTR _rh_mi$1[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], edx
	sub	DWORD PTR _rh_mi$1$[ebp], eax
	mov	eax, ebx
	sbb	eax, DWORD PTR _rh_hi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 78   :     else if (lh_hi < rh_hi)

	jne	SHORT $LN9@CalculateC

; 79   :         return (FALSE);
; 80   :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN149@CalculateC

; 81   :         return (TRUE);
; 82   :     else if (lh_mi < rh_mi)

	jb	SHORT $LN9@CalculateC

; 123  :                 if (CheckQ_(q_, u0, u1, u2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR _u2$1$[ebp]
	jbe	SHORT $LN9@CalculateC
$LN149@CalculateC:

; 124  :                 {
; 125  :                     --q_;

	dec	ecx
$LN9@CalculateC:

; 129  :             __UNIT_TYPE_DIV bu1 = u1;

	mov	eax, DWORD PTR _u1$1$[ebp]
	mov	DWORD PTR _bu1$6[ebp], eax

; 130  :             __UNIT_TYPE_DIV bu2 = u2;

	mov	eax, DWORD PTR _u2$1$[ebp]
	mov	DWORD PTR _bu2$5[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, ecx
	mul	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 128  :             __UNIT_TYPE_DIV bu0 = u0;

	mov	DWORD PTR _bu0$3[ebp], ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	DWORD PTR _mv1_lo$1$[ebp], eax
	mov	eax, ecx
	mov	DWORD PTR _v$1$[ebp], edx
	mul	edi
	mov	DWORD PTR _mv2_lo$1$[ebp], eax
	mov	eax, ecx

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _u3$1$[ebp]

; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	DWORD PTR _v$1$[ebp], edx
	mul	DWORD PTR _v3$1$[ebp]

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
	mov	eax, DWORD PTR _u2$1$[ebp]
	mov	DWORD PTR _bu3$4[ebp], ecx
	mov	ecx, ebx
	sbb	eax, edx
	mov	edx, DWORD PTR _u1$1$[ebp]
	mov	DWORD PTR _bu2$1$[ebp], eax
	mov	eax, edx
	sbb	eax, 0
	sbb	ecx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 148  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu2, mv2_lo, &bu2), bu1, mv2_hi, &bu1), bu0, 0, &bu0) ||

	jb	SHORT $LN11@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	edx, DWORD PTR _bu2$1$[ebp]
	sub	edx, DWORD PTR _mv2_lo$1$[ebp]
	mov	DWORD PTR _bu2$5[ebp], edx
	sbb	eax, DWORD PTR _v$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 148  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu2, mv2_lo, &bu2), bu1, mv2_hi, &bu1), bu0, 0, &bu0) ||

	mov	edx, DWORD PTR _u1$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 148  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu2, mv2_lo, &bu2), bu1, mv2_hi, &bu1), bu0, 0, &bu0) ||

	jb	SHORT $LN11@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	eax, DWORD PTR _mv1_lo$1$[ebp]
	mov	DWORD PTR _bu1$6[ebp], eax
	sbb	ecx, DWORD PTR _v$1$[ebp]
	mov	DWORD PTR _bu0$3[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 148  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu2, mv2_lo, &bu2), bu1, mv2_hi, &bu1), bu0, 0, &bu0) ||

	jae	SHORT $LN10@CalculateC
$LN11@CalculateC:

; 149  :                 _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, bu1, mv1_lo, &bu1), bu0, mv1_hi, &bu0))
; 150  :             {
; 151  :                 if (sizeof(__UNIT_TYPE_DIV) <= 4)
; 152  :                     env->log("found: u0=0x%08x, u1=0x%08x, u2=0x%08x, u3=0x%08x, v1=0x%08x, v2=0x%08x, v3=0x%08x\n", u0, u1, u2, u3, v1, v2, v3);

	push	DWORD PTR _v3$1$[ebp]
	mov	eax, DWORD PTR _env$[ebp]
	push	edi
	push	esi
	push	DWORD PTR _u3$1$[ebp]
	mov	eax, DWORD PTR [eax]
	push	DWORD PTR _u2$1$[ebp]
	push	edx
	push	ebx
	push	OFFSET ??_C@_0FE@HJGKBDLB@found?3?5u0?$DN0x?$CF08x?0?5u1?$DN0x?$CF08x?0?5u2@
	call	eax

; 153  :                 else
; 154  :                     env->log("found: u0=0x%016llx, u1=0x%016llx, u2=0x%016llx, u3=0x%016llx, v1=0x%016llx, v2=0x%016llx, v3=0x%016llx\n", u0, u1, u2, u3, v1, v2, v3);
; 155  :                 env->pause();

	mov	eax, DWORD PTR _env$[ebp]
	add	esp, 32					; 00000020H
	mov	eax, DWORD PTR [eax+4]
	call	eax
	mov	edx, DWORD PTR _u1$1$[ebp]
$LN10@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	DWORD PTR _v_count_3$1$[ebp], 1
	mov	eax, DWORD PTR _v_count_2$1$[ebp]
	mov	ecx, DWORD PTR _v_count_1$1$[ebp]
	sbb	eax, 0
	mov	DWORD PTR _v_count_2$1$[ebp], eax
	sbb	ecx, 0
	mov	DWORD PTR _v_count_1$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 158  :             if (SUBTRUCT_3W_UNIT(&v_count_1, &v_count_2, &v_count_3, 1))

	jb	SHORT $LN142@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	DWORD PTR _v3$1$[ebp], 1
	adc	edi, 0
	adc	esi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 161  :         }

	jmp	$LL5@CalculateC
$LN142@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_subborrow_u32(borrow, u, v, w));

	sub	DWORD PTR _u_count_3$1$[ebp], 1
	mov	eax, DWORD PTR _u_count_2$1$[ebp]
	sbb	eax, 0
	mov	DWORD PTR _u_count_2$1$[ebp], eax
	mov	eax, DWORD PTR _u_count_1$1$[ebp]
	sbb	eax, 0
	mov	DWORD PTR _u_count_1$1$[ebp], eax
	mov	eax, DWORD PTR _u_count_0$1$[ebp]
	sbb	eax, 0
	mov	DWORD PTR _u_count_0$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 162  :         if (SUBTRUCT_4W_UNIT(&u_count_0, &u_count_1, &u_count_2, &u_count_3, 1))

	jb	SHORT $LN143@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (_addcarry_u32(carry, u, v, w));

	add	DWORD PTR _u3$1$[ebp], 1
	mov	eax, DWORD PTR _u2$1$[ebp]
	adc	eax, 0
	mov	DWORD PTR _u2$1$[ebp], eax
	adc	edx, 0
	adc	ebx, 0
	jmp	$LN150@CalculateC
$LN143@CalculateC:
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\calc_divrem_critical.c

; 167  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateCriticalDataOfDivision ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __DIVREM_UNIT
_TEXT	SEGMENT
tv70 = -8						; size = 8
tv69 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC					; COMDAT

; 595  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _u_high$[ebp]
	xor	ecx, ecx
	or	ecx, DWORD PTR _u_low$[ebp]

; 595  : {

	push	ebx

; 596  : #ifdef _MSC_VER
; 597  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 598  :     {
; 599  :         // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 600  :         _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 601  :         *r = (_UINT32_T)(t % v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	eax
	push	ecx
	call	__aulldvrm
	mov	DWORD PTR tv69[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv70[ebp+4], edx
	mov	edx, DWORD PTR _r$[ebp]

; 602  :         return ((_UINT32_T)(t / v));

	pop	ebx
	mov	DWORD PTR [edx], ecx

; 603  :     }
; 604  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 605  :     {
; 606  :         // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 607  :         // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 608  :         // ・128bit 整数のデータ型が用意されていない。
; 609  :         // ・x64 ではインラインアセンブラがサポートされていない。
; 610  :         *r = 0;
; 611  :         return (0);
; 612  :     }
; 613  :     else
; 614  :     {
; 615  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 616  :         *r = 0;
; 617  :         return (0);
; 618  :     }
; 619  : #elif defined(__GNUC__)
; 620  :     __UNIT_TYPE q;
; 621  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 622  :         __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 623  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 624  :         __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 625  :     else
; 626  :     {
; 627  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 628  :         *r = 0;
; 629  :         q = 0;
; 630  :     }
; 631  :     return (q);
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : }

	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MULTIPLY_UNIT_DIV
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT_DIV PROC				; COMDAT

; 527  : {

	push	ebp
	mov	ebp, esp

; 528  : #ifdef _MSC_VER
; 529  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 530  : #elif defined(__GNUC__)
; 531  : #ifdef _M_IX86
; 532  :     _UINT32_T w_lo;
; 533  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 534  :     return (w_lo);
; 535  : #elif defined(_M_X64)
; 536  :     return (_umul128(u, v, w_hi));
; 537  : #else
; 538  : #error unknown platform
; 539  : #endif
; 540  : #else
; 541  : #error unknown compiler
; 542  : #endif
; 543  : }

	pop	ebp
	ret	0
__MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __SUBTRUCT_UNIT_DIV
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT_DIV PROC				; COMDAT

; 491  : {

	push	ebp
	mov	ebp, esp

; 492  : #ifdef _MSC_VER
; 493  :     return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _borrow$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	sbb	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 494  : #elif defined(__GNUC__)
; 495  : #ifdef _M_IX86
; 496  :     return (_subborrow_u32(borrow, u, v, w));
; 497  : #elif defined(_M_X64)
; 498  :     return (_subborrow_u64(borrow, u, v, w));
; 499  : #else
; 500  : #error unknown platform
; 501  : #endif
; 502  : #else
; 503  : #error unknown compiler
; 504  : #endif
; 505  : }

	pop	ebp
	ret	0
__SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ADD_UNIT_DIV
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT_DIV PROC					; COMDAT

; 435  : {

	push	ebp
	mov	ebp, esp

; 436  : #ifdef _MSC_VER
; 437  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adc	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 438  : #elif defined(__GNUC__)
; 439  : #ifdef _M_IX86
; 440  :     return (_addcarry_u32(carry, u, v, w));
; 441  : #elif defined(_M_X64)
; 442  :     return (_addcarry_u64(carry, u, v, w));
; 443  : #else
; 444  : #error unknown platform
; 445  : #endif
; 446  : #else
; 447  : #error unknown compiler
; 448  : #endif
; 449  : }

	pop	ebp
	ret	0
__ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 393  : {

	push	ebp
	mov	ebp, esp

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 395  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 396  : }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 388  : {

	push	ebp
	mov	ebp, esp

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR _value_high$[ebp]
	xor	eax, eax
	or	eax, DWORD PTR _value_low$[ebp]

; 390  : }

	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
END
