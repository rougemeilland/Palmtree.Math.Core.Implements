; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\TEST_op_Compare.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_TEST_PMC_Compare_X_I
PUBLIC	_TEST_PMC_Compare_X_L
PUBLIC	_TEST_PMC_Compare_X_X
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BI@LBILBIEM@PMC_Compare_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DC@JJJOEBHL@PMC_Compare_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BI@FHKCNDAI@PMC_Compare_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DC@DELOMNHJ@PMC_Compare_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ ; `string'
PUBLIC	??_C@_0BI@HJOHPCJK@PMC_Compare_X_X?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DC@ONKPPHLC@PMC_Compare_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ ; `string'
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
;	COMDAT ??_C@_0DC@ONKPPHLC@PMC_Compare_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
CONST	SEGMENT
??_C@_0DC@ONKPPHLC@PMC_Compare_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ DB 'P'
	DB	'MC_Compare_X_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HJOHPCJK@PMC_Compare_X_X?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BI@HJOHPCJK@PMC_Compare_X_X?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Compare'
	DB	'_X_X (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DELOMNHJ@PMC_Compare_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
CONST	SEGMENT
??_C@_0DC@DELOMNHJ@PMC_Compare_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ DB 'P'
	DB	'MC_Compare_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FHKCNDAI@PMC_Compare_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BI@FHKCNDAI@PMC_Compare_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Compare'
	DB	'_X_L (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JJJOEBHL@PMC_Compare_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
CONST	SEGMENT
??_C@_0DC@JJJOEBHL@PMC_Compare_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@ DB 'P'
	DB	'MC_Compare_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LBILBIEM@PMC_Compare_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BI@LBILBIEM@PMC_Compare_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Compare'
	DB	'_X_I (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_compare.c
;	COMDAT _TEST_PMC_Compare_X_X
_TEXT	SEGMENT
_x_result$1$ = -16					; size = 4
_actual_z$ = -12					; size = 4
_x$ = -8						; size = 4
_y$ = -4						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y_buf$ = 28						; size = 4
_y_buf_size$ = 32					; size = 4
_desired_z$ = 36					; size = 4
_TEST_PMC_Compare_X_X PROC				; COMDAT

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi

; 65   :     HANDLE x;
; 66   :     HANDLE y;
; 67   :     int actual_z;
; 68   :     PMC_STATUS_CODE result;
; 69   :     PMC_STATUS_CODE x_result;
; 70   :     PMC_STATUS_CODE y_result;
; 71   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_X (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	edi, DWORD PTR _ep$[ebp]
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	DWORD PTR _x_buf_size$[ebp]
	push	DWORD PTR _x_buf$[ebp]
	mov	eax, DWORD PTR [edi+16]
	call	eax
	mov	ebx, eax
	push	ebx
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	DWORD PTR _x_result$1$[ebp], ebx
	call	_FormatTestMesssage
	mov	esi, DWORD PTR _no$[ebp]
	add	esp, 8
	xor	ecx, ecx
	test	ebx, ebx
	sete	cl
	push	eax
	push	ecx
	push	1
	push	esi
	push	OFFSET ??_C@_0BI@HJOHPCJK@PMC_Compare_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	mov	ebx, DWORD PTR _env$[ebp]
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 72   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_X (%d.%d)", no, 2), (y_result = ep->PMC_From_B(y_buf, y_buf_size, &y)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", y_result));

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	push	DWORD PTR _y_buf_size$[ebp]
	mov	eax, DWORD PTR [edi+16]
	push	DWORD PTR _y_buf$[ebp]
	call	eax
	mov	edi, eax
	push	edi
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	edi, edi
	sete	cl
	push	eax
	push	ecx
	push	2
	push	esi
	push	OFFSET ??_C@_0BI@HJOHPCJK@PMC_Compare_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 73   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_X (%d.%d)", no, 3), (result = ep->PMC_Compare_X_X(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Compare_X_Xの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _actual_z$[ebp]
	push	eax
	push	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _ep$[ebp]
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax+144]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0DC@ONKPPHLC@PMC_Compare_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	mov	esi, DWORD PTR _no$[ebp]
	sete	cl
	push	eax
	push	ecx
	push	3
	push	esi
	push	OFFSET ??_C@_0BI@HJOHPCJK@PMC_Compare_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert

; 74   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_I (%d.%d)", no, 4), actual_z == desired_z, "データの内容が一致しない");

	mov	eax, DWORD PTR _actual_z$[ebp]
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	cmp	eax, DWORD PTR _desired_z$[ebp]
	sete	cl
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	push	ecx
	push	4
	push	esi
	push	OFFSET ??_C@_0BI@LBILBIEM@PMC_Compare_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert

; 75   :     if (y_result == PMC_STATUS_OK)

	mov	ebx, DWORD PTR _ep$[ebp]
	add	esp, 16					; 00000010H
	test	edi, edi
	jne	SHORT $LN2@TEST_PMC_C

; 76   :         ep->PMC_Dispose(y);

	push	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [ebx+20]
	call	eax
$LN2@TEST_PMC_C:

; 77   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$1$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_C

; 78   :         ep->PMC_Dispose(x);

	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [ebx+20]
	call	eax
$LN3@TEST_PMC_C:

; 79   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_Compare_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_compare.c
;	COMDAT _TEST_PMC_Compare_X_L
_TEXT	SEGMENT
_x_result$1$ = -12					; size = 4
_actual_z$ = -8						; size = 4
_x$ = -4						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 8
_desired_z$ = 36					; size = 4
_TEST_PMC_Compare_X_L PROC				; COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi

; 52   :     HANDLE x;
; 53   :     int actual_z;
; 54   :     PMC_STATUS_CODE result;
; 55   :     PMC_STATUS_CODE x_result;
; 56   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_L (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, DWORD PTR _ep$[ebp]
	lea	eax, DWORD PTR _x$[ebp]
	push	edi
	push	eax
	push	DWORD PTR _x_buf_size$[ebp]
	mov	eax, DWORD PTR [esi+16]
	push	DWORD PTR _x_buf$[ebp]
	call	eax
	mov	ebx, eax
	push	ebx
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	DWORD PTR _x_result$1$[ebp], ebx
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	ebx, ebx
	mov	ebx, DWORD PTR _no$[ebp]
	sete	cl
	push	eax
	push	ecx
	push	1
	push	ebx
	push	OFFSET ??_C@_0BI@FHKCNDAI@PMC_Compare_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	mov	edi, DWORD PTR _env$[ebp]
	add	esp, 12					; 0000000cH
	push	eax
	push	edi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 57   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_L (%d.%d)", no, 2), (result = ep->PMC_Compare_X_L(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Compare_X_Lの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _actual_z$[ebp]
	push	eax
	push	DWORD PTR _y$[ebp+4]
	mov	eax, DWORD PTR [esi+140]
	push	DWORD PTR _y$[ebp]
	push	DWORD PTR _x$[ebp]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0DC@DELOMNHJ@PMC_Compare_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	sete	cl
	push	eax
	push	ecx
	push	2
	push	ebx
	push	OFFSET ??_C@_0BI@FHKCNDAI@PMC_Compare_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	edi
	call	_TEST_Assert

; 58   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_I (%d.%d)", no, 3), actual_z == desired_z, "データの内容が一致しない");

	mov	eax, DWORD PTR _actual_z$[ebp]
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	cmp	eax, DWORD PTR _desired_z$[ebp]
	sete	cl
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	push	ecx
	push	3
	push	ebx
	push	OFFSET ??_C@_0BI@LBILBIEM@PMC_Compare_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	edi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 59   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$1$[ebp], 0
	pop	edi
	pop	esi
	pop	ebx
	jne	SHORT $LN2@TEST_PMC_C

; 60   :         ep->PMC_Dispose(x);

	mov	eax, DWORD PTR _ep$[ebp]
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax+20]
	call	eax
$LN2@TEST_PMC_C:

; 61   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_Compare_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_compare.c
;	COMDAT _TEST_PMC_Compare_X_I
_TEXT	SEGMENT
_x_result$1$ = -12					; size = 4
_actual_z$ = -8						; size = 4
_x$ = -4						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 4
_desired_z$ = 32					; size = 4
_TEST_PMC_Compare_X_I PROC				; COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi

; 39   :     HANDLE x;
; 40   :     int actual_z;
; 41   :     PMC_STATUS_CODE result;
; 42   :     PMC_STATUS_CODE x_result;
; 43   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_I (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, DWORD PTR _ep$[ebp]
	lea	eax, DWORD PTR _x$[ebp]
	push	edi
	push	eax
	push	DWORD PTR _x_buf_size$[ebp]
	mov	eax, DWORD PTR [esi+16]
	push	DWORD PTR _x_buf$[ebp]
	call	eax
	mov	ebx, eax
	push	ebx
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	DWORD PTR _x_result$1$[ebp], ebx
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	ebx, ebx
	mov	ebx, DWORD PTR _no$[ebp]
	sete	cl
	push	eax
	push	ecx
	push	1
	push	ebx
	push	OFFSET ??_C@_0BI@LBILBIEM@PMC_Compare_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	mov	edi, DWORD PTR _env$[ebp]
	add	esp, 12					; 0000000cH
	push	eax
	push	edi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 44   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_I (%d.%d)", no, 2), (result = ep->PMC_Compare_X_I(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Compare_X_Iの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _actual_z$[ebp]
	push	eax
	push	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [esi+136]
	push	DWORD PTR _x$[ebp]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0DC@JJJOEBHL@PMC_Compare_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	sete	cl
	push	eax
	push	ecx
	push	2
	push	ebx
	push	OFFSET ??_C@_0BI@LBILBIEM@PMC_Compare_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	edi
	call	_TEST_Assert

; 45   :     TEST_Assert(env, FormatTestLabel("PMC_Compare_X_I (%d.%d)", no, 3), actual_z == desired_z, "データの内容が一致しない");

	mov	eax, DWORD PTR _actual_z$[ebp]
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	cmp	eax, DWORD PTR _desired_z$[ebp]
	sete	cl
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	push	ecx
	push	3
	push	ebx
	push	OFFSET ??_C@_0BI@LBILBIEM@PMC_Compare_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	edi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 46   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$1$[ebp], 0
	pop	edi
	pop	esi
	pop	ebx
	jne	SHORT $LN2@TEST_PMC_C

; 47   :         ep->PMC_Dispose(x);

	mov	eax, DWORD PTR _ep$[ebp]
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax+20]
	call	eax
$LN2@TEST_PMC_C:

; 48   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_Compare_X_I ENDP
_TEXT	ENDS
END
