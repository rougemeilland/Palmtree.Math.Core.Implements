; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\TEST_op_From_To.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_TEST_PMC_From_I
PUBLIC	_TEST_PMC_From_L
PUBLIC	_TEST_PMC_To_X_I
PUBLIC	_TEST_PMC_To_X_L
PUBLIC	??_C@_0CN@KHEEECME@PMC_From_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0CN@KGEMOMG@PMC_From_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_To_X_L (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_To_X_I (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_From_L (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KGEMOMG@PMC_From_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@KGEMOMG@PMC_From_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_From_I (%d.%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KHEEECME@PMC_From_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@KHEEECME@PMC_From_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT __EQUALS_MEMORY
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC					; COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp

; 103  :     if (count1 != count2)

	mov	edx, DWORD PTR _count1$[ebp]
	push	esi
	cmp	edx, DWORD PTR _count2$[ebp]
	jne	SHORT $LN8@EQUALS_MEM

; 104  :         return (-1);
; 105  :     while (count1 > 0)

	test	edx, edx
	je	SHORT $LN3@EQUALS_MEM
	mov	esi, DWORD PTR _buffer1$[ebp]
	mov	eax, DWORD PTR _buffer2$[ebp]
	sub	esi, eax
$LL2@EQUALS_MEM:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	mov	cl, BYTE PTR [esi+eax]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN8@EQUALS_MEM

; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	eax

; 111  :         --count1;

	sub	edx, 1
	jne	SHORT $LL2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 112  :     }
; 113  :     return (0);

	xor	eax, eax
	pop	esi

; 114  : }

	pop	ebp
	ret	0
$LN8@EQUALS_MEM:

; 108  :             return (-1);

	or	eax, -1
	pop	esi

; 114  : }

	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
;	COMDAT _TEST_PMC_To_X_L
_TEXT	SEGMENT
_rvalue$ = -12						; size = 8
_x$ = -4						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_buf$ = 20						; size = 4
_buf_size$ = 24						; size = 4
_desired_result_code$ = 28				; size = 4
_desired_rvalue$ = 32					; size = 8
_TEST_PMC_To_X_L PROC					; COMDAT

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi

; 82   :     HANDLE x;
; 83   :     unsigned __int64 rvalue;
; 84   :     PMC_STATUS_CODE result;
; 85   :     PMC_STATUS_CODE x_result;
; 86   :     TEST_Assert(env, FormatTestLabel("PMC_To_X_L (%d.%d)", no, 1), (x_result = ep->PMC_From_B(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, DWORD PTR _ep$[ebp]
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	DWORD PTR _buf_size$[ebp]
	push	DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [esi+16]
	call	eax
	mov	ebx, eax
	push	ebx
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	ebx, ebx
	sete	cl
	push	eax
	push	ecx
	push	1
	push	DWORD PTR _no$[ebp]
	push	OFFSET ??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 87   :     TEST_Assert(env, FormatTestLabel("PMC_To_X_L (%d.%d)", no, 2), (result = ep->PMC_To_X_L(x, &rvalue)) == desired_result_code, FormatTestMesssage("PMC_To_X_Iの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [esi+28]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	cmp	esi, DWORD PTR _desired_result_code$[ebp]
	mov	esi, DWORD PTR _no$[ebp]
	sete	cl
	push	eax
	push	ecx
	push	2
	push	esi
	push	OFFSET ??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 88   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_T

; 89   :         TEST_Assert(env, FormatTestLabel("PMC_To_X_L (%d.%d)", no, 3), rvalue == desired_rvalue, "データの内容が一致しない");

	mov	eax, DWORD PTR _rvalue$[ebp]
	cmp	eax, DWORD PTR _desired_rvalue$[ebp]
	jne	SHORT $LN5@TEST_PMC_T
	mov	eax, DWORD PTR _rvalue$[ebp+4]
	cmp	eax, DWORD PTR _desired_rvalue$[ebp+4]
	jne	SHORT $LN5@TEST_PMC_T
	mov	eax, 1
	jmp	SHORT $LN6@TEST_PMC_T
$LN5@TEST_PMC_T:
	xor	eax, eax
$LN6@TEST_PMC_T:
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	push	eax
	push	3
	push	esi
	push	OFFSET ??_C@_0BD@JLBCOHKK@PMC_To_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_T:

; 90   :     if (x_result == PMC_STATUS_OK)

	pop	esi
	test	ebx, ebx
	pop	ebx
	jne	SHORT $LN3@TEST_PMC_T

; 91   :         ep->PMC_Dispose(x);

	mov	eax, DWORD PTR _ep$[ebp]
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax+20]
	call	eax
$LN3@TEST_PMC_T:

; 92   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_To_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
;	COMDAT _TEST_PMC_To_X_I
_TEXT	SEGMENT
_rvalue$ = -8						; size = 4
_x$ = -4						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_buf$ = 20						; size = 4
_buf_size$ = 24						; size = 4
_desired_result_code$ = 28				; size = 4
_desired_rvalue$ = 32					; size = 4
_TEST_PMC_To_X_I PROC					; COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi

; 68   :     HANDLE x;
; 69   :     unsigned __int32 rvalue;
; 70   :     PMC_STATUS_CODE result;
; 71   :     PMC_STATUS_CODE x_result;
; 72   :     TEST_Assert(env, FormatTestLabel("PMC_To_X_I (%d.%d)", no, 1), (x_result = ep->PMC_From_B(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, DWORD PTR _ep$[ebp]
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	DWORD PTR _buf_size$[ebp]
	push	DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [esi+16]
	call	eax
	mov	ebx, eax
	push	ebx
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	ebx, ebx
	sete	cl
	push	eax
	push	ecx
	push	1
	push	DWORD PTR _no$[ebp]
	push	OFFSET ??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 73   :     TEST_Assert(env, FormatTestLabel("PMC_To_X_I (%d.%d)", no, 2), (result = ep->PMC_To_X_I(x, &rvalue)) == desired_result_code, FormatTestMesssage("PMC_To_X_Iの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [esi+24]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CN@IAPPOMCD@PMC_To_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	cmp	esi, DWORD PTR _desired_result_code$[ebp]
	mov	esi, DWORD PTR _no$[ebp]
	sete	cl
	push	eax
	push	ecx
	push	2
	push	esi
	push	OFFSET ??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 74   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_T

; 75   :         TEST_Assert(env, FormatTestLabel("PMC_To_X_I (%d.%d)", no, 3), rvalue == desired_rvalue, "データの内容が一致しない");

	mov	eax, DWORD PTR _rvalue$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR _desired_rvalue$[ebp]
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	sete	cl
	push	ecx
	push	3
	push	esi
	push	OFFSET ??_C@_0BD@HNDLCMOO@PMC_To_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_T:

; 76   :     if (x_result == PMC_STATUS_OK)

	pop	esi
	test	ebx, ebx
	pop	ebx
	jne	SHORT $LN3@TEST_PMC_T

; 77   :         ep->PMC_Dispose(x);

	mov	eax, DWORD PTR _ep$[ebp]
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax+20]
	call	eax
$LN3@TEST_PMC_T:

; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_To_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
;	COMDAT _TEST_PMC_From_L
_TEXT	SEGMENT
_rlength$ = -276					; size = 4
_x$ = -272						; size = 4
_x_result$1$ = -268					; size = 4
_no$GSCopy$1$ = -264					; size = 4
_rbuffer$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_v$ = 20						; size = 8
_buf$ = 28						; size = 4
_buf_size$ = 32						; size = 4
_TEST_PMC_From_L PROC					; COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _env$[ebp]

; 54   :     HANDLE x;
; 55   :     unsigned char rbuffer[256];
; 56   :     size_t rlength;
; 57   :     PMC_STATUS_CODE result;
; 58   :     PMC_STATUS_CODE x_result;
; 59   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 1), (x_result = ep->PMC_From_L(v, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Lの復帰コードが期待通りではない(%d)", x_result));

	lea	eax, DWORD PTR _x$[ebp]
	push	esi
	mov	esi, DWORD PTR _no$[ebp]
	push	edi
	mov	edi, DWORD PTR _ep$[ebp]
	push	eax
	push	DWORD PTR _v$[ebp+4]
	mov	DWORD PTR _no$GSCopy$1$[ebp], esi
	push	DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edi+12]
	call	eax
	push	eax
	push	OFFSET ??_C@_0CN@KGEMOMG@PMC_From_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	DWORD PTR _x_result$1$[ebp], eax
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	cmp	DWORD PTR _x_result$1$[ebp], ecx
	sete	cl
	push	eax
	push	ecx
	push	1
	push	esi
	push	OFFSET ??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 60   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 2), (result = ep->PMC_To_X_B(x, rbuffer, sizeof(rbuffer), &rlength)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _rlength$[ebp]
	push	eax
	push	256					; 00000100H
	lea	eax, DWORD PTR _rbuffer$[ebp]
	push	eax
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edi+32]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	sete	cl
	push	eax
	push	ecx
	push	2
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert

; 61   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	mov	edx, DWORD PTR _rlength$[ebp]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _buf$[ebp]
	cmp	edx, DWORD PTR _buf_size$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN10@TEST_PMC_F
$LN11@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c

; 61   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	or	ecx, -1
	jmp	SHORT $LN4@TEST_PMC_F
$LN10@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	edx, edx
	je	SHORT $LN6@TEST_PMC_F
	lea	esi, DWORD PTR _rbuffer$[ebp]
	sub	esi, eax
$LL5@TEST_PMC_F:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	mov	cl, BYTE PTR [esi+eax]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN11@TEST_PMC_F

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	eax

; 111  :         --count1;

	sub	edx, 1
	jne	SHORT $LL5@TEST_PMC_F
$LN6@TEST_PMC_F:

; 112  :     }
; 113  :     return (0);

	xor	ecx, ecx
$LN4@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c

; 61   :     TEST_Assert(env, FormatTestLabel("PMC_From_L (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	xor	eax, eax
	test	ecx, ecx
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	sete	al
	push	eax
	push	3
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BD@CNENCJHI@PMC_From_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 62   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$1$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_F

; 63   :         ep->PMC_Dispose(x);

	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN2@TEST_PMC_F:

; 64   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_From_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c
;	COMDAT _TEST_PMC_From_I
_TEXT	SEGMENT
_rlength$ = -276					; size = 4
_x$ = -272						; size = 4
_x_result$1$ = -268					; size = 4
_no$GSCopy$1$ = -264					; size = 4
_rbuffer$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_v$ = 20						; size = 4
_buf$ = 24						; size = 4
_buf_size$ = 28						; size = 4
_TEST_PMC_From_I PROC					; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _env$[ebp]

; 40   :     HANDLE x;
; 41   :     unsigned char rbuffer[256];
; 42   :     size_t rlength;
; 43   :     PMC_STATUS_CODE result;
; 44   :     PMC_STATUS_CODE x_result;
; 45   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 1), (x_result = ep->PMC_From_I(v, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Iの復帰コードが期待通りではない(%d)", x_result));

	lea	eax, DWORD PTR _x$[ebp]
	push	esi
	mov	esi, DWORD PTR _no$[ebp]
	push	edi
	mov	edi, DWORD PTR _ep$[ebp]
	push	eax
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR _no$GSCopy$1$[ebp], esi
	mov	eax, DWORD PTR [edi+8]
	call	eax
	push	eax
	push	OFFSET ??_C@_0CN@KHEEECME@PMC_From_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	DWORD PTR _x_result$1$[ebp], eax
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	cmp	DWORD PTR _x_result$1$[ebp], ecx
	sete	cl
	push	eax
	push	ecx
	push	1
	push	esi
	push	OFFSET ??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 46   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 2), (result = ep->PMC_To_X_B(x, rbuffer, sizeof(rbuffer), &rlength)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _rlength$[ebp]
	push	eax
	push	256					; 00000100H
	lea	eax, DWORD PTR _rbuffer$[ebp]
	push	eax
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edi+32]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	sete	cl
	push	eax
	push	ecx
	push	2
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert

; 47   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	mov	edx, DWORD PTR _rlength$[ebp]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _buf$[ebp]
	cmp	edx, DWORD PTR _buf_size$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN10@TEST_PMC_F
$LN11@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c

; 47   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	or	ecx, -1
	jmp	SHORT $LN4@TEST_PMC_F
$LN10@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	edx, edx
	je	SHORT $LN6@TEST_PMC_F
	lea	esi, DWORD PTR _rbuffer$[ebp]
	sub	esi, eax
$LL5@TEST_PMC_F:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	mov	cl, BYTE PTR [esi+eax]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN11@TEST_PMC_F

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	eax

; 111  :         --count1;

	sub	edx, 1
	jne	SHORT $LL5@TEST_PMC_F
$LN6@TEST_PMC_F:

; 112  :     }
; 113  :     return (0);

	xor	ecx, ecx
$LN4@TEST_PMC_F:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_from_to.c

; 47   :     TEST_Assert(env, FormatTestLabel("PMC_From_I (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, "データの内容が一致しない");

	xor	eax, eax
	test	ecx, ecx
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	sete	al
	push	eax
	push	3
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BD@MLGEOCDM@PMC_From_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 48   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$1$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_F

; 49   :         ep->PMC_Dispose(x);

	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN2@TEST_PMC_F:

; 50   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_From_I ENDP
_TEXT	ENDS
END
