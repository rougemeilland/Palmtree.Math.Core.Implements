; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\TEST_op_Multiply.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_TEST_PMC_Multiply_X_I
PUBLIC	_TEST_PMC_Multiply_X_L
PUBLIC	_TEST_PMC_Multiply_X_X
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BJ@IDKNDJHA@PMC_Multiply_X_I?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DD@HGOLDKBF@PMC_Multiply_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@ ; `string'
PUBLIC	??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
PUBLIC	??_C@_0BJ@GFIEPCDE@PMC_Multiply_X_L?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DD@NLMLLGBH@PMC_Multiply_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@ ; `string'
PUBLIC	??_C@_0BJ@ELMBNDKG@PMC_Multiply_X_X?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0DD@CNKIMNM@PMC_Multiply_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@ ; `string'
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0DD@CNKIMNM@PMC_Multiply_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@
CONST	SEGMENT
??_C@_0DD@CNKIMNM@PMC_Multiply_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@ DB 'P'
	DB	'MC_Multiply_X_X', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ELMBNDKG@PMC_Multiply_X_X?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BJ@ELMBNDKG@PMC_Multiply_X_X?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Multip'
	DB	'ly_X_X (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NLMLLGBH@PMC_Multiply_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@
CONST	SEGMENT
??_C@_0DD@NLMLLGBH@PMC_Multiply_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@ DB 'P'
	DB	'MC_Multiply_X_L', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GFIEPCDE@PMC_Multiply_X_L?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BJ@GFIEPCDE@PMC_Multiply_X_L?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Multip'
	DB	'ly_X_L (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_To_X_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@HGOLDKBF@PMC_Multiply_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@
CONST	SEGMENT
??_C@_0DD@HGOLDKBF@PMC_Multiply_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@ DB 'P'
	DB	'MC_Multiply_X_I', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R'
	DB	081H, '[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H
	DB	0caH, 082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H
	DB	'(%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IDKNDJHA@PMC_Multiply_X_I?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BJ@IDKNDJHA@PMC_Multiply_X_I?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_Multip'
	DB	'ly_X_I (%d.%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
;	COMDAT __EQUALS_MEMORY
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC					; COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp

; 103  :     if (count1 != count2)

	mov	edx, DWORD PTR _count1$[ebp]
	push	esi
	cmp	edx, DWORD PTR _count2$[ebp]
	jne	SHORT $LN8@EQUALS_MEM

; 104  :         return (-1);
; 105  :     while (count1 > 0)

	test	edx, edx
	je	SHORT $LN3@EQUALS_MEM
	mov	esi, DWORD PTR _buffer1$[ebp]
	mov	eax, DWORD PTR _buffer2$[ebp]
	sub	esi, eax
$LL2@EQUALS_MEM:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	mov	cl, BYTE PTR [esi+eax]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN8@EQUALS_MEM

; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	eax

; 111  :         --count1;

	sub	edx, 1
	jne	SHORT $LL2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 112  :     }
; 113  :     return (0);

	xor	eax, eax
	pop	esi

; 114  : }

	pop	ebp
	ret	0
$LN8@EQUALS_MEM:

; 108  :             return (-1);

	or	eax, -1
	pop	esi

; 114  : }

	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
;	COMDAT _TEST_PMC_Multiply_X_X
_TEXT	SEGMENT
_y_result$1$ = -292					; size = 4
_actual_z_buf_size$ = -288				; size = 4
_x$ = -284						; size = 4
_x_result$1$ = -280					; size = 4
_y$ = -276						; size = 4
_z$ = -272						; size = 4
_z_result$1$ = -268					; size = 4
_no$GSCopy$1$ = -264					; size = 4
_actual_z_buf$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y_buf$ = 28						; size = 4
_y_buf_size$ = 32					; size = 4
_desired_z_buf$ = 36					; size = 4
_desired_z_buf_size$ = 40				; size = 4
_TEST_PMC_Multiply_X_X PROC				; COMDAT

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _no$[ebp]

; 78   :     HANDLE x;
; 79   :     HANDLE y;
; 80   :     HANDLE z;
; 81   :     unsigned char actual_z_buf[256];
; 82   :     size_t actual_z_buf_size;
; 83   :     PMC_STATUS_CODE result;
; 84   :     PMC_STATUS_CODE x_result;
; 85   :     PMC_STATUS_CODE y_result;
; 86   :     PMC_STATUS_CODE z_result;
; 87   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_X (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	lea	ecx, DWORD PTR _x$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _env$[ebp]
	push	esi
	mov	esi, DWORD PTR _y_buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _ep$[ebp]
	push	ecx
	push	DWORD PTR _x_buf_size$[ebp]
	mov	DWORD PTR _no$GSCopy$1$[ebp], eax
	mov	eax, DWORD PTR _x_buf$[ebp]
	push	eax
	mov	eax, DWORD PTR [edi+16]
	call	eax
	push	eax
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	DWORD PTR _x_result$1$[ebp], eax
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	cmp	DWORD PTR _x_result$1$[ebp], ecx
	sete	cl
	push	eax
	push	ecx
	push	1
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@ELMBNDKG@PMC_Multiply_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 88   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_X (%d.%d)", no, 2), (y_result = ep->PMC_From_B(y_buf, y_buf_size, &y)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", y_result));

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	push	DWORD PTR _y_buf_size$[ebp]
	mov	eax, DWORD PTR [edi+16]
	push	esi
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	mov	DWORD PTR _y_result$1$[ebp], esi
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	mov	esi, DWORD PTR _no$GSCopy$1$[ebp]
	sete	cl
	push	eax
	push	ecx
	push	2
	push	esi
	push	OFFSET ??_C@_0BJ@ELMBNDKG@PMC_Multiply_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 89   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_X (%d.%d)", no, 3), (z_result = ep->PMC_Multiply_X_X(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Multiply_X_Xの復帰コードが期待通りではない(%d)", z_result));

	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	push	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [edi+68]
	push	DWORD PTR _x$[ebp]
	call	eax
	push	eax
	push	OFFSET ??_C@_0DD@CNKIMNM@PMC_Multiply_X_X?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@
	mov	DWORD PTR _z_result$1$[ebp], eax
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	cmp	DWORD PTR _z_result$1$[ebp], ecx
	sete	cl
	push	eax
	push	ecx
	push	3
	push	esi
	push	OFFSET ??_C@_0BJ@ELMBNDKG@PMC_Multiply_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 90   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_X (%d.%d)", no, 4), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	push	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edi+32]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	sete	cl
	push	eax
	push	ecx
	push	4
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@ELMBNDKG@PMC_Multiply_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert

; 91   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _desired_z_buf$[ebp]
	cmp	edx, DWORD PTR _desired_z_buf_size$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN12@TEST_PMC_M
$LN13@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c

; 91   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	or	ecx, -1
	jmp	SHORT $LN6@TEST_PMC_M
$LN12@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	edx, edx
	je	SHORT $LN8@TEST_PMC_M
	lea	esi, DWORD PTR _actual_z_buf$[ebp]
	sub	esi, eax
$LL7@TEST_PMC_M:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	mov	cl, BYTE PTR [esi+eax]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN13@TEST_PMC_M

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	eax

; 111  :         --count1;

	sub	edx, 1
	jne	SHORT $LL7@TEST_PMC_M
$LN8@TEST_PMC_M:

; 112  :     }
; 113  :     return (0);

	xor	ecx, ecx
$LN6@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c

; 91   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	xor	eax, eax
	test	ecx, ecx
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	sete	al
	push	eax
	push	5
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@ELMBNDKG@PMC_Multiply_X_X?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 92   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$1$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_M

; 93   :         ep->PMC_Dispose(z);

	push	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN2@TEST_PMC_M:

; 94   :     if (y_result == PMC_STATUS_OK)

	cmp	DWORD PTR _y_result$1$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_M

; 95   :         ep->PMC_Dispose(y);

	push	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN3@TEST_PMC_M:

; 96   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$1$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_M

; 97   :         ep->PMC_Dispose(x);

	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN4@TEST_PMC_M:

; 98   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
;	COMDAT _TEST_PMC_Multiply_X_L
_TEXT	SEGMENT
_actual_z_buf_size$ = -284				; size = 4
_x$ = -280						; size = 4
_z$ = -276						; size = 4
_z_result$1$ = -272					; size = 4
_env$GSCopy$1$ = -268					; size = 4
_no$GSCopy$1$ = -264					; size = 4
_actual_z_buf$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 8
_desired_z_buf$ = 36					; size = 4
_desired_z_buf_size$ = 40				; size = 4
_TEST_PMC_Multiply_X_L PROC				; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _no$[ebp]

; 59   :     HANDLE x;
; 60   :     HANDLE z;
; 61   :     unsigned char actual_z_buf[256];
; 62   :     size_t actual_z_buf_size;
; 63   :     PMC_STATUS_CODE result;
; 64   :     PMC_STATUS_CODE x_result;
; 65   :     PMC_STATUS_CODE z_result;
; 66   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_L (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	lea	ecx, DWORD PTR _x$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _env$[ebp]
	push	edi
	mov	edi, DWORD PTR _ep$[ebp]
	push	ecx
	push	DWORD PTR _x_buf_size$[ebp]
	mov	DWORD PTR _no$GSCopy$1$[ebp], eax
	mov	eax, DWORD PTR _x_buf$[ebp]
	push	eax
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR _env$GSCopy$1$[ebp], esi
	call	eax
	mov	ebx, eax
	push	ebx
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	ebx, ebx
	sete	cl
	push	eax
	push	ecx
	push	1
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@GFIEPCDE@PMC_Multiply_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	esi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 67   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_L (%d.%d)", no, 2), (z_result = ep->PMC_Multiply_X_L(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Multiply_X_Lの復帰コードが期待通りではない(%d)", z_result));

	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	push	DWORD PTR _y$[ebp+4]
	mov	eax, DWORD PTR [edi+64]
	push	DWORD PTR _y$[ebp]
	push	DWORD PTR _x$[ebp]
	call	eax
	push	eax
	push	OFFSET ??_C@_0DD@NLMLLGBH@PMC_Multiply_X_L?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@
	mov	DWORD PTR _z_result$1$[ebp], eax
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	cmp	DWORD PTR _z_result$1$[ebp], ecx
	sete	cl
	push	eax
	push	ecx
	push	2
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@GFIEPCDE@PMC_Multiply_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	esi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 68   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_L (%d.%d)", no, 3), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	push	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edi+32]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	sete	cl
	push	eax
	push	ecx
	push	3
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@GFIEPCDE@PMC_Multiply_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$GSCopy$1$[ebp]
	call	_TEST_Assert

; 69   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _desired_z_buf$[ebp]
	cmp	edx, DWORD PTR _desired_z_buf_size$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN11@TEST_PMC_M
$LN12@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c

; 69   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	or	ecx, -1
	jmp	SHORT $LN5@TEST_PMC_M
$LN11@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	edx, edx
	je	SHORT $LN7@TEST_PMC_M
	lea	esi, DWORD PTR _actual_z_buf$[ebp]
	sub	esi, eax
$LL6@TEST_PMC_M:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	mov	cl, BYTE PTR [esi+eax]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN12@TEST_PMC_M

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	eax

; 111  :         --count1;

	sub	edx, 1
	jne	SHORT $LL6@TEST_PMC_M
$LN7@TEST_PMC_M:

; 112  :     }
; 113  :     return (0);

	xor	ecx, ecx
$LN5@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c

; 69   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	xor	eax, eax
	test	ecx, ecx
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	sete	al
	push	eax
	push	4
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@GFIEPCDE@PMC_Multiply_X_L?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$GSCopy$1$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 70   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$1$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_M

; 71   :         ep->PMC_Dispose(z);

	push	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN2@TEST_PMC_M:

; 72   :     if (x_result == PMC_STATUS_OK)

	test	ebx, ebx
	jne	SHORT $LN3@TEST_PMC_M

; 73   :         ep->PMC_Dispose(x);

	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN3@TEST_PMC_M:

; 74   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_Multiply_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c
;	COMDAT _TEST_PMC_Multiply_X_I
_TEXT	SEGMENT
_actual_z_buf_size$ = -284				; size = 4
_x$ = -280						; size = 4
_z$ = -276						; size = 4
_z_result$1$ = -272					; size = 4
_env$GSCopy$1$ = -268					; size = 4
_no$GSCopy$1$ = -264					; size = 4
_actual_z_buf$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 4
_desired_z_buf$ = 32					; size = 4
_desired_z_buf_size$ = 36				; size = 4
_TEST_PMC_Multiply_X_I PROC				; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _no$[ebp]

; 40   :     HANDLE x;
; 41   :     HANDLE z;
; 42   :     unsigned char actual_z_buf[256];
; 43   :     size_t actual_z_buf_size;
; 44   :     PMC_STATUS_CODE result;
; 45   :     PMC_STATUS_CODE x_result;
; 46   :     PMC_STATUS_CODE z_result;
; 47   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_I (%d.%d)", no, 1), (x_result = ep->PMC_From_B(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	lea	ecx, DWORD PTR _x$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _env$[ebp]
	push	edi
	mov	edi, DWORD PTR _ep$[ebp]
	push	ecx
	push	DWORD PTR _x_buf_size$[ebp]
	mov	DWORD PTR _no$GSCopy$1$[ebp], eax
	mov	eax, DWORD PTR _x_buf$[ebp]
	push	eax
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR _env$GSCopy$1$[ebp], esi
	call	eax
	mov	ebx, eax
	push	ebx
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	ebx, ebx
	sete	cl
	push	eax
	push	ecx
	push	1
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@IDKNDJHA@PMC_Multiply_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	esi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 48   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_I (%d.%d)", no, 2), (z_result = ep->PMC_Multiply_X_I(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage("PMC_Multiply_X_Iの復帰コードが期待通りではない(%d)", z_result));

	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	push	DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [edi+60]
	push	DWORD PTR _x$[ebp]
	call	eax
	push	eax
	push	OFFSET ??_C@_0DD@HGOLDKBF@PMC_Multiply_X_I?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK@
	mov	DWORD PTR _z_result$1$[ebp], eax
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	cmp	DWORD PTR _z_result$1$[ebp], ecx
	sete	cl
	push	eax
	push	ecx
	push	2
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@IDKNDJHA@PMC_Multiply_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	esi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 49   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_I (%d.%d)", no, 3), (result = ep->PMC_To_X_B(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage("PMC_To_X_Bの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	push	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edi+32]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CN@JELPCGPD@PMC_To_X_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	add	esp, 8
	xor	ecx, ecx
	test	esi, esi
	sete	cl
	push	eax
	push	ecx
	push	3
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@IDKNDJHA@PMC_Multiply_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$GSCopy$1$[ebp]
	call	_TEST_Assert

; 50   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _desired_z_buf$[ebp]
	cmp	edx, DWORD PTR _desired_z_buf_size$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 103  :     if (count1 != count2)

	je	SHORT $LN11@TEST_PMC_M
$LN12@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c

; 50   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	or	ecx, -1
	jmp	SHORT $LN5@TEST_PMC_M
$LN11@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_debug.h

; 105  :     while (count1 > 0)

	test	edx, edx
	je	SHORT $LN7@TEST_PMC_M
	lea	esi, DWORD PTR _actual_z_buf$[ebp]
	sub	esi, eax
$LL6@TEST_PMC_M:

; 106  :     {
; 107  :         if (*buffer1 != *buffer2)

	mov	cl, BYTE PTR [esi+eax]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN12@TEST_PMC_M

; 108  :             return (-1);
; 109  :         ++buffer1;
; 110  :         ++buffer2;

	inc	eax

; 111  :         --count1;

	sub	edx, 1
	jne	SHORT $LL6@TEST_PMC_M
$LN7@TEST_PMC_M:

; 112  :     }
; 113  :     return (0);

	xor	ecx, ecx
$LN5@TEST_PMC_M:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_multiply.c

; 50   :     TEST_Assert(env, FormatTestLabel("PMC_Multiply_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, "データの内容が一致しない");

	xor	eax, eax
	test	ecx, ecx
	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	sete	al
	push	eax
	push	4
	push	DWORD PTR _no$GSCopy$1$[ebp]
	push	OFFSET ??_C@_0BJ@IDKNDJHA@PMC_Multiply_X_I?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$GSCopy$1$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 51   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$1$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_M

; 52   :         ep->PMC_Dispose(z);

	push	DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN2@TEST_PMC_M:

; 53   :     if (x_result == PMC_STATUS_OK)

	test	ebx, ebx
	jne	SHORT $LN3@TEST_PMC_M

; 54   :         ep->PMC_Dispose(x);

	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edi+20]
	call	eax
$LN3@TEST_PMC_M:

; 55   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_Multiply_X_I ENDP
_TEXT	ENDS
END
