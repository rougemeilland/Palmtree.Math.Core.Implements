; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\TEST_op_ToStringN.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_TEST_PMC_ToStringN
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL@			; `string'
PUBLIC	??_C@_13IMODFHAA@?$AA?9@			; `string'
PUBLIC	??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ ; `string'
PUBLIC	??_C@_0BG@FGBECKFO@PMC_ToStringN?5?$CI?$CFd?4?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0CP@LPHACLNN@PMC_ToString?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC@ ; `string'
PUBLIC	??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ ; `string'
EXTRN	__imp__lstrcmpW@8:PROC
EXTRN	__imp__lstrcpyA@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?actual_str_buffer@?1??TEST_PMC_ToStringN@@9@9 DW 01000H DUP (?) ; `TEST_PMC_ToStringN'::`2'::actual_str_buffer
_BSS	ENDS
;	COMDAT ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
CONST	SEGMENT
??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@ DB 083H
	DB	'f', 081H, '[', 083H, '^', 082H, 0ccH, 093H, 0e0H, 097H, 'e', 082H
	DB	0aaH, 088H, 0eaH, 092H, 'v', 082H, 0b5H, 082H, 0c8H, 082H, 0a2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LPHACLNN@PMC_ToString?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC@
CONST	SEGMENT
??_C@_0CP@LPHACLNN@PMC_ToString?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC@ DB 'P'
	DB	'MC_ToString', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FGBECKFO@PMC_ToStringN?5?$CI?$CFd?4?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BG@FGBECKFO@PMC_ToStringN?5?$CI?$CFd?4?$CFd?$CJ@ DB 'PMC_ToStringN'
	DB	' (%d.%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
CONST	SEGMENT
??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@ DB 'P'
	DB	'MC_From_B', 082H, 0ccH, 095H, 09cH, 08bH, 'A', 083H, 'R', 081H
	DB	'[', 083H, 'h', 082H, 0aaH, 08aH, 0faH, 091H, 0d2H, 092H, 0caH
	DB	082H, 0e8H, 082H, 0c5H, 082H, 0cdH, 082H, 0c8H, 082H, 0a2H, '('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13IMODFHAA@?$AA?9@
CONST	SEGMENT
??_C@_13IMODFHAA@?$AA?9@ DB '-', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL@ DB '+', 00H, 00H, 00H	; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\test_op_tostringn.c
;	COMDAT _TEST_PMC_ToStringN
_TEXT	SEGMENT
_desired_str$GSCopy$1$ = -68				; size = 4
_no$GSCopy$1$ = -64					; size = 4
_buf$GSCopy$1$ = -60					; size = 4
_ep$GSCopy$1$ = -56					; size = 4
_x$ = -52						; size = 4
_env$GSCopy$1$ = -48					; size = 4
_opt$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_buf$ = 20						; size = 4
_buf_size$ = 24						; size = 4
_format_spec$ = 28					; size = 1
_width$ = 32						; size = 4
_group_separator$ = 36					; size = 4
_group_sizes$ = 40					; size = 4
_decimal_separator$ = 44				; size = 4
_decimal_digits$ = 48					; size = 4
_desired_str$ = 52					; size = 4
_TEST_PMC_ToStringN PROC				; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR _desired_str$[ebp]
	mov	DWORD PTR _env$GSCopy$1$[ebp], eax
	mov	eax, DWORD PTR _ep$[ebp]
	push	ebx

; 40   :     HANDLE x;
; 41   :     static wchar_t actual_str_buffer[4096];
; 42   :     PMC_STATUS_CODE result;
; 43   :     PMC_STATUS_CODE x_result;
; 44   :     PMC_NUMBER_FORMAT_OPTION opt;
; 45   :     lstrcpyW(opt.GroupSeparator, group_separator);

	mov	ebx, DWORD PTR __imp__lstrcpyW@8
	mov	DWORD PTR _ep$GSCopy$1$[ebp], eax
	mov	eax, DWORD PTR _no$[ebp]
	push	esi
	mov	esi, DWORD PTR _group_sizes$[ebp]
	mov	DWORD PTR _no$GSCopy$1$[ebp], eax
	mov	eax, DWORD PTR _buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _decimal_separator$[ebp]
	mov	DWORD PTR _buf$GSCopy$1$[ebp], eax
	mov	eax, DWORD PTR _group_separator$[ebp]
	push	eax
	lea	eax, DWORD PTR _opt$[ebp+4]
	mov	DWORD PTR _desired_str$GSCopy$1$[ebp], ecx
	push	eax
	call	ebx

; 46   :     lstrcpy(opt.GroupSizes, group_sizes);

	push	esi
	lea	eax, DWORD PTR _opt$[ebp+28]
	push	eax
	call	DWORD PTR __imp__lstrcpyA@8

; 47   :     lstrcpyW(opt.DecimalSeparator, decimal_separator);

	push	edi
	lea	eax, DWORD PTR _opt$[ebp+10]
	push	eax
	call	ebx

; 48   :     opt.DecimalDigits = decimal_digits;

	mov	eax, DWORD PTR _decimal_digits$[ebp]
	mov	DWORD PTR _opt$[ebp], eax

; 49   :     lstrcpyW(opt.PositiveSign, L"+");

	lea	eax, DWORD PTR _opt$[ebp+16]
	push	OFFSET ??_C@_13KJIIAINM@?$AA?$CL@
	push	eax
	call	ebx

; 50   :     lstrcpyW(opt.NegativeSign, L"-");

	push	OFFSET ??_C@_13IMODFHAA@?$AA?9@
	lea	eax, DWORD PTR _opt$[ebp+22]
	push	eax
	call	ebx

; 51   :     TEST_Assert(env, FormatTestLabel("PMC_ToStringN (%d.%d)", no, 1), (x_result = ep->PMC_From_B(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage("PMC_From_Bの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, DWORD PTR _ep$GSCopy$1$[ebp]
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	DWORD PTR _buf_size$[ebp]
	push	DWORD PTR _buf$GSCopy$1$[ebp]
	mov	eax, DWORD PTR [esi+16]
	call	eax
	mov	edi, eax
	push	edi
	push	OFFSET ??_C@_0CN@LDAEIIBE@PMC_From_B?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC?J?$IC@
	call	_FormatTestMesssage
	mov	ebx, DWORD PTR _no$GSCopy$1$[ebp]
	add	esp, 8
	xor	ecx, ecx
	test	edi, edi
	sete	cl
	push	eax
	push	ecx
	push	1
	push	ebx
	push	OFFSET ??_C@_0BG@FGBECKFO@PMC_ToStringN?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	DWORD PTR _env$GSCopy$1$[ebp]
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 52   :     TEST_Assert(env, FormatTestLabel("PMC_ToStringN (%d.%d)", no, 2), (result = ep->PMC_ToString(x, actual_str_buffer, sizeof(actual_str_buffer), format_spec, width, &opt)) == PMC_STATUS_OK, FormatTestMesssage("PMC_ToStringの復帰コードが期待通りではない(%d)", result));

	lea	eax, DWORD PTR _opt$[ebp]
	push	eax
	push	DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR [esi+160]
	push	DWORD PTR _format_spec$[ebp]
	push	8192					; 00002000H
	push	OFFSET ?actual_str_buffer@?1??TEST_PMC_ToStringN@@9@9
	push	DWORD PTR _x$[ebp]
	call	eax
	mov	esi, eax
	push	esi
	push	OFFSET ??_C@_0CP@LPHACLNN@PMC_ToString?$IC?L?$JF?$JM?$ILA?$IDR?$IB?$FL?$IDh?$IC?$KK?$IK?z?$JB?R?$JC@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	xor	ecx, ecx
	test	esi, esi
	sete	cl
	push	ecx
	push	2
	push	ebx
	push	OFFSET ??_C@_0BG@FGBECKFO@PMC_ToStringN?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	mov	esi, DWORD PTR _env$GSCopy$1$[ebp]
	add	esp, 12					; 0000000cH
	push	eax
	push	esi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 53   :     TEST_Assert(env, FormatTestLabel("PMC_ToStringN (%d.%d)", no, 3), lstrcmpW(actual_str_buffer, desired_str) == 0, "データの内容が一致しない");

	push	OFFSET ??_C@_0BJ@JGINKGIA@?$IDf?$IB?$FL?$ID?$FO?$IC?L?$JD?$OA?$JHe?$IC?$KK?$II?j?$JCv?$IC?$LF?$IC?H?$IC?$KC@
	push	DWORD PTR _desired_str$GSCopy$1$[ebp]
	push	OFFSET ?actual_str_buffer@?1??TEST_PMC_ToStringN@@9@9
	call	DWORD PTR __imp__lstrcmpW@8
	neg	eax
	sbb	eax, eax
	inc	eax
	push	eax
	push	3
	push	ebx
	push	OFFSET ??_C@_0BG@FGBECKFO@PMC_ToStringN?5?$CI?$CFd?4?$CFd?$CJ@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	push	esi
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 54   :     if (x_result == PMC_STATUS_OK)

	test	edi, edi
	pop	edi
	pop	esi
	pop	ebx
	jne	SHORT $LN2@TEST_PMC_T

; 55   :         ep->PMC_Dispose(x);

	mov	eax, DWORD PTR _ep$GSCopy$1$[ebp]
	push	DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax+20]
	call	eax
$LN2@TEST_PMC_T:

; 56   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_PMC_ToStringN ENDP
_TEXT	ENDS
END
