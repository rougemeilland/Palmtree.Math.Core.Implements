; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\nbproject\private\cpp_standard_headers_indexer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
EXTRN	__imp__calloc:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

	push	ebp
	mov	ebp, esp
	push	esi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

	mov	esi, DWORD PTR __Ptr$[ebp]
	push	edi
	mov	edi, esi
	lea	ecx, DWORD PTR [edi+1]
	npad	3
$LL11@Maklocstr:
	mov	al, BYTE PTR [edi]
	inc	edi
	test	al, al
	jne	SHORT $LL11@Maklocstr
	sub	edi, ecx
	inc	edi

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

	push	1
	push	edi
	call	DWORD PTR __imp__calloc
	mov	edx, eax
	add	esp, 8

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

	test	edx, edx
	je	SHORT $LN14@Maklocstr

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

	test	edi, edi
	je	SHORT $LN3@Maklocstr
	mov	ecx, edx
	sub	ecx, esi
$LL4@Maklocstr:

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

	mov	al, BYTE PTR [esi]
	lea	esi, DWORD PTR [esi+1]
	mov	BYTE PTR [ecx+esi-1], al
	sub	edi, 1
	jne	SHORT $LL4@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

	pop	edi
	mov	eax, edx
	pop	esi

; 677  : 	}

	pop	ebp
	ret	0
$LN14@Maklocstr:

; 671  : 		_Xbad_alloc();

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN12@Maklocstr:
	int	3
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR __Lobj$[ebp]

; 217  : 		_Cvt = _Lobj._Getcvt();

	lea	eax, DWORD PTR $T1[ebp]
	push	edi
	mov	edi, ecx
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)
; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

	mov	ecx, esi
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [edi+24], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [edi+40], xmm0
	movq	xmm0, QWORD PTR [eax+32]
	movq	QWORD PTR [edi+56], xmm0
	mov	eax, DWORD PTR [eax+40]
	mov	DWORD PTR [edi+64], eax
	call	DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
	push	eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs
	add	esp, 4
	mov	DWORD PTR [edi+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

	mov	ecx, esi
	call	DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
	push	eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

	push	OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
	mov	DWORD PTR [edi+12], eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs

; 224  : 			}
; 225  : 		else
; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);
; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);
; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);
; 230  : 			}
; 231  : 		}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	DWORD PTR [edi+16], eax
	xor	ecx, ebp
	pop	edi
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR __Lobj$[ebp]

; 217  : 		_Cvt = _Lobj._Getcvt();

	lea	eax, DWORD PTR $T1[ebp]
	push	edi
	mov	edi, ecx
	mov	ecx, esi
	push	eax
	call	DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)
; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

	mov	ecx, esi
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [edi+24], xmm0
	movups	xmm0, XMMWORD PTR [eax+16]
	movups	XMMWORD PTR [edi+40], xmm0
	movq	xmm0, QWORD PTR [eax+32]
	movq	QWORD PTR [edi+56], xmm0
	mov	eax, DWORD PTR [eax+40]
	mov	DWORD PTR [edi+64], eax
	call	DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
	push	eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs
	add	esp, 4
	mov	DWORD PTR [edi+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

	mov	ecx, esi
	call	DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
	push	eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

	push	OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
	mov	DWORD PTR [edi+12], eax
	call	?_Maklocwcs@std@@YAPA_WPB_W@Z		; std::_Maklocwcs

; 224  : 			}
; 225  : 		else
; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);
; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);
; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);
; 230  : 			}
; 231  : 		}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 8
	mov	DWORD PTR [edi+16], eax
	xor	ecx, ebp
	pop	edi
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

	push	ebp
	mov	ebp, esp

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [eax+2]
	npad	7
$LL6@Maklocwcs:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL6@Maklocwcs
	sub	eax, edx
	push	ebx
	sar	eax, 1
	push	esi

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

	push	2
	lea	ebx, DWORD PTR [eax+1]
	push	ebx
	call	DWORD PTR __imp__calloc
	mov	esi, eax
	add	esp, 8

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

	test	esi, esi
	je	SHORT $LN9@Maklocwcs
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	eax, DWORD PTR [ebx+ebx]
	push	eax
	push	DWORD PTR __Ptr$[ebp]
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum

; 106  : 	return (_Ptrdest);

	mov	eax, esi
	pop	esi
	pop	ebx

; 107  : 	}

	pop	ebp
	ret	0
$LN9@Maklocwcs:

; 104  : 		_Xbad_alloc();

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN7@Maklocwcs:
	int	3
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -24						; size = 8
__Mbst1$ = -16						; size = 8
__Count1$1$ = -8					; size = 4
__Wc$ = -4						; size = 2
__Ptrdest$1$ = 8					; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};
; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

	mov	ebx, DWORD PTR __Ptr$[ebp]
	xorps	xmm0, xmm0
	mov	ecx, ebx
	movlpd	QWORD PTR __Mbst1$[ebp], xmm0
	push	esi
	push	edi
	lea	edx, DWORD PTR [ecx+1]
	npad	7
$LL22@Maklocstr:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL22@Maklocstr
	sub	ecx, edx

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

	xor	esi, esi
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR __Count1$1$[ebp], eax
	mov	edi, eax
	test	eax, eax
	je	SHORT $LN14@Maklocstr
$LL4@Maklocstr:

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

	push	DWORD PTR __Cvt$[ebp]
	lea	eax, DWORD PTR __Mbst1$[ebp]
	push	eax
	push	edi
	lea	eax, DWORD PTR __Wc$[ebp]
	push	ebx
	push	eax
	call	__Mbrtowc
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	SHORT $LN23@Maklocstr

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

	add	ebx, eax
	inc	esi
	sub	edi, eax
	jne	SHORT $LL4@Maklocstr
$LN23@Maklocstr:
	mov	ebx, DWORD PTR __Ptr$[ebp]
$LN14@Maklocstr:

; 694  : 			break;
; 695  : 	++_Wchars;	// count terminating nul

	inc	esi

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

	push	2
	push	esi
	call	DWORD PTR __imp__calloc
	add	esp, 8
	mov	DWORD PTR __Ptrdest$1$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

	test	eax, eax
	je	SHORT $LN27@Maklocstr

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

	xorps	xmm0, xmm0
	mov	edi, eax

; 703  : 	mbstate_t _Mbst2 = {};

	movlpd	QWORD PTR __Mbst2$[ebp], xmm0

; 704  : 
; 705  : 	for (; 0 < _Wchars;

	test	esi, esi
	je	SHORT $LN15@Maklocstr
	npad	4
$LL7@Maklocstr:

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

	push	DWORD PTR __Cvt$[ebp]
	lea	eax, DWORD PTR __Mbst2$[ebp]
	push	eax
	push	DWORD PTR __Count1$1$[ebp]
	push	ebx
	push	edi
	call	__Mbrtowc
	add	esp, 20					; 00000014H
	test	eax, eax
	jle	SHORT $LN24@Maklocstr

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

	add	ebx, eax
	add	edi, 2
	sub	esi, 1
	jne	SHORT $LL7@Maklocstr
$LN24@Maklocstr:
	mov	eax, DWORD PTR __Ptrdest$1$[ebp]
$LN15@Maklocstr:

; 708  : 			break;
; 709  : 	*_Ptrnext = L'\0';

	xor	ecx, ecx
	mov	WORD PTR [edi], cx

; 710  : 
; 711  : 	return (_Ptrdest);

	pop	edi
	pop	esi
	pop	ebx

; 712  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@Maklocstr:

; 701  : 		_Xbad_alloc();

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN25@Maklocstr:
	int	3
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

	push	ebp
	mov	ebp, esp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __N$[ebp]
	add	eax, eax
	mov	DWORD PTR __N$[ebp], eax

; 234  :         #pragma warning(pop)
; 235  :     }

	pop	ebp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	jmp	_memcpy
_wmemcpy ENDP
_TEXT	ENDS
END
