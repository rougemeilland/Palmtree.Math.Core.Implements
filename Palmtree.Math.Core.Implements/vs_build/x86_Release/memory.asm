; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\memory.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_number_zero:BYTE:01cH
COMM	_hLocalHeap:DWORD
_DATA	ENDS
PUBLIC	_AllocateHeapArea
PUBLIC	_DeallocateHeapArea
PUBLIC	_AllocateBlock
PUBLIC	_DeallocateBlock
PUBLIC	_CheckBlockLight
PUBLIC	_AttatchNumber
PUBLIC	_AllocateNumber
PUBLIC	_DetatchNumber
PUBLIC	_DeallocateNumber
PUBLIC	_CommitNumber
PUBLIC	_CheckNumber
PUBLIC	_DuplicateNumber
PUBLIC	_Initialize_Memory
PUBLIC	_PMC_Dispose@4
EXTRN	__imp__HeapCreate@12:PROC
EXTRN	__imp__HeapDestroy@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _GetTrailingZeroBitCount
_TEXT	SEGMENT
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_GetTrailingZeroBitCount PROC				; COMDAT

; 449  : {

	push	ebp
	mov	ebp, esp

; 450  :     __UNIT_TYPE bit_count = 0;
; 451  :     while (word_count > 0)

	mov	eax, DWORD PTR _word_count$[ebp]
	xor	edx, edx
	push	esi
	test	eax, eax
	je	SHORT $LN3@GetTrailin
	mov	ecx, DWORD PTR _p$[ebp]
$LL2@GetTrailin:

; 452  :     {
; 453  :         --word_count;
; 454  :         if (*p != 0)

	mov	esi, DWORD PTR [ecx]
	dec	eax
	test	esi, esi
	jne	SHORT $LN10@GetTrailin

; 456  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	add	edx, 32					; 00000020H

; 457  :         ++p;

	add	ecx, 4
	test	eax, eax
	jne	SHORT $LL2@GetTrailin
$LN3@GetTrailin:

; 458  :     }
; 459  :     // このルートには到達しないはず
; 460  :     return (0);

	xor	eax, eax
	pop	esi

; 461  : }

	pop	ebp
	ret	0
$LN10@GetTrailin:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 975  :     _BitScanForward(&pos, x);

	bsf	eax, esi
	pop	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 455  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	add	eax, edx

; 461  : }

	pop	ebp
	ret	0
_GetTrailingZeroBitCount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _GetEffectiveBitLength
_TEXT	SEGMENT
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_effective_word_count$ = 16				; size = 4
_GetEffectiveBitLength PROC				; COMDAT

; 427  : {

	push	ebp
	mov	ebp, esp

; 428  :     if (p == NULL)

	mov	eax, DWORD PTR _p$[ebp]
	test	eax, eax
	je	SHORT $LN3@GetEffecti

; 429  :     {
; 430  :         *effective_word_count = 0;
; 431  :         return (0);
; 432  :     }
; 433  :     p += word_count;

	mov	edx, DWORD PTR _word_count$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]

; 434  :     while (word_count != 0)

	test	edx, edx
	je	SHORT $LN3@GetEffecti
$LL2@GetEffecti:

; 435  :     {
; 436  :         --p;
; 437  :         if (*p != 0)

	cmp	DWORD PTR [ecx-4], 0
	lea	ecx, DWORD PTR [ecx-4]
	jne	SHORT $LN11@GetEffecti

; 441  :         }
; 442  :         --word_count;

	sub	edx, 1
	jne	SHORT $LL2@GetEffecti
$LN3@GetEffecti:

; 443  :     }
; 444  :     *effective_word_count = 0;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [eax], 0

; 445  :     return (0);

	xor	eax, eax

; 446  : }

	pop	ebp
	ret	0
$LN11@GetEffecti:

; 438  :         {
; 439  :             *effective_word_count = word_count;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [eax], edx

; 440  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 890  :     if (x == 0)

	test	eax, eax
	jne	SHORT $LN8@GetEffecti

; 891  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 440  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	edx, 5
	sub	edx, eax
	mov	eax, edx

; 446  : }

	pop	ebp
	ret	0
$LN8@GetEffecti:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 895  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 914  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 440  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	edx, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 914  :     return (sizeof(x) * 8 - 1 - pos);

	sub	eax, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 440  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	sub	edx, eax
	mov	eax, edx

; 446  : }

	pop	ebp
	ret	0
_GetEffectiveBitLength ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _CleanUpNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CleanUpNumber PROC					; COMDAT

; 380  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 381  :     if (p->BLOCK != NULL)

	mov	esi, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN2@CleanUpNum

; 382  :     {
; 383  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR [esi+20]

; 205  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 206  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN7@CleanUpNum

; 207  :         {
; 208  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 209  :         }
; 210  :         else
; 211  :         {
; 212  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 213  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN7@CleanUpNum:

; 384  :         p->BLOCK = NULL;

	mov	DWORD PTR [esi+24], 0
$LN2@CleanUpNum:
	pop	esi

; 385  :     }
; 386  : }

	pop	ebp
	ret	0
_CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _InitializeNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_InitializeNumber PROC					; COMDAT

; 357  : {

	push	ebp
	mov	ebp, esp
	push	ebx

; 358  :     ClearNumberHeader(p);
; 359  :     if (bit_count > 0)

	mov	ebx, DWORD PTR _bit_count$[ebp]
	push	esi

; 296  :             __p[0] = 0;

	mov	esi, DWORD PTR _p$[ebp]

; 357  : {

	push	edi

; 296  :             __p[0] = 0;

	mov	DWORD PTR [esi], 0

; 297  :             __p[1] = 0;

	mov	DWORD PTR [esi+4], 0

; 298  :             __p[2] = 0;

	mov	DWORD PTR [esi+8], 0

; 299  :             __p[3] = 0;

	mov	DWORD PTR [esi+12], 0

; 300  :             __p[4] = 0;

	mov	DWORD PTR [esi+16], 0

; 301  :             __p[5] = 0;

	mov	DWORD PTR [esi+20], 0

; 302  :             __p[6] = 0;

	mov	DWORD PTR [esi+24], 0

; 358  :     ClearNumberHeader(p);
; 359  :     if (bit_count > 0)

	test	ebx, ebx
	je	SHORT $LN2@Initialize
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return ((u + v - 1) / v);

	lea	edi, DWORD PTR [ebx+31]
	shr	edi, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 167  : 	__UNIT_TYPE bytes = words2 * __UNIT_TYPE_BYTE_COUNT;

	lea	eax, DWORD PTR [edi*4+8]

; 168  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	push	eax
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12

; 169  : 	if (buffer == NULL)

	test	eax, eax
	je	SHORT $LN26@Initialize

; 170  : 		return (NULL);
; 171  : 	buffer[0] = words1;
; 172  :     *allocated_block_words = words1;
; 173  : #ifdef _DEBUG
; 174  :     // 乱数もどきを生成する。
; 175  : #ifdef _M_IX86
; 176  :     __UNIT_TYPE r = GetTickCount();
; 177  : #elif defined(_M_IX64)
; 178  : #ifdef _MSC_VER
; 179  :     __UNIT_TYPE r = GetTickCount64();
; 180  : #elif defined(__GNUC__)
; 181  :     _UINT32_T temp = GetTickCount();
; 182  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 183  : #else
; 184  : #error unknown compiler
; 185  : #endif
; 186  : #else
; 187  : #error unknown platform
; 188  : #endif
; 189  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;
; 190  : #else
; 191  :     __UNIT_TYPE check_code = 0;
; 192  : #endif
; 193  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	lea	ecx, DWORD PTR [edi+1]
	mov	DWORD PTR [eax], edi
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx], ecx

; 194  :     if (code != NULL)

	mov	ecx, DWORD PTR _light_check_code$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@Initialize

; 195  :         *code = check_code;

	mov	DWORD PTR [ecx], 0
$LN22@Initialize:

; 196  :     return (&buffer[1]);

	add	eax, 4

; 360  :     {
; 361  :         __UNIT_TYPE word_count;
; 362  :         __UNIT_TYPE* block = AllocateBlock(bit_count, &word_count, light_check_code);
; 363  :         if (block == NULL)

	jne	SHORT $LN3@Initialize
$LN26@Initialize:
	pop	edi

; 377  : }

	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	pop	ebp
	ret	0
$LN2@Initialize:

; 364  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 365  :         p->UNIT_BIT_COUNT = bit_count;
; 366  :         p->BLOCK_COUNT = word_count;
; 367  :         p->BLOCK = block;
; 368  :     }
; 369  :     else
; 370  :     {
; 371  :         // bit_count に 0 が与えられるのは、数値が 0 の場合。
; 372  :         p->UNIT_BIT_COUNT = 0;
; 373  :         p->BLOCK_COUNT = 0;
; 374  :         p->BLOCK = NULL;

	xor	eax, eax
	xor	edi, edi
	xor	ebx, ebx
$LN3@Initialize:

; 375  :     }
; 376  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+20], edi
	pop	edi
	mov	DWORD PTR [esi+24], eax
	xor	eax, eax

; 377  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _FillNumberHeader
_TEXT	SEGMENT
_p$ = 8							; size = 4
_FillNumberHeader PROC					; COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp

; 317  : #ifdef _M_IX64
; 318  :     if (sizeof(*p) == sizeof(_UINT64_T) * 7)
; 319  :     {
; 320  :         _UINT64_T* __p = (_UINT64_T*)p;
; 321  :         __p[0] = DEFAULT_MEMORY_DATA;
; 322  :         __p[1] = DEFAULT_MEMORY_DATA;
; 323  :         __p[2] = DEFAULT_MEMORY_DATA;
; 324  :         __p[3] = DEFAULT_MEMORY_DATA;
; 325  :         __p[4] = DEFAULT_MEMORY_DATA;
; 326  :         __p[5] = DEFAULT_MEMORY_DATA;
; 327  :         __p[6] = DEFAULT_MEMORY_DATA;
; 328  :     }
; 329  :     else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 330  :         _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));
; 331  :     else
; 332  :     {
; 333  : #endif
; 334  :         if (sizeof(*p) == sizeof(_UINT32_T) * 7)
; 335  :         {
; 336  :             _UINT32_T* __p = (_UINT32_T*)p;
; 337  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], -858993460		; ccccccccH

; 338  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+4], -858993460		; ccccccccH

; 339  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+8], -858993460		; ccccccccH

; 340  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+12], -858993460		; ccccccccH

; 341  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+16], -858993460		; ccccccccH

; 342  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+20], -858993460		; ccccccccH

; 343  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+24], -858993460		; ccccccccH

; 344  :         }
; 345  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)
; 346  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));
; 347  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)
; 348  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));
; 349  :         else
; 350  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));
; 351  : #ifdef _M_IX64
; 352  :     }
; 353  : #endif
; 354  : }

	pop	ebp
	ret	0
_FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _ClearNumberHeader
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ClearNumberHeader PROC					; COMDAT

; 275  : {

	push	ebp
	mov	ebp, esp

; 276  : #ifdef _M_IX64
; 277  :     if (sizeof(*p) == sizeof(_UINT64_T) * 7)
; 278  :     {
; 279  :         _UINT64_T* __p = (_UINT64_T*)p;
; 280  :         __p[0] = 0;
; 281  :         __p[1] = 0;
; 282  :         __p[2] = 0;
; 283  :         __p[3] = 0;
; 284  :         __p[4] = 0;
; 285  :         __p[5] = 0;
; 286  :         __p[6] = 0;
; 287  :     }
; 288  :     else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 289  :         _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));
; 290  :     else
; 291  :     {
; 292  : #endif
; 293  :         if (sizeof(*p) == sizeof(_UINT32_T) * 7)
; 294  :         {
; 295  :             _UINT32_T* __p = (_UINT32_T*)p;
; 296  :             __p[0] = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0

; 297  :             __p[1] = 0;

	mov	DWORD PTR [eax+4], 0

; 298  :             __p[2] = 0;

	mov	DWORD PTR [eax+8], 0

; 299  :             __p[3] = 0;

	mov	DWORD PTR [eax+12], 0

; 300  :             __p[4] = 0;

	mov	DWORD PTR [eax+16], 0

; 301  :             __p[5] = 0;

	mov	DWORD PTR [eax+20], 0

; 302  :             __p[6] = 0;

	mov	DWORD PTR [eax+24], 0

; 303  :         }
; 304  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)
; 305  :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));
; 306  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)
; 307  :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));
; 308  :         else
; 309  :             _ZERO_MEMORY_BYTE(p, sizeof(*p));
; 310  : #ifdef _M_IX64
; 311  :     }
; 312  : #endif
; 313  : }

	pop	ebp
	ret	0
_ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _CommitBlock
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_CommitBlock PROC					; COMDAT

; 222  : {

	push	ebp
	mov	ebp, esp

; 223  :     if (buffer != NULL)

	mov	ecx, DWORD PTR _buffer$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@CommitBloc

; 224  :     {
; 225  :         --buffer;
; 226  :         __UNIT_TYPE words = buffer[0];
; 227  : #ifdef _DEBUG
; 228  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);
; 229  : #else
; 230  :         __UNIT_TYPE code = 0;
; 231  : #endif
; 232  :         buffer[words + 1] = code;

	mov	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR [ecx+eax*4], 0
$LN2@CommitBloc:

; 233  :     }
; 234  : }

	pop	ebp
	ret	0
_CommitBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _CalculateCheckCode
_TEXT	SEGMENT
_p$ = 8							; size = 4
_words$ = 12						; size = 4
_CalculateCheckCode PROC				; COMDAT

; 57   : {

	push	ebp
	mov	ebp, esp

; 58   : 	__UNIT_TYPE code = CHECK_CODE_INIT;
; 59   : 	
; 60   :     __UNIT_TYPE count = words >> 5;
; 61   : 	while (count != 0)

	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, -2071690108			; 84848484H
	push	ebx
	mov	ebx, DWORD PTR _words$[ebp]
	mov	edx, ebx
	shr	edx, 5
	test	edx, edx
	je	$LN3@CalculateC
	npad	4
$LL2@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 63   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 64   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 65   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 66   :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 67   :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 68   :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 69   :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 70   :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 71   :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	xor	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 72   :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	xor	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 73   :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	xor	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 74   :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	xor	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 75   :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	xor	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 76   :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	xor	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 77   :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	xor	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 78   :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	xor	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 79   :         code = _ROTATE_L_UNIT(code, 3) ^ p[16];

	xor	eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 80   :         code = _ROTATE_L_UNIT(code, 3) ^ p[17];

	xor	eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 81   :         code = _ROTATE_L_UNIT(code, 3) ^ p[18];

	xor	eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 82   :         code = _ROTATE_L_UNIT(code, 3) ^ p[19];

	xor	eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 83   :         code = _ROTATE_L_UNIT(code, 3) ^ p[20];

	xor	eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 84   :         code = _ROTATE_L_UNIT(code, 3) ^ p[21];

	xor	eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 85   :         code = _ROTATE_L_UNIT(code, 3) ^ p[22];

	xor	eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 86   :         code = _ROTATE_L_UNIT(code, 3) ^ p[23];

	xor	eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 87   :         code = _ROTATE_L_UNIT(code, 3) ^ p[24];

	xor	eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 88   :         code = _ROTATE_L_UNIT(code, 3) ^ p[25];

	xor	eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 89   :         code = _ROTATE_L_UNIT(code, 3) ^ p[26];

	xor	eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 90   :         code = _ROTATE_L_UNIT(code, 3) ^ p[27];

	xor	eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 91   :         code = _ROTATE_L_UNIT(code, 3) ^ p[28];

	xor	eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 92   :         code = _ROTATE_L_UNIT(code, 3) ^ p[29];

	xor	eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 93   :         code = _ROTATE_L_UNIT(code, 3) ^ p[30];

	xor	eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 94   :         code = _ROTATE_L_UNIT(code, 3) ^ p[31];

	xor	eax, DWORD PTR [ecx+124]

; 95   :         p += 32;

	sub	ecx, -128				; ffffff80H

; 96   :         --count;

	sub	edx, 1
	jne	$LL2@CalculateC
$LN3@CalculateC:

; 97   :     }
; 98   : 
; 99   : 	if (words & 0x10)

	test	bl, 16					; 00000010H
	je	SHORT $LN4@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 101  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 102  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 103  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 104  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 105  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 106  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 107  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 108  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 109  :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	xor	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 110  :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	xor	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 111  :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	xor	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 112  :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	xor	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 113  :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	xor	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 114  :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	xor	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 115  :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	xor	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 116  :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	xor	eax, DWORD PTR [ecx+60]

; 117  :         p += 16;

	add	ecx, 64					; 00000040H
$LN4@CalculateC:

; 118  :     }
; 119  : 
; 120  :     if (words & 0x8)

	test	bl, 8
	je	SHORT $LN5@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 122  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 123  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 124  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 125  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 126  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 127  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 128  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 129  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	eax, DWORD PTR [ecx+28]

; 130  :         p += 8;

	add	ecx, 32					; 00000020H
$LN5@CalculateC:

; 131  :     }
; 132  : 
; 133  :     if (words & 0x4)

	test	bl, 4
	je	SHORT $LN6@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 135  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 136  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 137  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 138  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	eax, DWORD PTR [ecx+12]

; 139  :         p += 4;

	add	ecx, 16					; 00000010H
$LN6@CalculateC:

; 140  :     }
; 141  : 
; 142  :     if (words & 0x2)

	test	bl, 2
	je	SHORT $LN7@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 144  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 145  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]

; 146  :         p += 2;

	add	ecx, 8
$LN7@CalculateC:

; 147  :     }
; 148  : 
; 149  :     if (words & 0x1)

	test	bl, 1
	pop	ebx
	je	SHORT $LN8@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 743  :     return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 150  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
$LN8@CalculateC:

; 151  :     
; 152  :     return (code);
; 153  : }

	pop	ebp
	ret	0
_CalculateCheckCode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __TZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC					; COMDAT

; 969  : {

	push	ebp
	mov	ebp, esp

; 970  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@TZCNT_ALT_

; 971  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 976  : #elif defined(__GNUC__)
; 977  :     __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 978  : #else
; 979  : #error unknown compiler
; 980  : #endif
; 981  : #elif defined(_M_X64)
; 982  : #ifdef _MSC_VER
; 983  :     _UINT32_T pos;
; 984  :     _BitScanForward64(&pos, x);
; 985  : #elif defined(__GNUC__)
; 986  :     _UINT64_T pos;
; 987  :     __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 988  : #else
; 989  : #error unknown compiler
; 990  : #endif
; 991  : #else
; 992  : #error unknown platform
; 993  : #endif
; 994  :     return (pos);
; 995  : }

	pop	ebp
	ret	0
$LN2@TZCNT_ALT_:

; 972  : #ifdef _M_IX86
; 973  :     _UINT32_T pos;
; 974  : #ifdef _MSC_VER
; 975  :     _BitScanForward(&pos, x);

	bsf	eax, eax

; 976  : #elif defined(__GNUC__)
; 977  :     __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 978  : #else
; 979  : #error unknown compiler
; 980  : #endif
; 981  : #elif defined(_M_X64)
; 982  : #ifdef _MSC_VER
; 983  :     _UINT32_T pos;
; 984  :     _BitScanForward64(&pos, x);
; 985  : #elif defined(__GNUC__)
; 986  :     _UINT64_T pos;
; 987  :     __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 988  : #else
; 989  : #error unknown compiler
; 990  : #endif
; 991  : #else
; 992  : #error unknown platform
; 993  : #endif
; 994  :     return (pos);
; 995  : }

	pop	ebp
	ret	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 889  : {

	push	ebp
	mov	ebp, esp

; 890  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 891  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 915  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 892  : #ifdef _M_IX86
; 893  :     _UINT32_T pos;
; 894  : #ifdef _MSC_VER
; 895  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 896  : #elif defined(__GNUC__)
; 897  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 898  : #else
; 899  : #error unknown compiler
; 900  : #endif
; 901  : #elif defined(_M_X64)
; 902  : #ifdef _MSC_VER
; 903  :     _UINT32_T pos;
; 904  :     _BitScanReverse64(&pos, x);
; 905  : #elif defined(__GNUC__)
; 906  :     _UINT64_T pos;
; 907  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 908  : #else
; 909  : #error unknown compiler
; 910  : #endif
; 911  : #else
; 912  : #error unknown platform
; 913  : #endif
; 914  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 915  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ROTATE_L_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC					; COMDAT

; 741  : {

	push	ebp
	mov	ebp, esp

; 742  : #ifdef _M_IX86
; 743  :     return (_rotl(x, count));

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rol	eax, cl

; 744  : #elif defined(_M_X64)
; 745  :     return (_rotl64(x, count));
; 746  : #else
; 747  : #error unknown platform
; 748  : #endif
; 749  : }

	pop	ebp
	ret	0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 453  : {

	push	ebp
	mov	ebp, esp

; 454  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 455  : }

	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FILL_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_UNIT PROC					; COMDAT

; 426  : {

	push	ebp
	mov	ebp, esp

; 427  : #ifdef _M_IX86
; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 429  : #elif defined(_M_X64)
; 430  :     __stosq(d, x, count);
; 431  : #else
; 432  : #error unknown platform
; 433  : #endif
; 434  : }

	pop	ebp
	ret	0
__FILL_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FILL_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_32 PROC					; COMDAT

; 414  : {

	push	ebp
	mov	ebp, esp

; 415  :     __stosd(( unsigned long*)d, x, count);

	mov	ecx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 416  : }

	pop	ebp
	ret	0
__FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FILL_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC					; COMDAT

; 409  : {

	push	ebp
	mov	ebp, esp

; 410  :     __stosw(d, x, count);

	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosw
	pop	edi

; 411  : }

	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FILL_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 1
_count$ = 16						; size = 4
__FILL_MEMORY_BYTE PROC					; COMDAT

; 404  : {

	push	ebp
	mov	ebp, esp

; 405  :     __stosb(d, x, count);

	mov	al, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosb
	pop	edi

; 406  : }

	pop	ebp
	ret	0
__FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ZERO_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_32 PROC					; COMDAT

; 364  : {

	push	ebp
	mov	ebp, esp

; 365  :     __stosd((unsigned long*)d, 0, count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 366  : }

	pop	ebp
	ret	0
__ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ZERO_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_16 PROC					; COMDAT

; 359  : {

	push	ebp
	mov	ebp, esp

; 360  :     __stosw(d, 0, count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosw
	pop	edi

; 361  : }

	pop	ebp
	ret	0
__ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ZERO_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC					; COMDAT

; 354  : {

	push	ebp
	mov	ebp, esp

; 355  :     __stosb(d, 0, count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	al, al
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosb
	pop	edi

; 356  : }

	pop	ebp
	ret	0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 326  : {

	push	ebp
	mov	ebp, esp

; 327  : #ifdef _M_IX86
; 328  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 329  : #elif defined(_M_X64)
; 330  :     __movsq(d, s, count);
; 331  : #else
; 332  : #error unknown platform
; 333  : #endif
; 334  : }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _PMC_Dispose@4
_TEXT	SEGMENT
_p$ = 8							; size = 4
_PMC_Dispose@4 PROC					; COMDAT

; 538  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 419  :     if (p == NULL || p->IS_STATIC)

	mov	esi, DWORD PTR _p$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Dispos
	test	BYTE PTR [esi+16], 1
	jne	SHORT $LN8@PMC_Dispos

; 381  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN16@PMC_Dispos

; 382  :     {
; 383  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR [esi+20]

; 205  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 206  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN16@PMC_Dispos

; 207  :         {
; 208  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 209  :         }
; 210  :         else
; 211  :         {
; 212  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 213  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN16@PMC_Dispos:

; 423  :     HeapFree(hLocalHeap, 0, p);

	push	esi
	push	0

; 337  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi], -858993460		; ccccccccH

; 338  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+4], -858993460		; ccccccccH

; 339  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+8], -858993460		; ccccccccH

; 340  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+12], -858993460		; ccccccccH

; 341  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+16], -858993460		; ccccccccH

; 342  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+20], -858993460		; ccccccccH

; 343  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+24], -858993460		; ccccccccH

; 423  :     HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
$LN8@PMC_Dispos:
	pop	esi

; 539  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 540  :     PMC_STATUS_CODE result = CheckNumber(np);
; 541  :     if (result != PMC_STATUS_OK)
; 542  :         return;
; 543  :     DeallocateNumber(np);
; 544  :     return;
; 545  : }

	pop	ebp
	ret	4
_PMC_Dispose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _Initialize_Memory
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Memory PROC					; COMDAT

; 549  :     PMC_STATUS_CODE result = PMC_STATUS_OK;
; 550  : 
; 551  :     BOOL number_zero_ok = TRUE;
; 552  :     if (result == PMC_STATUS_OK)
; 553  :     {
; 554  :         result = AttatchNumber(&number_zero, 0);
; 555  :         if (result == PMC_STATUS_OK)
; 556  :         {
; 557  :             CommitNumber(&number_zero);

	push	OFFSET _number_zero

; 296  :             __p[0] = 0;

	mov	DWORD PTR _number_zero, 0

; 297  :             __p[1] = 0;
; 298  :             __p[2] = 0;

	mov	DWORD PTR _number_zero+8, 0

; 299  :             __p[3] = 0;

	mov	DWORD PTR _number_zero+12, 0

; 372  :         p->UNIT_BIT_COUNT = 0;

	mov	DWORD PTR _number_zero+4, 0

; 373  :         p->BLOCK_COUNT = 0;

	mov	DWORD PTR _number_zero+20, 0

; 374  :         p->BLOCK = NULL;

	mov	DWORD PTR _number_zero+24, 0

; 393  :     p->IS_STATIC = TRUE;

	mov	DWORD PTR _number_zero+16, 1

; 549  :     PMC_STATUS_CODE result = PMC_STATUS_OK;
; 550  : 
; 551  :     BOOL number_zero_ok = TRUE;
; 552  :     if (result == PMC_STATUS_OK)
; 553  :     {
; 554  :         result = AttatchNumber(&number_zero, 0);
; 555  :         if (result == PMC_STATUS_OK)
; 556  :         {
; 557  :             CommitNumber(&number_zero);

	call	_CommitNumber
	add	esp, 4

; 558  :             number_zero_ok = TRUE;
; 559  :         }
; 560  :     }
; 561  : 
; 562  :     if (result != PMC_STATUS_OK)
; 563  :     {
; 564  :         if (number_zero_ok)
; 565  :             DetatchNumber(&number_zero);
; 566  :     }
; 567  : 
; 568  :     return (result);

	xor	eax, eax

; 569  : }

	ret	0
_Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _DuplicateNumber
_TEXT	SEGMENT
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_DuplicateNumber PROC					; COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 515  :     if (x->IS_STATIC)

	mov	esi, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [esi+16]
	test	al, 1
	je	SHORT $LN2@DuplicateN

; 516  :     {
; 517  :         *op = x;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], esi

; 518  :         return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi

; 534  : }

	pop	ebp
	ret	0
$LN2@DuplicateN:

; 519  :     }
; 520  :     if (x->IS_ZERO)

	test	al, 2
	je	SHORT $LN3@DuplicateN

; 521  :     {
; 522  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	pop	esi
	mov	DWORD PTR [eax], OFFSET _number_zero

; 523  :         return (PMC_STATUS_OK);

	xor	eax, eax

; 534  : }

	pop	ebp
	ret	0
$LN3@DuplicateN:
	push	ebx
	push	edi

; 524  :     }
; 525  :     __UNIT_TYPE x_bit_count = x->UNIT_BIT_COUNT;

	mov	edi, DWORD PTR [esi+4]

; 399  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	push	28					; 0000001cH
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12
	mov	ebx, eax

; 400  :     if (p == NULL)

	test	ebx, ebx
	jne	SHORT $LN7@DuplicateN
	pop	edi

; 401  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [ebx-5]
	pop	ebx
	pop	esi

; 534  : }

	pop	ebp
	ret	0
$LN7@DuplicateN:

; 402  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	push	0
	push	edi
	push	ebx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH

; 403  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN15@DuplicateN

; 404  :         return (result);
; 405  :     p->IS_STATIC = FALSE;

	and	DWORD PTR [ebx+16], -2			; fffffffeH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return ((u + v - 1) / v);

	lea	ecx, DWORD PTR [edi+31]

; 328  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR [ebx+24]
	mov	esi, DWORD PTR [esi+24]

; 454  :     return ((u + v - 1) / v);

	shr	ecx, 5

; 328  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 531  :     CommitNumber(o);

	push	ebx
	call	_CommitNumber

; 532  :     *op = o;

	mov	eax, DWORD PTR _op$[ebp]
	add	esp, 4
	mov	DWORD PTR [eax], ebx

; 533  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN15@DuplicateN:
	pop	edi
	pop	ebx
	pop	esi

; 534  : }

	pop	ebp
	ret	0
_DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _CheckNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CheckNumber PROC					; COMDAT

; 498  : #ifdef _DEBUG
; 499  :     if (!p->IS_ZERO)
; 500  :     {
; 501  :         PMC_STATUS_CODE result;
; 502  :         if ((result = CheckBlock(p->BLOCK)) != PMC_STATUS_OK)
; 503  :             return (result);
; 504  :         __UNIT_TYPE desired_hash_code = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 505  :         if (desired_hash_code != p->HASH_CODE)
; 506  :             return (PMC_STATUS_BAD_BUFFER);
; 507  :     }
; 508  : #endif
; 509  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 510  : }

	ret	0
_CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _CommitNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CommitNumber PROC					; COMDAT

; 464  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 465  :     CommitBlock(p->BLOCK);

	mov	edi, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edi+24]

; 223  :     if (buffer != NULL)

	test	ecx, ecx
	je	SHORT $LN8@CommitNumb

; 224  :     {
; 225  :         --buffer;
; 226  :         __UNIT_TYPE words = buffer[0];
; 227  : #ifdef _DEBUG
; 228  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);
; 229  : #else
; 230  :         __UNIT_TYPE code = 0;
; 231  : #endif
; 232  :         buffer[words + 1] = code;

	mov	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR [ecx+eax*4], 0
	mov	ecx, DWORD PTR [edi+24]
$LN8@CommitNumb:

; 466  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	mov	esi, DWORD PTR [edi+20]

; 428  :     if (p == NULL)

	test	ecx, ecx
	je	SHORT $LN12@CommitNumb

; 429  :     {
; 430  :         *effective_word_count = 0;
; 431  :         return (0);
; 432  :     }
; 433  :     p += word_count;

	lea	eax, DWORD PTR [ecx+esi*4]

; 434  :     while (word_count != 0)

	test	esi, esi
	je	SHORT $LN12@CommitNumb
	npad	6
$LL11@CommitNumb:

; 435  :     {
; 436  :         --p;
; 437  :         if (*p != 0)

	cmp	DWORD PTR [eax-4], 0
	lea	eax, DWORD PTR [eax-4]
	jne	SHORT $LN29@CommitNumb

; 441  :         }
; 442  :         --word_count;

	sub	esi, 1
	jne	SHORT $LL11@CommitNumb
$LN12@CommitNumb:

; 466  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	xor	esi, esi
	mov	DWORD PTR [edi], esi
$LN10@CommitNumb:
	mov	DWORD PTR [edi+4], esi

; 467  :     if (p->UNIT_BIT_COUNT <= 0)

	test	esi, esi
	jne	SHORT $LN2@CommitNumb

; 468  :     {
; 469  :         p->HASH_CODE = 0;
; 470  :         p->IS_ZERO = TRUE;

	mov	eax, DWORD PTR [edi+16]
	and	eax, -21				; ffffffebH
	mov	DWORD PTR [edi+8], esi

; 471  :         p->IS_ONE = FALSE;
; 472  :         p->IS_EVEN = TRUE;
; 473  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	DWORD PTR [edi+12], esi

; 474  :         p->IS_POWER_OF_TWO = FALSE;

	or	eax, 10					; 0000000aH

; 493  :     }
; 494  : }

	mov	DWORD PTR [edi+16], eax
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN29@CommitNumb:

; 439  :             *effective_word_count = word_count;

	mov	DWORD PTR [edi], esi

; 440  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	eax, DWORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 890  :     if (x == 0)

	test	eax, eax
	jne	SHORT $LN17@CommitNumb

; 891  :         return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 440  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	esi, 5
	sub	esi, ecx
	jmp	SHORT $LN10@CommitNumb
$LN17@CommitNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 895  :     _BitScanReverse(&pos, x);

	bsr	eax, eax

; 914  :     return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 440  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	esi, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 914  :     return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 440  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	sub	esi, ecx
	jmp	SHORT $LN10@CommitNumb
$LN2@CommitNumb:

; 475  :     }
; 476  :     else if (p->UNIT_BIT_COUNT == 1)

	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_CalculateCheckCode
	mov	DWORD PTR [edi+8], eax
	add	esp, 8
	mov	edx, DWORD PTR [edi+16]
	and	edx, -3					; fffffffdH
	mov	DWORD PTR [edi+16], edx
	mov	ecx, DWORD PTR [edi+24]
	cmp	esi, 1
	jne	SHORT $LN4@CommitNumb

; 477  :     {
; 478  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 479  :         p->IS_ZERO = FALSE;
; 480  :         p->IS_ONE = p->BLOCK[0] == 1; // 無条件でTRUEでも大丈夫だが念のため。

	mov	eax, DWORD PTR [ecx]
	mov	esi, 4
	xor	ecx, ecx

; 481  :         p->IS_EVEN = FALSE;
; 482  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	DWORD PTR [edi+12], 0
	cmp	eax, 1
	cmove	ecx, esi
	and	edx, -5					; fffffffbH

; 483  :         p->IS_POWER_OF_TWO = TRUE;

	or	ecx, edx
	and	ecx, -9					; fffffff7H
	or	ecx, 16					; 00000010H

; 493  :     }
; 494  : }

	mov	DWORD PTR [edi+16], ecx
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN4@CommitNumb:

; 484  :     }
; 485  :     else
; 486  :     {
; 487  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 488  :         p->IS_ZERO = FALSE;
; 489  :         p->IS_ONE = FALSE;

	and	edx, -5					; fffffffbH
	mov	DWORD PTR [edi+16], edx

; 490  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	eax, DWORD PTR [ecx]
	shl	eax, 3
	not	eax
	xor	eax, edx
	and	eax, 8
	xor	eax, edx

; 450  :     __UNIT_TYPE bit_count = 0;

	xor	edx, edx

; 490  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	DWORD PTR [edi+16], eax

; 491  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR [edi]

; 451  :     while (word_count > 0)

	test	eax, eax
	je	SHORT $LN21@CommitNumb
	npad	4
$LL20@CommitNumb:

; 452  :     {
; 453  :         --word_count;
; 454  :         if (*p != 0)

	mov	esi, DWORD PTR [ecx]
	dec	eax
	test	esi, esi
	jne	SHORT $LN30@CommitNumb

; 456  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	add	edx, 32					; 00000020H

; 457  :         ++p;

	add	ecx, 4
	test	eax, eax
	jne	SHORT $LL20@CommitNumb
$LN21@CommitNumb:

; 458  :     }
; 459  :     // このルートには到達しないはず
; 460  :     return (0);

	xor	eax, eax
$LN19@CommitNumb:

; 491  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	DWORD PTR [edi+12], eax

; 492  :         p->IS_POWER_OF_TWO = p->TRAILING_ZERO_BITS_COUNT + 1 == p->UNIT_BIT_COUNT;

	xor	ecx, ecx
	inc	eax
	mov	edx, 16					; 00000010H
	cmp	eax, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi+16]
	cmove	ecx, edx
	and	eax, -17				; ffffffefH
	or	ecx, eax

; 493  :     }
; 494  : }

	mov	DWORD PTR [edi+16], ecx
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN30@CommitNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 975  :     _BitScanForward(&pos, x);

	bsf	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 455  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	add	eax, edx
	jmp	SHORT $LN19@CommitNumb
_CommitNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _DeallocateNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DeallocateNumber PROC					; COMDAT

; 418  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 419  :     if (p == NULL || p->IS_STATIC)

	mov	esi, DWORD PTR _p$[ebp]
	test	esi, esi
	je	SHORT $LN3@Deallocate
	test	BYTE PTR [esi+16], 1
	jne	SHORT $LN3@Deallocate

; 381  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN11@Deallocate

; 382  :     {
; 383  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR [esi+20]

; 205  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 206  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN11@Deallocate

; 207  :         {
; 208  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 209  :         }
; 210  :         else
; 211  :         {
; 212  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 213  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN11@Deallocate:

; 420  :         return;
; 421  :     CleanUpNumber(p);
; 422  :     FillNumberHeader(p);
; 423  :     HeapFree(hLocalHeap, 0, p);

	push	esi
	push	0

; 337  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi], -858993460		; ccccccccH

; 338  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+4], -858993460		; ccccccccH

; 339  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+8], -858993460		; ccccccccH

; 340  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+12], -858993460		; ccccccccH

; 341  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+16], -858993460		; ccccccccH

; 342  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+20], -858993460		; ccccccccH

; 343  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+24], -858993460		; ccccccccH

; 420  :         return;
; 421  :     CleanUpNumber(p);
; 422  :     FillNumberHeader(p);
; 423  :     HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
$LN3@Deallocate:
	pop	esi

; 424  : }

	pop	ebp
	ret	0
_DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _DetatchNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DetatchNumber PROC					; COMDAT

; 411  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 412  :     if (p == NULL || !p->IS_STATIC)

	mov	esi, DWORD PTR _p$[ebp]
	test	esi, esi
	je	SHORT $LN3@DetatchNum
	test	BYTE PTR [esi+16], 1
	je	SHORT $LN3@DetatchNum

; 381  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN3@DetatchNum

; 382  :     {
; 383  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR [esi+20]

; 205  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 206  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN11@DetatchNum

; 207  :         {
; 208  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 209  :         }
; 210  :         else
; 211  :         {
; 212  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 213  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN11@DetatchNum:

; 384  :         p->BLOCK = NULL;

	mov	DWORD PTR [esi+24], 0
$LN3@DetatchNum:
	pop	esi

; 413  :         return;
; 414  :     CleanUpNumber(p);
; 415  : }

	pop	ebp
	ret	0
_DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _AllocateNumber
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_AllocateNumber PROC					; COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 399  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	push	28					; 0000001cH
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12
	mov	esi, eax

; 400  :     if (p == NULL)

	test	esi, esi
	jne	SHORT $LN2@AllocateNu

; 401  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [esi-5]
	pop	esi

; 408  : }

	pop	ebp
	ret	0
$LN2@AllocateNu:

; 402  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	push	DWORD PTR _light_check_code$[ebp]
	push	DWORD PTR _bit_count$[ebp]
	push	esi
	call	_InitializeNumber
	add	esp, 12					; 0000000cH

; 403  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN1@AllocateNu

; 404  :         return (result);
; 405  :     p->IS_STATIC = FALSE;
; 406  :     *pp = p;

	mov	eax, DWORD PTR _pp$[ebp]
	and	DWORD PTR [esi+16], -2			; fffffffeH
	mov	DWORD PTR [eax], esi

; 407  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:
	pop	esi

; 408  : }

	pop	ebp
	ret	0
_AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _AttatchNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_AttatchNumber PROC					; COMDAT

; 389  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 390  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, NULL);

	mov	esi, DWORD PTR _p$[ebp]
	push	0
	push	DWORD PTR _bit_count$[ebp]
	push	esi
	call	_InitializeNumber
	add	esp, 12					; 0000000cH

; 391  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN1@AttatchNum

; 392  :         return (result);
; 393  :     p->IS_STATIC = TRUE;

	or	DWORD PTR [esi+16], 1
$LN1@AttatchNum:
	pop	esi

; 394  :     return (PMC_STATUS_OK);
; 395  : }

	pop	ebp
	ret	0
_AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _CheckBlockLight
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_code$ = 12						; size = 4
_CheckBlockLight PROC					; COMDAT

; 258  : #ifdef _DEBUG
; 259  :     if (buffer == NULL)
; 260  :         return (PMC_STATUS_OK);
; 261  :     --buffer;
; 262  :     __UNIT_TYPE words = buffer[0];
; 263  :     __UNIT_TYPE code_desired = buffer[words + 1] ^ (__UNIT_TYPE)&buffer[words + 1];
; 264  :     __UNIT_TYPE code_actual = code;
; 265  :     if (code_actual == code_desired)
; 266  :         return (PMC_STATUS_OK);
; 267  :     else
; 268  :         return (PMC_STATUS_BAD_BUFFER);
; 269  : #else
; 270  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 271  : #endif
; 272  : }

	ret	0
_CheckBlockLight ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _DeallocateBlock
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_buffer_words$ = 12					; size = 4
_DeallocateBlock PROC					; COMDAT

; 202  : {

	push	ebp
	mov	ebp, esp

; 203  : 	if (buffer != NULL)

	mov	eax, DWORD PTR _buffer$[ebp]
	test	eax, eax
	je	SHORT $LN4@Deallocate

; 204  : 	{
; 205  :         __UNIT_TYPE* p = buffer - 1;
; 206  :         if (*p != buffer_words)

	mov	ecx, DWORD PTR _buffer_words$[ebp]
	lea	edx, DWORD PTR [eax-4]
	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN4@Deallocate

; 207  :         {
; 208  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 209  :         }
; 210  :         else
; 211  :         {
; 212  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 213  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 428  :     __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 215  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN4@Deallocate:

; 216  :         }
; 217  : 	}
; 218  : }

	pop	ebp
	ret	0
_DeallocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _AllocateBlock
_TEXT	SEGMENT
_bits$ = 8						; size = 4
_allocated_block_words$ = 12				; size = 4
_code$ = 16						; size = 4
_AllocateBlock PROC					; COMDAT

; 160  : {

	push	ebp
	mov	ebp, esp
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return ((u + v - 1) / v);

	mov	esi, DWORD PTR _bits$[ebp]
	lea	esi, DWORD PTR [esi+31]
	shr	esi, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c

; 167  : 	__UNIT_TYPE bytes = words2 * __UNIT_TYPE_BYTE_COUNT;

	lea	eax, DWORD PTR [esi*4+8]

; 168  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	push	eax
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12
	mov	ecx, eax

; 169  : 	if (buffer == NULL)

	test	ecx, ecx
	jne	SHORT $LN2@AllocateBl
	pop	esi

; 197  : }

	pop	ebp
	ret	0
$LN2@AllocateBl:

; 170  : 		return (NULL);
; 171  : 	buffer[0] = words1;
; 172  :     *allocated_block_words = words1;

	mov	eax, DWORD PTR _allocated_block_words$[ebp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], esi

; 173  : #ifdef _DEBUG
; 174  :     // 乱数もどきを生成する。
; 175  : #ifdef _M_IX86
; 176  :     __UNIT_TYPE r = GetTickCount();
; 177  : #elif defined(_M_IX64)
; 178  : #ifdef _MSC_VER
; 179  :     __UNIT_TYPE r = GetTickCount64();
; 180  : #elif defined(__GNUC__)
; 181  :     _UINT32_T temp = GetTickCount();
; 182  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 183  : #else
; 184  : #error unknown compiler
; 185  : #endif
; 186  : #else
; 187  : #error unknown platform
; 188  : #endif
; 189  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;
; 190  : #else
; 191  :     __UNIT_TYPE check_code = 0;
; 192  : #endif
; 193  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	lea	eax, DWORD PTR [esi+1]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax], eax

; 194  :     if (code != NULL)

	mov	eax, DWORD PTR _code$[ebp]
	test	eax, eax
	je	SHORT $LN3@AllocateBl

; 195  :         *code = check_code;

	mov	DWORD PTR [eax], 0
$LN3@AllocateBl:

; 196  :     return (&buffer[1]);

	lea	eax, DWORD PTR [ecx+4]
	pop	esi

; 197  : }

	pop	ebp
	ret	0
_AllocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _DeallocateHeapArea
_TEXT	SEGMENT
_DeallocateHeapArea PROC				; COMDAT

; 581  :     if (hLocalHeap != NULL)

	mov	eax, DWORD PTR _hLocalHeap
	test	eax, eax
	je	SHORT $LN2@Deallocate

; 582  :     {
; 583  :         HeapDestroy(hLocalHeap);

	push	eax
	call	DWORD PTR __imp__HeapDestroy@4

; 584  :         hLocalHeap = NULL;

	mov	DWORD PTR _hLocalHeap, 0
$LN2@Deallocate:

; 585  :     }
; 586  : }

	ret	0
_DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\memory.c
;	COMDAT _AllocateHeapArea
_TEXT	SEGMENT
_AllocateHeapArea PROC					; COMDAT

; 573  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	push	0
	push	4096					; 00001000H
	push	0
	call	DWORD PTR __imp__HeapCreate@12

; 574  :     if (hLocalHeap == NULL)

	xor	ecx, ecx
	mov	DWORD PTR _hLocalHeap, eax
	test	eax, eax
	setne	cl
	mov	eax, ecx

; 575  :         return (FALSE);
; 576  :     return (TRUE);
; 577  : }

	ret	0
_AllocateHeapArea ENDP
_TEXT	ENDS
END
