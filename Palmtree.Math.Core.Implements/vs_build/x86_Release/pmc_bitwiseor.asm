; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_bitwiseor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_BitwiseOr
PUBLIC	_PMC_BitwiseOr_X_I@12
PUBLIC	_PMC_BitwiseOr_X_L@16
PUBLIC	_PMC_BitwiseOr_X_X@12
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_number_zero:BYTE
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT _BitwiseOr_X_X
_TEXT	SEGMENT
tv2458 = -32						; size = 4
tv2453 = -32						; size = 4
tv2455 = -28						; size = 4
tv2454 = -28						; size = 4
tv2456 = -24						; size = 4
tv2459 = -20						; size = 4
_count$1$ = -16						; size = 4
_v$1$ = -12						; size = 4
tv2460 = -8						; size = 4
tv2457 = -8						; size = 4
_w$1$ = -8						; size = 4
_u$1$ = -4						; size = 4
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w$ = 24						; size = 4
_BitwiseOr_X_X PROC					; COMDAT

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 73   :     __UNIT_TYPE or_count = v_count;
; 74   :     __UNIT_TYPE cp_count = u_count - v_count;
; 75   : 
; 76   :     __UNIT_TYPE count = or_count >> 5;
; 77   :     while (count > 0)

	mov	edx, DWORD PTR _v$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _v_count$[ebp]
	mov	eax, ebx
	sub	DWORD PTR _u_count$[ebp], ebx
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$1$[ebp], eax
	mov	DWORD PTR _u$1$[ebp], esi
	push	edi
	mov	edi, DWORD PTR _w$[ebp]
	mov	DWORD PTR _w$1$[ebp], edi
	test	eax, eax
	je	$LN3@BitwiseOr_
	mov	DWORD PTR _v$1$[ebp], edx
$LL2@BitwiseOr_:

; 78   :     {
; 79   :         w[0] = u[0] | v[0];

	lea	ecx, DWORD PTR [edx+16]
	xor	ebx, ebx
	lea	eax, DWORD PTR [ecx+108]
	cmp	edi, eax
	ja	SHORT $LN29@BitwiseOr_
	lea	eax, DWORD PTR [edi+124]
	cmp	eax, edx
	jae	SHORT $LN69@BitwiseOr_
$LN29@BitwiseOr_:
	lea	eax, DWORD PTR [esi+48]
	mov	DWORD PTR tv2453[ebp], eax
	add	eax, 76					; 0000004cH
	cmp	edi, eax
	ja	SHORT $LN30@BitwiseOr_
	lea	eax, DWORD PTR [edi+124]
	cmp	eax, esi
	jb	SHORT $LN30@BitwiseOr_
$LN69@BitwiseOr_:
	mov	DWORD PTR tv2460[ebp], esi
	mov	ecx, edi
	sub	esi, edx
	mov	eax, edx
	sub	ecx, edx
	mov	ebx, 32					; 00000020H
	mov	DWORD PTR tv2457[ebp], ecx
	mov	edx, ecx
	npad	3
$LL67@BitwiseOr_:
	mov	ecx, DWORD PTR [eax+esi]
	lea	eax, DWORD PTR [eax+4]
	or	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR [eax+edx-4], ecx
	sub	ebx, 1
	jne	SHORT $LL67@BitwiseOr_
	mov	esi, DWORD PTR _u$1$[ebp]
	jmp	$LN73@BitwiseOr_
$LN30@BitwiseOr_:
	lea	eax, DWORD PTR [edi+32]
	mov	edi, esi
	mov	esi, DWORD PTR _w$1$[ebp]
	sub	edi, edx
	sub	esi, edx
	mov	DWORD PTR tv2459[ebp], edi
	mov	DWORD PTR tv2456[ebp], esi
	mov	esi, DWORD PTR _u$1$[ebp]
	mov	edx, esi
	sub	edx, DWORD PTR _w$1$[ebp]
	mov	DWORD PTR tv2454[ebp], edx
	mov	edx, edi
	mov	edi, DWORD PTR tv2456[ebp]
	npad	4
$LL14@BitwiseOr_:
	movups	xmm1, XMMWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR tv2454[ebp]
	lea	ecx, DWORD PTR [ecx+64]
	movups	xmm0, XMMWORD PTR [ecx-80]
	lea	eax, DWORD PTR [eax+64]
	por	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-64]
	movups	XMMWORD PTR [eax-96], xmm1
	movups	xmm1, XMMWORD PTR [edx+ecx-64]
	por	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-48]
	movups	XMMWORD PTR [edi+ecx-64], xmm1
	movups	xmm1, XMMWORD PTR [esi+eax-64]
	mov	esi, DWORD PTR tv2453[ebp]
	por	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-32]
	movups	XMMWORD PTR [eax-64], xmm1
	movups	xmm1, XMMWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR _u$1$[ebp]
	add	ebx, 16					; 00000010H
	por	xmm1, xmm0
	movups	XMMWORD PTR [eax-48], xmm1
	cmp	ebx, 32					; 00000020H
	jl	SHORT $LL14@BitwiseOr_
	mov	edi, DWORD PTR _w$1$[ebp]
$LN73@BitwiseOr_:

; 80   :         w[1] = u[1] | v[1];
; 81   :         w[2] = u[2] | v[2];
; 82   :         w[3] = u[3] | v[3];
; 83   :         w[4] = u[4] | v[4];
; 84   :         w[5] = u[5] | v[5];
; 85   :         w[6] = u[6] | v[6];
; 86   :         w[7] = u[7] | v[7];
; 87   :         w[8] = u[8] | v[8];
; 88   :         w[9] = u[9] | v[9];
; 89   :         w[10] = u[10] | v[10];
; 90   :         w[11] = u[11] | v[11];
; 91   :         w[12] = u[12] | v[12];
; 92   :         w[13] = u[13] | v[13];
; 93   :         w[14] = u[14] | v[14];
; 94   :         w[15] = u[15] | v[15];
; 95   :         w[16] = u[16] | v[16];
; 96   :         w[17] = u[17] | v[17];
; 97   :         w[18] = u[18] | v[18];
; 98   :         w[19] = u[19] | v[19];
; 99   :         w[20] = u[20] | v[20];
; 100  :         w[21] = u[21] | v[21];
; 101  :         w[22] = u[22] | v[22];
; 102  :         w[23] = u[23] | v[23];
; 103  :         w[24] = u[24] | v[24];
; 104  :         w[25] = u[25] | v[25];
; 105  :         w[26] = u[26] | v[26];
; 106  :         w[27] = u[27] | v[27];
; 107  :         w[28] = u[28] | v[28];
; 108  :         w[29] = u[29] | v[29];
; 109  :         w[30] = u[30] | v[30];
; 110  :         w[31] = u[31] | v[31];
; 111  :         u += 32;

	mov	edx, DWORD PTR _v$1$[ebp]
	sub	esi, -128				; ffffff80H

; 112  :         v += 32;

	sub	edx, -128				; ffffff80H
	mov	DWORD PTR _u$1$[ebp], esi

; 113  :         w += 32;

	sub	edi, -128				; ffffff80H
	mov	DWORD PTR _v$1$[ebp], edx

; 114  :         --count;

	sub	DWORD PTR _count$1$[ebp], 1
	mov	DWORD PTR _w$1$[ebp], edi
	jne	$LL2@BitwiseOr_

; 73   :     __UNIT_TYPE or_count = v_count;
; 74   :     __UNIT_TYPE cp_count = u_count - v_count;
; 75   : 
; 76   :     __UNIT_TYPE count = or_count >> 5;
; 77   :     while (count > 0)

	mov	ebx, DWORD PTR _v_count$[ebp]
$LN3@BitwiseOr_:

; 115  :     }
; 116  : 
; 117  :     if (or_count & 0x10)

	test	bl, 16					; 00000010H
	je	$LN4@BitwiseOr_

; 118  :     {
; 119  :         w[0] = u[0] | v[0];

	lea	eax, DWORD PTR [edx+60]
	lea	ecx, DWORD PTR [edi+60]
	cmp	edi, eax
	ja	SHORT $LN33@BitwiseOr_
	cmp	ecx, edx
	jae	SHORT $LN71@BitwiseOr_
$LN33@BitwiseOr_:
	lea	eax, DWORD PTR [esi+60]
	cmp	edi, eax
	ja	SHORT $LN34@BitwiseOr_
	cmp	ecx, esi
	jb	SHORT $LN34@BitwiseOr_
$LN71@BitwiseOr_:
	mov	eax, esi
	mov	ecx, edx
	sub	eax, edx
	mov	ebx, 16					; 00000010H
	mov	DWORD PTR tv2458[ebp], eax
	mov	eax, edi
	mov	edi, DWORD PTR tv2458[ebp]
	sub	eax, edx
	mov	DWORD PTR tv2455[ebp], eax
	mov	esi, eax
	npad	5
$LL68@BitwiseOr_:
	mov	eax, DWORD PTR [edi+ecx]
	lea	ecx, DWORD PTR [ecx+4]
	or	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR [esi+ecx-4], eax
	sub	ebx, 1
	jne	SHORT $LL68@BitwiseOr_
	mov	edi, DWORD PTR _w$1$[ebp]
	mov	esi, DWORD PTR _u$1$[ebp]
	mov	ebx, DWORD PTR _v_count$[ebp]
	jmp	SHORT $LN17@BitwiseOr_
$LN34@BitwiseOr_:
	movups	xmm0, XMMWORD PTR [edx]
	movups	xmm1, XMMWORD PTR [esi]
	por	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	movups	XMMWORD PTR [edi], xmm1
	movups	xmm1, XMMWORD PTR [esi+16]
	por	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	movups	XMMWORD PTR [edi+16], xmm1
	movups	xmm1, XMMWORD PTR [esi+32]
	por	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	movups	XMMWORD PTR [edi+32], xmm1
	movups	xmm1, XMMWORD PTR [esi+48]
	por	xmm1, xmm0
	movups	XMMWORD PTR [edi+48], xmm1
$LN17@BitwiseOr_:

; 120  :         w[1] = u[1] | v[1];
; 121  :         w[2] = u[2] | v[2];
; 122  :         w[3] = u[3] | v[3];
; 123  :         w[4] = u[4] | v[4];
; 124  :         w[5] = u[5] | v[5];
; 125  :         w[6] = u[6] | v[6];
; 126  :         w[7] = u[7] | v[7];
; 127  :         w[8] = u[8] | v[8];
; 128  :         w[9] = u[9] | v[9];
; 129  :         w[10] = u[10] | v[10];
; 130  :         w[11] = u[11] | v[11];
; 131  :         w[12] = u[12] | v[12];
; 132  :         w[13] = u[13] | v[13];
; 133  :         w[14] = u[14] | v[14];
; 134  :         w[15] = u[15] | v[15];
; 135  :         u += 16;

	add	esi, 64					; 00000040H

; 136  :         v += 16;

	add	edx, 64					; 00000040H

; 137  :         w += 16;

	add	edi, 64					; 00000040H
$LN4@BitwiseOr_:

; 138  :     }
; 139  : 
; 140  :     if (or_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@BitwiseOr_

; 141  :     {
; 142  :         w[0] = u[0] | v[0];

	mov	eax, DWORD PTR [esi]
	or	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [esi+4]
	or	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [esi+8]
	or	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [esi+12]
	or	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR [esi+16]
	or	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [edi+16], eax
	mov	eax, DWORD PTR [esi+20]
	or	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [edi+20], eax
	mov	eax, DWORD PTR [esi+24]
	or	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]

; 143  :         w[1] = u[1] | v[1];
; 144  :         w[2] = u[2] | v[2];
; 145  :         w[3] = u[3] | v[3];
; 146  :         w[4] = u[4] | v[4];
; 147  :         w[5] = u[5] | v[5];
; 148  :         w[6] = u[6] | v[6];
; 149  :         w[7] = u[7] | v[7];
; 150  :         u += 8;

	add	esi, 32					; 00000020H
	or	eax, DWORD PTR [edx+28]

; 151  :         v += 8;

	add	edx, 32					; 00000020H
	mov	DWORD PTR [edi+28], eax

; 152  :         w += 8;

	add	edi, 32					; 00000020H
$LN5@BitwiseOr_:

; 153  :     }
; 154  : 
; 155  :     if (or_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@BitwiseOr_

; 156  :     {
; 157  :         w[0] = u[0] | v[0];

	mov	eax, DWORD PTR [esi]
	or	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [esi+4]
	or	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [esi+8]
	or	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [esi+12]

; 158  :         w[1] = u[1] | v[1];
; 159  :         w[2] = u[2] | v[2];
; 160  :         w[3] = u[3] | v[3];
; 161  :         u += 4;

	add	esi, 16					; 00000010H
	or	eax, DWORD PTR [edx+12]

; 162  :         v += 4;

	add	edx, 16					; 00000010H
	mov	DWORD PTR [edi+12], eax

; 163  :         w += 4;

	add	edi, 16					; 00000010H
$LN6@BitwiseOr_:

; 164  :     }
; 165  : 
; 166  :     if (or_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@BitwiseOr_

; 167  :     {
; 168  :         w[0] = u[0] | v[0];

	mov	eax, DWORD PTR [esi]
	or	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 169  :         w[1] = u[1] | v[1];

	mov	eax, DWORD PTR [esi+4]

; 170  :         u += 2;

	add	esi, 8
	or	eax, DWORD PTR [edx+4]

; 171  :         v += 2;

	add	edx, 8
	mov	DWORD PTR [edi+4], eax

; 172  :         w += 2;

	add	edi, 8
$LN7@BitwiseOr_:

; 173  :     }
; 174  : 
; 175  :     if (or_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@BitwiseOr_

; 176  :     {
; 177  :         w[0] = u[0] | v[0];

	mov	eax, DWORD PTR [esi]

; 178  :         u += 1;

	add	esi, 4
	or	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 179  :         v += 1;
; 180  :         w += 1;

	add	edi, 4
$LN8@BitwiseOr_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 279  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _u_count$[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 184  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_BitwiseOr_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT _BitwiseOr_X_2W
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w$ = 24						; size = 4
_BitwiseOr_X_2W PROC					; COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp

; 52   :     if (u_count == 1)

	mov	edx, DWORD PTR _u_count$[ebp]
	mov	ecx, DWORD PTR _v_hi$[ebp]
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	mov	edi, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [esi]
	or	eax, DWORD PTR _v_lo$[ebp]
	mov	DWORD PTR [edi], eax
	cmp	edx, 1
	jne	SHORT $LN2@BitwiseOr_

; 53   :     {
; 54   :         w[0] = u[0] | v_lo;
; 55   :         w[1] = v_hi;

	mov	DWORD PTR [edi+4], ecx
	pop	edi

; 68   : }

	pop	esi
	pop	ebp
	ret	0
$LN2@BitwiseOr_:

; 56   :     }
; 57   :     else if (u_count == 2)

	mov	eax, DWORD PTR [esi+4]
	or	eax, ecx
	mov	DWORD PTR [edi+4], eax
	cmp	edx, 2
	je	SHORT $LN7@BitwiseOr_

; 58   :     {
; 59   :         w[0] = u[0] | v_lo;
; 60   :         w[1] = u[1] | v_hi;
; 61   :     }
; 62   :     else
; 63   :     {
; 64   :         w[0] = u[0] | v_lo;
; 65   :         w[1] = u[1] | v_hi;
; 66   :         _COPY_MEMORY_UNIT(w + 2, u + 2, u_count - 2);

	add	esi, 8
	lea	ecx, DWORD PTR [edx-2]
	add	edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 279  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
$LN7@BitwiseOr_:
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 68   : }

	pop	esi
	pop	ebp
	ret	0
_BitwiseOr_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT _BitwiseOr_X_1W
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_BitwiseOr_X_1W PROC					; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp

; 40   :     if (u_count == 1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	mov	edi, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [esi]
	or	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR [edi], eax
	cmp	ecx, 1
	je	SHORT $LN5@BitwiseOr_

; 41   :         w[0] = u[0] | v;
; 42   :     else
; 43   :     {
; 44   :         w[0] = u[0] | v;
; 45   :         _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

	dec	ecx
	add	esi, 4
	add	edi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 279  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
$LN5@BitwiseOr_:
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 47   : }

	pop	esi
	pop	ebp
	ret	0
_BitwiseOr_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 840  : {

	push	ebp
	mov	ebp, esp

; 841  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 842  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 866  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 843  : #ifdef _M_IX86
; 844  :     _UINT32_T pos;
; 845  : #ifdef _MSC_VER
; 846  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 847  : #elif defined(__GNUC__)
; 848  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 849  : #else
; 850  : #error unknown compiler
; 851  : #endif
; 852  : #elif defined(_M_X64)
; 853  : #ifdef _MSC_VER
; 854  :     _UINT32_T pos;
; 855  :     _BitScanReverse64(&pos, x);
; 856  : #elif defined(__GNUC__)
; 857  :     _UINT64_T pos;
; 858  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 859  : #else
; 860  : #error unknown compiler
; 861  : #endif
; 862  : #else
; 863  : #error unknown platform
; 864  : #endif
; 865  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 866  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 807  : {

	push	ebp
	mov	ebp, esp

; 808  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 809  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 819  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 810  :     _UINT32_T pos;
; 811  : #ifdef _MSC_VER
; 812  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 813  : #elif defined(__GNUC__)
; 814  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 815  : #else
; 816  : #error unknown compiler
; 817  : #endif
; 818  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 819  : }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MAXIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC					; COMDAT

; 414  : {

	push	ebp
	mov	ebp, esp

; 415  :     return (x >= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovae	eax, DWORD PTR _x$[ebp]

; 416  : }

	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 393  : {

	push	ebp
	mov	ebp, esp

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 395  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 396  : }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 277  : {

	push	ebp
	mov	ebp, esp

; 278  : #ifdef _M_IX86
; 279  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 280  : #elif defined(_M_X64)
; 281  :     __movsq(d, s, count);
; 282  : #else
; 283  : #error unknown platform
; 284  : #endif
; 285  : }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT _PMC_BitwiseOr_X_X@12
_TEXT	SEGMENT
tv260 = 8						; size = 4
_u$ = 8							; size = 4
_nw$ = 12						; size = 4
_v$ = 12						; size = 4
_nw_light_check_code$1 = 16				; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseOr_X_X@12 PROC				; COMDAT

; 343  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	mov	edi, DWORD PTR _u$[ebp]

; 344  :     if (u == NULL)

	test	edi, edi
	je	$LN19@PMC_Bitwis

; 345  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 346  :     if (v == NULL)

	test	esi, esi
	je	$LN19@PMC_Bitwis

; 347  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 348  :     if (w == NULL)

	mov	ebx, DWORD PTR _w$[ebp]
	test	ebx, ebx
	je	$LN19@PMC_Bitwis

; 350  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 351  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 352  :     PMC_STATUS_CODE result;
; 353  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Bitwis

; 354  :         return (result);
; 355  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Bitwis

; 356  :         return (result);
; 357  :     NUMBER_HEADER* nw;
; 358  :     if (nu->IS_ZERO)

	test	BYTE PTR [edi+16], 2
	lea	eax, DWORD PTR _nw$[ebp]
	je	SHORT $LN7@PMC_Bitwis

; 359  :     {
; 360  :         if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	push	eax
	push	esi
$LN20@PMC_Bitwis:

; 393  : }

	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@PMC_Bitwis
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Bitwis:

; 361  :             return (result);
; 362  :     }
; 363  :     else if (nv->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	je	SHORT $LN10@PMC_Bitwis

; 364  :     {
; 365  :         if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	push	eax
	push	edi

; 366  :             return (result);

	jmp	SHORT $LN20@PMC_Bitwis
$LN10@PMC_Bitwis:

; 367  :     }
; 368  :     else
; 369  :     {
; 370  :         if (nu->UNIT_WORD_COUNT < nv->UNIT_WORD_COUNT)

	mov	ecx, DWORD PTR [edi]

; 371  :         {
; 372  :             NUMBER_HEADER* t = nu;
; 373  :             nu = nv;
; 374  :             nv = t;
; 375  :         }
; 376  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, edi
	cmp	ecx, DWORD PTR [esi]
	cmovae	edx, esi
	cmovae	esi, edi
	mov	DWORD PTR tv260[ebp], edx

; 377  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [edx+4]

; 380  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nw_light_check_code$1[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 415  :     return (x >= y ? x : y);

	cmp	DWORD PTR [esi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 380  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 415  :     return (x >= y ? x : y);

	cmovae	ecx, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 380  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	ecx
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 381  :             return (result);
; 382  :         BitwiseOr_X_X(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK);

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR tv260[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR [eax+24]
	push	DWORD PTR [esi]
	push	DWORD PTR [esi+24]
	call	_BitwiseOr_X_X

; 383  :         if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_light_check_code$1[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 384  :             return (result);
; 385  :         CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber
	add	esp, 4
$LN11@PMC_Bitwis:

; 386  :     }
; 387  :     *w = nw;

	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi
	mov	DWORD PTR [ebx], eax

; 388  : #ifdef _DEBUG
; 389  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 390  :         return (result);
; 391  : #endif
; 392  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 393  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN19@PMC_Bitwis:

; 349  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Bitwis:
	pop	edi

; 393  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_BitwiseOr_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT _PMC_BitwiseOr_X_L@16
_TEXT	SEGMENT
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_nw_light_check_code$1 = 16				; size = 4
_nw_light_check_code$2 = 16				; size = 4
_w$ = 20						; size = 4
_PMC_BitwiseOr_X_L@16 PROC				; COMDAT

; 246  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 247  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 248  :     {
; 249  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 250  :         return (PMC_STATUS_INTERNAL_ERROR);
; 251  :     }
; 252  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	$LN44@PMC_Bitwis

; 253  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 254  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN44@PMC_Bitwis

; 256  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 257  :     PMC_STATUS_CODE result;
; 258  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 259  :         return (result);
; 260  :     NUMBER_HEADER* nw;
; 261  :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	push	ebx
	push	edi
	je	SHORT $LN6@PMC_Bitwis

; 262  :     {
; 263  :         // x が 0 である場合
; 264  :         if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	or	eax, edx
	jne	SHORT $LN8@PMC_Bitwis

; 316  :         }
; 317  :         else
; 318  :         {
; 319  :             // _UINT64_T が 1 ワードで表現できる場合
; 320  : 
; 321  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 322  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 323  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;
; 324  :             __UNIT_TYPE nw_light_check_code;
; 325  :             if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)
; 326  :                 return (result);
; 327  :             BitwiseOr_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, (__UNIT_TYPE)v, nw->BLOCK);
; 328  :             if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)
; 329  :                 return (result);
; 330  :             CommitNumber(nw);
; 331  :         }
; 332  : 
; 333  :     }
; 334  :     *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	eax, OFFSET _number_zero
	pop	edi
	pop	ebx
	pop	esi
	mov	DWORD PTR [ecx], eax

; 335  : #ifdef _DEBUG
; 336  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 337  :         return (result);
; 338  : #endif
; 339  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 340  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Bitwis:

; 265  :         {
; 266  :             // v が 0 である場合
; 267  :             nw = &number_zero;
; 268  :         }
; 269  :         else
; 270  :         {
; 271  :             // v が 0 でない場合
; 272  :             if ((result = From_L_Imp(v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	edx
	push	ecx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN45@PMC_Bitwis
$LN46@PMC_Bitwis:
	pop	edi
	pop	ebx
$LN1@PMC_Bitwis:
	pop	esi

; 340  : }

	pop	ebp
	ret	16					; 00000010H
$LN6@PMC_Bitwis:

; 273  :                 return (result);
; 274  :         }
; 275  :     }
; 276  :     else if (v == 0)

	mov	ebx, DWORD PTR _v$[ebp]
	mov	eax, ebx
	mov	edi, DWORD PTR _v$[ebp+4]
	or	eax, edi
	jne	SHORT $LN11@PMC_Bitwis

; 277  :     {
; 278  :         // y が 0 である場合
; 279  :         if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN46@PMC_Bitwis

; 316  :         }
; 317  :         else
; 318  :         {
; 319  :             // _UINT64_T が 1 ワードで表現できる場合
; 320  : 
; 321  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 322  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 323  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;
; 324  :             __UNIT_TYPE nw_light_check_code;
; 325  :             if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)
; 326  :                 return (result);
; 327  :             BitwiseOr_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, (__UNIT_TYPE)v, nw->BLOCK);
; 328  :             if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)
; 329  :                 return (result);
; 330  :             CommitNumber(nw);
; 331  :         }
; 332  : 
; 333  :     }
; 334  :     *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi
	pop	ebx
	mov	DWORD PTR [ecx], eax

; 335  : #ifdef _DEBUG
; 336  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 337  :         return (result);
; 338  : #endif
; 339  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi

; 340  : }

	pop	ebp
	ret	16					; 00000010H
$LN11@PMC_Bitwis:

; 280  :             return (result);
; 281  :     }
; 282  :     else
; 283  :     {
; 284  :         // u と v がともに 0 ではない場合
; 285  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 286  :         {
; 287  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 288  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+4]

; 289  :             _UINT32_T v_hi;
; 290  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 291  :             if (v_hi == 0)

	test	edi, edi
	jne	SHORT $LN16@PMC_Bitwis

; 292  :             {
; 293  :                 // v の値が 32bit で表現可能な場合
; 294  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	push	ebx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	sub	ecx, eax

; 297  :                 if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_light_check_code$2[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 415  :     return (x >= y ? x : y);

	cmp	edx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 297  :                 if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 415  :     return (x >= y ? x : y);

	cmovae	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 297  :                 if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	ecx
	push	eax
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN46@PMC_Bitwis

; 298  :                     return (result);
; 299  :                 BitwiseOr_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, v_lo, nw->BLOCK);

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+24]
	push	ebx
	push	DWORD PTR [esi]
	push	DWORD PTR [esi+24]
	call	_BitwiseOr_X_1W

; 300  :                 if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_light_check_code$2[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN21@PMC_Bitwis
	pop	edi
	pop	ebx
	pop	esi

; 340  : }

	pop	ebp
	ret	16					; 00000010H
$LN16@PMC_Bitwis:

; 301  :                     return (result);
; 302  :             }
; 303  :             else
; 304  :             {
; 305  :                 // y の値が 32bit では表現できない場合
; 306  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	push	edi
	call	__LZCNT_ALT_32
	mov	ecx, 64					; 00000040H
	sub	ecx, eax

; 309  :                 if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_light_check_code$1[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 415  :     return (x >= y ? x : y);

	cmp	edx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 309  :                 if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 415  :     return (x >= y ? x : y);

	cmovae	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 309  :                 if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	ecx
	push	eax
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN46@PMC_Bitwis

; 310  :                     return (result);
; 311  :                 BitwiseOr_X_2W(nu->BLOCK, nu->UNIT_WORD_COUNT, v_hi, v_lo, nw->BLOCK);

	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [esi]
	or	eax, ebx

; 52   :     if (u_count == 1)

	mov	DWORD PTR [edx], eax
	cmp	ecx, 1
	jne	SHORT $LN32@PMC_Bitwis

; 53   :     {
; 54   :         w[0] = u[0] | v_lo;
; 55   :         w[1] = v_hi;

	mov	DWORD PTR [edx+4], edi

; 56   :     }

	jmp	SHORT $LN37@PMC_Bitwis
$LN32@PMC_Bitwis:

; 57   :     else if (u_count == 2)

	mov	eax, DWORD PTR [esi+4]
	or	eax, edi
	mov	DWORD PTR [edx+4], eax
	cmp	ecx, 2
	je	SHORT $LN37@PMC_Bitwis

; 58   :     {
; 59   :         w[0] = u[0] | v_lo;
; 60   :         w[1] = u[1] | v_hi;
; 61   :     }
; 62   :     else
; 63   :     {
; 64   :         w[0] = u[0] | v_lo;
; 65   :         w[1] = u[1] | v_hi;
; 66   :         _COPY_MEMORY_UNIT(w + 2, u + 2, u_count - 2);

	add	ecx, -2					; fffffffeH
	lea	edi, DWORD PTR [edx+8]
	add	esi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 279  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
$LN37@PMC_Bitwis:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 312  :                 if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_light_check_code$1[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN46@PMC_Bitwis
$LN21@PMC_Bitwis:

; 313  :                     return (result);
; 314  :             }
; 315  :             CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber
	add	esp, 4
$LN45@PMC_Bitwis:

; 316  :         }
; 317  :         else
; 318  :         {
; 319  :             // _UINT64_T が 1 ワードで表現できる場合
; 320  : 
; 321  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 322  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 323  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;
; 324  :             __UNIT_TYPE nw_light_check_code;
; 325  :             if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)
; 326  :                 return (result);
; 327  :             BitwiseOr_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, (__UNIT_TYPE)v, nw->BLOCK);
; 328  :             if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)
; 329  :                 return (result);
; 330  :             CommitNumber(nw);
; 331  :         }
; 332  : 
; 333  :     }
; 334  :     *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi
	pop	ebx
	mov	DWORD PTR [ecx], eax

; 335  : #ifdef _DEBUG
; 336  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 337  :         return (result);
; 338  : #endif
; 339  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi

; 340  : }

	pop	ebp
	ret	16					; 00000010H
$LN44@PMC_Bitwis:

; 255  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	pop	esi

; 340  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_BitwiseOr_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT _PMC_BitwiseOr_X_I@12
_TEXT	SEGMENT
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_nz_check_code$1 = 12					; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseOr_X_I@12 PROC				; COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 188  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 189  :     {
; 190  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 191  :         return (PMC_STATUS_INTERNAL_ERROR);
; 192  :     }
; 193  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN19@PMC_Bitwis

; 194  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 195  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	$LN19@PMC_Bitwis

; 197  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 198  :     PMC_STATUS_CODE result;
; 199  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 200  :         return (result);
; 201  :     NUMBER_HEADER* nw;
; 202  :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	push	ebx
	je	SHORT $LN6@PMC_Bitwis

; 203  :     {
; 204  :         // u が 0 である場合
; 205  :         if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	test	eax, eax
	jne	SHORT $LN8@PMC_Bitwis

; 206  :         {
; 207  :             // v が 0 である場合
; 208  :             nw = &number_zero;

	mov	eax, OFFSET _number_zero
	pop	ebx

; 236  :     }
; 237  :     *w = nw;

	mov	DWORD PTR [edi], eax

; 238  : #ifdef _DEBUG
; 239  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 240  :         return (result);
; 241  : #endif
; 242  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 243  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Bitwis:

; 209  :         }
; 210  :         else
; 211  :         {
; 212  :             // v が 0 でない場合
; 213  :             if ((result = From_I_Imp(v, &nw)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	push	eax
	call	_From_I_Imp
	add	esp, 8
	test	eax, eax
	je	$LN20@PMC_Bitwis
$LN21@PMC_Bitwis:
	pop	ebx
$LN1@PMC_Bitwis:
	pop	edi

; 243  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN6@PMC_Bitwis:

; 214  :                 return (result);
; 215  :         }
; 216  :     }
; 217  :     else if (v == 0)

	mov	ebx, DWORD PTR _v$[ebp]
	test	ebx, ebx
	jne	SHORT $LN11@PMC_Bitwis

; 218  :     {
; 219  :         // v が 0 である場合
; 220  :         if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@PMC_Bitwis

; 236  :     }
; 237  :     *w = nw;

	mov	eax, DWORD PTR _nw$[ebp]
	pop	ebx
	mov	DWORD PTR [edi], eax

; 238  : #ifdef _DEBUG
; 239  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 240  :         return (result);
; 241  : #endif
; 242  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 243  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN11@PMC_Bitwis:

; 221  :             return (result);
; 222  :     }
; 223  :     else
; 224  :     {
; 225  :         // x と y がともに 0 ではない場合
; 226  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+4]

; 227  :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	push	ebx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	sub	ecx, eax

; 230  :         if ((result = AllocateNumber(&nw, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz_check_code$1[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 415  :     return (x >= y ? x : y);

	cmp	edx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 230  :         if ((result = AllocateNumber(&nw, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 415  :     return (x >= y ? x : y);

	cmovae	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c

; 230  :         if ((result = AllocateNumber(&nw, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	inc	ecx
	push	ecx
	push	eax
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN21@PMC_Bitwis

; 231  :             return (result);
; 232  :         BitwiseOr_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, v, nw->BLOCK);

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+24]
	push	ebx
	push	DWORD PTR [esi]
	push	DWORD PTR [esi+24]
	call	_BitwiseOr_X_1W

; 233  :         if ((result = CheckBlockLight(nw->BLOCK, nz_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nz_check_code$1[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN21@PMC_Bitwis

; 234  :             return (result);
; 235  :         CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber
	add	esp, 4
$LN20@PMC_Bitwis:

; 236  :     }
; 237  :     *w = nw;

	mov	eax, DWORD PTR _nw$[ebp]
	pop	ebx
	mov	DWORD PTR [edi], eax

; 238  : #ifdef _DEBUG
; 239  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 240  :         return (result);
; 241  : #endif
; 242  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 243  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN19@PMC_Bitwis:
	pop	edi

; 196  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 243  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_BitwiseOr_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_bitwiseor.c
;	COMDAT _Initialize_BitwiseOr
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_BitwiseOr PROC				; COMDAT

; 397  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 398  : }

	ret	0
_Initialize_BitwiseOr ENDP
_TEXT	ENDS
END
