; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_compare.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_Compare
PUBLIC	_PMC_Compare_X_I@12
PUBLIC	_PMC_Compare_X_L@16
PUBLIC	_PMC_Compare_X_X@12
PUBLIC	_Compare_X_X
EXTRN	_CheckNumber:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT _Compare_X_X
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_count$ = 16						; size = 4
_Compare_X_X PROC					; COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp

; 39   :     u += count;

	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	push	esi

; 40   :     v += count;

	mov	esi, DWORD PTR _v$[ebp]
	lea	eax, DWORD PTR [ecx*4]
	add	edx, eax
	add	esi, eax
	push	edi

; 41   :     while (count > 0)

	test	ecx, ecx
	je	SHORT $LN3@Compare_X_
	npad	3
$LL2@Compare_X_:

; 42   :     {
; 43   :         --u;
; 44   :         --v;
; 45   :         --count;
; 46   : 
; 47   :         if (*u > *v)

	mov	eax, DWORD PTR [edx-4]
	lea	edx, DWORD PTR [edx-4]
	lea	esi, DWORD PTR [esi-4]
	dec	ecx
	cmp	eax, DWORD PTR [esi]
	ja	SHORT $LN10@Compare_X_

; 49   :         else if (*u < *v)

	jb	SHORT $LN11@Compare_X_

; 41   :     while (count > 0)

	test	ecx, ecx
	jne	SHORT $LL2@Compare_X_
$LN3@Compare_X_:
	pop	edi

; 51   :         else
; 52   :         {
; 53   :         }
; 54   :     }
; 55   :     return (0);

	xor	eax, eax

; 56   : }

	pop	esi
	pop	ebp
	ret	0
$LN11@Compare_X_:
	pop	edi

; 50   :             return (-1);

	or	eax, -1

; 56   : }

	pop	esi
	pop	ebp
	ret	0
$LN10@Compare_X_:
	pop	edi

; 48   :             return (1);

	mov	eax, 1

; 56   : }

	pop	esi
	pop	ebp
	ret	0
_Compare_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 840  : {

	push	ebp
	mov	ebp, esp

; 841  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 842  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 866  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 843  : #ifdef _M_IX86
; 844  :     _UINT32_T pos;
; 845  : #ifdef _MSC_VER
; 846  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 847  : #elif defined(__GNUC__)
; 848  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 849  : #else
; 850  : #error unknown compiler
; 851  : #endif
; 852  : #elif defined(_M_X64)
; 853  : #ifdef _MSC_VER
; 854  :     _UINT32_T pos;
; 855  :     _BitScanReverse64(&pos, x);
; 856  : #elif defined(__GNUC__)
; 857  :     _UINT64_T pos;
; 858  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 859  : #else
; 860  : #error unknown compiler
; 861  : #endif
; 862  : #else
; 863  : #error unknown platform
; 864  : #endif
; 865  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 866  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 807  : {

	push	ebp
	mov	ebp, esp

; 808  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 809  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 819  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 810  :     _UINT32_T pos;
; 811  : #ifdef _MSC_VER
; 812  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 813  : #elif defined(__GNUC__)
; 814  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 815  : #else
; 816  : #error unknown compiler
; 817  : #endif
; 818  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 819  : }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 393  : {

	push	ebp
	mov	ebp, esp

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 395  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 396  : }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT _PMC_Compare_X_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_X_X@12 PROC				; COMDAT

; 257  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 258  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN29@PMC_Compar

; 259  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 260  :     if (v == NULL)

	mov	edi, DWORD PTR _v$[ebp]
	test	edi, edi
	je	$LN29@PMC_Compar

; 261  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 262  :     if (w == NULL)

	mov	ebx, DWORD PTR _w$[ebp]
	test	ebx, ebx
	je	$LN29@PMC_Compar

; 264  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 265  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 266  :     PMC_STATUS_CODE result;
; 267  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Compar

; 268  :         return (result);
; 269  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Compar

; 270  :         return (result);
; 271  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR [edi+16]
	and	eax, 2
	test	BYTE PTR [esi+16], 2
	je	SHORT $LN7@PMC_Compar

; 272  :     {
; 273  :         *w = nv->IS_ZERO ? 0 : -1;

	neg	eax
	pop	edi
	sbb	eax, eax
	neg	eax
	dec	eax

; 297  :         }
; 298  :     }
; 299  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 300  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Compar:

; 274  :     }
; 275  :     else if (nv->IS_ZERO)

	test	eax, eax
	jne	SHORT $LN25@PMC_Compar

; 276  :     {
; 277  :         *w = 1;
; 278  :     }
; 279  :     else
; 280  :     {
; 281  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR [esi+4]

; 282  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 283  :         if (u_bit_count > v_bit_count)

	cmp	eax, DWORD PTR [edi+4]
	ja	SHORT $LN25@PMC_Compar

; 284  :         {
; 285  :             // 明らかに u > v である場合
; 286  :             *w = 1;
; 287  :         }
; 288  :         else if (u_bit_count < v_bit_count)

	jb	SHORT $LN26@PMC_Compar

; 289  :         {
; 290  :             // 明らかに u < v である場合
; 291  :             *w = -1;
; 292  :         }
; 293  :         else
; 294  :         {
; 295  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 296  :             *w = Compare_X_X(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	ecx, DWORD PTR [esi]

; 39   :     u += count;

	mov	edx, DWORD PTR [esi+24]

; 40   :     v += count;

	mov	esi, DWORD PTR [edi+24]
	lea	eax, DWORD PTR [ecx*4]
	add	edx, eax
	add	esi, eax

; 41   :     while (count > 0)

	test	ecx, ecx
	je	SHORT $LN18@PMC_Compar
	npad	4
$LL17@PMC_Compar:

; 42   :     {
; 43   :         --u;
; 44   :         --v;
; 45   :         --count;
; 46   : 
; 47   :         if (*u > *v)

	mov	eax, DWORD PTR [edx-4]
	lea	edx, DWORD PTR [edx-4]
	lea	esi, DWORD PTR [esi-4]
	dec	ecx
	cmp	eax, DWORD PTR [esi]
	ja	SHORT $LN25@PMC_Compar

; 48   :             return (1);
; 49   :         else if (*u < *v)

	jb	SHORT $LN26@PMC_Compar

; 41   :     while (count > 0)

	test	ecx, ecx
	jne	SHORT $LL17@PMC_Compar
$LN18@PMC_Compar:
	pop	edi

; 50   :             return (-1);
; 51   :         else
; 52   :         {
; 53   :         }
; 54   :     }
; 55   :     return (0);

	xor	eax, eax

; 300  : }

	pop	esi
	mov	DWORD PTR [ebx], eax
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN26@PMC_Compar:
	pop	edi

; 297  :         }
; 298  :     }
; 299  :     return (PMC_STATUS_OK);

	or	eax, -1
	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 300  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN25@PMC_Compar:
	pop	edi

; 297  :         }
; 298  :     }
; 299  :     return (PMC_STATUS_OK);

	mov	eax, 1
	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 300  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN29@PMC_Compar:

; 263  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Compar:
	pop	edi

; 300  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_Compare_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT _PMC_Compare_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_u_bit_count$1$ = 20					; size = 4
_w$ = 20						; size = 4
_PMC_Compare_X_L@16 PROC				; COMDAT

; 124  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _w$[ebp]
	push	edi

; 125  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 126  :     {
; 127  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 128  :         return (PMC_STATUS_INTERNAL_ERROR);
; 129  :     }
; 130  :     if (u == NULL)

	mov	edi, DWORD PTR _u$[ebp]
	test	edi, edi
	je	$LN54@PMC_Compar

; 131  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 132  :     if (w == NULL)

	test	esi, esi
	je	$LN54@PMC_Compar

; 134  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 135  :     PMC_STATUS_CODE result;
; 136  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Compar

; 137  :         return (result);
; 138  :     if (nu->IS_ZERO)

	test	BYTE PTR [edi+16], 2
	je	SHORT $LN6@PMC_Compar

; 139  :     {
; 140  :         // u が 0 である場合
; 141  :         if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN8@PMC_Compar

; 220  :                 }
; 221  :             }
; 222  :         }
; 223  :         else
; 224  :         {
; 225  :             // _UINT64_T が 1 ワードで表現できる場合
; 226  : 
; 227  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 228  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 229  :             if (u_bit_count > v_bit_count)
; 230  :             {
; 231  :                 // 明らかに u > v である場合
; 232  :                 *w = 1;
; 233  :             }
; 234  :             else if (u_bit_count < v_bit_count)
; 235  :             {
; 236  :                 // 明らかに u < v である場合
; 237  :                 *w = -1;
; 238  :             }
; 239  :             else
; 240  :             {
; 241  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 242  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 243  :                 if (nu->BLOCK[0] > v)
; 244  :                     *w = 1;
; 245  :                 else if (nu->BLOCK[0] < v)
; 246  :                     *w = -1;
; 247  :                 else
; 248  :                     *w = 0;
; 249  :             }
; 250  :         }
; 251  : 
; 252  :     }
; 253  :     return (PMC_STATUS_OK);

	pop	edi
	mov	DWORD PTR [esi], eax

; 254  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Compar:

; 142  :         {
; 143  :             // v が 0 である場合
; 144  :             *w = 0;
; 145  :         }
; 146  :         else
; 147  :         {
; 148  :             // v が 0 でない場合
; 149  :             *w = -1;

	or	eax, -1

; 220  :                 }
; 221  :             }
; 222  :         }
; 223  :         else
; 224  :         {
; 225  :             // _UINT64_T が 1 ワードで表現できる場合
; 226  : 
; 227  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 228  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 229  :             if (u_bit_count > v_bit_count)
; 230  :             {
; 231  :                 // 明らかに u > v である場合
; 232  :                 *w = 1;
; 233  :             }
; 234  :             else if (u_bit_count < v_bit_count)
; 235  :             {
; 236  :                 // 明らかに u < v である場合
; 237  :                 *w = -1;
; 238  :             }
; 239  :             else
; 240  :             {
; 241  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 242  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 243  :                 if (nu->BLOCK[0] > v)
; 244  :                     *w = 1;
; 245  :                 else if (nu->BLOCK[0] < v)
; 246  :                     *w = -1;
; 247  :                 else
; 248  :                     *w = 0;
; 249  :             }
; 250  :         }
; 251  : 
; 252  :     }
; 253  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], eax
	xor	eax, eax
	pop	edi

; 254  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN6@PMC_Compar:

; 150  :         }
; 151  :     }
; 152  :     else if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, edx
	push	ebx
	mov	ebx, DWORD PTR _v$[ebp+4]
	or	eax, ebx
	je	SHORT $LN51@PMC_Compar

; 153  :     {
; 154  :         // v が 0 である場合
; 155  :         *w = 1;
; 156  :     }
; 157  :     else
; 158  :     {
; 159  :         // u と v がともに 0 ではない場合
; 160  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 161  :         {
; 162  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 163  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR _u_bit_count$1$[ebp], eax

; 164  :             _UINT32_T v_hi;
; 165  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 166  :             if (v_hi == 0)

	test	ebx, ebx
	jne	SHORT $LN14@PMC_Compar

; 167  :             {
; 168  :                 // v の値が 32bit では表現できる場合
; 169  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 170  :                 if (u_bit_count > v_bit_count)

	cmp	DWORD PTR _u_bit_count$1$[ebp], ecx
	ja	SHORT $LN51@PMC_Compar

; 171  :                 {
; 172  :                     // 明らかに u > v である場合
; 173  :                     *w = 1;
; 174  :                 }
; 175  :                 else if (u_bit_count < v_bit_count)

	jb	SHORT $LN50@PMC_Compar

; 176  :                 {
; 177  :                     // 明らかに u < v である場合
; 178  :                     *w = -1;
; 179  :                 }
; 180  :                 else
; 181  :                 {
; 182  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 183  :                     // ⇒ u と v はともに 1 ワードで表現できる
; 184  :                     if (nu->BLOCK[0] > v_lo)

	mov	eax, DWORD PTR [edi+24]

; 185  :                         *w = 1;

	jmp	SHORT $LN59@PMC_Compar
$LN14@PMC_Compar:

; 186  :                     else if (nu->BLOCK[0] < v_lo)
; 187  :                         *w = -1;
; 188  :                     else
; 189  :                         *w = 0;
; 190  :                 }
; 191  :             }
; 192  :             else
; 193  :             {
; 194  :                 // v の値が 32bit では表現できない場合
; 195  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	push	ebx
	call	__LZCNT_ALT_32
	mov	ecx, 64					; 00000040H
	add	esp, 4
	sub	ecx, eax

; 196  :                 if (u_bit_count > v_bit_count)

	cmp	DWORD PTR _u_bit_count$1$[ebp], ecx
	ja	SHORT $LN51@PMC_Compar

; 197  :                 {
; 198  :                     // 明らかに u > v である場合
; 199  :                     *w = 1;
; 200  :                 }
; 201  :                 else if (u_bit_count < v_bit_count)

	jb	SHORT $LN50@PMC_Compar

; 202  :                 {
; 203  :                     // 明らかに u < v である場合
; 204  :                     *w = -1;
; 205  :                 }
; 206  :                 else
; 207  :                 {
; 208  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 209  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 210  :                     if (nu->BLOCK[1] > v_hi)

	mov	eax, DWORD PTR [edi+24]
	cmp	DWORD PTR [eax+4], ebx
	ja	SHORT $LN51@PMC_Compar

; 211  :                         *w = 1;
; 212  :                     else if (nu->BLOCK[1] < v_hi)

	jb	SHORT $LN50@PMC_Compar
$LN59@PMC_Compar:

; 218  :                     else
; 219  :                         *w = 0;

	mov	eax, DWORD PTR [eax]
	cmp	eax, edx
	ja	SHORT $LN51@PMC_Compar
	jb	SHORT $LN50@PMC_Compar
	pop	ebx
	xor	eax, eax
	pop	edi

; 220  :                 }
; 221  :             }
; 222  :         }
; 223  :         else
; 224  :         {
; 225  :             // _UINT64_T が 1 ワードで表現できる場合
; 226  : 
; 227  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 228  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 229  :             if (u_bit_count > v_bit_count)
; 230  :             {
; 231  :                 // 明らかに u > v である場合
; 232  :                 *w = 1;
; 233  :             }
; 234  :             else if (u_bit_count < v_bit_count)
; 235  :             {
; 236  :                 // 明らかに u < v である場合
; 237  :                 *w = -1;
; 238  :             }
; 239  :             else
; 240  :             {
; 241  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 242  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 243  :                 if (nu->BLOCK[0] > v)
; 244  :                     *w = 1;
; 245  :                 else if (nu->BLOCK[0] < v)
; 246  :                     *w = -1;
; 247  :                 else
; 248  :                     *w = 0;
; 249  :             }
; 250  :         }
; 251  : 
; 252  :     }
; 253  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], eax

; 254  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN50@PMC_Compar:
	pop	ebx

; 216  :                     else if (nu->BLOCK[0] < v_lo)
; 217  :                         *w = -1;

	or	eax, -1

; 220  :                 }
; 221  :             }
; 222  :         }
; 223  :         else
; 224  :         {
; 225  :             // _UINT64_T が 1 ワードで表現できる場合
; 226  : 
; 227  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 228  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 229  :             if (u_bit_count > v_bit_count)
; 230  :             {
; 231  :                 // 明らかに u > v である場合
; 232  :                 *w = 1;
; 233  :             }
; 234  :             else if (u_bit_count < v_bit_count)
; 235  :             {
; 236  :                 // 明らかに u < v である場合
; 237  :                 *w = -1;
; 238  :             }
; 239  :             else
; 240  :             {
; 241  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 242  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 243  :                 if (nu->BLOCK[0] > v)
; 244  :                     *w = 1;
; 245  :                 else if (nu->BLOCK[0] < v)
; 246  :                     *w = -1;
; 247  :                 else
; 248  :                     *w = 0;
; 249  :             }
; 250  :         }
; 251  : 
; 252  :     }
; 253  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], eax
	xor	eax, eax
	pop	edi

; 254  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN51@PMC_Compar:
	pop	ebx

; 213  :                         *w = -1;
; 214  :                     else if (nu->BLOCK[0] > v_lo)
; 215  :                         *w = 1;

	mov	eax, 1

; 220  :                 }
; 221  :             }
; 222  :         }
; 223  :         else
; 224  :         {
; 225  :             // _UINT64_T が 1 ワードで表現できる場合
; 226  : 
; 227  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 228  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 229  :             if (u_bit_count > v_bit_count)
; 230  :             {
; 231  :                 // 明らかに u > v である場合
; 232  :                 *w = 1;
; 233  :             }
; 234  :             else if (u_bit_count < v_bit_count)
; 235  :             {
; 236  :                 // 明らかに u < v である場合
; 237  :                 *w = -1;
; 238  :             }
; 239  :             else
; 240  :             {
; 241  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 242  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 243  :                 if (nu->BLOCK[0] > v)
; 244  :                     *w = 1;
; 245  :                 else if (nu->BLOCK[0] < v)
; 246  :                     *w = -1;
; 247  :                 else
; 248  :                     *w = 0;
; 249  :             }
; 250  :         }
; 251  : 
; 252  :     }
; 253  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], eax
	xor	eax, eax
	pop	edi

; 254  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN54@PMC_Compar:

; 133  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Compar:
	pop	edi

; 254  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
_PMC_Compare_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT _PMC_Compare_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_X_I@12 PROC				; COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 61   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 62   :     {
; 63   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 64   :         return (PMC_STATUS_INTERNAL_ERROR);
; 65   :     }
; 66   :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	mov	edi, DWORD PTR _w$[ebp]
	test	esi, esi
	je	$LN21@PMC_Compar

; 67   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 68   :     if (w == NULL)

	test	edi, edi
	je	$LN21@PMC_Compar

; 70   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 71   :     PMC_STATUS_CODE result;
; 72   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Compar

; 73   :         return (result);
; 74   :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	je	SHORT $LN6@PMC_Compar

; 75   :     {
; 76   :         // u が 0 である場合
; 77   :         if (v == 0)
; 78   :         {
; 79   :             // v が 0 である場合
; 80   :             *w = 0;
; 81   :         }
; 82   :         else
; 83   :         {
; 84   :             // v が 0 でない場合
; 85   :             *w = -1;
; 86   :         }
; 87   :     }

	mov	eax, DWORD PTR _v$[ebp]
	neg	eax
	sbb	eax, eax

; 115  :                 *w = -1;
; 116  :             else
; 117  :                 *w = 0;
; 118  :         }
; 119  :     }
; 120  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 121  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN6@PMC_Compar:

; 88   :     else if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	test	edx, edx
	jne	SHORT $LN10@PMC_Compar

; 89   :     {
; 90   :         // v が 0 である場合
; 91   :         *w = 1;

	mov	eax, 1

; 115  :                 *w = -1;
; 116  :             else
; 117  :                 *w = 0;
; 118  :         }
; 119  :     }
; 120  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 121  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN10@PMC_Compar:
	push	ebx

; 92   :     }
; 93   :     else
; 94   :     {
; 95   :         // x と y がともに 0 ではない場合
; 96   :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ebx, DWORD PTR [esi+4]

; 97   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 98   :         if (u_bit_count > v_bit_count)

	cmp	ebx, ecx
	ja	SHORT $LN23@PMC_Compar

; 99   :         {
; 100  :             // 明らかに u > v である場合
; 101  :             *w = 1;
; 102  :         }
; 103  :         else if (u_bit_count < v_bit_count)

	jae	SHORT $LN14@PMC_Compar

; 104  :         {
; 105  :             // 明らかに u < v である場合
; 106  :             *w = -1;

	or	eax, -1
	pop	ebx

; 115  :                 *w = -1;
; 116  :             else
; 117  :                 *w = 0;
; 118  :         }
; 119  :     }
; 120  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 121  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN14@PMC_Compar:

; 107  :         }
; 108  :         else
; 109  :         {
; 110  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 111  :             // ⇒ u と v はともに 1 ワードで表現できる
; 112  :             if (nu->BLOCK[0] > v)

	mov	eax, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [eax]
	cmp	eax, edx
	jbe	SHORT $LN16@PMC_Compar
$LN23@PMC_Compar:

; 113  :                 *w = 1;

	mov	eax, 1
	pop	ebx

; 115  :                 *w = -1;
; 116  :             else
; 117  :                 *w = 0;
; 118  :         }
; 119  :     }
; 120  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 121  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN16@PMC_Compar:

; 114  :             else if (nu->BLOCK[0] < v)

	sbb	eax, eax
	pop	ebx

; 115  :                 *w = -1;
; 116  :             else
; 117  :                 *w = 0;
; 118  :         }
; 119  :     }
; 120  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 121  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN21@PMC_Compar:

; 69   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Compar:
	pop	edi

; 121  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_Compare_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_compare.c
;	COMDAT _Initialize_Compare
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Compare PROC				; COMDAT

; 304  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 305  : }

	ret	0
_Initialize_Compare ENDP
_TEXT	ENDS
END
