; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_divrem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_DivRem_X_1W
PUBLIC	_Initialize_DivRem
PUBLIC	_PMC_DivRem_I_X@16
PUBLIC	_PMC_DivRem_L_X@20
PUBLIC	_PMC_DivRem_X_I@16
PUBLIC	_PMC_DivRem_X_L@20
PUBLIC	_PMC_DivRem_X_X@16
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_RightShift_Imp_DIV:PROC
EXTRN	_LeftShift_Imp_DIV:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aulldvrm:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_fp_DivRem_X_X DD 01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _DivRem_X_X_using_ADX_MULX
_TEXT	SEGMENT
tv638 = -40						; size = 4
_lh_mi$1$ = -36						; size = 4
_value$1$ = -36						; size = 4
_lh_mi$1$ = -32						; size = 4
_value$1$ = -32						; size = 4
_rh_mi$1$ = -28						; size = 4
tv637 = -24						; size = 4
_d_factor$1$ = -20					; size = 4
tv634 = -16						; size = 4
_rh_mi$1$ = -12						; size = 4
_v1$1$ = -8						; size = 4
_v2$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_rh_hi$1$ = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X_using_ADX_MULX PROC				; COMDAT

; 886  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx

; 887  :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 888  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 889  :     {
; 890  :         while (u_buf[u_buf_len - 1] == 0)
; 891  :             --u_buf_len;
; 892  :         while (v_buf[v_buf_len - 1] == 0)
; 893  :             --v_buf_len;
; 894  :     }
; 895  : 
; 896  : #ifdef _DEBUG
; 897  :     if (v_buf[v_buf_len - 1] == 0)
; 898  :     {
; 899  :         ; // このルートには到達しないはず。デバッグ用。
; 900  :     }
; 901  : #endif
; 902  : 
; 903  :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	mov	esi, DWORD PTR _v_buf$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+ebx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 918  :     if (x == 0)

	test	eax, eax
	jne	SHORT $LN17@DivRem_X_X

; 919  :         return (sizeof(x) * 8);

	mov	edi, 32					; 00000020H
	mov	DWORD PTR _d_factor$1$[ebp], edi
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 912  :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	push	0
	push	DWORD PTR _r_buf$[ebp]
	push	edi
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_LeftShift_Imp_DIV

; 913  :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	push	0
	push	DWORD PTR _work_v_buf$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_LeftShift_Imp_DIV
	mov	eax, DWORD PTR _r_buf$[ebp]
	add	esp, 40					; 00000028H
	mov	edx, DWORD PTR _u_buf_len$[ebp]
$LN11@DivRem_X_X:

; 914  :     }
; 915  : 
; 916  :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 917  :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	lea	esi, DWORD PTR [ebx-1]
	mov	edi, edx
	sub	edi, ebx
	lea	esi, DWORD PTR [ecx+esi*4]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR tv638[ebp], esi
	add	ecx, -8					; fffffff8H
	lea	ebx, DWORD PTR [edx-2]
	mov	DWORD PTR tv637[ebp], ecx
	lea	ebx, DWORD PTR [eax+ebx*4]
$LL6@DivRem_X_X:

; 290  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]

; 291  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	esi, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv634[ebp], ecx

; 292  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	ecx, DWORD PTR tv637[ebp]
	mov	DWORD PTR _rh_hi$1$[ebp], eax
	mov	DWORD PTR _rh_mi$1$[ebp], edx
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _v2$1$[ebp], ecx

; 199  :     if (uj == v1)

	cmp	eax, esi
	jne	SHORT $LN28@DivRem_X_X

; 200  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN27@DivRem_X_X
$LN17@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 923  :     _BitScanReverse(&pos, x);

	bsr	eax, eax

; 924  : #elif defined(__GNUC__)
; 925  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 926  : #else
; 927  : #error unknown compiler
; 928  : #endif
; 929  : #elif defined(_M_X64)
; 930  : #ifdef _MSC_VER
; 931  :     _UINT32_T pos;
; 932  :     _BitScanReverse(&pos, x);
; 933  : #elif defined(__GNUC__)
; 934  :     _UINT64_T pos;
; 935  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 936  : #else
; 937  : #error unknown compiler
; 938  : #endif
; 939  : #else
; 940  : #error unknown platform
; 941  : #endif
; 942  :     return (sizeof(x) * 8 - 1 - pos);

	mov	edi, 31					; 0000001fH
	sub	edi, eax
	mov	DWORD PTR _d_factor$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 904  :     if (d_factor == 0)

	jne	SHORT $LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 338  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR _r_buf$[ebp]
	mov	edi, eax
	mov	edx, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, edx
	mov	esi, DWORD PTR _u_buf$[ebp]
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$[ebp]
	mov	ecx, ebx
	mov	esi, DWORD PTR _v_buf$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 908  :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [eax+edx*4], 0

; 909  :     }

	jmp	SHORT $LN11@DivRem_X_X
$LN28@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1045 :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 650  :         return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, edx

; 650  :         return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
	mov	ecx, DWORD PTR _v2$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 209  :     return (q);

	mov	esi, eax
$LN27@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	ecx

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_mi$1$[ebp]

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, DWORD PTR _rh_hi$1$[ebp]
	sbb	ecx, edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 257  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN101@DivRem_X_X

; 258  :         return (FALSE);
; 259  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN24@DivRem_X_X

; 260  :         return (TRUE);
; 261  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN101@DivRem_X_X

; 294  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv634[ebp]
	jbe	SHORT $LN101@DivRem_X_X
$LN24@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_mi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 296  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	DWORD PTR _rh_hi$1$[ebp], edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 257  :     if (rh_hi > 0)

	cmp	DWORD PTR _rh_hi$1$[ebp], 0
	ja	SHORT $LN101@DivRem_X_X

; 258  :         return (FALSE);
; 259  :     else if (lh_mi > rh_mi)

	cmp	DWORD PTR _lh_mi$1$[ebp], ecx
	ja	SHORT $LN25@DivRem_X_X

; 260  :         return (TRUE);
; 261  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN101@DivRem_X_X

; 297  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv634[ebp]
	jbe	SHORT $LN101@DivRem_X_X
$LN25@DivRem_X_X:

; 298  :         return (q_);
; 299  :     --q_;

	dec	esi
$LN101@DivRem_X_X:

; 918  : 
; 919  :     for (;;)
; 920  :     {
; 921  :         __UNIT_TYPE_DIV q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);
; 922  : 
; 923  : 
; 924  :         if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	push	esi
	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _r_buf$[ebp]
	call	_SubtructOneLineX
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 925  :         {
; 926  :             // 桁借りが発生した場合
; 927  :             --q_;
; 928  :             AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	dec	esi
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _r_buf$[ebp]
	call	_AddOneLineX
	add	esp, 20					; 00000014H
$LN12@DivRem_X_X:

; 929  :         }
; 930  : 
; 931  :         q_buf[q_index] = q_;

	mov	eax, DWORD PTR _q_buf$[ebp]
	mov	DWORD PTR [eax+edi*4], esi

; 932  :         if (q_index == 0)

	test	edi, edi
	je	SHORT $LN98@DivRem_X_X

; 933  :             break;
; 934  :         --q_index;
; 935  :     }

	mov	esi, DWORD PTR tv638[ebp]
	dec	edi
	sub	ebx, 4
	jmp	$LL6@DivRem_X_X
$LN98@DivRem_X_X:

; 936  : 
; 937  :     if (d_factor > 0)

	mov	eax, DWORD PTR _d_factor$1$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	test	eax, eax
	je	SHORT $LN14@DivRem_X_X

; 938  :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	ecx, DWORD PTR _r_buf$[ebp]
	push	0
	push	ecx
	push	eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	inc	eax
	push	eax
	push	ecx
	call	_RightShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN14@DivRem_X_X:

; 939  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X_using_ADX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _DivRem_X_X_using_ADC_MUL
_TEXT	SEGMENT
tv638 = -40						; size = 4
_lh_mi$1$ = -36						; size = 4
_value$1$ = -36						; size = 4
_lh_mi$1$ = -32						; size = 4
_value$1$ = -32						; size = 4
_rh_mi$1$ = -28						; size = 4
tv637 = -24						; size = 4
_d_factor$1$ = -20					; size = 4
tv634 = -16						; size = 4
_rh_mi$1$ = -12						; size = 4
_v1$1$ = -8						; size = 4
_v2$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_rh_hi$1$ = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X_using_ADC_MUL PROC				; COMDAT

; 830  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx

; 831  :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 832  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 833  :     {
; 834  :         while (u_buf[u_buf_len - 1] == 0)
; 835  :             --u_buf_len;
; 836  :         while (v_buf[v_buf_len - 1] == 0)
; 837  :             --v_buf_len;
; 838  :     }
; 839  : 
; 840  : #ifdef _DEBUG
; 841  :     if (v_buf[v_buf_len - 1] == 0)
; 842  :     {
; 843  :         ; // このルートには到達しないはず。デバッグ用。
; 844  :     }
; 845  : #endif
; 846  : 
; 847  :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	mov	esi, DWORD PTR _v_buf$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+ebx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 918  :     if (x == 0)

	test	eax, eax
	jne	SHORT $LN17@DivRem_X_X

; 919  :         return (sizeof(x) * 8);

	mov	edi, 32					; 00000020H
	mov	DWORD PTR _d_factor$1$[ebp], edi
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 856  :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	push	0
	push	DWORD PTR _r_buf$[ebp]
	push	edi
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_LeftShift_Imp_DIV

; 857  :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	push	0
	push	DWORD PTR _work_v_buf$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_LeftShift_Imp_DIV
	mov	eax, DWORD PTR _r_buf$[ebp]
	add	esp, 40					; 00000028H
	mov	edx, DWORD PTR _u_buf_len$[ebp]
$LN11@DivRem_X_X:

; 858  :     }
; 859  : 
; 860  :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 861  :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	lea	esi, DWORD PTR [ebx-1]
	mov	edi, edx
	sub	edi, ebx
	lea	esi, DWORD PTR [ecx+esi*4]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR tv638[ebp], esi
	add	ecx, -8					; fffffff8H
	lea	ebx, DWORD PTR [edx-2]
	mov	DWORD PTR tv637[ebp], ecx
	lea	ebx, DWORD PTR [eax+ebx*4]
$LL6@DivRem_X_X:

; 272  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]

; 273  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	esi, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv634[ebp], ecx

; 274  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	ecx, DWORD PTR tv637[ebp]
	mov	DWORD PTR _rh_hi$1$[ebp], eax
	mov	DWORD PTR _rh_mi$1$[ebp], edx
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _v2$1$[ebp], ecx

; 199  :     if (uj == v1)

	cmp	eax, esi
	jne	SHORT $LN28@DivRem_X_X

; 200  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN27@DivRem_X_X
$LN17@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 923  :     _BitScanReverse(&pos, x);

	bsr	eax, eax

; 924  : #elif defined(__GNUC__)
; 925  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 926  : #else
; 927  : #error unknown compiler
; 928  : #endif
; 929  : #elif defined(_M_X64)
; 930  : #ifdef _MSC_VER
; 931  :     _UINT32_T pos;
; 932  :     _BitScanReverse(&pos, x);
; 933  : #elif defined(__GNUC__)
; 934  :     _UINT64_T pos;
; 935  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 936  : #else
; 937  : #error unknown compiler
; 938  : #endif
; 939  : #else
; 940  : #error unknown platform
; 941  : #endif
; 942  :     return (sizeof(x) * 8 - 1 - pos);

	mov	edi, 31					; 0000001fH
	sub	edi, eax
	mov	DWORD PTR _d_factor$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 848  :     if (d_factor == 0)

	jne	SHORT $LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 338  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR _r_buf$[ebp]
	mov	edi, eax
	mov	edx, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, edx
	mov	esi, DWORD PTR _u_buf$[ebp]
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$[ebp]
	mov	ecx, ebx
	mov	esi, DWORD PTR _v_buf$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 852  :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [eax+edx*4], 0

; 853  :     }

	jmp	SHORT $LN11@DivRem_X_X
$LN28@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1045 :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 650  :         return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, edx

; 650  :         return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
	mov	ecx, DWORD PTR _v2$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 209  :     return (q);

	mov	esi, eax
$LN27@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	ecx

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_mi$1$[ebp]

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, DWORD PTR _rh_hi$1$[ebp]
	sbb	ecx, edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 229  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN101@DivRem_X_X

; 230  :         return (FALSE);
; 231  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN24@DivRem_X_X

; 232  :         return (TRUE);
; 233  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN101@DivRem_X_X

; 276  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv634[ebp]
	jbe	SHORT $LN101@DivRem_X_X
$LN24@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_mi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 278  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	DWORD PTR _rh_hi$1$[ebp], edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 229  :     if (rh_hi > 0)

	cmp	DWORD PTR _rh_hi$1$[ebp], 0
	ja	SHORT $LN101@DivRem_X_X

; 230  :         return (FALSE);
; 231  :     else if (lh_mi > rh_mi)

	cmp	DWORD PTR _lh_mi$1$[ebp], ecx
	ja	SHORT $LN25@DivRem_X_X

; 232  :         return (TRUE);
; 233  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN101@DivRem_X_X

; 279  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv634[ebp]
	jbe	SHORT $LN101@DivRem_X_X
$LN25@DivRem_X_X:

; 280  :         return (q_);
; 281  :     --q_;

	dec	esi
$LN101@DivRem_X_X:

; 862  : 
; 863  :     for (;;)
; 864  :     {
; 865  :         __UNIT_TYPE_DIV q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);
; 866  : 
; 867  : 
; 868  :         if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	push	esi
	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _r_buf$[ebp]
	call	_SubtructOneLine
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 869  :         {
; 870  :             // 桁借りが発生した場合
; 871  :             --q_;
; 872  :             AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	dec	esi
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _r_buf$[ebp]
	call	_AddOneLine
	add	esp, 20					; 00000014H
$LN12@DivRem_X_X:

; 873  :         }
; 874  : 
; 875  :         q_buf[q_index] = q_;

	mov	eax, DWORD PTR _q_buf$[ebp]
	mov	DWORD PTR [eax+edi*4], esi

; 876  :         if (q_index == 0)

	test	edi, edi
	je	SHORT $LN98@DivRem_X_X

; 877  :             break;
; 878  :         --q_index;
; 879  :     }

	mov	esi, DWORD PTR tv638[ebp]
	dec	edi
	sub	ebx, 4
	jmp	$LL6@DivRem_X_X
$LN98@DivRem_X_X:

; 880  : 
; 881  :     if (d_factor > 0)

	mov	eax, DWORD PTR _d_factor$1$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	test	eax, eax
	je	SHORT $LN14@DivRem_X_X

; 882  :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	ecx, DWORD PTR _r_buf$[ebp]
	push	0
	push	ecx
	push	eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	inc	eax
	push	eax
	push	ecx
	call	_RightShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN14@DivRem_X_X:

; 883  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _AddOneLineX
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_c$ = 24						; size = 1
_q_index$ = 24						; size = 4
_AddOneLineX PROC					; COMDAT

; 764  : {

	push	ebp
	mov	ebp, esp

; 765  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]

; 766  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 767  :     __UNIT_TYPE v_count = v_buf_len;
; 768  :     char c = 0;

	xor	dl, dl
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx

; 769  : 
; 770  :     // まず 32 ワードずつ加算をする。
; 771  :     __UNIT_TYPE count = v_count >> 5;

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR _c$[ebp], dl
	mov	ecx, ebx
	shr	ecx, 5
	push	edi
	mov	edi, DWORD PTR _v_buf$[ebp]

; 772  :     while (count != 0)

	test	ecx, ecx
	je	$LN3@AddOneLine
	npad	9
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [esi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [esi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [esi+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+40]
	mov	DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [esi+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+44]
	mov	DWORD PTR [esi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [esi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+48]
	mov	DWORD PTR [esi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [esi+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+52]
	mov	DWORD PTR [esi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [esi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+56]
	mov	DWORD PTR [esi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [esi+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+60]
	mov	DWORD PTR [esi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [esi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+64]
	mov	DWORD PTR [esi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [esi+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+68]
	mov	DWORD PTR [esi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [esi+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+72]
	mov	DWORD PTR [esi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [esi+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+76]
	mov	DWORD PTR [esi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [esi+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [esi+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+84]
	mov	DWORD PTR [esi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [esi+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [esi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [esi+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+92]
	mov	DWORD PTR [esi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [esi+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+96]
	mov	DWORD PTR [esi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [esi+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+100]
	mov	DWORD PTR [esi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [esi+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+104]
	mov	DWORD PTR [esi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1339 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [esi+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+108]
	mov	DWORD PTR [esi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1340 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [esi+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [esi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1341 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [esi+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+116]
	mov	DWORD PTR [esi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1342 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [esi+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+120]
	mov	DWORD PTR [esi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1343 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, DWORD PTR [esi+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+124]
	mov	DWORD PTR [esi+124], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 775  :         u_ptr += 32;

	sub	esi, -128				; ffffff80H

; 776  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	BYTE PTR _c$[ebp], dl

; 777  :         --count;

	sub	ecx, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 778  :     }
; 779  :     // この時点で未処理の桁は 32 ワード未満のはず
; 780  : 
; 781  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 782  :     if (v_count & 0x10)

	test	bl, 16					; 00000010H
	je	SHORT $LN4@AddOneLine

; 783  :     {
; 784  :         c = _ADD_16WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	push	esi
	push	edi
	push	esi
	push	DWORD PTR _c$[ebp]
	call	__ADD_16WORDS_ADCX_DIV
	add	esp, 16					; 00000010H

; 785  :         u_ptr += 16;

	add	esi, 64					; 00000040H
	mov	dl, al

; 786  :         v_ptr += 16;

	add	edi, 64					; 00000040H
$LN4@AddOneLine:

; 787  :     }
; 788  :     // この時点で未処理の桁は 16 ワード未満のはず
; 789  : 
; 790  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 791  :     if (v_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3627 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3628 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3629 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3630 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3631 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 794  :         u_ptr += 8;

	add	esi, 32					; 00000020H

; 795  :         v_ptr += 8;

	add	edi, 32					; 00000020H
$LN5@AddOneLine:

; 796  :     }
; 797  :     // この時点で未処理の桁は 8 ワード未満のはず
; 798  : 
; 799  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 800  :     if (v_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4164 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4165 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4166 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4167 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 803  :         u_ptr += 4;

	add	esi, 16					; 00000010H

; 804  :         v_ptr += 4;

	add	edi, 16					; 00000010H
$LN6@AddOneLine:

; 805  :     }
; 806  :     // この時点で未処理の桁は 4 ワード未満のはず
; 807  : 
; 808  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 809  :     if (v_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4550 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4551 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 812  :         u_ptr += 2;

	add	esi, 8

; 813  :         v_ptr += 2;

	add	edi, 8
$LN7@AddOneLine:

; 814  :     }
; 815  :     // この時点で未処理の桁は 2 ワード未満のはず
; 816  : 
; 817  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 818  :     if (v_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@AddOneLine

; 819  :     {
; 820  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 821  :         ++u_ptr;

	add	esi, 4
$LN8@AddOneLine:

; 822  :         ++v_ptr;
; 823  :     }
; 824  : 
; 825  :     // 残りの桁の繰り上がりを計算する。
; 826  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	sub	ecx, esi
	add	ecx, DWORD PTR _u_buf$[ebp]
	sar	ecx, 2

; 673  :         if (u_count <= 0)

	test	ecx, ecx
	je	SHORT $LN131@AddOneLine
	npad	4
$LL113@AddOneLine:

; 674  :         {
; 675  :             // u の最上位まで達してしまった場合
; 676  :             return;
; 677  :         }
; 678  :         else if (c)

	test	dl, dl
	je	SHORT $LN131@AddOneLine

; 679  :         {
; 680  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 681  : 
; 682  :             // 繰り上がりを継続する
; 683  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, 0
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 684  :             ++u_ptr;

	add	esi, 4

; 685  :             --u_count;

	sub	ecx, 1
	jne	SHORT $LL113@AddOneLine
$LN131@AddOneLine:
	pop	edi

; 827  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_AddOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _AddOneLine
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_c$ = 24						; size = 1
_q_index$ = 24						; size = 4
_AddOneLine PROC					; COMDAT

; 698  : {

	push	ebp
	mov	ebp, esp

; 699  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]

; 700  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 701  :     __UNIT_TYPE v_count = v_buf_len;
; 702  :     char c = 0;

	xor	dl, dl
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx

; 703  : 
; 704  :     // まず 32 ワードずつ加算をする。
; 705  :     __UNIT_TYPE count = v_count >> 5;

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR _c$[ebp], dl
	mov	ecx, ebx
	shr	ecx, 5
	push	edi
	mov	edi, DWORD PTR _v_buf$[ebp]

; 706  :     while (count != 0)

	test	ecx, ecx
	je	$LN3@AddOneLine
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [esi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [esi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [esi+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+40]
	mov	DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [esi+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+44]
	mov	DWORD PTR [esi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [esi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+48]
	mov	DWORD PTR [esi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [esi+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+52]
	mov	DWORD PTR [esi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [esi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+56]
	mov	DWORD PTR [esi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [esi+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+60]
	mov	DWORD PTR [esi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [esi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+64]
	mov	DWORD PTR [esi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [esi+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+68]
	mov	DWORD PTR [esi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [esi+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+72]
	mov	DWORD PTR [esi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [esi+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+76]
	mov	DWORD PTR [esi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [esi+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [esi+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+84]
	mov	DWORD PTR [esi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [esi+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [esi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [esi+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+92]
	mov	DWORD PTR [esi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [esi+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+96]
	mov	DWORD PTR [esi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [esi+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+100]
	mov	DWORD PTR [esi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [esi+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+104]
	mov	DWORD PTR [esi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1086 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [esi+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+108]
	mov	DWORD PTR [esi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1087 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [esi+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [esi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1088 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [esi+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+116]
	mov	DWORD PTR [esi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1089 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [esi+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+120]
	mov	DWORD PTR [esi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1090 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, DWORD PTR [esi+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+124]
	mov	DWORD PTR [esi+124], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 709  :         u_ptr += 32;

	sub	esi, -128				; ffffff80H

; 710  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	BYTE PTR _c$[ebp], dl

; 711  :         --count;

	sub	ecx, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 712  :     }
; 713  :     // この時点で未処理の桁は 32 ワード未満のはず
; 714  : 
; 715  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 716  :     if (v_count & 0x10)

	test	bl, 16					; 00000010H
	je	SHORT $LN4@AddOneLine

; 717  :     {
; 718  :         c = _ADD_16WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	push	esi
	push	edi
	push	esi
	push	DWORD PTR _c$[ebp]
	call	__ADD_16WORDS_ADC_DIV
	add	esp, 16					; 00000010H

; 719  :         u_ptr += 16;

	add	esi, 64					; 00000040H
	mov	dl, al

; 720  :         v_ptr += 16;

	add	edi, 64					; 00000040H
$LN4@AddOneLine:

; 721  :     }
; 722  :     // この時点で未処理の桁は 16 ワード未満のはず
; 723  : 
; 724  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 725  :     if (v_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3542 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3543 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3544 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3545 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3546 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 728  :         u_ptr += 8;

	add	esi, 32					; 00000020H

; 729  :         v_ptr += 8;

	add	edi, 32					; 00000020H
$LN5@AddOneLine:

; 730  :     }
; 731  :     // この時点で未処理の桁は 8 ワード未満のはず
; 732  : 
; 733  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 734  :     if (v_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4107 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4108 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4109 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4110 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 737  :         u_ptr += 4;

	add	esi, 16					; 00000010H

; 738  :         v_ptr += 4;

	add	edi, 16					; 00000010H
$LN6@AddOneLine:

; 739  :     }
; 740  :     // この時点で未処理の桁は 4 ワード未満のはず
; 741  : 
; 742  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 743  :     if (v_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4507 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4508 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 746  :         u_ptr += 2;

	add	esi, 8

; 747  :         v_ptr += 2;

	add	edi, 8
$LN7@AddOneLine:

; 748  :     }
; 749  :     // この時点で未処理の桁は 2 ワード未満のはず
; 750  : 
; 751  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 752  :     if (v_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@AddOneLine

; 753  :     {
; 754  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 755  :         ++u_ptr;

	add	esi, 4
$LN8@AddOneLine:

; 756  :         ++v_ptr;
; 757  :     }
; 758  : 
; 759  :     // 残りの桁の繰り上がりを計算する。
; 760  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	sub	ecx, esi
	add	ecx, DWORD PTR _u_buf$[ebp]
	sar	ecx, 2

; 673  :         if (u_count <= 0)

	test	ecx, ecx
	je	SHORT $LN131@AddOneLine
	npad	7
$LL113@AddOneLine:

; 674  :         {
; 675  :             // u の最上位まで達してしまった場合
; 676  :             return;
; 677  :         }
; 678  :         else if (c)

	test	dl, dl
	je	SHORT $LN131@AddOneLine

; 679  :         {
; 680  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 681  : 
; 682  :             // 繰り上がりを継続する
; 683  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, 0
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 684  :             ++u_ptr;

	add	esi, 4

; 685  :             --u_count;

	sub	ecx, 1
	jne	SHORT $LL113@AddOneLine
$LN131@AddOneLine:
	pop	edi

; 761  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_AddOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _DoCarry
_TEXT	SEGMENT
_c$ = 8							; size = 1
_u_ptr$ = 12						; size = 4
_u_count$ = 16						; size = 4
_DoCarry PROC						; COMDAT

; 669  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 670  :     // 繰り上がりを続く限り行う
; 671  :     for (;;)
; 672  :     {
; 673  :         if (u_count <= 0)

	mov	esi, DWORD PTR _u_count$[ebp]
	test	esi, esi
	je	SHORT $LN16@DoCarry
	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	al, BYTE PTR _c$[ebp]
$LL2@DoCarry:

; 674  :         {
; 675  :             // u の最上位まで達してしまった場合
; 676  :             return;
; 677  :         }
; 678  :         else if (c)

	test	al, al
	je	SHORT $LN16@DoCarry

; 679  :         {
; 680  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 681  : 
; 682  :             // 繰り上がりを継続する
; 683  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
	adc	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 684  :             ++u_ptr;

	add	edx, 4

; 685  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL2@DoCarry
$LN16@DoCarry:
	pop	esi

; 686  :         }
; 687  :         else
; 688  :         {
; 689  :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 690  : 
; 691  :             // 繰り上がりを中断し、復帰する。
; 692  :             return;
; 693  :         }
; 694  :     }
; 695  : }

	pop	ebp
	ret	0
_DoCarry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _SubtructOneLineX
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_c$ = 16						; size = 1
_t_lo$1 = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_k$1$ = 24						; size = 4
_t_lo$2 = 24						; size = 4
_t_lo$3 = 24						; size = 4
_t_lo$4 = 24						; size = 4
_t_lo$5 = 24						; size = 4
_t_lo$6 = 24						; size = 4
_t_lo$7 = 24						; size = 4
_t_lo$8 = 24						; size = 4
_t_lo$9 = 24						; size = 4
_t_lo$10 = 24						; size = 4
_t_lo$11 = 24						; size = 4
_t_lo$12 = 24						; size = 4
_t_lo$13 = 24						; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
_SubtructOneLineX PROC					; COMDAT

; 518  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 519  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx
	push	esi

; 520  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 521  :     __UNIT_TYPE v_count = v_buf_len;
; 522  :     __UNIT_TYPE_DIV k = 0;
; 523  :     char c = 0;

	xor	bl, bl
	mov	DWORD PTR _k$1$[ebp], 0
	lea	ecx, DWORD PTR [ecx+eax*4]

; 524  : 
; 525  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	mov	edx, eax
	shr	edx, 5
	push	edi

; 526  :     while (count != 0)

	mov	edi, DWORD PTR _v_buf$[ebp]
	test	edx, edx
	mov	DWORD PTR _count$1$[ebp], edx
	mov	edx, DWORD PTR _q_$[ebp]
	je	$LN3@SubtructOn
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$13[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$12[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$11[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edi+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+44], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+60]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+64]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+64], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+68]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+68], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+72], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+76]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+76], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+80]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+80], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+84]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+84], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+88]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+88], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+92]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+92], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+96]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+96], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+100]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+100], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+104]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+104], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+108]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+108], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+112]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+112], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+116]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+116], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+120]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+120], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+124]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 562  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+124], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 561  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H

; 562  :         --count;

	dec	edx
	mov	DWORD PTR _v_buf$[ebp], edi
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 526  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _q_$[ebp]
	jne	$LL2@SubtructOn
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN3@SubtructOn:

; 563  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 564  :         if (sizeof(k) == sizeof(_UINT64_T))
; 565  :             AddToMULTI64Counter(32);
; 566  :         else
; 567  :             AddToMULTI32Counter(32);
; 568  : #endif
; 569  :     }
; 570  : 
; 571  :     if (v_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$10[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$9[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$8[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edi+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+44], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+60]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, DWORD PTR _t_hi$2$[ebp]
	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 590  :         v_ptr += 16;

	add	edi, 64					; 00000040H
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 599  :     if (v_count & 0x8)

	test	al, 8
	je	$LN704@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$7[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$6[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$5[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+28]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 610  :         v_ptr += 8;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 610  :         v_ptr += 8;

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN704@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 619  :     if (v_count & 0x4)

	test	al, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$4[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$3[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 626  :         v_ptr += 4;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _k$1$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 626  :         v_ptr += 4;

	add	edi, 16					; 00000010H
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 635  :     if (v_count & 0x2)

	test	al, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$2[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 640  :         v_ptr += 2;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _k$1$[ebp], eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 639  :         u_ptr += 2;

	add	ecx, 8

; 640  :         v_ptr += 2;

	add	edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 649  :     if (v_count & 0x1)

	test	al, 1
	je	SHORT $LN808@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$1[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, DWORD PTR _k$1$[ebp]
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 652  :         u_ptr += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1057 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 649  :     if (v_count & 0x1)

	jmp	SHORT $LN800@SubtructOn
$LN808@SubtructOn:
	mov	edi, DWORD PTR _k$1$[ebp]
$LN800@SubtructOn:

; 653  :         v_ptr += 1;
; 654  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 655  :         if (sizeof(k) == sizeof(_UINT64_T))
; 656  :             IncrementMULTI64Counter();
; 657  :         else
; 658  :             IncrementMULTI32Counter();
; 659  : #endif
; 660  :     }
; 661  : 
; 662  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	edx, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	edx, edi
	mov	DWORD PTR [ecx], edx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 663  :     u_ptr += 1;

	add	ecx, 4
	mov	BYTE PTR _c$[ebp], al

; 664  : 
; 665  :     return (DoBorrow(c, k, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	lea	eax, DWORD PTR [eax*4+4]
	sub	eax, ecx
	add	eax, DWORD PTR _u_buf$[ebp]
	sar	eax, 2
	push	eax
	push	ecx
	push	edi
	push	DWORD PTR _c$[ebp]
	call	_DoBorrow
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 666  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SubtructOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _SubtructOneLine
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_c$ = 16						; size = 1
_t_lo$1 = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_k$1$ = 24						; size = 4
_t_lo$2 = 24						; size = 4
_t_lo$3 = 24						; size = 4
_t_lo$4 = 24						; size = 4
_t_lo$5 = 24						; size = 4
_t_lo$6 = 24						; size = 4
_t_lo$7 = 24						; size = 4
_t_lo$8 = 24						; size = 4
_t_lo$9 = 24						; size = 4
_t_lo$10 = 24						; size = 4
_t_lo$11 = 24						; size = 4
_t_lo$12 = 24						; size = 4
_t_lo$13 = 24						; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
_SubtructOneLine PROC					; COMDAT

; 367  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 368  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx
	push	esi

; 369  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 370  :     __UNIT_TYPE v_count = v_buf_len;
; 371  :     __UNIT_TYPE_DIV k = 0;
; 372  :     char c = 0;

	xor	bl, bl
	mov	DWORD PTR _k$1$[ebp], 0
	lea	ecx, DWORD PTR [ecx+eax*4]

; 373  : 
; 374  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	mov	edx, eax
	shr	edx, 5
	push	edi

; 375  :     while (count != 0)

	mov	edi, DWORD PTR _v_buf$[ebp]
	test	edx, edx
	mov	DWORD PTR _count$1$[ebp], edx
	mov	edx, DWORD PTR _q_$[ebp]
	je	$LN3@SubtructOn
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$13[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$12[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$11[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+24]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+44], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax
	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+60]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+64]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+64], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+68]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+68], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+72]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+72], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+76]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+76], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+80]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+80], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+84]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+84], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+88]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+88], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+92]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+92], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+96]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+96], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+100]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+100], eax
	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+104], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+108]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+108], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+112]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+112], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+116]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+116], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+120]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+120], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+124]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+124], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 409  :         u_ptr += 32;

	sub	ecx, -128				; ffffff80H

; 410  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	DWORD PTR _v_buf$[ebp], edi

; 411  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 411  :         --count;

	dec	edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 411  :         --count;

	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 375  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _q_$[ebp]
	jne	$LL2@SubtructOn
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN3@SubtructOn:

; 412  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 413  :         if (sizeof(k) == sizeof(_UINT64_T))
; 414  :             AddToMULTI64Counter(32);
; 415  :         else
; 416  :             AddToMULTI32Counter(32);
; 417  : #endif
; 418  :     }
; 419  : 
; 420  :     if (v_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$10[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$9[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$8[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+24]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+44], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax
	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+60]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	adc	edx, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 439  :         v_ptr += 16;

	add	edi, 64					; 00000040H
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 448  :     if (v_count & 0x8)

	test	al, 8
	je	$LN704@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$7[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$6[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$5[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+28]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 459  :         v_ptr += 8;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 459  :         v_ptr += 8;

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN704@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 468  :     if (v_count & 0x4)

	test	al, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$4[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$3[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 475  :         v_ptr += 4;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 475  :         v_ptr += 4;

	add	edi, 16					; 00000010H
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 484  :     if (v_count & 0x2)

	test	al, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$2[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 489  :         v_ptr += 2;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 488  :         u_ptr += 2;

	add	ecx, 8

; 489  :         v_ptr += 2;

	add	edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 498  :     if (v_count & 0x1)

	test	al, 1
	je	SHORT $LN808@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _t_lo$1[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	adc	edi, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 501  :         u_ptr += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1057 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 498  :     if (v_count & 0x1)

	jmp	SHORT $LN800@SubtructOn
$LN808@SubtructOn:
	mov	edi, DWORD PTR _k$1$[ebp]
$LN800@SubtructOn:

; 502  :         v_ptr += 1;
; 503  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 504  :         if (sizeof(k) == sizeof(_UINT64_T))
; 505  :             IncrementMULTI64Counter();
; 506  :         else
; 507  :             IncrementMULTI32Counter();
; 508  : #endif
; 509  :     }
; 510  : 
; 511  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	edx, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	edx, edi
	mov	DWORD PTR [ecx], edx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 512  :     u_ptr += 1;

	add	ecx, 4
	mov	BYTE PTR _c$[ebp], al

; 513  : 
; 514  :     return (DoBorrow(c, k, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	lea	eax, DWORD PTR [eax*4+4]
	sub	eax, ecx
	add	eax, DWORD PTR _u_buf$[ebp]
	sar	eax, 2
	push	eax
	push	ecx
	push	edi
	push	DWORD PTR _c$[ebp]
	call	_DoBorrow
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx

; 515  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SubtructOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT __MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
__MULTIPLYX_DIGIT_UNIT_DIV PROC				; COMDAT

; 356  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _vp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 356  : {

	push	ebx
	push	esi

; 357  :     __UNIT_TYPE_DIV t_hi;
; 358  :     __UNIT_TYPE_DIV t_lo;
; 359  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);
; 360  :     _ADDX_UNIT_DIV(_ADDX_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	mov	esi, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 356  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, eax
	mov	ebx, edx

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	edi, DWORD PTR [esi]
	mov	eax, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	edx, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	ebx, eax

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 361  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 363  :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 362  :     *k = t_hi;

	mov	DWORD PTR [esi], ebx

; 363  :     return (c);

	pop	esi
	pop	ebx

; 364  : }

	pop	ebp
	ret	0
__MULTIPLYX_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT __MULTIPLY_DIGIT_UNIT_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
__MULTIPLY_DIGIT_UNIT_DIV PROC				; COMDAT

; 345  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _vp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 345  : {

	push	ebx
	push	esi

; 346  :     __UNIT_TYPE_DIV t_hi;
; 347  :     __UNIT_TYPE_DIV t_lo;
; 348  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);
; 349  :     _ADD_UNIT_DIV(_ADD_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	mov	esi, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 345  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, eax
	mov	ebx, edx

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	edi, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	edx, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _c$[ebp]

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	ebx, 0

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 350  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 352  :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 351  :     *k = t_hi;

	mov	DWORD PTR [esi], ebx

; 352  :     return (c);

	pop	esi
	pop	ebx

; 353  : }

	pop	ebp
	ret	0
__MULTIPLY_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _DoBorrow
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_up$ = 16						; size = 4
_u_count$ = 20						; size = 4
_DoBorrow PROC						; COMDAT

; 304  : {

	push	ebp
	mov	ebp, esp

; 305  :     // 桁借りを続く限り行う
; 306  :     for (;;)
; 307  :     {
; 308  :         if (u_count <= 0)

	mov	al, BYTE PTR _c$[ebp]
	push	esi
	mov	esi, DWORD PTR _u_count$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN14@DoBorrow
	mov	edx, DWORD PTR _up$[ebp]
	mov	edi, DWORD PTR _k$[ebp]
$LL2@DoBorrow:

; 318  :             }
; 319  : 
; 320  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 321  : 
; 322  :             return (FALSE);
; 323  :         }
; 324  :         else if (c)

	test	al, al
	je	SHORT $LN8@DoBorrow

; 325  :         {
; 326  :             // u の最上位に達しておらず、かつボローが立っている場合
; 327  : 
; 328  :             // 桁借りを継続する
; 329  :             c = _SUBTRUCT_UNIT_DIV(c, *up, k, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	add	al, 255					; 000000ffH
	sbb	ecx, edi
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 330  :             k = 0;

	xor	edi, edi

; 331  :             ++up;

	add	edx, 4

; 332  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL2@DoBorrow
$LN14@DoBorrow:

; 309  :         {
; 310  :             // u の最上位まで達してしまった場合
; 311  : 
; 312  :             if (c)

	test	al, al
	je	SHORT $LN8@DoBorrow

; 313  :             {
; 314  :                 // かつそれでも桁借りを行う必要がある場合
; 315  : 
; 316  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 317  :                 return (TRUE);

	pop	edi
	mov	eax, 1

; 340  :         }
; 341  :     }
; 342  : }

	pop	esi
	pop	ebp
	ret	0
$LN8@DoBorrow:
	pop	edi

; 333  :         }
; 334  :         else
; 335  :         {
; 336  :             // u の最上位に達しておらず、かつボローが立っていない場合
; 337  : 
; 338  :             // 桁借りを中断し復帰する。
; 339  :             return (FALSE);

	xor	eax, eax

; 340  :         }
; 341  :     }
; 342  : }

	pop	esi
	pop	ebp
	ret	0
_DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _CalculateQ_X
_TEXT	SEGMENT
_value$1$ = -8						; size = 4
_lh_mi$1$ = -4						; size = 4
tv328 = 8						; size = 4
_u_buf$ = 8						; size = 4
_rh_mi$1$ = 12						; size = 4
_v_buf$ = 12						; size = 4
_value$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf_len$ = 16					; size = 4
_v1$1$ = 20						; size = 4
_q_index$ = 20						; size = 4
_CalculateQ_X PROC					; COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 287  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]

; 288  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR _q_index$[ebp]
	add	ecx, edx
	push	ebx
	push	esi
	push	edi
	mov	ebx, DWORD PTR [eax+ecx*4]

; 289  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	edi, DWORD PTR [eax+ecx*4-4]

; 290  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [eax+ecx*4-8]

; 291  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR tv328[ebp], ecx
	mov	esi, DWORD PTR [eax+edx*4-4]

; 292  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	eax, DWORD PTR [eax+edx*4-8]
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	DWORD PTR _v2$1$[ebp], eax

; 199  :     if (uj == v1)

	cmp	ebx, esi
	jne	SHORT $LN6@CalculateQ

; 200  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1045 :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 650  :         return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, ebx
	or	ecx, edi

; 650  :         return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 209  :     return (q);

	mov	esi, eax
$LN5@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, edi

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, ebx
	sbb	ecx, edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 257  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN74@CalculateQ

; 258  :         return (FALSE);
; 259  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN2@CalculateQ

; 260  :         return (TRUE);
; 261  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 293  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 294  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 295  :         return (q_);
; 296  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	ecx, edx
	mov	eax, esi
	mul	DWORD PTR _v1$1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	edi, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ebx, edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 257  :     if (rh_hi > 0)

	test	ebx, ebx
	jne	SHORT $LN74@CalculateQ

; 258  :         return (FALSE);
; 259  :     else if (lh_mi > rh_mi)

	cmp	ecx, edi
	ja	SHORT $LN3@CalculateQ

; 260  :         return (TRUE);
; 261  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 297  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:
	pop	edi

; 298  :         return (q_);
; 299  :     --q_;

	lea	eax, DWORD PTR [esi-1]

; 300  :     return (q_);
; 301  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN74@CalculateQ:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _CalculateQ_
_TEXT	SEGMENT
_value$1$ = -8						; size = 4
_lh_mi$1$ = -4						; size = 4
tv328 = 8						; size = 4
_u_buf$ = 8						; size = 4
_rh_mi$1$ = 12						; size = 4
_v_buf$ = 12						; size = 4
_value$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf_len$ = 16					; size = 4
_v1$1$ = 20						; size = 4
_q_index$ = 20						; size = 4
_CalculateQ_ PROC					; COMDAT

; 268  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 269  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]

; 270  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR _q_index$[ebp]
	add	ecx, edx
	push	ebx
	push	esi
	push	edi
	mov	ebx, DWORD PTR [eax+ecx*4]

; 271  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	edi, DWORD PTR [eax+ecx*4-4]

; 272  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [eax+ecx*4-8]

; 273  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR tv328[ebp], ecx
	mov	esi, DWORD PTR [eax+edx*4-4]

; 274  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	eax, DWORD PTR [eax+edx*4-8]
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	DWORD PTR _v2$1$[ebp], eax

; 199  :     if (uj == v1)

	cmp	ebx, esi
	jne	SHORT $LN6@CalculateQ

; 200  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1045 :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 650  :         return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, ebx
	or	ecx, edi

; 650  :         return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 209  :     return (q);

	mov	esi, eax
$LN5@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, edi

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, ebx
	sbb	ecx, edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 229  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN74@CalculateQ

; 230  :         return (FALSE);
; 231  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN2@CalculateQ

; 232  :         return (TRUE);
; 233  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 275  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 276  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 277  :         return (q_);
; 278  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	ecx, edx
	mov	eax, esi
	mul	DWORD PTR _v1$1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	edi, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ebx, edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 229  :     if (rh_hi > 0)

	test	ebx, ebx
	jne	SHORT $LN74@CalculateQ

; 230  :         return (FALSE);
; 231  :     else if (lh_mi > rh_mi)

	cmp	ecx, edi
	ja	SHORT $LN3@CalculateQ

; 232  :         return (TRUE);
; 233  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 279  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:
	pop	edi

; 280  :         return (q_);
; 281  :     --q_;

	lea	eax, DWORD PTR [esi-1]

; 282  :     return (q_);
; 283  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN74@CalculateQ:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _CheckQ_X
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_X PROC						; COMDAT

; 240  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _q_$[ebp]
	mul	DWORD PTR _v2$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _uj$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 240  : {

	push	ebx
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	esi, DWORD PTR _uj_1$[ebp]

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ebx, eax
	mov	eax, DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 240  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
	mul	DWORD PTR _v1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	esi, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 257  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN27@CheckQ_X

; 258  :         return (FALSE);
; 259  :     else if (lh_mi > rh_mi)

	cmp	edi, esi
	jbe	SHORT $LN6@CheckQ_X

; 265  : }

	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ecx+1]
	pop	ebx
	pop	ebp
	ret	0
$LN6@CheckQ_X:

; 260  :         return (TRUE);
; 261  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_X

; 262  :         return (FALSE);
; 263  :     else
; 264  :         return (lh_lo > rh_lo);

	cmp	DWORD PTR _uj_2$[ebp], ebx
	pop	edi
	sbb	eax, eax

; 265  : }

	pop	esi
	neg	eax
	pop	ebx
	pop	ebp
	ret	0
$LN27@CheckQ_X:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
_CheckQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _CheckQ_
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_ PROC						; COMDAT

; 213  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _q_$[ebp]
	mul	DWORD PTR _v2$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _uj$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 213  : {

	push	ebx
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	esi, DWORD PTR _uj_1$[ebp]

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ebx, eax
	mov	eax, DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 213  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
	mul	DWORD PTR _v1$[ebp]

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sub	esi, eax

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2

; 541  :     return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 229  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN27@CheckQ_

; 230  :         return (FALSE);
; 231  :     else if (lh_mi > rh_mi)

	cmp	edi, esi
	jbe	SHORT $LN6@CheckQ_

; 237  : }

	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ecx+1]
	pop	ebx
	pop	ebp
	ret	0
$LN6@CheckQ_:

; 232  :         return (TRUE);
; 233  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_

; 234  :         return (FALSE);
; 235  :     else
; 236  :         return (lh_lo > rh_lo);

	cmp	DWORD PTR _uj_2$[ebp], ebx
	pop	edi
	sbb	eax, eax

; 237  : }

	pop	esi
	neg	eax
	pop	ebx
	pop	ebp
	ret	0
$LN27@CheckQ_:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
_CheckQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _AsumeQ_
_TEXT	SEGMENT
_uj$ = 8						; size = 4
_uj_1$ = 12						; size = 4
_v1$ = 16						; size = 4
_AsumeQ_ PROC						; COMDAT

; 198  : {

	push	ebp
	mov	ebp, esp

; 199  :     if (uj == v1)

	mov	ecx, DWORD PTR _uj$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@AsumeQ_

; 200  :         return (-1);

	or	eax, -1

; 210  : }

	pop	ebp
	ret	0
$LN2@AsumeQ_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1045 :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 650  :         return ((_UINT32_T)(t / v));

	push	0
	push	edx

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR _uj_1$[ebp]

; 650  :         return ((_UINT32_T)(t / v));

	push	ecx
	push	eax
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 210  : }

	pop	ebp
	ret	0
_AsumeQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_2WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADCX_DIV PROC				; COMDAT

; 4548 : {

	push	ebp
	mov	ebp, esp

; 4550 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4548 : {

	push	esi

; 4550 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4550 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4551 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4587 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4587 :     return (c);

	pop	esi

; 4588 : }

	pop	ebp
	ret	0
__ADD_2WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_2WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADC_DIV PROC				; COMDAT

; 4505 : {

	push	ebp
	mov	ebp, esp

; 4507 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4505 : {

	push	esi

; 4507 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4507 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4508 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4544 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4544 :     return (c);

	pop	esi

; 4545 : }

	pop	ebp
	ret	0
__ADD_2WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_4WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADCX_DIV PROC				; COMDAT

; 4162 : {

	push	ebp
	mov	ebp, esp

; 4164 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4162 : {

	push	esi

; 4164 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4164 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4165 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4166 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4167 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4215 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4215 :     return (c);

	pop	esi

; 4216 : }

	pop	ebp
	ret	0
__ADD_4WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_4WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADC_DIV PROC				; COMDAT

; 4105 : {

	push	ebp
	mov	ebp, esp

; 4107 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4105 : {

	push	esi

; 4107 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4107 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4108 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4109 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4110 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4158 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 4158 :     return (c);

	pop	esi

; 4159 : }

	pop	ebp
	ret	0
__ADD_4WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_8WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADCX_DIV PROC				; COMDAT

; 3622 : {

	push	ebp
	mov	ebp, esp

; 3623 : #ifdef _MSC_VER
; 3624 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3622 : {

	push	esi

; 3623 : #ifdef _MSC_VER
; 3624 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3627 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3628 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3629 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3630 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3631 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3703 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3703 :     return (c);

	pop	esi

; 3704 : }

	pop	ebp
	ret	0
__ADD_8WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_8WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADC_DIV PROC				; COMDAT

; 3537 : {

	push	ebp
	mov	ebp, esp

; 3538 : #ifdef _MSC_VER
; 3539 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3537 : {

	push	esi

; 3538 : #ifdef _MSC_VER
; 3539 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3542 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3543 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3544 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3545 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3546 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3618 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 3618 :     return (c);

	pop	esi

; 3619 : }

	pop	ebp
	ret	0
__ADD_8WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_16WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADCX_DIV PROC				; COMDAT

; 2774 : {

	push	ebp
	mov	ebp, esp

; 2775 : #ifdef _MSC_VER
; 2776 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2774 : {

	push	esi

; 2775 : #ifdef _MSC_VER
; 2776 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2777 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2778 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2779 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2780 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2781 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2782 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2783 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2784 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2785 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2786 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2787 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2788 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2789 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2790 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2791 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2911 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2911 :     return (c);

	pop	esi

; 2912 : }

	pop	ebp
	ret	0
__ADD_16WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_16WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADC_DIV PROC				; COMDAT

; 2633 : {

	push	ebp
	mov	ebp, esp

; 2634 : #ifdef _MSC_VER
; 2635 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2633 : {

	push	esi

; 2634 : #ifdef _MSC_VER
; 2635 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2636 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2637 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2638 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2639 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2640 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2641 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2642 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2643 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2644 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2645 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2646 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2647 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2648 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2649 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2650 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2770 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 2770 :     return (c);

	pop	esi

; 2771 : }

	pop	ebp
	ret	0
__ADD_16WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_32WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADCX_DIV PROC				; COMDAT

; 1310 : {

	push	ebp
	mov	ebp, esp

; 1311 : #ifdef _MSC_VER
; 1312 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1310 : {

	push	esi

; 1311 : #ifdef _MSC_VER
; 1312 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [edx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+64]
	mov	DWORD PTR [edi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [edx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+68]
	mov	DWORD PTR [edi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [edx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+72]
	mov	DWORD PTR [edi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [edx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+76]
	mov	DWORD PTR [edi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [edx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+80]
	mov	DWORD PTR [edi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [edx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [edi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [edx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [edi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [edx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+92]
	mov	DWORD PTR [edi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [edx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+96]
	mov	DWORD PTR [edi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [edx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+100]
	mov	DWORD PTR [edi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [edx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [edi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1339 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [edx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [edi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1340 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [edx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+112]
	mov	DWORD PTR [edi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1341 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [edx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+116]
	mov	DWORD PTR [edi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1342 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [edx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+120]
	mov	DWORD PTR [edi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1343 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [edx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+124]
	mov	DWORD PTR [edi+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1559 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 513  :     return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1559 :     return (c);

	pop	esi

; 1560 : }

	pop	ebp
	ret	0
__ADD_32WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h
;	COMDAT __ADD_32WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADC_DIV PROC				; COMDAT

; 1057 : {

	push	ebp
	mov	ebp, esp

; 1058 : #ifdef _MSC_VER
; 1059 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1057 : {

	push	esi

; 1058 : #ifdef _MSC_VER
; 1059 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [edx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+64]
	mov	DWORD PTR [edi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [edx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+68]
	mov	DWORD PTR [edi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [edx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+72]
	mov	DWORD PTR [edi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [edx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+76]
	mov	DWORD PTR [edi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [edx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+80]
	mov	DWORD PTR [edi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [edx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [edi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [edx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [edi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [edx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+92]
	mov	DWORD PTR [edi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [edx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+96]
	mov	DWORD PTR [edi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [edx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+100]
	mov	DWORD PTR [edi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [edx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [edi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1086 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [edx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [edi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1087 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [edx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+112]
	mov	DWORD PTR [edi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1088 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [edx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+116]
	mov	DWORD PTR [edi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1089 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [edx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+120]
	mov	DWORD PTR [edi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1090 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [edx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+124]
	mov	DWORD PTR [edi+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1306 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 485  :     return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\autogenerated_inline_func.h

; 1306 :     return (c);

	pop	esi

; 1307 : }

	pop	ebp
	ret	0
__ADD_32WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToMULTI64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC				; COMDAT

; 1085 : {

	push	ebp
	mov	ebp, esp

; 1086 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 1087 : }

	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToMULTI32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC				; COMDAT

; 1079 : {

	push	ebp
	mov	ebp, esp

; 1080 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 1081 : }

	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToDIV64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV64Counter PROC					; COMDAT

; 1073 : {

	push	ebp
	mov	ebp, esp

; 1074 :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+8
	lock	 xadd	 DWORD PTR [ecx], eax

; 1075 : }

	pop	ebp
	ret	0
_AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToDIV32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV32Counter PROC					; COMDAT

; 1067 : {

	push	ebp
	mov	ebp, esp

; 1068 :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax

; 1069 : }

	pop	ebp
	ret	0
_AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementMULTI64Counter
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC				; COMDAT

; 1063 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 1064 : }

	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementMULTI32Counter
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC				; COMDAT

; 1057 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 1058 : }

	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementDIV64Counter
_TEXT	SEGMENT
_IncrementDIV64Counter PROC				; COMDAT

; 1051 :     _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock	 inc	 (null) PTR _statistics_info+8

; 1052 : }

	ret	0
_IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementDIV32Counter
_TEXT	SEGMENT
_IncrementDIV32Counter PROC				; COMDAT

; 1045 :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 1046 : }

	ret	0
_IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT_DIV
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT_DIV PROC				; COMDAT

; 917  : {

	push	ebp
	mov	ebp, esp

; 918  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 919  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 943  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 920  : #ifdef _M_IX86
; 921  :     _UINT32_T pos;
; 922  : #ifdef _MSC_VER
; 923  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 924  : #elif defined(__GNUC__)
; 925  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 926  : #else
; 927  : #error unknown compiler
; 928  : #endif
; 929  : #elif defined(_M_X64)
; 930  : #ifdef _MSC_VER
; 931  :     _UINT32_T pos;
; 932  :     _BitScanReverse(&pos, x);
; 933  : #elif defined(__GNUC__)
; 934  :     _UINT64_T pos;
; 935  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 936  : #else
; 937  : #error unknown compiler
; 938  : #endif
; 939  : #else
; 940  : #error unknown platform
; 941  : #endif
; 942  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 943  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 888  : {

	push	ebp
	mov	ebp, esp

; 889  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 890  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 914  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 891  : #ifdef _M_IX86
; 892  :     _UINT32_T pos;
; 893  : #ifdef _MSC_VER
; 894  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 895  : #elif defined(__GNUC__)
; 896  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 897  : #else
; 898  : #error unknown compiler
; 899  : #endif
; 900  : #elif defined(_M_X64)
; 901  : #ifdef _MSC_VER
; 902  :     _UINT32_T pos;
; 903  :     _BitScanReverse64(&pos, x);
; 904  : #elif defined(__GNUC__)
; 905  :     _UINT64_T pos;
; 906  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 907  : #else
; 908  : #error unknown compiler
; 909  : #endif
; 910  : #else
; 911  : #error unknown platform
; 912  : #endif
; 913  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 914  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 855  : {

	push	ebp
	mov	ebp, esp

; 856  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 857  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 867  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 858  :     _UINT32_T pos;
; 859  : #ifdef _MSC_VER
; 860  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 861  : #elif defined(__GNUC__)
; 862  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 863  : #else
; 864  : #error unknown compiler
; 865  : #endif
; 866  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 867  : }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __DIVREM_SINGLE_UNIT
_TEXT	SEGMENT
tv70 = -8						; size = 8
tv69 = -8						; size = 8
_r$ = 8							; size = 4
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_q$ = 20						; size = 4
__DIVREM_SINGLE_UNIT PROC				; COMDAT

; 687  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _r$[ebp]
	xor	ecx, ecx
	or	ecx, DWORD PTR _u$[ebp]

; 687  : {

	push	ebx

; 688  : #ifdef _MSC_VER
; 689  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 690  :     {
; 691  :         // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 692  :         _UINT64_T t = _FROMWORDTODWORD(r, u);
; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	eax
	push	ecx
	call	__aulldvrm
	mov	DWORD PTR tv70[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv69[ebp+4], edx
	mov	edx, DWORD PTR _q$[ebp]

; 694  :         return ((_UINT32_T)(t % v));

	pop	ebx
	mov	DWORD PTR [edx], eax
	mov	eax, ecx

; 695  :     }
; 696  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 697  :     {
; 698  :         // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 699  :         // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 700  :         // ・128bit 整数のデータ型が用意されていない。
; 701  :         // ・x64 ではインラインアセンブラがサポートされていない。
; 702  :         *q = 0;
; 703  :         return (0);
; 704  :     }
; 705  :     else
; 706  :     {
; 707  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 708  :         *q = 0;
; 709  :         return (0);
; 710  :     }
; 711  : #elif defined(__GNUC__)
; 712  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 713  :         __asm__("divl %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 714  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 715  :         __asm__("divq %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 716  :     else
; 717  :     {
; 718  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 719  :         *q = 0;
; 720  :         r = 0;
; 721  :     }
; 722  :     return (r);
; 723  : #else
; 724  : #error unknown compiler
; 725  : #endif
; 726  : }

	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __DIVREM_UNIT
_TEXT	SEGMENT
tv70 = -8						; size = 8
tv69 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC					; COMDAT

; 643  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _u_high$[ebp]
	xor	ecx, ecx
	or	ecx, DWORD PTR _u_low$[ebp]

; 643  : {

	push	ebx

; 644  : #ifdef _MSC_VER
; 645  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 646  :     {
; 647  :         // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 648  :         _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 649  :         *r = (_UINT32_T)(t % v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	eax
	push	ecx
	call	__aulldvrm
	mov	DWORD PTR tv69[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv70[ebp+4], edx
	mov	edx, DWORD PTR _r$[ebp]

; 650  :         return ((_UINT32_T)(t / v));

	pop	ebx
	mov	DWORD PTR [edx], ecx

; 651  :     }
; 652  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 653  :     {
; 654  :         // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 655  :         // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 656  :         // ・128bit 整数のデータ型が用意されていない。
; 657  :         // ・x64 ではインラインアセンブラがサポートされていない。
; 658  :         *r = 0;
; 659  :         return (0);
; 660  :     }
; 661  :     else
; 662  :     {
; 663  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 664  :         *r = 0;
; 665  :         return (0);
; 666  :     }
; 667  : #elif defined(__GNUC__)
; 668  :     __UNIT_TYPE q;
; 669  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 670  :         __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 671  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 672  :         __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 673  :     else
; 674  :     {
; 675  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 676  :         *r = 0;
; 677  :         q = 0;
; 678  :     }
; 679  :     return (q);
; 680  : #else
; 681  : #error unknown compiler
; 682  : #endif
; 683  : }

	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MULTIPLYX_UNIT_DIV
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT_DIV PROC				; COMDAT

; 621  : {

	push	ebp
	mov	ebp, esp

; 622  : #ifdef _MSC_VER
; 623  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 442  :     *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 624  : #elif defined(__GNUC__)
; 625  : #ifdef _M_IX86
; 626  :     _UINT32_T w_lo;
; 627  :     __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 628  :     return (w_lo);
; 629  : #elif defined(_M_X64)
; 630  :     _UINT64_T w_lo;
; 631  :     __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 632  :     return (w_lo);
; 633  : #else
; 634  : #error unknown platform
; 635  : #endif
; 636  : #else
; 637  : #error unknown compiler
; 638  : #endif
; 639  : }

	pop	ebp
	ret	0
__MULTIPLYX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MULTIPLY_UNIT_DIV
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT_DIV PROC				; COMDAT

; 575  : {

	push	ebp
	mov	ebp, esp

; 576  : #ifdef _MSC_VER
; 577  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 442  :     *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 578  : #elif defined(__GNUC__)
; 579  : #ifdef _M_IX86
; 580  :     _UINT32_T w_lo;
; 581  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 582  :     return (w_lo);
; 583  : #elif defined(_M_X64)
; 584  :     return (_umul128(u, v, w_hi));
; 585  : #else
; 586  : #error unknown platform
; 587  : #endif
; 588  : #else
; 589  : #error unknown compiler
; 590  : #endif
; 591  : }

	pop	ebp
	ret	0
__MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __SUBTRUCT_UNIT_DIV
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT_DIV PROC				; COMDAT

; 539  : {

	push	ebp
	mov	ebp, esp

; 540  : #ifdef _MSC_VER
; 541  :     return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _borrow$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	sbb	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 542  : #elif defined(__GNUC__)
; 543  : #ifdef _M_IX86
; 544  :     return (_subborrow_u32(borrow, u, v, w));
; 545  : #elif defined(_M_X64)
; 546  :     return (_subborrow_u64(borrow, u, v, w));
; 547  : #else
; 548  : #error unknown platform
; 549  : #endif
; 550  : #else
; 551  : #error unknown compiler
; 552  : #endif
; 553  : }

	pop	ebp
	ret	0
__SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ADDX_UNIT_DIV
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT_DIV PROC					; COMDAT

; 511  : {

	push	ebp
	mov	ebp, esp

; 512  : #ifdef _MSC_VER
; 513  :     return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adcx	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 514  : #elif defined(__GNUC__)
; 515  : #ifdef _M_IX86
; 516  :     return (_addcarryx_u32(carry, u, v, w));
; 517  : #elif defined(_M_X64)
; 518  :     return (_addcarryx_u64(carry, u, v, w));
; 519  : #else
; 520  : #error unknown platform
; 521  : #endif
; 522  : #else
; 523  : #error unknown compiler
; 524  : #endif
; 525  : }

	pop	ebp
	ret	0
__ADDX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ADD_UNIT_DIV
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT_DIV PROC					; COMDAT

; 483  : {

	push	ebp
	mov	ebp, esp

; 484  : #ifdef _MSC_VER
; 485  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adc	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 486  : #elif defined(__GNUC__)
; 487  : #ifdef _M_IX86
; 488  :     return (_addcarry_u32(carry, u, v, w));
; 489  : #elif defined(_M_X64)
; 490  :     return (_addcarry_u64(carry, u, v, w));
; 491  : #else
; 492  : #error unknown platform
; 493  : #endif
; 494  : #else
; 495  : #error unknown compiler
; 496  : #endif
; 497  : }

	pop	ebp
	ret	0
__ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 441  : {

	push	ebp
	mov	ebp, esp

; 442  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 443  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 444  : }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 436  : {

	push	ebp
	mov	ebp, esp

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR _value_high$[ebp]
	xor	eax, eax
	or	eax, DWORD PTR _value_low$[ebp]

; 438  : }

	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 336  : {

	push	ebp
	mov	ebp, esp

; 337  : #ifdef _M_IX86
; 338  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 339  : #elif defined(_M_X64)
; 340  : #ifdef _MSC_VER
; 341  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 342  : #elif defined(__GNUC__)
; 343  :     __movsq(d, s, count);
; 344  : #else
; 345  : #error unknown compiler
; 346  : #endif
; 347  : #else
; 348  : #error unknown platform
; 349  : #endif
; 350  : }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_X@16
_TEXT	SEGMENT
_nr_light_check_code$1 = -16				; size = 4
_work_v_buf_words$2 = -12				; size = 4
_work_v_buf_code$3 = -8					; size = 4
_nr_light_check_code$4 = -8				; size = 4
_nq_light_check_code$5 = -4				; size = 4
_nq_light_check_code$6 = -4				; size = 4
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_nr$ = 12						; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_X@16 PROC					; COMDAT

; 1443 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi

; 1444 :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN34@PMC_DivRem

; 1445 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1446 :     if (v == NULL)

	mov	edi, DWORD PTR _v$[ebp]
	test	edi, edi
	je	$LN34@PMC_DivRem

; 1447 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1448 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN34@PMC_DivRem

; 1449 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1450 :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	je	$LN34@PMC_DivRem

; 1452 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1453 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1454 :     PMC_STATUS_CODE result;
; 1455 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1456 :         return (result);
; 1457 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1458 :         return (result);
; 1459 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [edi+16]
	test	al, 2
	je	SHORT $LN8@PMC_DivRem

; 1460 :     {
; 1461 :         // v が 0 である場合
; 1462 : 
; 1463 :         // 0 による除算はエラーで返す
; 1464 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	pop	edi
	mov	eax, -3					; fffffffdH

; 1586 : #ifdef _DEBUG
; 1587 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1588 :         return (result);
; 1589 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1590 :         return (result);
; 1591 : #endif
; 1592 :     return (PMC_STATUS_OK);
; 1593 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_DivRem:

; 1465 :     }
; 1466 :     NUMBER_HEADER* nq;
; 1467 :     NUMBER_HEADER* nr;
; 1468 :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	push	ebx
	je	SHORT $LN9@PMC_DivRem

; 1469 :     {
; 1470 :         // u が 0 である場合
; 1471 : 
; 1472 :         // q = 0, r = 0 を返す
; 1473 :         nq = &number_zero;

	mov	eax, OFFSET _number_zero

; 1474 :         nr = &number_zero;
; 1475 :     }

	jmp	$LN37@PMC_DivRem
$LN9@PMC_DivRem:

; 1476 :     else
; 1477 :     {
; 1478 :         // u が 0 ではない場合
; 1479 : 
; 1480 :         if (nv->IS_ONE)

	test	al, 4
	je	SHORT $LN11@PMC_DivRem

; 1481 :         {
; 1482 :             // v が 1 である場合
; 1483 : 
; 1484 :             // q = u, r = 0 を返す
; 1485 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN38@PMC_DivRem
$LN36@PMC_DivRem:
	pop	ebx
$LN1@PMC_DivRem:
	pop	edi

; 1586 : #ifdef _DEBUG
; 1587 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1588 :         return (result);
; 1589 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1590 :         return (result);
; 1591 : #endif
; 1592 :     return (PMC_STATUS_OK);
; 1593 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN11@PMC_DivRem:

; 1486 :                 return (result);
; 1487 :             nr = &number_zero;
; 1488 :         }
; 1489 :         else
; 1490 :         {
; 1491 :             // u > 0 かつ v > 1 である場合
; 1492 : 
; 1493 :             // x と y の商・剰余を計算する
; 1494 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ebx, DWORD PTR [esi+4]

; 1495 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [edi+4]

; 1496 :             if (u_bit_count < v_bit_count)

	cmp	ebx, ecx
	jae	SHORT $LN14@PMC_DivRem

; 1497 :             {
; 1498 :                 // 明らかに u < v である場合
; 1499 : 
; 1500 :                 // q = 0, r = u を返す。
; 1501 :                 nq = &number_zero;
; 1502 :                 if ((result = DuplicateNumber(nu, &nr)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr$[ebp]
	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN36@PMC_DivRem

; 1571 :                 if (nq->IS_ZERO)
; 1572 :                 {
; 1573 :                     DeallocateNumber(nq);
; 1574 :                     nq = &number_zero;
; 1575 :                 }
; 1576 :                 if (nr->IS_ZERO)
; 1577 :                 {
; 1578 :                     DeallocateNumber(nr);
; 1579 :                     nr = &number_zero;
; 1580 :                 }
; 1581 :             }
; 1582 :         }
; 1583 :     }
; 1584 :     *q = nq;

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR _nr$[ebp]
	pop	ebx
	mov	DWORD PTR [edx], eax

; 1585 :     *r = nr;

	mov	eax, DWORD PTR _r$[ebp]
	pop	edi

; 1586 : #ifdef _DEBUG
; 1587 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1588 :         return (result);
; 1589 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1590 :         return (result);
; 1591 : #endif
; 1592 :     return (PMC_STATUS_OK);
; 1593 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN14@PMC_DivRem:

; 1503 :                     return (result);
; 1504 :             }
; 1505 :             else if (v_bit_count <= sizeof(__UNIT_TYPE_DIV) * 8)

	mov	eax, ebx
	sub	eax, ecx
	add	eax, 33					; 00000021H
	cmp	ecx, 32					; 00000020H
	lea	ecx, DWORD PTR _nq_light_check_code$6[ebp]
	push	ecx
	push	eax
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	ja	$LN17@PMC_DivRem

; 1506 :             {
; 1507 :                 // 除数が 1 ワードで表現できる場合
; 1508 : 
; 1509 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1510 :                 __UNIT_TYPE nq_light_check_code;
; 1511 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN36@PMC_DivRem

; 1512 :                     return (result);
; 1513 :                 __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;
; 1514 :                 __UNIT_TYPE nr_light_check_code;
; 1515 :                 if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr_light_check_code$4[ebp]
	push	eax
	lea	eax, DWORD PTR _nr$[ebp]
	push	32					; 00000020H
	push	eax
	call	_AllocateNumber
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	jne	$LN43@PMC_DivRem

; 1516 :                 {
; 1517 :                     DeallocateNumber(nq);
; 1518 :                     return (result);
; 1519 :                 }
; 1520 :                 DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0], (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR [edi+24]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [esi+24]
	call	_DivRem_X_1W

; 1521 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$6[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1522 :                     return (result);
; 1523 :                 if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR _nr_light_check_code$4[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1524 :                     return (result);
; 1525 :                 CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1526 :                 CommitNumber(nr);

	push	DWORD PTR _nr$[ebp]
	call	_CommitNumber
	add	esp, 8

; 1527 :                 if (nq->IS_ZERO)
; 1528 :                 {
; 1529 :                     DeallocateNumber(nq);
; 1530 :                     nq = &number_zero;
; 1531 :                 }
; 1532 :                 if (nr->IS_ZERO)
; 1533 :                 {
; 1534 :                     DeallocateNumber(nr);
; 1535 :                     nr = &number_zero;
; 1536 :                 }
; 1537 :             }

	jmp	$LN42@PMC_DivRem
$LN17@PMC_DivRem:

; 1538 :             else
; 1539 :             {
; 1540 :                 // 除数を表現するのに 2 ワード以上必要な場合
; 1541 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1542 :                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1543 :                 __UNIT_TYPE nq_light_check_code;
; 1544 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1545 :                     return (result);
; 1546 :                 __UNIT_TYPE nr_light_check_code;
; 1547 :                 if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr_light_check_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR [ebx+32]
	push	eax
	lea	eax, DWORD PTR _nr$[ebp]
	push	eax
	call	_AllocateNumber
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	je	SHORT $LN26@PMC_DivRem
$LN43@PMC_DivRem:

; 1548 :                 {
; 1549 :                     DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 1550 :                     return (result);

	mov	eax, ebx
	pop	ebx
	pop	edi

; 1586 : #ifdef _DEBUG
; 1587 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1588 :         return (result);
; 1589 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1590 :         return (result);
; 1591 : #endif
; 1592 :     return (PMC_STATUS_OK);
; 1593 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN26@PMC_DivRem:

; 1551 :                 }
; 1552 :                 __UNIT_TYPE work_v_buf_code;
; 1553 :                 __UNIT_TYPE work_v_buf_words;
; 1554 :                 __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$3[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$2[ebp]
	push	eax
	mov	eax, DWORD PTR [edi]
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 1555 :                 if (work_v_buf == NULL)

	test	ebx, ebx
	jne	SHORT $LN27@PMC_DivRem

; 1556 :                 {
; 1557 :                     DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 1558 :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [ebx-5]
	pop	ebx
	pop	edi

; 1586 : #ifdef _DEBUG
; 1587 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1588 :         return (result);
; 1589 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1590 :         return (result);
; 1591 : #endif
; 1592 :     return (PMC_STATUS_OK);
; 1593 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN27@PMC_DivRem:

; 1559 :                 }
; 1560 : 
; 1561 :                 (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR [edi]
	push	ebx
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+24]
	mov	eax, DWORD PTR [esi]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [esi+24]
	call	DWORD PTR _fp_DivRem_X_X

; 1562 :                 if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$3[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1563 :                     return (result);
; 1564 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$5[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1565 :                     return (result);
; 1566 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$5[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1567 :                     return (result);
; 1568 :                 DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$2[ebp]
	push	ebx
	call	_DeallocateBlock

; 1569 :                 CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1570 :                 CommitNumber(nr);

	push	DWORD PTR _nr$[ebp]
	call	_CommitNumber
	add	esp, 16					; 00000010H
$LN42@PMC_DivRem:

; 1571 :                 if (nq->IS_ZERO)
; 1572 :                 {
; 1573 :                     DeallocateNumber(nq);
; 1574 :                     nq = &number_zero;
; 1575 :                 }
; 1576 :                 if (nr->IS_ZERO)
; 1577 :                 {
; 1578 :                     DeallocateNumber(nr);
; 1579 :                     nr = &number_zero;
; 1580 :                 }
; 1581 :             }
; 1582 :         }
; 1583 :     }
; 1584 :     *q = nq;

	mov	eax, DWORD PTR _nq$[ebp]
	test	BYTE PTR [eax+16], 2
	je	SHORT $LN31@PMC_DivRem
	push	eax
	call	_DeallocateNumber
	mov	eax, OFFSET _number_zero
	add	esp, 4
	mov	DWORD PTR _nq$[ebp], eax
$LN31@PMC_DivRem:
	mov	ecx, DWORD PTR _nr$[ebp]
	test	BYTE PTR [ecx+16], 2
	je	SHORT $LN32@PMC_DivRem
	push	ecx
	call	_DeallocateNumber
	add	esp, 4
$LN38@PMC_DivRem:
	mov	eax, DWORD PTR _nq$[ebp]
$LN37@PMC_DivRem:
	mov	ecx, OFFSET _number_zero
$LN32@PMC_DivRem:
	mov	edx, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1586 : #ifdef _DEBUG
; 1587 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1588 :         return (result);
; 1589 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1590 :         return (result);
; 1591 : #endif
; 1592 :     return (PMC_STATUS_OK);
; 1593 : }

	pop	esi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN34@PMC_DivRem:
	pop	edi

; 1451 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1586 : #ifdef _DEBUG
; 1587 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1588 :         return (result);
; 1589 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1590 :         return (result);
; 1591 : #endif
; 1592 :     return (PMC_STATUS_OK);
; 1593 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_X_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_L@20
_TEXT	SEGMENT
_v_buf$1 = -24						; size = 8
_work_v_buf$2 = -16					; size = 8
_r_buf_words$3 = -8					; size = 4
_r_buf_code$4 = -4					; size = 4
_nq_light_check_code$5 = -4				; size = 4
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_q$ = 20						; size = 4
_nq_light_check_code$6 = 24				; size = 4
_r_buf$7 = 24						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_X_L@20 PROC					; COMDAT

; 1258 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	push	edi

; 1259 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(v))
; 1260 :     {
; 1261 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1262 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1263 :     }
; 1264 :     if (u == NULL)

	mov	edi, DWORD PTR _u$[ebp]
	test	edi, edi
	je	$LN45@PMC_DivRem

; 1265 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1266 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN45@PMC_DivRem

; 1267 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1268 :     if (r == NULL)

	mov	esi, DWORD PTR _r$[ebp]
	test	esi, esi
	je	$LN45@PMC_DivRem

; 1270 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1271 :     PMC_STATUS_CODE result;
; 1272 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1273 :         return (result);
; 1274 :     if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, edx
	mov	ecx, DWORD PTR _v$[ebp+4]
	or	eax, ecx
	jne	SHORT $LN7@PMC_DivRem

; 1275 :     {
; 1276 :         // v が 0 である場合
; 1277 : 
; 1278 :         // 0 による除算はエラーで返す
; 1279 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	pop	edi
	mov	eax, -3					; fffffffdH

; 1440 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN7@PMC_DivRem:

; 1280 :     }
; 1281 :     NUMBER_HEADER* nq;
; 1282 :     if (nu->IS_ZERO)

	test	BYTE PTR [edi+16], 2
	push	ebx
	je	SHORT $LN8@PMC_DivRem

; 1389 :                         if (nq->IS_ZERO)
; 1390 :                         {
; 1391 :                             DeallocateNumber(nq);
; 1392 :                             nq = &number_zero;
; 1393 :                         }
; 1394 :                     }
; 1395 :                 }
; 1396 :             }
; 1397 :             else
; 1398 :             {
; 1399 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1400 : 
; 1401 :                 // x と y の商・剰余を計算する
; 1402 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1403 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1404 :                 if (u_bit_count < v_bit_count)
; 1405 :                 {
; 1406 :                     // 明らかに u < v である場合
; 1407 : 
; 1408 :                     // q = 0, r = u を返す。
; 1409 :                     nq = &number_zero;
; 1410 :                     *r = nu->BLOCK[0];
; 1411 :                 }
; 1412 :                 else
; 1413 :                 {
; 1414 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1415 :                     __UNIT_TYPE nq_light_check_code;
; 1416 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1417 :                         return (result);
; 1418 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1419 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1420 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1421 :                         return (result);
; 1422 :                     CommitNumber(nq);
; 1423 :                     *r = r_buf;
; 1424 :                     if (nq->IS_ZERO)
; 1425 :                     {
; 1426 :                         DeallocateNumber(nq);
; 1427 :                         nq = &number_zero;
; 1428 :                     }
; 1429 :                 }
; 1430 :             }
; 1431 : 
; 1432 :         }
; 1433 :     }
; 1434 :     *q = nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, OFFSET _number_zero
	pop	ebx
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	pop	edi
	mov	DWORD PTR [eax], ecx

; 1435 : #ifdef _DEBUG
; 1436 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1437 :         return (result);
; 1438 : #endif
; 1439 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1440 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN8@PMC_DivRem:

; 1283 :     {
; 1284 :         // x が 0 である場合
; 1285 : 
; 1286 :         // q = 0, r = 0 を返す
; 1287 :         nq = &number_zero;
; 1288 :         *r = 0;
; 1289 :     }
; 1290 :     else
; 1291 :     {
; 1292 :         // u が 0 ではない場合
; 1293 : 
; 1294 :         if (v == 1)

	cmp	edx, 1
	jne	SHORT $LN10@PMC_DivRem
	test	ecx, ecx
	jne	SHORT $LN10@PMC_DivRem

; 1295 :         {
; 1296 :             // v が 1 である場合
; 1297 : 
; 1298 :             // q = u, r = 0 を返す
; 1299 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN46@PMC_DivRem

; 1300 :                 return (result);
; 1301 :             *r = 0;
; 1302 :         }

	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax

; 1389 :                         if (nq->IS_ZERO)
; 1390 :                         {
; 1391 :                             DeallocateNumber(nq);
; 1392 :                             nq = &number_zero;
; 1393 :                         }
; 1394 :                     }
; 1395 :                 }
; 1396 :             }
; 1397 :             else
; 1398 :             {
; 1399 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1400 : 
; 1401 :                 // x と y の商・剰余を計算する
; 1402 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1403 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1404 :                 if (u_bit_count < v_bit_count)
; 1405 :                 {
; 1406 :                     // 明らかに u < v である場合
; 1407 : 
; 1408 :                     // q = 0, r = u を返す。
; 1409 :                     nq = &number_zero;
; 1410 :                     *r = nu->BLOCK[0];
; 1411 :                 }
; 1412 :                 else
; 1413 :                 {
; 1414 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1415 :                     __UNIT_TYPE nq_light_check_code;
; 1416 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1417 :                         return (result);
; 1418 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1419 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1420 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1421 :                         return (result);
; 1422 :                     CommitNumber(nq);
; 1423 :                     *r = r_buf;
; 1424 :                     if (nq->IS_ZERO)
; 1425 :                     {
; 1426 :                         DeallocateNumber(nq);
; 1427 :                         nq = &number_zero;
; 1428 :                     }
; 1429 :                 }
; 1430 :             }
; 1431 : 
; 1432 :         }
; 1433 :     }
; 1434 :     *q = nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1440 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN10@PMC_DivRem:

; 1303 :         else
; 1304 :         {
; 1305 :             // u > 0 かつ v > 1 である場合
; 1306 : 
; 1307 :             // u と v の商・剰余を計算する
; 1308 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ebx, DWORD PTR [edi+4]

; 1309 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))
; 1310 :             {
; 1311 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1312 :                 _UINT32_T v_hi;
; 1313 :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 1314 :                 if (v_hi == 0)

	test	ecx, ecx
	jne	$LN15@PMC_DivRem

; 1315 :                 {
; 1316 :                     // v の値が 32bit で表現可能な場合
; 1317 :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1318 :                     if (u_bit_count < v_bit_count)

	cmp	ebx, ecx
	jae	SHORT $LN17@PMC_DivRem

; 1319 :                     {
; 1320 :                         // 明らかに u < v である場合
; 1321 : 
; 1322 :                         // q = 0, r = u を返す。
; 1323 :                         nq = &number_zero;
; 1324 :                         *r = nu->BLOCK[0];

	mov	eax, DWORD PTR [edi+24]
	mov	ecx, OFFSET _number_zero
	mov	DWORD PTR _nq$[ebp], ecx
	pop	ebx
	pop	edi
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [esi], eax

; 1389 :                         if (nq->IS_ZERO)
; 1390 :                         {
; 1391 :                             DeallocateNumber(nq);
; 1392 :                             nq = &number_zero;
; 1393 :                         }
; 1394 :                     }
; 1395 :                 }
; 1396 :             }
; 1397 :             else
; 1398 :             {
; 1399 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1400 : 
; 1401 :                 // x と y の商・剰余を計算する
; 1402 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1403 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1404 :                 if (u_bit_count < v_bit_count)
; 1405 :                 {
; 1406 :                     // 明らかに u < v である場合
; 1407 : 
; 1408 :                     // q = 0, r = u を返す。
; 1409 :                     nq = &number_zero;
; 1410 :                     *r = nu->BLOCK[0];
; 1411 :                 }
; 1412 :                 else
; 1413 :                 {
; 1414 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1415 :                     __UNIT_TYPE nq_light_check_code;
; 1416 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1417 :                         return (result);
; 1418 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1419 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1420 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1421 :                         return (result);
; 1422 :                     CommitNumber(nq);
; 1423 :                     *r = r_buf;
; 1424 :                     if (nq->IS_ZERO)
; 1425 :                     {
; 1426 :                         DeallocateNumber(nq);
; 1427 :                         nq = &number_zero;
; 1428 :                     }
; 1429 :                 }
; 1430 :             }
; 1431 : 
; 1432 :         }
; 1433 :     }
; 1434 :     *q = nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [esi+4], 0

; 1440 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN17@PMC_DivRem:

; 1325 :                     }
; 1326 :                     else
; 1327 :                     {
; 1328 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1329 :                         __UNIT_TYPE nq_light_check_code;
; 1330 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$5[ebp]
	sub	ebx, ecx
	push	eax
	add	ebx, 33					; 00000021H
	lea	eax, DWORD PTR _nq$[ebp]
	push	ebx
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN46@PMC_DivRem

; 1331 :                             return (result);
; 1332 :                         __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$7[ebp], eax

; 1333 :                         DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	eax, DWORD PTR _r_buf$7[ebp]
	push	eax
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	eax, DWORD PTR [edi]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+24]
	call	_DivRem_X_1W

; 1334 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$5[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN46@PMC_DivRem

; 1335 :                             return (result);
; 1336 :                         CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1337 :                         *r = r_buf;

	mov	eax, DWORD PTR _r_buf$7[ebp]
	add	esp, 4
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], 0

; 1338 :                         if (nq->IS_ZERO)
; 1339 :                         {
; 1340 :                             DeallocateNumber(nq);
; 1341 :                             nq = &number_zero;
; 1342 :                         }
; 1343 :                     }
; 1344 :                 }

	jmp	$LN49@PMC_DivRem
$LN15@PMC_DivRem:

; 1345 :                 else
; 1346 :                 {
; 1347 :                     // v の値が 32bit では表現できない場合
; 1348 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	push	ecx
	call	__LZCNT_ALT_32
	mov	ecx, 64					; 00000040H
	add	esp, 4
	sub	ecx, eax

; 1349 :                     if (u_bit_count < v_bit_count)

	cmp	ebx, ecx
	jae	SHORT $LN22@PMC_DivRem

; 1360 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;

	cmp	DWORD PTR [edi], 1
	mov	ecx, OFFSET _number_zero
	mov	edx, DWORD PTR [edi+24]
	mov	DWORD PTR _nq$[ebp], ecx
	mov	ebx, DWORD PTR [edx]
	jbe	SHORT $LN37@PMC_DivRem
	mov	edx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1361 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);

	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi], eax

; 1389 :                         if (nq->IS_ZERO)
; 1390 :                         {
; 1391 :                             DeallocateNumber(nq);
; 1392 :                             nq = &number_zero;
; 1393 :                         }
; 1394 :                     }
; 1395 :                 }
; 1396 :             }
; 1397 :             else
; 1398 :             {
; 1399 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1400 : 
; 1401 :                 // x と y の商・剰余を計算する
; 1402 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1403 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1404 :                 if (u_bit_count < v_bit_count)
; 1405 :                 {
; 1406 :                     // 明らかに u < v である場合
; 1407 : 
; 1408 :                     // q = 0, r = u を返す。
; 1409 :                     nq = &number_zero;
; 1410 :                     *r = nu->BLOCK[0];
; 1411 :                 }
; 1412 :                 else
; 1413 :                 {
; 1414 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1415 :                     __UNIT_TYPE nq_light_check_code;
; 1416 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1417 :                         return (result);
; 1418 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1419 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1420 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1421 :                         return (result);
; 1422 :                     CommitNumber(nq);
; 1423 :                     *r = r_buf;
; 1424 :                     if (nq->IS_ZERO)
; 1425 :                     {
; 1426 :                         DeallocateNumber(nq);
; 1427 :                         nq = &number_zero;
; 1428 :                     }
; 1429 :                 }
; 1430 :             }
; 1431 : 
; 1432 :         }
; 1433 :     }
; 1434 :     *q = nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1440 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN37@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1360 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;

	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1361 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);

	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi], eax

; 1389 :                         if (nq->IS_ZERO)
; 1390 :                         {
; 1391 :                             DeallocateNumber(nq);
; 1392 :                             nq = &number_zero;
; 1393 :                         }
; 1394 :                     }
; 1395 :                 }
; 1396 :             }
; 1397 :             else
; 1398 :             {
; 1399 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1400 : 
; 1401 :                 // x と y の商・剰余を計算する
; 1402 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1403 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1404 :                 if (u_bit_count < v_bit_count)
; 1405 :                 {
; 1406 :                     // 明らかに u < v である場合
; 1407 : 
; 1408 :                     // q = 0, r = u を返す。
; 1409 :                     nq = &number_zero;
; 1410 :                     *r = nu->BLOCK[0];
; 1411 :                 }
; 1412 :                 else
; 1413 :                 {
; 1414 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1415 :                     __UNIT_TYPE nq_light_check_code;
; 1416 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1417 :                         return (result);
; 1418 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1419 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1420 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1421 :                         return (result);
; 1422 :                     CommitNumber(nq);
; 1423 :                     *r = r_buf;
; 1424 :                     if (nq->IS_ZERO)
; 1425 :                     {
; 1426 :                         DeallocateNumber(nq);
; 1427 :                         nq = &number_zero;
; 1428 :                     }
; 1429 :                 }
; 1430 :             }
; 1431 : 
; 1432 :         }
; 1433 :     }
; 1434 :     *q = nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1440 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN22@PMC_DivRem:

; 1362 :                         }
; 1363 :                     }
; 1364 :                     else
; 1365 :                     {
; 1366 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1367 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1368 :                         __UNIT_TYPE nq_light_check_code;
; 1369 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$6[ebp]
	push	eax
	mov	eax, ebx
	sub	eax, ecx
	add	eax, 33					; 00000021H
	push	eax
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN46@PMC_DivRem

; 1370 :                             return (result);
; 1371 :                         __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v_buf$1[ebp], eax
	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR _v_buf$1[ebp+4], eax

; 1372 :                         __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1373 :                         __UNIT_TYPE r_buf_code;
; 1374 :                         __UNIT_TYPE r_buf_words;
; 1375 :                         __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	eax, DWORD PTR _r_buf_code$4[ebp]
	push	eax
	lea	eax, DWORD PTR _r_buf_words$3[ebp]
	mov	DWORD PTR _work_v_buf$2[ebp], 0
	push	eax
	lea	eax, DWORD PTR [ebx+32]
	mov	DWORD PTR _work_v_buf$2[ebp+4], 0
	push	eax
	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 1376 :                         if (r_buf == NULL)

	test	ebx, ebx
	jne	SHORT $LN27@PMC_DivRem

; 1377 :                         {
; 1378 :                             DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 1379 :                             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [ebx-5]
$LN46@PMC_DivRem:
	pop	ebx
$LN1@PMC_DivRem:
	pop	edi

; 1440 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN27@PMC_DivRem:

; 1380 :                         }
; 1381 :                         (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, r_buf);

	mov	eax, DWORD PTR _nq$[ebp]
	push	ebx
	push	DWORD PTR [eax+24]
	lea	eax, DWORD PTR _work_v_buf$2[ebp]
	push	eax
	push	2
	lea	eax, DWORD PTR _v_buf$1[ebp]
	push	eax
	mov	eax, DWORD PTR [edi]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+24]
	call	DWORD PTR _fp_DivRem_X_X

; 1382 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$6[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	SHORT $LN46@PMC_DivRem

; 1383 :                             return (result);
; 1384 :                         if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _r_buf_code$4[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN46@PMC_DivRem

; 1385 :                             return (result);
; 1386 :                         CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1388 :                         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	DWORD PTR _r_buf_words$3[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR [ebx+4]
	xor	eax, eax
	or	eax, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1388 :                         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	ebx
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	call	_DeallocateBlock
	add	esp, 12					; 0000000cH
$LN49@PMC_DivRem:

; 1389 :                         if (nq->IS_ZERO)
; 1390 :                         {
; 1391 :                             DeallocateNumber(nq);
; 1392 :                             nq = &number_zero;
; 1393 :                         }
; 1394 :                     }
; 1395 :                 }
; 1396 :             }
; 1397 :             else
; 1398 :             {
; 1399 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1400 : 
; 1401 :                 // x と y の商・剰余を計算する
; 1402 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1403 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1404 :                 if (u_bit_count < v_bit_count)
; 1405 :                 {
; 1406 :                     // 明らかに u < v である場合
; 1407 : 
; 1408 :                     // q = 0, r = u を返す。
; 1409 :                     nq = &number_zero;
; 1410 :                     *r = nu->BLOCK[0];
; 1411 :                 }
; 1412 :                 else
; 1413 :                 {
; 1414 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1415 :                     __UNIT_TYPE nq_light_check_code;
; 1416 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1417 :                         return (result);
; 1418 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1419 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1420 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1421 :                         return (result);
; 1422 :                     CommitNumber(nq);
; 1423 :                     *r = r_buf;
; 1424 :                     if (nq->IS_ZERO)
; 1425 :                     {
; 1426 :                         DeallocateNumber(nq);
; 1427 :                         nq = &number_zero;
; 1428 :                     }
; 1429 :                 }
; 1430 :             }
; 1431 : 
; 1432 :         }
; 1433 :     }
; 1434 :     *q = nq;

	mov	ecx, DWORD PTR _nq$[ebp]
	test	BYTE PTR [ecx+16], 2
	je	SHORT $LN30@PMC_DivRem
	push	ecx
	call	_DeallocateNumber
	add	esp, 4
	mov	ecx, OFFSET _number_zero
$LN30@PMC_DivRem:
	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1440 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN45@PMC_DivRem:
	pop	edi

; 1269 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1440 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_PMC_DivRem_X_L@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_I@16
_TEXT	SEGMENT
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_nq_light_check_code$1 = 12				; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r_buf$2 = 20						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_I@16 PROC					; COMDAT

; 1015 : {

	push	ebp
	mov	ebp, esp
	push	esi

; 1016 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))
; 1017 :     {
; 1018 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1019 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1020 :     }
; 1021 :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN19@PMC_DivRem

; 1022 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1023 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN19@PMC_DivRem

; 1024 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1025 :     if (r == NULL)

	mov	edi, DWORD PTR _r$[ebp]
	test	edi, edi
	je	$LN19@PMC_DivRem

; 1027 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1028 :     PMC_STATUS_CODE result;
; 1029 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1030 :         return (result);
; 1031 :     if (v == 0)

	push	ebx
	mov	ebx, DWORD PTR _v$[ebp]
	test	ebx, ebx
	jne	SHORT $LN7@PMC_DivRem

; 1032 :     {
; 1033 :         // v が 0 である場合
; 1034 : 
; 1035 :         // 0 による除算はエラーで返す
; 1036 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	lea	eax, DWORD PTR [ebx-3]
$LN20@PMC_DivRem:
	pop	ebx
$LN1@PMC_DivRem:
	pop	edi

; 1101 : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN7@PMC_DivRem:

; 1037 :     }
; 1038 :     NUMBER_HEADER* nq;
; 1039 :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	je	SHORT $LN8@PMC_DivRem

; 1090 :                     nq = &number_zero;
; 1091 :                 }
; 1092 :             }
; 1093 :         }
; 1094 :     }
; 1095 :     *q = nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, OFFSET _number_zero
	pop	ebx
	mov	DWORD PTR [edi], 0
	pop	edi
	mov	DWORD PTR [eax], ecx

; 1096 : #ifdef _DEBUG
; 1097 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1098 :         return (result);
; 1099 : #endif
; 1100 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1101 : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_DivRem:

; 1040 :     {
; 1041 :         // u が 0 である場合
; 1042 : 
; 1043 :         // q = 0, r = 0 を返す
; 1044 :         nq = &number_zero;
; 1045 :         *r = 0;
; 1046 :     }
; 1047 :     else
; 1048 :     {
; 1049 :         // u が 0 ではない場合
; 1050 : 
; 1051 :         if (v == 1)

	cmp	ebx, 1
	jne	SHORT $LN10@PMC_DivRem

; 1052 :         {
; 1053 :             // v が 1 である場合
; 1054 : 
; 1055 :             // q = u, r = 0 を返す
; 1056 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@PMC_DivRem

; 1057 :                 return (result);
; 1058 :             *r = 0;
; 1059 :         }

	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [edi], eax

; 1090 :                     nq = &number_zero;
; 1091 :                 }
; 1092 :             }
; 1093 :         }
; 1094 :     }
; 1095 :     *q = nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1101 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	pop	ebp
	ret	16					; 00000010H
$LN10@PMC_DivRem:

; 1060 :         else
; 1061 :         {
; 1062 :             // u と v がともに 0 ではない場合
; 1063 : 
; 1064 :             // x と y の商・剰余を計算する
; 1065 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+4]

; 1066 :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	push	ebx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1067 :             if (u_bit_count < v_bit_count)

	cmp	edx, ecx
	jae	SHORT $LN13@PMC_DivRem

; 1068 :             {
; 1069 :                 // 明らかに u < v である場合
; 1070 : 
; 1071 :                 // q = 0, r = u を返す。
; 1072 :                 nq = &number_zero;
; 1073 :                 *r = (_UINT32_T)nu->BLOCK[0];

	mov	eax, DWORD PTR [esi+24]
	mov	ecx, OFFSET _number_zero
	mov	DWORD PTR _nq$[ebp], ecx
	pop	ebx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edi], eax

; 1090 :                     nq = &number_zero;
; 1091 :                 }
; 1092 :             }
; 1093 :         }
; 1094 :     }
; 1095 :     *q = nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	edi

; 1101 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	pop	ebp
	ret	16					; 00000010H
$LN13@PMC_DivRem:

; 1074 :             }
; 1075 :             else
; 1076 :             {
; 1077 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1078 :                 __UNIT_TYPE nq_light_check_code;
; 1079 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$1[ebp]
	sub	edx, ecx
	push	eax
	add	edx, 33					; 00000021H
	lea	eax, DWORD PTR _nq$[ebp]
	push	edx
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN20@PMC_DivRem

; 1080 :                     return (result);
; 1081 :                 __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$2[ebp], eax

; 1082 :                 DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	eax, DWORD PTR _r_buf$2[ebp]
	push	eax
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR [esi]
	push	ebx
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [esi+24]
	call	_DivRem_X_1W

; 1083 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$1[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN20@PMC_DivRem

; 1084 :                     return (result);
; 1085 :                 CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1086 :                 *r = (_UINT32_T)r_buf;
; 1087 :                 if (nq->IS_ZERO)

	mov	ecx, DWORD PTR _nq$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _r_buf$2[ebp]
	mov	DWORD PTR [edi], eax
	test	BYTE PTR [ecx+16], 2
	je	SHORT $LN17@PMC_DivRem

; 1088 :                 {
; 1089 :                     DeallocateNumber(nq);

	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 1090 :                     nq = &number_zero;
; 1091 :                 }
; 1092 :             }
; 1093 :         }
; 1094 :     }
; 1095 :     *q = nq;

	mov	ecx, OFFSET _number_zero
$LN17@PMC_DivRem:
	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1101 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	pop	ebp
	ret	16					; 00000010H
$LN19@PMC_DivRem:
	pop	edi

; 1026 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1101 : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_X_I@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _PMC_DivRem_L_X@20
_TEXT	SEGMENT
_r$GSCopy$1$ = -48					; size = 4
tv282 = -44						; size = 8
tv87 = -44						; size = 8
_u_buf$1 = -44						; size = 8
_u_buf$2 = -44						; size = 8
_v$GSCopy$1$ = -40					; size = 4
$T3 = -36						; size = 8
$T4 = -36						; size = 8
_work_v_buf$5 = -36					; size = 8
_q$GSCopy$1$ = -32					; size = 4
_r_buf$6 = -32						; size = 4
_r_buf$7 = -28						; size = 12
_q_buf$8 = -16						; size = 12
_q_buf$9 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_q$ = 20						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_L_X@20 PROC					; COMDAT

; 1104 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$GSCopy$1$[ebp], ecx
	mov	DWORD PTR _v$GSCopy$1$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _q$[ebp]
	mov	DWORD PTR _q$GSCopy$1$[ebp], ebx
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	mov	edi, DWORD PTR _u$[ebp+4]

; 1105 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(u))
; 1106 :     {
; 1107 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1108 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1109 :     }
; 1110 :     if (v == NULL)

	test	eax, eax
	je	$LN49@PMC_DivRem

; 1111 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1112 :     if (q == NULL)

	test	ebx, ebx
	je	$LN49@PMC_DivRem

; 1113 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1114 :     if (r == NULL)

	test	ecx, ecx
	je	$LN49@PMC_DivRem

; 1116 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1117 :     PMC_STATUS_CODE result;
; 1118 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	eax
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1119 :         return (result);
; 1120 :     if (nv->IS_ZERO)

	mov	edx, DWORD PTR _v$GSCopy$1$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	test	cl, 2
	je	SHORT $LN7@PMC_DivRem

; 1255 : }

	pop	edi
	pop	esi
	mov	eax, -3					; fffffffdH
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN7@PMC_DivRem:

; 1121 :     {
; 1122 :         // v が 0 である場合
; 1123 : 
; 1124 :         // 0 による除算はエラーで返す
; 1125 :         return (PMC_STATUS_DIVISION_BY_ZERO);
; 1126 :     }
; 1127 :     if (u == 0)

	mov	eax, esi
	or	eax, edi
	jne	SHORT $LN8@PMC_DivRem

; 1128 :     {
; 1129 :         // x が 0 である場合
; 1130 : 
; 1131 :         // q = 0, r = 0 を返す
; 1132 :         *q = 0;

	mov	DWORD PTR [ebx], eax
	xorps	xmm0, xmm0
	mov	DWORD PTR [ebx+4], eax

; 1254 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _r$GSCopy$1$[ebp]
	movlpd	QWORD PTR $T3[ebp], xmm0
	mov	edi, DWORD PTR $T3[ebp+4]
	mov	esi, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	xor	eax, eax
	pop	edi

; 1255 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN8@PMC_DivRem:

; 1133 :         *r = 0;
; 1134 :     }
; 1135 :     else
; 1136 :     {
; 1137 :         // u が 0 ではない場合
; 1138 : 
; 1139 :         if (nv->IS_ONE)

	test	cl, 4
	je	SHORT $LN10@PMC_DivRem

; 1254 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _r$GSCopy$1$[ebp]
	xorps	xmm0, xmm0
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+4], edi
	movlpd	QWORD PTR $T3[ebp], xmm0
	mov	edi, DWORD PTR $T3[ebp+4]
	mov	esi, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	xor	eax, eax
	pop	edi

; 1255 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN10@PMC_DivRem:

; 1140 :         {
; 1141 :             // v が 1 である場合
; 1142 : 
; 1143 :             // q = u, r = 0 を返す
; 1144 :             *q = u;
; 1145 :             *r = 0;
; 1146 :         }
; 1147 :         else
; 1148 :         {
; 1149 :             // u > 0 かつ v > 1 である場合
; 1150 : 
; 1151 :             // u と v の商・剰余を計算する
; 1152 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))
; 1153 :             {
; 1154 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1155 :                 _UINT32_T u_hi;
; 1156 :                 _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);
; 1157 :                 if (u_hi == 0)

	test	edi, edi
	jne	$LN14@PMC_DivRem

; 1158 :                 {
; 1159 :                     // u の値が 32bit で表現可能な場合
; 1160 :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	push	esi
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1161 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1162 :                     if (u_bit_count < v_bit_count)

	cmp	ecx, DWORD PTR [edx+4]
	jae	SHORT $LN16@PMC_DivRem

; 1163 :                     {
; 1164 :                         // 明らかに u < v である場合
; 1165 : 
; 1166 :                         // q = 0, r = u を返す。
; 1167 :                         *q = 0;
; 1168 :                         *r = u_lo;

	xorps	xmm0, xmm0
	movlpd	QWORD PTR $T4[ebp], xmm0

; 1169 :                     }

	mov	eax, DWORD PTR $T4[ebp+4]
	mov	ecx, DWORD PTR $T4[ebp]

; 1178 :                     }
; 1179 :                 }

	mov	DWORD PTR [ebx], ecx
	mov	DWORD PTR [ebx+4], eax

; 1254 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _r$GSCopy$1$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	xor	eax, eax
	pop	edi

; 1255 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN16@PMC_DivRem:

; 1170 :                     else
; 1171 :                     {
; 1172 :                         // u のビット数が v のビット数以上である場合
; 1173 : 
; 1174 :                         // u は 32bit で表現できるので、v も 32bit で表現できる。
; 1175 :                         __UNIT_TYPE_DIV temp_r;
; 1176 :                         *q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 650  :         return ((_UINT32_T)(t / v));

	push	ebx
	push	0
	push	DWORD PTR [eax]
	push	edi
	push	esi
	call	__aulldvrm
	mov	DWORD PTR tv87[ebp+4], ebx
	pop	ebx
	mov	ebx, DWORD PTR _q$GSCopy$1$[ebp]
	mov	esi, ecx
	mov	ecx, eax
	mov	DWORD PTR tv282[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1177 :                         *r = temp_r;

	xor	eax, eax
	xor	edi, edi

; 1178 :                     }
; 1179 :                 }

	mov	DWORD PTR [ebx], ecx
	mov	DWORD PTR [ebx+4], eax

; 1254 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _r$GSCopy$1$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	xor	eax, eax
	pop	edi

; 1255 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN14@PMC_DivRem:

; 1180 :                 else
; 1181 :                 {
; 1182 :                     // v の値が 32bit では表現できない場合
; 1183 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	push	edi
	call	__LZCNT_ALT_32
	mov	ecx, 64					; 00000040H
	add	esp, 4
	sub	ecx, eax

; 1184 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1185 :                     if (u_bit_count < v_bit_count)

	mov	eax, DWORD PTR [edx+4]
	cmp	ecx, eax
	jae	SHORT $LN18@PMC_DivRem

; 1254 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _r$GSCopy$1$[ebp]
	mov	DWORD PTR [ebx], 0
	mov	DWORD PTR [ebx+4], 0
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	xor	eax, eax
	pop	edi

; 1255 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN18@PMC_DivRem:

; 1186 :                     {
; 1187 :                         // 明らかに u < v である場合
; 1188 : 
; 1189 :                         // q = 0, r = u を返す。
; 1190 :                         *q = 0;
; 1191 :                         *r = u;
; 1192 :                     }
; 1193 :                     else
; 1194 :                     {
; 1195 :                         // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1196 : 
; 1197 :                         if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE_DIV) * 8)

	mov	DWORD PTR _u_buf$2[ebp], esi
	mov	DWORD PTR _u_buf$2[ebp+4], edi
	mov	DWORD PTR _q_buf$9[ebp], 0
	mov	DWORD PTR _q_buf$9[ebp+4], 0
	mov	DWORD PTR _q_buf$9[ebp+8], 0
	cmp	eax, 32					; 00000020H
	ja	SHORT $LN20@PMC_DivRem

; 1205 :                             DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	lea	eax, DWORD PTR _r_buf$6[ebp]
	push	eax
	lea	eax, DWORD PTR _q_buf$9[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+24]
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR _u_buf$2[ebp]
	push	2
	push	eax
	call	_DivRem_X_1W

; 1206 : 
; 1207 :                             *q = _FROMWORDTODWORD(q_buf[1], q_buf[0]);
; 1208 :                             *r = r_buf;

	mov	esi, DWORD PTR _r_buf$6[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR _q_buf$9[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1205 :                             DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	add	esp, 20					; 00000014H

; 1206 : 
; 1207 :                             *q = _FROMWORDTODWORD(q_buf[1], q_buf[0]);
; 1208 :                             *r = r_buf;

	xor	edi, edi

; 1209 :                         }

	jmp	SHORT $LN50@PMC_DivRem
$LN20@PMC_DivRem:

; 1219 :                             (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	lea	eax, DWORD PTR _r_buf$7[ebp]
	mov	DWORD PTR _r_buf$7[ebp], 0
	push	eax
	lea	eax, DWORD PTR _q_buf$8[ebp]
	mov	DWORD PTR _r_buf$7[ebp+4], 0
	push	eax
	lea	eax, DWORD PTR _work_v_buf$5[ebp]
	mov	DWORD PTR _r_buf$7[ebp+8], 0
	push	eax
	mov	eax, DWORD PTR [edx]
	and	eax, 1073741823				; 3fffffffH
	mov	DWORD PTR _work_v_buf$5[ebp], 0
	push	eax
	push	DWORD PTR [edx+24]
	lea	eax, DWORD PTR _u_buf$1[ebp]
	mov	DWORD PTR _work_v_buf$5[ebp+4], 0
	push	2
	push	eax
	call	DWORD PTR _fp_DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edi, DWORD PTR _r_buf$7[ebp+4]
	xor	eax, eax
	or	eax, DWORD PTR _q_buf$8[ebp]
	xor	esi, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1219 :                             (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	add	esp, 28					; 0000001cH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	or	esi, DWORD PTR _r_buf$7[ebp]
$LN50@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1254 :     return (PMC_STATUS_OK);

	mov	ecx, DWORD PTR _q_buf$8[ebp+4]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR _r$GSCopy$1$[ebp]
	mov	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	xor	eax, eax
	pop	edi

; 1255 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN49@PMC_DivRem:

; 1115 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_DivRem:

; 1255 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_PMC_DivRem_L_X@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _PMC_DivRem_I_X@16
_TEXT	SEGMENT
tv89 = -8						; size = 8
tv87 = -8						; size = 8
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_I_X@16 PROC					; COMDAT

; 942  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	edi

; 943  :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))
; 944  :     {
; 945  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 946  :         return (PMC_STATUS_INTERNAL_ERROR);
; 947  :     }
; 948  :     if (v == NULL)

	mov	edi, DWORD PTR _v$[ebp]
	test	edi, edi
	je	$LN23@PMC_DivRem

; 949  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 950  :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN23@PMC_DivRem

; 951  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 952  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	je	$LN23@PMC_DivRem

; 954  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 955  :     PMC_STATUS_CODE result;
; 956  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 957  :         return (result);
; 958  :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [edi+16]
	test	al, 2
	je	SHORT $LN7@PMC_DivRem

; 959  :     {
; 960  :         // v が 0 である場合
; 961  : 
; 962  :         // 0 による除算はエラーで返す
; 963  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	pop	edi

; 1012 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN7@PMC_DivRem:
	push	esi

; 964  :     }
; 965  :     if (u == 0)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	jne	SHORT $LN8@PMC_DivRem

; 1011 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _q$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR [eax], esi
	mov	eax, DWORD PTR _r$[ebp]
	pop	esi
	pop	edi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax

; 1012 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_DivRem:

; 966  :     {
; 967  :         // u が 0 である場合
; 968  : 
; 969  :         // q = 0, r = 0 を返す
; 970  :         *q = 0;
; 971  :         *r = 0;
; 972  :     }
; 973  :     else
; 974  :     {
; 975  :         // u が 0 ではない場合
; 976  : 
; 977  :         if (nv->IS_ONE)

	test	al, 4
	je	SHORT $LN10@PMC_DivRem

; 1011 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _q$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR [eax], esi
	mov	eax, DWORD PTR _r$[ebp]
	pop	esi
	pop	edi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax

; 1012 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN10@PMC_DivRem:

; 978  :         {
; 979  :             // v が 1 である場合
; 980  : 
; 981  :             // q = u, r = 0 を返す
; 982  :             *q = u;
; 983  :             *r = 0;
; 984  :         }
; 985  :         else
; 986  :         {
; 987  :             // u と v がともに 0 ではない場合
; 988  : 
; 989  :             // x と y の商・剰余を計算する
; 990  :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	push	esi
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 991  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 992  :             if (u_bit_count < v_bit_count)

	cmp	ecx, DWORD PTR [edi+4]
	jae	SHORT $LN12@PMC_DivRem

; 1011 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, esi
	xor	esi, esi
	mov	DWORD PTR [eax], esi
	mov	eax, DWORD PTR _r$[ebp]
	pop	esi
	pop	edi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax

; 1012 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN12@PMC_DivRem:

; 993  :             {
; 994  :                 // 明らかに u < v である場合
; 995  : 
; 996  :                 // q = 0, r = u を返す。
; 997  :                 *q = 0;
; 998  :                 *r = u;
; 999  :             }
; 1000 :             else
; 1001 :             {
; 1002 :                 // u のビット数が v のビット数以上である場合
; 1003 :                 
; 1004 :                 // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1005 :                 __UNIT_TYPE_DIV temp_r;
; 1006 :                 *q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, DWORD PTR [edi+24]
	push	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 650  :         return ((_UINT32_T)(t / v));

	push	ebx
	push	0
	push	DWORD PTR [eax]
	push	0
	push	esi
	call	__aulldvrm
	mov	DWORD PTR tv89[ebp+4], ebx
	pop	ebx
	mov	esi, eax
	mov	DWORD PTR tv87[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1011 :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _q$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 650  :         return ((_UINT32_T)(t / v));

	pop	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 1011 :     return (PMC_STATUS_OK);

	mov	DWORD PTR [eax], esi
	mov	eax, DWORD PTR _r$[ebp]
	pop	esi
	pop	edi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax

; 1012 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN23@PMC_DivRem:

; 953  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_DivRem:
	pop	edi

; 1012 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_I_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _Initialize_DivRem
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_DivRem PROC					; COMDAT

; 1596 : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _feature$[ebp]

; 1597 :     fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;
; 1598 :     return (PMC_STATUS_OK);

	mov	ecx, OFFSET _DivRem_X_X_using_ADX_MULX
	mov	edx, OFFSET _DivRem_X_X_using_ADC_MUL
	mov	eax, DWORD PTR [eax]
	and	eax, 10					; 0000000aH
	cmp	al, 10					; 0000000aH
	cmovne	ecx, edx
	xor	eax, eax
	mov	DWORD PTR _fp_DivRem_X_X, ecx

; 1599 : }

	pop	ebp
	ret	0
_Initialize_DivRem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c
;	COMDAT _DivRem_X_1W
_TEXT	SEGMENT
tv6404 = -8						; size = 8
tv6403 = -8						; size = 8
tv6394 = -8						; size = 8
tv6393 = -8						; size = 8
tv6383 = -8						; size = 8
tv6382 = -8						; size = 8
tv6372 = -8						; size = 8
tv6371 = -8						; size = 8
tv6361 = -8						; size = 8
tv6360 = -8						; size = 8
tv6350 = -8						; size = 8
tv6349 = -8						; size = 8
tv6339 = -8						; size = 8
tv6338 = -8						; size = 8
tv6328 = -8						; size = 8
tv6327 = -8						; size = 8
tv6317 = -8						; size = 8
tv6316 = -8						; size = 8
tv6306 = -8						; size = 8
tv6305 = -8						; size = 8
tv6295 = -8						; size = 8
tv6294 = -8						; size = 8
tv6284 = -8						; size = 8
tv6283 = -8						; size = 8
tv6273 = -8						; size = 8
tv6272 = -8						; size = 8
tv6262 = -8						; size = 8
tv6261 = -8						; size = 8
tv6251 = -8						; size = 8
tv6250 = -8						; size = 8
tv6240 = -8						; size = 8
tv6239 = -8						; size = 8
tv6229 = -8						; size = 8
tv6228 = -8						; size = 8
tv6218 = -8						; size = 8
tv6217 = -8						; size = 8
tv6207 = -8						; size = 8
tv6206 = -8						; size = 8
tv6196 = -8						; size = 8
tv6195 = -8						; size = 8
tv6185 = -8						; size = 8
tv6184 = -8						; size = 8
tv6174 = -8						; size = 8
tv6173 = -8						; size = 8
tv6163 = -8						; size = 8
tv6162 = -8						; size = 8
tv6152 = -8						; size = 8
tv6151 = -8						; size = 8
tv6141 = -8						; size = 8
tv6140 = -8						; size = 8
tv6130 = -8						; size = 8
tv6129 = -8						; size = 8
tv6119 = -8						; size = 8
tv6118 = -8						; size = 8
tv6108 = -8						; size = 8
tv6107 = -8						; size = 8
tv6097 = -8						; size = 8
tv6096 = -8						; size = 8
tv6086 = -8						; size = 8
tv6085 = -8						; size = 8
tv6075 = -8						; size = 8
tv6074 = -8						; size = 8
tv6064 = -8						; size = 8
tv6063 = -8						; size = 8
tv6050 = -8						; size = 8
tv6049 = -8						; size = 8
tv6040 = -8						; size = 8
tv6039 = -8						; size = 8
tv6029 = -8						; size = 8
tv6028 = -8						; size = 8
tv6018 = -8						; size = 8
tv6017 = -8						; size = 8
tv6007 = -8						; size = 8
tv6006 = -8						; size = 8
tv5996 = -8						; size = 8
tv5995 = -8						; size = 8
tv5985 = -8						; size = 8
tv5984 = -8						; size = 8
tv5974 = -8						; size = 8
tv5973 = -8						; size = 8
tv5963 = -8						; size = 8
tv5962 = -8						; size = 8
tv5952 = -8						; size = 8
tv5951 = -8						; size = 8
tv5941 = -8						; size = 8
tv5940 = -8						; size = 8
tv5930 = -8						; size = 8
tv5929 = -8						; size = 8
tv5919 = -8						; size = 8
tv5918 = -8						; size = 8
tv5908 = -8						; size = 8
tv5907 = -8						; size = 8
tv5897 = -8						; size = 8
tv5896 = -8						; size = 8
tv5886 = -8						; size = 8
tv5885 = -8						; size = 8
tv5873 = -8						; size = 8
tv5872 = -8						; size = 8
tv5863 = -8						; size = 8
tv5862 = -8						; size = 8
tv5852 = -8						; size = 8
tv5851 = -8						; size = 8
tv5841 = -8						; size = 8
tv5840 = -8						; size = 8
tv5830 = -8						; size = 8
tv5829 = -8						; size = 8
tv5819 = -8						; size = 8
tv5818 = -8						; size = 8
tv5808 = -8						; size = 8
tv5807 = -8						; size = 8
tv5797 = -8						; size = 8
tv5796 = -8						; size = 8
tv5784 = -8						; size = 8
tv5783 = -8						; size = 8
tv5774 = -8						; size = 8
tv5773 = -8						; size = 8
tv5763 = -8						; size = 8
tv5762 = -8						; size = 8
tv5752 = -8						; size = 8
tv5751 = -8						; size = 8
tv5739 = -8						; size = 8
tv5738 = -8						; size = 8
tv5729 = -8						; size = 8
tv5728 = -8						; size = 8
tv5524 = -8						; size = 8
tv5523 = -8						; size = 8
_count$1$ = 8						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
_q_buf$ = 20						; size = 4
_r_buf$ = 24						; size = 4
_DivRem_X_1W PROC					; COMDAT

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 43   :     // u の最上位ワードは 0 でありうることに注意すること。
; 44   :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	mov	ecx, DWORD PTR _u_buf_len$[ebp]

; 45   :     __UNIT_TYPE_DIV* qp = q_buf + u_buf_len - 1;
; 46   :     __UNIT_TYPE u_count = u_buf_len;
; 47   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 48   :     {
; 49   :         while (*up == 0)
; 50   :         {
; 51   :             --up;
; 52   :             --qp;
; 53   :             --u_count;
; 54   :         }
; 55   :     }
; 56   :     __UNIT_TYPE_DIV r = 0;
; 57   :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, ecx
	push	ebx
	push	esi
	mov	esi, DWORD PTR _q_buf$[ebp]
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _u_buf$[ebp]
	add	esi, -4					; fffffffcH
	add	edi, -4					; fffffffcH
	shr	eax, 5
	mov	DWORD PTR _count$1$[ebp], eax
	lea	esi, DWORD PTR [esi+ecx*4]
	lea	edi, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR _v$[ebp]

; 58   :     while (count != 0)

	test	eax, eax
	je	$LN555@DivRem_X_1
$LL4@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	ecx

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6403[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6404[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6393[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6394[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6382[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6383[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6371[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6372[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6360[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6361[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6349[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 693  :         *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6350[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6338[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6339[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6327[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-28], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-32]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6328[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6316[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-32], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-36]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6317[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6305[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-36], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-40]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6306[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6294[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-40], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-44]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6295[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6283[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-44], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-48]

; 693  :         *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6284[ebp+4], edx
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6272[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-48], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-52]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6273[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6261[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-52], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-56]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6262[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6250[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-56], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-60]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6251[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6239[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-60], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-64]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6240[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6228[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-64], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-68]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6229[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6217[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-68], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-72]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6218[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6206[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-72], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-76]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6207[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6195[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-76], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-80]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6196[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6184[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-80], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-84]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6185[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6173[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-84], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-88]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6174[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6162[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-88], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-92]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6163[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6151[ebp+4], ebx
	pop	ebx
	push	ebx
	mov	DWORD PTR [esi-92], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax

; 693  :         *q = (_UINT32_T)(t / v);

	push	0
	push	DWORD PTR _v$[ebp]

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, ecx

; 693  :         *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6152[ebp+4], edx

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR [edi-96]

; 693  :         *q = (_UINT32_T)(t / v);

	push	eax
	push	edx
	call	__aulldvrm
	mov	DWORD PTR tv6140[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-96], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-100]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6141[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6129[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-100], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-104]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6130[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6118[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-104], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-108]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6119[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6107[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-108], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-112]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6108[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6096[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-112], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-116]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6097[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6085[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-116], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-120]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6086[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6074[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-120], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax

; 693  :         *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6075[ebp+4], edx

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, DWORD PTR [edi-124]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6063[ebp+4], ebx
	pop	ebx
	mov	ebx, ecx
	mov	DWORD PTR [esi-124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 94   :         --count;

	mov	ecx, DWORD PTR _count$1$[ebp]
	add	edi, -128				; ffffff80H
	dec	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 693  :         *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6064[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 93   :         qp -= 32;

	add	esi, -128				; ffffff80H

; 94   :         --count;

	mov	DWORD PTR _count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1068 :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 32					; 00000020H
	mov	edx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 58   :     while (count != 0)

	test	ecx, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	jne	$LL4@DivRem_X_1
$LN555@DivRem_X_1:

; 95   : #ifdef ENABLED_PERFORMANCE_COUNTER
; 96   :         if (sizeof(r) == sizeof(_UINT64_T))
; 97   :             AddToDIV64Counter(32);
; 98   :         else
; 99   :             AddToDIV32Counter(32);
; 100  : #endif
; 101  :     }
; 102  : 
; 103  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	test	al, 16					; 00000010H
	je	$LN415@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	ecx

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6049[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6050[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6039[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6040[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6028[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6029[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6017[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6018[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6006[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6007[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5995[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 693  :         *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5996[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5984[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5985[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5973[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-28], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-32]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5974[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5962[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-32], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-36]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5963[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5951[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-36], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-40]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5952[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5940[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-40], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-44]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5941[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5929[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-44], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-48]

; 693  :         *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5930[ebp+4], edx
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5918[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-48], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-52]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5919[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5907[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-52], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-56]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5908[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5896[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-56], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-60]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5897[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5885[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-60], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5886[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 121  :         up -= 16;

	sub	edi, 64					; 00000040H

; 122  :         qp -= 16;

	sub	esi, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1068 :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 16					; 00000010H
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN415@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 131  :     if (u_count & 0x8)

	test	al, 8
	je	$LN483@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5872[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5873[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5862[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5863[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5851[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5852[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5840[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5841[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5829[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5830[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5818[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 693  :         *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5819[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5807[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5808[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5796[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-28], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5797[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 141  :         up -= 8;

	sub	edi, 32					; 00000020H

; 142  :         qp -= 8;

	sub	esi, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1068 :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 8
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN483@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 151  :     if (u_count & 0x4)

	test	al, 4
	je	$LN519@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5783[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5784[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5773[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5774[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5762[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5763[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5751[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-12], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5752[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 157  :         up -= 4;

	sub	edi, 16					; 00000010H

; 158  :         qp -= 4;

	sub	esi, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1068 :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 4
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN519@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 167  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN539@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5738[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5739[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5728[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-4], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5729[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 171  :         up -= 2;

	sub	edi, 8

; 172  :         qp -= 2;

	sub	esi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1068 :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 2
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN539@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 181  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN557@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 437  :     return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 693  :         *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5523[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv5524[ebp+4], edx
	mov	DWORD PTR [esi], eax

; 1045 :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_divrem.c

; 194  :     *r_buf = r;

	mov	eax, DWORD PTR _r_buf$[ebp]
	pop	edi

; 195  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN557@DivRem_X_1:

; 194  :     *r_buf = r;

	mov	eax, DWORD PTR _r_buf$[ebp]
	pop	edi

; 195  : }

	pop	esi
	mov	DWORD PTR [eax], ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_1W ENDP
_TEXT	ENDS
END
