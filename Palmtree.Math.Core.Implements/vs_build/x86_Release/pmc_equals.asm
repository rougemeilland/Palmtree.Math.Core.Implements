; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_equals.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_Equals
PUBLIC	_PMC_Equals_X_I@12
PUBLIC	_PMC_Equals_X_L@16
PUBLIC	_PMC_Equals_X_X@12
PUBLIC	_Equals_X_X
EXTRN	_CheckNumber:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT _Equals_X_X
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_count$ = 16						; size = 4
_Equals_X_X PROC					; COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp

; 39   :     while (count > 0)

	mov	edx, DWORD PTR _count$[ebp]
	push	esi
	test	edx, edx
	je	SHORT $LN3@Equals_X_X
	mov	esi, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	sub	esi, eax
$LL2@Equals_X_X:

; 40   :     {
; 41   :         if (*u != *v)

	mov	ecx, DWORD PTR [esi+eax]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN7@Equals_X_X

; 43   :         ++u;
; 44   :         ++v;

	add	eax, 4

; 45   :         --count;

	sub	edx, 1
	jne	SHORT $LL2@Equals_X_X
$LN3@Equals_X_X:

; 46   :     }
; 47   :     return (1);

	mov	eax, 1
	pop	esi

; 48   : }

	pop	ebp
	ret	0
$LN7@Equals_X_X:

; 42   :             return (0);

	xor	eax, eax
	pop	esi

; 48   : }

	pop	ebp
	ret	0
_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 840  : {

	push	ebp
	mov	ebp, esp

; 841  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 842  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 866  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 843  : #ifdef _M_IX86
; 844  :     _UINT32_T pos;
; 845  : #ifdef _MSC_VER
; 846  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 847  : #elif defined(__GNUC__)
; 848  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 849  : #else
; 850  : #error unknown compiler
; 851  : #endif
; 852  : #elif defined(_M_X64)
; 853  : #ifdef _MSC_VER
; 854  :     _UINT32_T pos;
; 855  :     _BitScanReverse64(&pos, x);
; 856  : #elif defined(__GNUC__)
; 857  :     _UINT64_T pos;
; 858  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 859  : #else
; 860  : #error unknown compiler
; 861  : #endif
; 862  : #else
; 863  : #error unknown platform
; 864  : #endif
; 865  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 866  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 807  : {

	push	ebp
	mov	ebp, esp

; 808  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 809  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 819  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 810  :     _UINT32_T pos;
; 811  : #ifdef _MSC_VER
; 812  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 813  : #elif defined(__GNUC__)
; 814  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 815  : #else
; 816  : #error unknown compiler
; 817  : #endif
; 818  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 819  : }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 393  : {

	push	ebp
	mov	ebp, esp

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 395  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 396  : }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT _PMC_Equals_X_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_X@12 PROC					; COMDAT

; 205  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 206  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN24@PMC_Equals

; 207  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 208  :     if (v == NULL)

	mov	edi, DWORD PTR _v$[ebp]
	test	edi, edi
	je	$LN24@PMC_Equals

; 209  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 210  :     if (w == NULL)

	mov	ebx, DWORD PTR _w$[ebp]
	test	ebx, ebx
	je	SHORT $LN24@PMC_Equals

; 212  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 213  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 214  :     PMC_STATUS_CODE result;
; 215  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 216  :         return (result);
; 217  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 218  :         return (result);
; 219  :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	mov	eax, DWORD PTR [edi+16]
	je	SHORT $LN7@PMC_Equals

; 220  :     {
; 221  :         *w = nv->IS_ZERO ? 1 : 0;

	shr	eax, 1
	pop	edi
	and	eax, 1

; 240  :         }
; 241  :     }
; 242  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 243  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Equals:

; 222  :     }
; 223  :     else if (nv->IS_ZERO)

	test	al, 2
	jne	SHORT $LN20@PMC_Equals

; 224  :     {
; 225  :         *w = 0;
; 226  :     }
; 227  :     else
; 228  :     {
; 229  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 230  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 231  :         if (u_bit_count != v_bit_count)

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [edi+4]
	jne	SHORT $LN20@PMC_Equals

; 232  :         {
; 233  :             // 明らかに u > v である場合
; 234  :             *w = 0;
; 235  :         }
; 236  :         else
; 237  :         {
; 238  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 239  :             *w = Equals_X_X(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi+24]

; 39   :     while (count > 0)

	test	edx, edx
	je	SHORT $LN16@PMC_Equals
	mov	esi, DWORD PTR [esi+24]
	sub	esi, ecx
$LL15@PMC_Equals:

; 40   :     {
; 41   :         if (*u != *v)

	mov	eax, DWORD PTR [esi+ecx]
	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN20@PMC_Equals

; 42   :             return (0);
; 43   :         ++u;
; 44   :         ++v;

	add	ecx, 4

; 45   :         --count;

	sub	edx, 1
	jne	SHORT $LL15@PMC_Equals
$LN16@PMC_Equals:
	pop	edi

; 46   :     }
; 47   :     return (1);

	mov	eax, 1

; 240  :         }
; 241  :     }
; 242  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 243  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN20@PMC_Equals:
	pop	edi

; 240  :         }
; 241  :     }
; 242  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 243  : }

	pop	esi
	mov	DWORD PTR [ebx], eax
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN24@PMC_Equals:

; 211  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Equals:
	pop	edi

; 243  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT _PMC_Equals_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_u_bit_count$1$ = 20					; size = 4
_w$ = 20						; size = 4
_PMC_Equals_X_L@16 PROC					; COMDAT

; 106  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, DWORD PTR _w$[ebp]
	push	esi

; 107  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 108  :     {
; 109  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 110  :         return (PMC_STATUS_INTERNAL_ERROR);
; 111  :     }
; 112  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	$LN32@PMC_Equals

; 113  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 114  :     if (w == NULL)

	test	ebx, ebx
	je	$LN32@PMC_Equals

; 116  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 117  :     PMC_STATUS_CODE result;
; 118  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Equals

; 119  :         return (result);
; 120  :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	je	SHORT $LN6@PMC_Equals

; 121  :     {
; 122  :         // u が 0 である場合
; 123  :         if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN8@PMC_Equals

; 124  :         {
; 125  :             // v が 0 である場合
; 126  :             *w = 1;

	mov	ecx, 1
	pop	esi

; 178  :                 }
; 179  :             }
; 180  :         }
; 181  :         else
; 182  :         {
; 183  :             // _UINT64_T が 1 ワードで表現できる場合
; 184  : 
; 185  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 186  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 187  :             if (u_bit_count != v_bit_count)
; 188  :             {
; 189  :                 // 明らかに u > v である場合
; 190  :                 *w = 0;
; 191  :             }
; 192  :             else
; 193  :             {
; 194  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 195  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 196  :                 *w = nu->BLOCK[0] == v;
; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], ecx

; 202  : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Equals:

; 127  :         }
; 128  :         else
; 129  :         {
; 130  :             // v が 0 でない場合
; 131  :             *w = 0;

	xor	ecx, ecx

; 178  :                 }
; 179  :             }
; 180  :         }
; 181  :         else
; 182  :         {
; 183  :             // _UINT64_T が 1 ワードで表現できる場合
; 184  : 
; 185  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 186  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 187  :             if (u_bit_count != v_bit_count)
; 188  :             {
; 189  :                 // 明らかに u > v である場合
; 190  :                 *w = 0;
; 191  :             }
; 192  :             else
; 193  :             {
; 194  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 195  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 196  :                 *w = nu->BLOCK[0] == v;
; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi
	mov	DWORD PTR [ebx], ecx

; 202  : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN6@PMC_Equals:

; 132  :         }
; 133  :     }
; 134  :     else if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, edx
	push	edi
	mov	edi, DWORD PTR _v$[ebp+4]
	or	eax, edi
	je	SHORT $LN23@PMC_Equals

; 135  :     {
; 136  :         // v が 0 である場合
; 137  :         *w = 0;
; 138  :     }
; 139  :     else
; 140  :     {
; 141  :         // u と v がともに 0 ではない場合
; 142  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 143  :         {
; 144  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 145  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _u_bit_count$1$[ebp], eax

; 146  :             _UINT32_T v_hi;
; 147  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 148  :             if (v_hi == 0)

	test	edi, edi
	jne	SHORT $LN14@PMC_Equals

; 149  :             {
; 150  :                 // v の値が 32bit では表現できる場合
; 151  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 152  :                 if (u_bit_count != v_bit_count)

	cmp	DWORD PTR _u_bit_count$1$[ebp], ecx
	jne	SHORT $LN23@PMC_Equals

; 153  :                 {
; 154  :                     // 明らかに u > v である場合
; 155  :                     *w = 0;
; 156  :                 }
; 157  :                 else
; 158  :                 {
; 159  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 160  :                     // ⇒ u と v はともに 1 ワードで表現できる
; 161  :                     *w = nu->BLOCK[0] == v_lo;

	mov	eax, DWORD PTR [esi+24]
	xor	ecx, ecx
	pop	edi
	pop	esi
	cmp	DWORD PTR [eax], edx
	sete	cl

; 178  :                 }
; 179  :             }
; 180  :         }
; 181  :         else
; 182  :         {
; 183  :             // _UINT64_T が 1 ワードで表現できる場合
; 184  : 
; 185  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 186  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 187  :             if (u_bit_count != v_bit_count)
; 188  :             {
; 189  :                 // 明らかに u > v である場合
; 190  :                 *w = 0;
; 191  :             }
; 192  :             else
; 193  :             {
; 194  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 195  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 196  :                 *w = nu->BLOCK[0] == v;
; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [ebx], ecx

; 202  : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN14@PMC_Equals:

; 162  :                 }
; 163  :             }
; 164  :             else
; 165  :             {
; 166  :                 // v の値が 32bit では表現できない場合
; 167  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	push	edi
	call	__LZCNT_ALT_32
	mov	ecx, 64					; 00000040H
	add	esp, 4
	sub	ecx, eax

; 168  :                 if (u_bit_count != v_bit_count)

	cmp	DWORD PTR _u_bit_count$1$[ebp], ecx
	jne	SHORT $LN23@PMC_Equals

; 169  :                 {
; 170  :                     // 明らかに u > v である場合
; 171  :                     *w = 0;
; 172  :                 }
; 173  :                 else
; 174  :                 {
; 175  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 176  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 177  :                     *w = nu->BLOCK[1] == v_hi && nu->BLOCK[0] == v_lo;

	mov	eax, DWORD PTR [esi+24]
	cmp	DWORD PTR [eax+4], edi
	jne	SHORT $LN23@PMC_Equals
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN23@PMC_Equals
	pop	edi
	mov	ecx, 1

; 178  :                 }
; 179  :             }
; 180  :         }
; 181  :         else
; 182  :         {
; 183  :             // _UINT64_T が 1 ワードで表現できる場合
; 184  : 
; 185  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 186  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 187  :             if (u_bit_count != v_bit_count)
; 188  :             {
; 189  :                 // 明らかに u > v である場合
; 190  :                 *w = 0;
; 191  :             }
; 192  :             else
; 193  :             {
; 194  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 195  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 196  :                 *w = nu->BLOCK[0] == v;
; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi
	mov	DWORD PTR [ebx], ecx

; 202  : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN23@PMC_Equals:
	pop	edi

; 169  :                 {
; 170  :                     // 明らかに u > v である場合
; 171  :                     *w = 0;
; 172  :                 }
; 173  :                 else
; 174  :                 {
; 175  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 176  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 177  :                     *w = nu->BLOCK[1] == v_hi && nu->BLOCK[0] == v_lo;

	xor	ecx, ecx

; 178  :                 }
; 179  :             }
; 180  :         }
; 181  :         else
; 182  :         {
; 183  :             // _UINT64_T が 1 ワードで表現できる場合
; 184  : 
; 185  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 186  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 187  :             if (u_bit_count != v_bit_count)
; 188  :             {
; 189  :                 // 明らかに u > v である場合
; 190  :                 *w = 0;
; 191  :             }
; 192  :             else
; 193  :             {
; 194  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 195  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 196  :                 *w = nu->BLOCK[0] == v;
; 197  :             }
; 198  :         }
; 199  : 
; 200  :     }
; 201  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi
	mov	DWORD PTR [ebx], ecx

; 202  : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN32@PMC_Equals:

; 115  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Equals:
	pop	esi

; 202  : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
_PMC_Equals_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT _PMC_Equals_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_I@12 PROC					; COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, DWORD PTR _w$[ebp]
	push	esi

; 53   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 54   :     {
; 55   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 56   :         return (PMC_STATUS_INTERNAL_ERROR);
; 57   :     }
; 58   :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN15@PMC_Equals

; 59   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 60   :     if (w == NULL)

	test	ebx, ebx
	je	SHORT $LN15@PMC_Equals

; 62   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 63   :     PMC_STATUS_CODE result;
; 64   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 65   :         return (result);
; 66   :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	je	SHORT $LN6@PMC_Equals

; 67   :     {
; 68   :         // u が 0 である場合
; 69   :         if (v == 0)
; 70   :         {
; 71   :             // v が 0 である場合
; 72   :             *w = 1;
; 73   :         }
; 74   :         else
; 75   :         {
; 76   :             // v が 0 でない場合
; 77   :             *w = 0;
; 78   :         }
; 79   :     }

	xor	ecx, ecx
	cmp	DWORD PTR _v$[ebp], ecx
	pop	esi
	sete	cl

; 100  :         }
; 101  :     }
; 102  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], ecx

; 103  : }

	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN6@PMC_Equals:
	push	edi

; 80   :     else if (v == 0)

	mov	edi, DWORD PTR _v$[ebp]
	test	edi, edi
	je	SHORT $LN17@PMC_Equals

; 81   :     {
; 82   :         // v が 0 である場合
; 83   :         *w = 0;
; 84   :     }
; 85   :     else
; 86   :     {
; 87   :         // x と y がともに 0 ではない場合
; 88   :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+4]

; 89   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	push	edi
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 90   :         if (u_bit_count != v_bit_count)

	cmp	edx, ecx
	je	SHORT $LN12@PMC_Equals
$LN17@PMC_Equals:
	pop	edi

; 91   :         {
; 92   :             // 明らかに u != v である場合
; 93   :             *w = 0;

	xor	ecx, ecx

; 100  :         }
; 101  :     }
; 102  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi
	mov	DWORD PTR [ebx], ecx

; 103  : }

	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN12@PMC_Equals:

; 94   :         }
; 95   :         else
; 96   :         {
; 97   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 98   :             // ⇒ u と v はともに 1 ワードで表現できる
; 99   :             *w = nu->BLOCK[0] == v;

	mov	eax, DWORD PTR [esi+24]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], edi
	pop	edi
	sete	cl

; 100  :         }
; 101  :     }
; 102  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi
	mov	DWORD PTR [ebx], ecx

; 103  : }

	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN15@PMC_Equals:

; 61   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Equals:
	pop	esi

; 103  : }

	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_equals.c
;	COMDAT _Initialize_Equals
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Equals PROC					; COMDAT

; 247  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 248  : }

	ret	0
_Initialize_Equals ENDP
_TEXT	ENDS
END
