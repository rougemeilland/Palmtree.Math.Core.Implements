; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_greatestcommondivisor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_GreatestCommonDivisor
PUBLIC	_PMC_GreatestCommonDivisor_X_I@12
PUBLIC	_PMC_GreatestCommonDivisor_X_L@16
PUBLIC	_PMC_GreatestCommonDivisor_X_X@12
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_RightShift_Imp:PROC
EXTRN	_LeftShift_Imp:PROC
EXTRN	_Subtruct_Imp:PROC
EXTRN	_Compare_Imp:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT _GreatestCommonDivisor
_TEXT	SEGMENT
_p1_buf$ = 8						; size = 4
_p2_buf$ = 12						; size = 4
_word_count$ = 16					; size = 4
_w_buf$ = 20						; size = 4
_w_buf_count$ = 24					; size = 4
_GreatestCommonDivisor PROC				; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	push	ebx

; 40   :     __UNIT_TYPE* u = p1_buf;
; 41   :     __UNIT_TYPE* v = p2_buf;

	mov	ebx, DWORD PTR _word_count$[ebp]
	push	esi
	mov	esi, DWORD PTR _p1_buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _p2_buf$[ebp]
	npad	1
$LL2@GreatestCo:

; 42   :     for (;;)
; 43   :     {
; 44   :         while (word_count > 0 && u[word_count - 1] == 0 && v[word_count - 1] == 0)

	test	ebx, ebx
	je	SHORT $LN29@GreatestCo
	lea	eax, DWORD PTR [ebx-1]
	mov	ecx, esi
	lea	eax, DWORD PTR [edi+eax*4]
	sub	ecx, edi
	npad	2
$LL5@GreatestCo:
	cmp	DWORD PTR [ecx+eax], 0
	jne	SHORT $LN6@GreatestCo
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@GreatestCo

; 45   :             --word_count;

	sub	eax, 4
	sub	ebx, 1
	jne	SHORT $LL5@GreatestCo

; 46   :         if (word_count <= 0)

	jmp	SHORT $LN29@GreatestCo
$LN6@GreatestCo:
	test	ebx, ebx
	jne	SHORT $LN9@GreatestCo
$LN29@GreatestCo:

; 47   :         {
; 48   :             // このルートへの到達はあり得ないはず。
; 49   :             w_buf[0] = 0;

	mov	eax, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR [eax], 0

; 50   :             *w_buf_count = 1;

	mov	eax, DWORD PTR _w_buf_count$[ebp]
	mov	DWORD PTR [eax], 1
$LN9@GreatestCo:

; 51   :         }
; 52   :         int c = Compare_Imp(u, v, word_count);

	push	ebx
	push	edi
	push	esi
	call	_Compare_Imp
	add	esp, 12					; 0000000cH

; 53   :         if (c == 0)

	test	eax, eax
	je	SHORT $LN19@GreatestCo

; 60   :             return;
; 61   :         }
; 62   :         if (c < 0)

	jns	SHORT $LN11@GreatestCo

; 63   :         {
; 64   :             __UNIT_TYPE* tt = u;

	mov	eax, esi

; 65   :             u = v;

	mov	esi, edi

; 66   :             v = tt;

	mov	edi, eax
$LN11@GreatestCo:

; 67   :         }
; 68   :         // この時点で u > v かつ u と v はともに奇数である
; 69   : 
; 70   :         Subtruct_Imp(u, word_count, v, word_count, u, word_count);

	push	ebx
	push	esi
	push	ebx
	push	edi
	push	ebx
	push	esi
	call	_Subtruct_Imp
	add	esp, 24					; 00000018H

; 71   : 
; 72   :         while ((*u & 1) == 0)

	test	BYTE PTR [esi], 1
	jne	SHORT $LL2@GreatestCo
$LL7@GreatestCo:

; 73   :             RightShift_Imp(u, word_count, 1, u, TRUE);

	push	1
	push	esi
	push	1
	push	ebx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	test	BYTE PTR [esi], 1
	je	SHORT $LL7@GreatestCo
	jmp	SHORT $LL2@GreatestCo
$LN19@GreatestCo:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _w_buf$[ebp]
	mov	ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 59   :             *w_buf_count = word_count;

	mov	eax, DWORD PTR _w_buf_count$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 59   :             *w_buf_count = word_count;

	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ebx
	pop	ebx

; 74   :     }
; 75   : }

	pop	ebp
	ret	0
_GreatestCommonDivisor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __TZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC					; COMDAT

; 939  : {

	push	ebp
	mov	ebp, esp

; 940  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@TZCNT_ALT_

; 941  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 946  : #elif defined(__GNUC__)
; 947  :     __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 948  : #else
; 949  : #error unknown compiler
; 950  : #endif
; 951  : #elif defined(_M_X64)
; 952  : #ifdef _MSC_VER
; 953  :     _UINT32_T pos;
; 954  :     _BitScanForward64(&pos, x);
; 955  : #elif defined(__GNUC__)
; 956  :     _UINT64_T pos;
; 957  :     __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 958  : #else
; 959  : #error unknown compiler
; 960  : #endif
; 961  : #else
; 962  : #error unknown platform
; 963  : #endif
; 964  :     return (pos);
; 965  : }

	pop	ebp
	ret	0
$LN2@TZCNT_ALT_:

; 942  : #ifdef _M_IX86
; 943  :     _UINT32_T pos;
; 944  : #ifdef _MSC_VER
; 945  :     _BitScanForward(&pos, x);

	bsf	eax, eax

; 946  : #elif defined(__GNUC__)
; 947  :     __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 948  : #else
; 949  : #error unknown compiler
; 950  : #endif
; 951  : #elif defined(_M_X64)
; 952  : #ifdef _MSC_VER
; 953  :     _UINT32_T pos;
; 954  :     _BitScanForward64(&pos, x);
; 955  : #elif defined(__GNUC__)
; 956  :     _UINT64_T pos;
; 957  :     __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 958  : #else
; 959  : #error unknown compiler
; 960  : #endif
; 961  : #else
; 962  : #error unknown platform
; 963  : #endif
; 964  :     return (pos);
; 965  : }

	pop	ebp
	ret	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 859  : {

	push	ebp
	mov	ebp, esp

; 860  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 861  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 885  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 862  : #ifdef _M_IX86
; 863  :     _UINT32_T pos;
; 864  : #ifdef _MSC_VER
; 865  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 866  : #elif defined(__GNUC__)
; 867  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 868  : #else
; 869  : #error unknown compiler
; 870  : #endif
; 871  : #elif defined(_M_X64)
; 872  : #ifdef _MSC_VER
; 873  :     _UINT32_T pos;
; 874  :     _BitScanReverse64(&pos, x);
; 875  : #elif defined(__GNUC__)
; 876  :     _UINT64_T pos;
; 877  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 878  : #else
; 879  : #error unknown compiler
; 880  : #endif
; 881  : #else
; 882  : #error unknown platform
; 883  : #endif
; 884  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 885  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 826  : {

	push	ebp
	mov	ebp, esp

; 827  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 828  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 838  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 829  :     _UINT32_T pos;
; 830  : #ifdef _MSC_VER
; 831  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 832  : #elif defined(__GNUC__)
; 833  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 834  : #else
; 835  : #error unknown compiler
; 836  : #endif
; 837  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 838  : }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MINIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MINIMUM_UNIT PROC					; COMDAT

; 438  : {

	push	ebp
	mov	ebp, esp

; 439  :     return (x <= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovbe	eax, DWORD PTR _x$[ebp]

; 440  : }

	pop	ebp
	ret	0
__MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MAXIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC					; COMDAT

; 433  : {

	push	ebp
	mov	ebp, esp

; 434  :     return (x >= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovae	eax, DWORD PTR _x$[ebp]

; 435  : }

	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 423  : {

	push	ebp
	mov	ebp, esp

; 424  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 425  : }

	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 412  : {

	push	ebp
	mov	ebp, esp

; 413  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 414  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 415  : }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 296  : {

	push	ebp
	mov	ebp, esp

; 297  : #ifdef _M_IX86
; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 299  : #elif defined(_M_X64)
; 300  :     __movsq(d, s, count);
; 301  : #else
; 302  : #error unknown platform
; 303  : #endif
; 304  : }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_X@12
_TEXT	SEGMENT
_k$1$ = -36						; size = 4
_work_v_buf_code$1 = -32				; size = 4
_work_u_buf_code$2 = -28				; size = 4
_work_u_buf$1$ = -24					; size = 4
_v_tzcnt$1$ = -20					; size = 4
_result$5$ = -20					; size = 4
_nw_check_code$3 = -16					; size = 4
_work_v_buf_words$4 = -12				; size = 4
_work_u_buf_words$5 = -8				; size = 4
_work_bit_count$1$ = -4					; size = 4
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_work_v_buf$1$ = 12					; size = 4
_w_buf_count$6 = 12					; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_X@12 PROC			; COMDAT

; 436  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi

; 437  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN37@PMC_Greate

; 438  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 439  :     if (v == NULL)

	mov	ebx, DWORD PTR _v$[ebp]
	test	ebx, ebx
	je	$LN37@PMC_Greate

; 440  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 441  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	$LN37@PMC_Greate

; 442  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 443  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 444  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 445  :     PMC_STATUS_CODE result;
; 446  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Greate

; 447  :         return (result);
; 448  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Greate

; 449  :         return (result);
; 450  :     NUMBER_HEADER* nw;
; 451  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR [ebx+16]
	and	eax, 2
	test	BYTE PTR [esi+16], 2
	je	SHORT $LN7@PMC_Greate

; 452  :     {
; 453  :         // u が 0 である場合
; 454  : 
; 455  :         if (nv->IS_ZERO)

	test	eax, eax
	jne	$LN37@PMC_Greate

; 461  :         }
; 462  :         else
; 463  :         {
; 464  :             // v が 0 ではない場合
; 465  : 
; 466  :             // GCD は v そのものであるため、v を計算結果として返す。
; 467  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	ebx
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@PMC_Greate

; 552  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Greate:

; 468  :                 return (result);
; 469  :             *w = nw;
; 470  :         }
; 471  :     }
; 472  :     else
; 473  :     {
; 474  :         // u が 0 ではない場合
; 475  : 
; 476  :         if (nv->IS_ZERO)

	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 477  :         {
; 478  :             // v が 0 である場合
; 479  : 
; 480  :             // GCD は u そのものであるため、u を計算結果として返す。
; 481  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate
$LN14@PMC_Greate:

; 482  :                 return (result);
; 483  :             *w = nw;

	mov	eax, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edi], eax

; 545  :         }
; 546  :     }
; 547  : #ifdef _DEBUG
; 548  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 549  :         return (result);
; 550  : #endif
; 551  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 552  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN12@PMC_Greate:

; 484  :         }
; 485  :         else
; 486  :         {
; 487  :             // u と v がともに 0 ではない場合
; 488  : 
; 489  :             // u と v の GCD を計算する
; 490  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 491  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [ebx+4]

; 496  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$2[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmp	DWORD PTR [esi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 496  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmovae	ecx, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 496  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$5[ebp]
	push	eax
	push	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 496  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$1$[ebp], edi

; 497  :             if (work_u_buf == NULL)

	test	edi, edi
	je	SHORT $LN38@PMC_Greate

; 498  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 499  : 
; 500  :             __UNIT_TYPE work_v_buf_code;
; 501  :             __UNIT_TYPE work_v_buf_words;
; 502  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$4[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 503  :             if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN16@PMC_Greate

; 504  :             {
; 505  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 8
$LN38@PMC_Greate:

; 552  : }

	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN16@PMC_Greate:

; 506  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 507  :             }
; 508  : 
; 509  :             __UNIT_TYPE nw_check_code;
; 510  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$3[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$5$[ebp], eax
	test	eax, eax
	je	SHORT $LN17@PMC_Greate

; 511  :             {
; 512  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	mov	ebx, DWORD PTR _work_v_buf$1$[ebp]
	push	ebx
	call	_DeallocateBlock

; 513  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock

; 514  :                 return (result);

	mov	eax, DWORD PTR _result$5$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 552  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN17@PMC_Greate:

; 515  :             }
; 516  : 
; 517  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+12]

; 518  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	eax, DWORD PTR [ebx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 439  :     return (x <= y ? x : y);

	cmp	ecx, eax
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 518  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	DWORD PTR _v_tzcnt$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 439  :     return (x <= y ? x : y);

	cmovbe	edx, ecx
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 519  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	edx, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+24]

; 520  :             if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN18@PMC_Greate

; 521  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	edi
	push	ecx
	push	edx
	push	esi
	call	_RightShift_Imp
	mov	eax, DWORD PTR _v_tzcnt$1$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN31@PMC_Greate
$LN18@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, edx
	rep movsd
$LN31@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 524  :             if (v_tzcnt > 0)

	mov	ecx, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR _work_v_buf$1$[ebp]
	test	eax, eax
	je	SHORT $LN20@PMC_Greate

; 525  :                 RightShift_Imp(nv->BLOCK, nv->UNIT_WORD_COUNT, v_tzcnt, work_v_buf, FALSE);

	push	0
	push	ebx
	push	eax
	push	ecx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN33@PMC_Greate
$LN20@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	rep movsd
$LN33@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 530  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
	lea	eax, DWORD PTR _w_buf_count$6[ebp]
	push	eax
	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 530  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	push	eax
	push	ebx
	push	esi
	call	_GreatestCommonDivisor

; 531  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$2[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 532  :                 return (result);
; 533  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$1[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 534  :                 return (result);
; 535  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$3[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 536  :                 return (result);
; 537  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	push	ebx
	call	_DeallocateBlock

; 538  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	esi
	call	_DeallocateBlock

; 539  : 
; 540  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	eax, DWORD PTR _nw$[ebp]
	push	1
	mov	eax, DWORD PTR [eax+24]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$6[ebp]
	push	eax
	call	_LeftShift_Imp

; 541  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$3[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 542  :                 return (result);
; 543  :             CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber

; 544  :             *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi

; 552  : }

	pop	esi
	mov	DWORD PTR [ecx], eax
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN37@PMC_Greate:

; 456  :         {
; 457  :             // v が 0 である場合
; 458  : 
; 459  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 460  :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Greate:
	pop	edi

; 552  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_L@16
_TEXT	SEGMENT
_k$1$ = -40						; size = 4
tv570 = -36						; size = 4
_k$1$ = -36						; size = 4
_result$9$ = -36					; size = 4
_work_u_buf_code$1 = -32				; size = 4
_work_v_buf_code$2 = -32				; size = 4
_work_v_buf_code$3 = -28				; size = 4
_work_u_buf_code$4 = -28				; size = 4
_v_tzcnt$1$ = -24					; size = 4
_nw_check_code$5 = -24					; size = 4
_work_bit_count$1$ = -20				; size = 4
_work_v_buf_words$6 = -20				; size = 4
_work_v_buf$1$ = -16					; size = 4
_work_v_buf_words$7 = -16				; size = 4
_v_tzcnt$1$ = -12					; size = 4
_result$4$ = -12					; size = 4
_nw_check_code$8 = -12					; size = 4
_work_u_buf_words$9 = -8				; size = 4
_work_u_buf_words$10 = -8				; size = 4
_work_u_buf$1$ = -4					; size = 4
_work_bit_count$1$ = -4					; size = 4
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w_buf_count$11 = 16					; size = 4
_w_buf_count$12 = 16					; size = 4
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_X_L@16 PROC			; COMDAT

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi

; 195  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 196  :     {
; 197  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 198  :         return (PMC_STATUS_INTERNAL_ERROR);
; 199  :     }
; 200  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN91@PMC_Greate

; 201  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 202  :     if (w == NULL)

	mov	ebx, DWORD PTR _w$[ebp]
	test	ebx, ebx
	je	$LN91@PMC_Greate

; 203  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 204  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 205  :     PMC_STATUS_CODE result;
; 206  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Greate

; 207  :         return (result);
; 208  :     NUMBER_HEADER* nw;
; 209  :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	je	SHORT $LN6@PMC_Greate

; 210  :     {
; 211  :         // u が 0 である場合
; 212  : 
; 213  :         if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	or	eax, edx
	je	$LN91@PMC_Greate

; 219  :         }
; 220  :         else
; 221  :         {
; 222  :             // v が 0 ではない場合
; 223  : 
; 224  :             // GCD は v そのものであるため、v を計算結果として返す。
; 225  :             if ((result = From_L_Imp(v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	edx
	push	ecx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN13@PMC_Greate

; 433  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN6@PMC_Greate:

; 226  :                 return (result);
; 227  :             *w = nw;
; 228  :         }
; 229  :     }
; 230  :     else
; 231  :     {
; 232  :         // u が 0 ではない場合
; 233  : 
; 234  :         if (v == 0)

	mov	edi, DWORD PTR _v$[ebp]
	mov	eax, edi
	mov	ecx, DWORD PTR _v$[ebp+4]
	or	eax, ecx
	jne	SHORT $LN11@PMC_Greate

; 235  :         {
; 236  :             // v が 0 である場合
; 237  : 
; 238  :             // GCD は u そのものであるため、u を計算結果として返す。
; 239  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate
$LN13@PMC_Greate:

; 240  :                 return (result);
; 241  :             *w = nw;

	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi
	mov	DWORD PTR [ebx], eax

; 364  :                         return (result);
; 365  :                     CommitNumber(nw);
; 366  :                     *w = nw;
; 367  :                 }
; 368  :             }
; 369  :             else
; 370  :             {
; 371  :                 // _UINT64_T が 1 ワードで表現できる場合
; 372  : 
; 373  :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 374  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 375  :                 __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);
; 376  : 
; 377  :                 __UNIT_TYPE work_u_buf_code;
; 378  :                 __UNIT_TYPE work_u_buf_words;
; 379  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);
; 380  :                 if (work_u_buf == NULL)
; 381  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 382  : 
; 383  :                 __UNIT_TYPE work_v_buf_code;
; 384  :                 __UNIT_TYPE work_v_buf_words;
; 385  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);
; 386  :                 if (work_v_buf == NULL)
; 387  :                 {
; 388  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 389  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 390  :                 }
; 391  : 
; 392  :                 __UNIT_TYPE nw_check_code;
; 393  :                 if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)
; 394  :                 {
; 395  :                     DeallocateBlock(work_v_buf, work_v_buf_words);
; 396  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 397  :                     return (result);
; 398  :                 }
; 399  : 
; 400  :                 __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;
; 401  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 402  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);
; 403  :                 if (u_tzcnt > 0)
; 404  :                     RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);
; 405  :                 else
; 406  :                     _COPY_MEMORY_UNIT(work_u_buf, nu->BLOCK, nu->UNIT_WORD_COUNT);
; 407  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);
; 408  : 
; 409  :                 __UNIT_TYPE w_buf_count;
; 410  :                 GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);
; 411  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)
; 412  :                     return (result);
; 413  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)
; 414  :                     return (result);
; 415  :                 if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 416  :                     return (result);
; 417  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 418  :                 DeallocateBlock(work_u_buf, work_u_buf_words);
; 419  : 
; 420  :                 LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);
; 421  :                 if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 422  :                     return (result);
; 423  :                 CommitNumber(nw);
; 424  :                 *w = nw;
; 425  :             }
; 426  :         }
; 427  :     }
; 428  : #ifdef _DEBUG
; 429  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 430  :         return (result);
; 431  : #endif
; 432  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 433  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN11@PMC_Greate:

; 242  :         }
; 243  :         else
; 244  :         {
; 245  :             // u と v がともに 0 ではない場合
; 246  : 
; 247  :             // u と v の GCD を計算する
; 248  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 249  :             {
; 250  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 251  : 
; 252  :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+4]

; 253  :                 _UINT32_T v_hi;
; 254  :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 255  :                 if (v_hi == 0)

	test	ecx, ecx
	jne	$LN16@PMC_Greate

; 256  :                 {
; 257  :                     // v の値が 32bit で表現可能な場合
; 258  :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	push	edi
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	sub	ecx, eax

; 263  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$4[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmp	edx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 263  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$10[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmovae	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 263  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 263  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 16					; 00000010H

; 264  :                     if (work_u_buf == NULL)

	test	ebx, ebx
	je	SHORT $LN90@PMC_Greate

; 265  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 266  : 
; 267  :                     __UNIT_TYPE work_v_buf_code;
; 268  :                     __UNIT_TYPE work_v_buf_words;
; 269  :                     __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$2[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$6[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 270  :                     if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN19@PMC_Greate

; 271  :                     {
; 272  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$10[ebp]
	push	ebx
	call	_DeallocateBlock
	add	esp, 8
$LN90@PMC_Greate:

; 433  : }

	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN19@PMC_Greate:

; 273  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 274  :                     }
; 275  : 
; 276  :                     __UNIT_TYPE nw_check_code;
; 277  :                     if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$5[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$4$[ebp], eax
	test	eax, eax
	je	SHORT $LN20@PMC_Greate

; 278  :                     {
; 279  :                         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$6[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 280  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$10[ebp]
	push	ebx
	call	_DeallocateBlock

; 281  :                         return (result);

	mov	eax, DWORD PTR _result$4$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 433  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN20@PMC_Greate:

; 282  :                     }
; 283  : 
; 284  :                     __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 941  :         return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
	test	edi, edi
	je	SHORT $LN92@PMC_Greate

; 945  :     _BitScanForward(&pos, x);

	bsf	ecx, edi
$LN92@PMC_Greate:

; 439  :     return (x <= y ? x : y);

	cmp	eax, ecx
	mov	DWORD PTR _v_tzcnt$1$[ebp], ecx
	mov	edx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 286  :                     __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	ecx, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 439  :     return (x <= y ? x : y);

	cmovbe	edx, eax
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 287  :                     if (u_tzcnt > 0)

	test	eax, eax
	je	SHORT $LN21@PMC_Greate

; 288  :                         RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	ebx
	push	eax
	push	ecx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN58@PMC_Greate
$LN21@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	rep movsd
	mov	edi, DWORD PTR _v$[ebp]
$LN58@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 291  :                     work_v_buf[0] = v_lo >> v_tzcnt;

	mov	esi, DWORD PTR _work_v_buf$1$[ebp]

; 294  :                     GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	lea	eax, DWORD PTR _w_buf_count$12[ebp]
	mov	ecx, DWORD PTR _v_tzcnt$1$[ebp]
	push	eax
	shr	edi, cl
	mov	DWORD PTR [esi], edi
	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 294  :                     GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	push	eax
	push	esi
	push	ebx
	call	_GreatestCommonDivisor

; 295  :                     if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$4[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 296  :                         return (result);
; 297  :                     if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$2[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate

; 298  :                         return (result);
; 299  :                     if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$5[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate

; 300  :                         return (result);
; 301  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$6[ebp]
	push	esi
	call	_DeallocateBlock

; 302  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$10[ebp]
	push	ebx
	call	_DeallocateBlock

; 303  : 
; 304  :                     LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	eax, DWORD PTR _nw$[ebp]
	push	1
	mov	eax, DWORD PTR [eax+24]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$12[ebp]
	push	eax
	call	_LeftShift_Imp

; 305  :                     if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	push	DWORD PTR _nw_check_code$5[ebp]

; 306  :                         return (result);
; 307  :                     CommitNumber(nw);
; 308  :                     *w = nw;
; 309  :                 }

	jmp	$LN95@PMC_Greate
$LN16@PMC_Greate:

; 310  :                 else
; 311  :                 {
; 312  :                     // y の値が 32bit では表現できない場合
; 313  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	push	ecx
	call	__LZCNT_ALT_32
	mov	ebx, 64					; 00000040H
	sub	ebx, eax

; 318  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$1[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmp	edx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 318  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$9[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmovae	ebx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 318  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 318  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	add	esp, 16					; 00000010H
	mov	DWORD PTR _work_u_buf$1$[ebp], eax

; 319  :                     if (work_u_buf == NULL)

	test	eax, eax
	je	$LN90@PMC_Greate

; 320  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 321  : 
; 322  :                     __UNIT_TYPE work_v_buf_code;
; 323  :                     __UNIT_TYPE work_v_buf_words;
; 324  :                     __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$3[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$7[ebp]
	push	eax
	push	ebx
	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 325  :                     if (work_v_buf == NULL)

	test	ebx, ebx
	jne	SHORT $LN28@PMC_Greate

; 326  :                     {
; 327  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$9[ebp]
	push	DWORD PTR _work_u_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 8

; 328  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [ebx-5]
	pop	edi

; 433  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN28@PMC_Greate:

; 329  :                     }
; 330  : 
; 331  :                     __UNIT_TYPE nw_check_code;
; 332  :                     if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$8[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$9$[ebp], eax
	test	eax, eax
	je	SHORT $LN29@PMC_Greate

; 333  :                     {
; 334  :                         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$7[ebp]
	push	ebx
	call	_DeallocateBlock

; 335  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$9[ebp]
	push	DWORD PTR _work_u_buf$1$[ebp]
	call	_DeallocateBlock

; 336  :                         return (result);

	mov	eax, DWORD PTR _result$9$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 433  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN29@PMC_Greate:

; 337  :                     }
; 338  : 
; 339  :                     __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+12]

; 340  :                     __UNIT_TYPE v_tzcnt = v_lo == 0 ? 32 + _TZCNT_ALT_UNIT(v_hi) : _TZCNT_ALT_UNIT(v_lo);

	test	edi, edi
	jne	SHORT $LN47@PMC_Greate
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 945  :     _BitScanForward(&pos, x);

	mov	eax, DWORD PTR _v$[ebp+4]
	bsf	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 340  :                     __UNIT_TYPE v_tzcnt = v_lo == 0 ? 32 + _TZCNT_ALT_UNIT(v_hi) : _TZCNT_ALT_UNIT(v_lo);

	add	edx, 32					; 00000020H
	jmp	SHORT $LN93@PMC_Greate
$LN47@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 945  :     _BitScanForward(&pos, x);

	bsf	edx, edi
$LN93@PMC_Greate:

; 439  :     return (x <= y ? x : y);

	cmp	ecx, edx
	mov	DWORD PTR _v_tzcnt$1$[ebp], edx
	mov	eax, edx
	cmovbe	eax, ecx
	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 341  :                     __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+24]
	mov	DWORD PTR tv570[ebp], esi

; 342  :                     if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN30@PMC_Greate

; 343  :                         RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
	push	0
	push	esi
	push	ecx
	push	eax
	push	DWORD PTR tv570[ebp]
	call	_RightShift_Imp
	mov	edx, DWORD PTR _v_tzcnt$1$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN72@PMC_Greate
$LN30@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _work_u_buf$1$[ebp]
	mov	ecx, eax
	rep movsd
	mov	edi, DWORD PTR _v$[ebp]
	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
$LN72@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 347  :                     work_v_buf[1] = v_hi;

	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [ebx], edi
	mov	DWORD PTR [ebx+4], eax

; 348  :                     if (v_tzcnt > 0)

	test	edx, edx
	je	SHORT $LN32@PMC_Greate

; 349  :                         RightShift_Imp(work_v_buf, 2, v_tzcnt, work_v_buf, TRUE);

	push	1
	push	ebx
	push	edx
	push	2
	push	ebx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
$LN32@PMC_Greate:

; 352  :                     GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	lea	eax, DWORD PTR _w_buf_count$11[ebp]
	push	eax
	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 352  :                     GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	push	eax
	push	ebx
	push	esi
	call	_GreatestCommonDivisor

; 353  :                     if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$1[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 354  :                         return (result);
; 355  :                     if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$3[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 356  :                         return (result);
; 357  :                     if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$8[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 358  :                         return (result);
; 359  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$7[ebp]
	push	ebx
	call	_DeallocateBlock

; 360  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$9[ebp]
	push	esi
	call	_DeallocateBlock

; 361  : 
; 362  :                     LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	eax, DWORD PTR _nw$[ebp]
	push	1
	mov	eax, DWORD PTR [eax+24]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$11[ebp]
	push	eax
	call	_LeftShift_Imp

; 363  :                     if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	push	DWORD PTR _nw_check_code$8[ebp]
$LN95@PMC_Greate:

; 364  :                         return (result);
; 365  :                     CommitNumber(nw);
; 366  :                     *w = nw;
; 367  :                 }
; 368  :             }
; 369  :             else
; 370  :             {
; 371  :                 // _UINT64_T が 1 ワードで表現できる場合
; 372  : 
; 373  :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 374  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 375  :                 __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);
; 376  : 
; 377  :                 __UNIT_TYPE work_u_buf_code;
; 378  :                 __UNIT_TYPE work_u_buf_words;
; 379  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);
; 380  :                 if (work_u_buf == NULL)
; 381  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 382  : 
; 383  :                 __UNIT_TYPE work_v_buf_code;
; 384  :                 __UNIT_TYPE work_v_buf_words;
; 385  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);
; 386  :                 if (work_v_buf == NULL)
; 387  :                 {
; 388  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 389  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 390  :                 }
; 391  : 
; 392  :                 __UNIT_TYPE nw_check_code;
; 393  :                 if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)
; 394  :                 {
; 395  :                     DeallocateBlock(work_v_buf, work_v_buf_words);
; 396  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 397  :                     return (result);
; 398  :                 }
; 399  : 
; 400  :                 __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;
; 401  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 402  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);
; 403  :                 if (u_tzcnt > 0)
; 404  :                     RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);
; 405  :                 else
; 406  :                     _COPY_MEMORY_UNIT(work_u_buf, nu->BLOCK, nu->UNIT_WORD_COUNT);
; 407  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);
; 408  : 
; 409  :                 __UNIT_TYPE w_buf_count;
; 410  :                 GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);
; 411  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)
; 412  :                     return (result);
; 413  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)
; 414  :                     return (result);
; 415  :                 if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 416  :                     return (result);
; 417  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 418  :                 DeallocateBlock(work_u_buf, work_u_buf_words);
; 419  : 
; 420  :                 LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);
; 421  :                 if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 422  :                     return (result);
; 423  :                 CommitNumber(nw);
; 424  :                 *w = nw;
; 425  :             }
; 426  :         }
; 427  :     }
; 428  : #ifdef _DEBUG
; 429  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 430  :         return (result);
; 431  : #endif
; 432  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate
	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber
	mov	ecx, DWORD PTR _w$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi

; 433  : }

	pop	esi
	mov	DWORD PTR [ecx], eax
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN91@PMC_Greate:

; 214  :         {
; 215  :             // v が 0 である場合
; 216  : 
; 217  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 218  :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Greate:
	pop	edi

; 433  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_GreatestCommonDivisor_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_I@12
_TEXT	SEGMENT
_work_v_buf_code$1 = -36				; size = 4
_work_u_buf_code$2 = -32				; size = 4
_pos$1$ = -28						; size = 4
_work_bit_count$1$ = -24				; size = 4
_nw_check_code$3 = -20					; size = 4
_work_v_buf_words$4 = -16				; size = 4
_work_v_buf$1$ = -12					; size = 4
_k$1$ = -8						; size = 4
_result$4$ = -8						; size = 4
_work_u_buf_words$5 = -4				; size = 4
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_w_buf_count$6 = 12					; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_I@12 PROC			; COMDAT

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi

; 79   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 80   :     {
; 81   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 82   :         return (PMC_STATUS_INTERNAL_ERROR);
; 83   :     }
; 84   :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN35@PMC_Greate

; 85   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 86   :     if (w == NULL)

	mov	ebx, DWORD PTR _w$[ebp]
	test	ebx, ebx
	je	$LN35@PMC_Greate

; 87   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 88   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 89   :     PMC_STATUS_CODE result;
; 90   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Greate

; 91   :         return (result);
; 92   :     NUMBER_HEADER* nw;
; 93   :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	mov	eax, DWORD PTR _v$[ebp]
	je	SHORT $LN6@PMC_Greate

; 94   :     {
; 95   :         // u が 0 である場合
; 96   : 
; 97   :         if (v == 0)

	test	eax, eax
	je	$LN35@PMC_Greate

; 103  :         }
; 104  :         else
; 105  :         {
; 106  :             // v が 0 ではない場合
; 107  : 
; 108  :             // GCD は v そのものであるため、v を計算結果として返す。
; 109  :             if ((result = From_I_Imp(v, &nw)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	push	eax
	call	_From_I_Imp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@PMC_Greate

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN6@PMC_Greate:

; 110  :                 return (result);
; 111  :             *w = nw;
; 112  :         }
; 113  :     }
; 114  :     else
; 115  :     {
; 116  :         // u が 0 ではない場合
; 117  : 
; 118  :         if (v == 0)

	test	eax, eax
	jne	SHORT $LN11@PMC_Greate

; 119  :         {
; 120  :             // v が 0 である場合
; 121  : 
; 122  :             // GCD は u そのものであるため、u を計算結果として返す。
; 123  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate
$LN13@PMC_Greate:

; 124  :                 return (result);
; 125  :             *w = nw;

	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi
	mov	DWORD PTR [ebx], eax

; 184  :         }
; 185  :     }
; 186  : #ifdef _DEBUG
; 187  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 188  :         return (result);
; 189  : #endif
; 190  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 191  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN11@PMC_Greate:

; 126  :         }
; 127  :         else
; 128  :         {
; 129  :             // u と v がともに 0 ではない場合
; 130  : 
; 131  :             // u と v の GCD を計算する
; 132  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+4]

; 133  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	push	eax
	call	__LZCNT_ALT_32
	mov	edi, 32					; 00000020H
	sub	edi, eax

; 138  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$2[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmp	edx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 138  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$5[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	cmovae	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 138  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 434  :     return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 138  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 16					; 00000010H

; 139  :             if (work_u_buf == NULL)

	test	ebx, ebx
	je	SHORT $LN36@PMC_Greate

; 140  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 141  : 
; 142  :             __UNIT_TYPE work_v_buf_code;
; 143  :             __UNIT_TYPE work_v_buf_words;
; 144  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$4[ebp]
	push	eax
	push	edi
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 145  :             if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN15@PMC_Greate

; 146  :             {
; 147  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	ebx
	call	_DeallocateBlock
	add	esp, 8
$LN36@PMC_Greate:

; 191  : }

	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN15@PMC_Greate:

; 148  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 149  :             }
; 150  : 
; 151  :             __UNIT_TYPE nw_check_code;
; 152  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$3[ebp]
	push	eax
	lea	eax, DWORD PTR _nw$[ebp]
	push	edi
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$4$[ebp], eax
	test	eax, eax
	je	SHORT $LN16@PMC_Greate

; 153  :             {
; 154  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 155  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	ebx
	call	_DeallocateBlock

; 156  :                 return (result);

	mov	eax, DWORD PTR _result$4$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 191  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN16@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 945  :     _BitScanForward(&pos, x);

	mov	eax, DWORD PTR _v$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 159  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 945  :     _BitScanForward(&pos, x);

	bsf	edx, eax

; 439  :     return (x <= y ? x : y);

	cmp	ecx, edx

; 945  :     _BitScanForward(&pos, x);

	mov	DWORD PTR _pos$1$[ebp], edx

; 439  :     return (x <= y ? x : y);

	cmovbe	edx, ecx
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 161  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	edx, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+24]

; 162  :             if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN17@PMC_Greate

; 163  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	ebx
	push	ecx
	push	edx
	push	esi
	call	_RightShift_Imp
	mov	eax, DWORD PTR _v$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN31@PMC_Greate
$LN17@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 298  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	mov	ecx, edx
	rep movsd
	mov	edi, DWORD PTR _work_bit_count$1$[ebp]
$LN31@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 166  :             work_v_buf[0] = v >> v_tzcnt;

	mov	esi, DWORD PTR _work_v_buf$1$[ebp]
	mov	ecx, DWORD PTR _pos$1$[ebp]
	shr	eax, cl
	mov	DWORD PTR [esi], eax

; 169  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	lea	eax, DWORD PTR _w_buf_count$6[ebp]
	push	eax
	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	lea	eax, DWORD PTR [edi+31]
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c

; 169  :             GreatestCommonDivisor(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	push	eax
	push	esi
	push	ebx
	call	_GreatestCommonDivisor

; 170  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$2[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 171  :                 return (result);
; 172  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$1[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 173  :                 return (result);
; 174  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$3[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 175  :                 return (result);
; 176  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	push	esi
	call	_DeallocateBlock

; 177  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	ebx
	call	_DeallocateBlock

; 178  : 
; 179  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	eax, DWORD PTR _nw$[ebp]
	push	1
	mov	eax, DWORD PTR [eax+24]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$6[ebp]
	push	eax
	call	_LeftShift_Imp

; 180  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$3[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 181  :                 return (result);
; 182  :             CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber

; 183  :             *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi

; 191  : }

	pop	esi
	mov	DWORD PTR [ecx], eax
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN35@PMC_Greate:

; 98   :         {
; 99   :             // v が 0 である場合
; 100  : 
; 101  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 102  :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Greate:
	pop	edi

; 191  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_greatestcommondivisor.c
;	COMDAT _Initialize_GreatestCommonDivisor
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_GreatestCommonDivisor PROC			; COMDAT

; 556  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 557  : }

	ret	0
_Initialize_GreatestCommonDivisor ENDP
_TEXT	ENDS
END
