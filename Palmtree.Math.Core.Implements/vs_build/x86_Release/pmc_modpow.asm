; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_modpow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_ModPow
PUBLIC	_PMC_ModPow_X_X_X@16
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_Multiply_X_X_Imp:PROC
EXTRN	_DivRem_X_X:PROC
EXTRN	_Compare_Imp:PROC
EXTRN	_number_zero:BYTE
EXTRN	_number_one:BYTE
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
;	COMDAT _PMC_ModPow_X_X_X_Imp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_ModPow_X_X_X_Imp PROC				; COMDAT

; 506  : {

	push	ebp
	mov	ebp, esp

; 507  :     PMC_STATUS_CODE result;
; 508  : 
; 509  :     if (m->IS_ZERO)

	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	test	dl, 2
	je	SHORT $LN2@PMC_ModPow

; 510  :     {
; 511  :         // m が 0 の場合
; 512  : 
; 513  :         // 0 による除算は許されないのでエラーを通知する
; 514  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH

; 598  : }

	pop	ebp
	ret	0
$LN2@PMC_ModPow:
	push	esi

; 515  :     }
; 516  :     else if (m->IS_ONE)

	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [esi+24]
	and	eax, 2
	test	dl, 4
	je	SHORT $LN4@PMC_ModPow

; 517  :     {
; 518  :         // m が 1 の場合
; 519  :         if (v->IS_ZERO)

	test	eax, eax
	je	SHORT $LN12@PMC_ModPow

; 520  :         {
; 521  :             // v が 0 の場合
; 522  :             if (e->IS_ZERO)

	mov	eax, DWORD PTR _e$[ebp]
	test	BYTE PTR [eax+24], 2
	jne	SHORT $LN24@PMC_ModPow
$LN12@PMC_ModPow:

; 593  :                     return (result);
; 594  :             }
; 595  :         }
; 596  :     }
; 597  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _r$[ebp]
	pop	esi
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax

; 598  : }

	pop	ebp
	ret	0
$LN4@PMC_ModPow:

; 523  :             {
; 524  :                 // e が 0 の場合
; 525  : 
; 526  :                 // 0 の 0 乗となるので、エラーを返す
; 527  :                 return (PMC_STATUS_ARGUMENT_ERROR);
; 528  :             }
; 529  :             else
; 530  :             {
; 531  :                 // e が 0 ではない場合
; 532  : 
; 533  :                 // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 534  :                 *r = &number_zero;
; 535  :             }
; 536  :         }
; 537  :         else
; 538  :         {
; 539  :             // v が 0 ではない場合
; 540  : 
; 541  :             // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 542  :             *r = &number_zero;
; 543  :         }
; 544  :     }
; 545  :     else
; 546  :     {
; 547  :         // m が 2 以上の場合
; 548  :         if (v->IS_ZERO)

	test	eax, eax
	je	SHORT $LN10@PMC_ModPow

; 549  :         {
; 550  :             // v が 0 の場合
; 551  :             if (e->IS_ZERO)

	mov	eax, DWORD PTR _e$[ebp]
	test	BYTE PTR [eax+24], 2
	je	SHORT $LN12@PMC_ModPow
$LN24@PMC_ModPow:

; 552  :             {
; 553  :                 // e が 0 の場合
; 554  : 
; 555  :                 // 0 の 0 乗となるので、エラーを返す
; 556  :                 return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	pop	esi

; 598  : }

	pop	ebp
	ret	0
$LN10@PMC_ModPow:

; 557  :             }
; 558  :             else
; 559  :             {
; 560  :                 // e が 0 ではない場合
; 561  : 
; 562  :                 *r = &number_zero;
; 563  :             }
; 564  :         }
; 565  :         else if (v->IS_ONE)

	test	BYTE PTR [esi+24], 4
	jne	SHORT $LN23@PMC_ModPow

; 566  :         {
; 567  :             // v が 1 の場合
; 568  : 
; 569  :             // 1 を何乗しても 1 であり、1 を 2 以上の数で割ればその剰余は必ず 1 となる
; 570  :             *r = &number_one;
; 571  :         }
; 572  :         else
; 573  :         {
; 574  :             // v が 2 以上の場合
; 575  :             if (e->IS_ZERO)

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+24]
	test	al, 2
	jne	SHORT $LN23@PMC_ModPow

; 579  :             }
; 580  :             else if (e->IS_ONE)

	push	DWORD PTR _r$[ebp]
	push	ecx
	test	al, 4
	je	SHORT $LN18@PMC_ModPow

; 581  :             {
; 582  :                 // e が 1 の場合
; 583  : 
; 584  :                 // v % m を計算して返す
; 585  :                 if ((result = Remainder(v, m, r)) != PMC_STATUS_OK)

	push	esi
	call	_Remainder
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN21@PMC_ModPow
	pop	esi

; 598  : }

	pop	ebp
	ret	0
$LN18@PMC_ModPow:

; 586  :                     return (result);
; 587  :             }
; 588  :             else
; 589  :             {
; 590  :                 // v、e、m がすべて 2 以上である場合
; 591  :                 // v の e 乗 の m による剰余を計算して返す
; 592  :                 if ((result = ModulePower(v, e, m, r)) != PMC_STATUS_OK)

	push	edx
	push	esi
	call	_ModulePower
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN21@PMC_ModPow
	pop	esi

; 598  : }

	pop	ebp
	ret	0
$LN23@PMC_ModPow:

; 576  :             {
; 577  :                 // e が 0 の場合
; 578  :                 *r = &number_one;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one
$LN21@PMC_ModPow:

; 593  :                     return (result);
; 594  :             }
; 595  :         }
; 596  :     }
; 597  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi

; 598  : }

	pop	ebp
	ret	0
_PMC_ModPow_X_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
;	COMDAT _ModulePower
_TEXT	SEGMENT
_r_check_code$ = -92					; size = 4
tv912 = -88						; size = 4
_v_2_buf_code$ = -84					; size = 4
_t$1$ = -80						; size = 4
_t$1$ = -80						; size = 4
_q_buf_code$ = -76					; size = 4
_work_v_buf_code$ = -72					; size = 4
_m_count$1$ = -68					; size = 4
_e_mask$1$ = -64					; size = 4
_work_2_buf_code$ = -60					; size = 4
_work_1_buf_code$ = -56					; size = 4
_m_buf$1$ = -52						; size = 4
_v_count$1$ = -48					; size = 4
_e_count$1$ = -44					; size = 4
_work_2_buf_words$ = -40				; size = 4
_q_buf_words$ = -36					; size = 4
_work_v_buf_words$ = -32				; size = 4
_w_ptr$1$ = -28						; size = 4
_v_2_buf_words$ = -24					; size = 4
_q_buf$1$ = -20						; size = 4
_work_1_buf_words$ = -16				; size = 4
_work_2_buf$1$ = -12					; size = 4
_v_2_buf$1$ = -8					; size = 4
_work_1_buf$1$ = -4					; size = 4
_u_ptr$1$ = 8						; size = 4
_v$ = 8							; size = 4
_e$ = 12						; size = 4
tv967 = 16						; size = 4
_work_v_buf$1$ = 16					; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_ModulePower PROC					; COMDAT

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi

; 162  : #ifdef DO_TRACE
; 163  :     ReportIN(v, e, m);
; 164  : #endif
; 165  :     PMC_STATUS_CODE result;
; 166  :     __UNIT_TYPE* m_buf = m->BLOCK;
; 167  :     __UNIT_TYPE m_count = m->UNIT_WORD_COUNT;
; 168  : 
; 169  :     // 作業域を獲得する
; 170  : 
; 171  :     __UNIT_TYPE v_2_bit_count = v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

	mov	esi, DWORD PTR _v$[ebp]

; 172  :     __UNIT_TYPE v_2_buf_code;
; 173  :     __UNIT_TYPE v_2_buf_words;
; 174  :     __UNIT_TYPE* v_2_buf = AllocateBlock(v_2_bit_count, &v_2_buf_words, &v_2_buf_code);

	lea	ecx, DWORD PTR _v_2_buf_code$[ebp]
	push	edi
	mov	edi, DWORD PTR _m$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _v_2_buf_words$[ebp]
	push	ecx
	mov	eax, DWORD PTR [edi+32]
	mov	ebx, DWORD PTR [edi+8]
	mov	DWORD PTR _m_buf$1$[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	inc	eax
	mov	DWORD PTR _m_count$1$[ebp], ebx
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_2_buf$1$[ebp], eax

; 175  :     if (v_2_buf == NULL)

	test	eax, eax
	je	SHORT $LN126@ModulePowe

; 176  :     {
; 177  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 178  :     }
; 179  : 
; 180  :     __UNIT_TYPE work_1_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;
; 181  :     __UNIT_TYPE work_1_buf_code;
; 182  :     __UNIT_TYPE work_1_buf_words;
; 183  :     __UNIT_TYPE* work_1_buf = AllocateBlock(work_1_bit_count, &work_1_buf_words, &work_1_buf_code);

	lea	ecx, DWORD PTR _work_1_buf_code$[ebp]
	mov	eax, ebx
	push	ecx
	shl	eax, 6
	lea	ecx, DWORD PTR _work_1_buf_words$[ebp]
	add	eax, 32					; 00000020H
	push	ecx
	push	eax
	mov	DWORD PTR tv967[ebp], eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_1_buf$1$[ebp], eax

; 184  :     if (work_1_buf == NULL)

	test	eax, eax
	jne	SHORT $LN11@ModulePowe

; 185  :     {
; 186  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 8
$LN126@ModulePowe:

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@ModulePowe:

; 187  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 188  :     }
; 189  : 
; 190  :     __UNIT_TYPE work_2_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;
; 191  :     __UNIT_TYPE work_2_buf_code;
; 192  :     __UNIT_TYPE work_2_buf_words;
; 193  :     __UNIT_TYPE* work_2_buf = AllocateBlock(work_2_bit_count, &work_2_buf_words, &work_2_buf_code);

	lea	eax, DWORD PTR _work_2_buf_code$[ebp]
	push	eax
	lea	eax, DWORD PTR _work_2_buf_words$[ebp]
	push	eax
	push	DWORD PTR tv967[ebp]
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_2_buf$1$[ebp], eax

; 194  :     if (work_2_buf == NULL)

	test	eax, eax
	jne	SHORT $LN12@ModulePowe

; 195  :     {
; 196  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 197  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 16					; 00000010H

; 198  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	pop	edi

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@ModulePowe:

; 199  :     }
; 200  : 
; 201  :     __UNIT_TYPE work_v_bit_count = m_count * __UNIT_TYPE_BIT_COUNT;
; 202  :     __UNIT_TYPE work_v_buf_code;
; 203  :     __UNIT_TYPE work_v_buf_words;
; 204  :     __UNIT_TYPE* work_v_buf = AllocateBlock(work_v_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$[ebp]
	push	eax
	mov	eax, ebx
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 205  :     if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN13@ModulePowe

; 206  :     {
; 207  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 208  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 209  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 24					; 00000018H

; 210  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	pop	edi

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@ModulePowe:

; 211  :     }
; 212  : 
; 213  :     __UNIT_TYPE q_buf_bit_count = _MAXIMUM_UNIT(v->UNIT_BIT_COUNT, m->UNIT_BIT_COUNT * 2) - m->UNIT_BIT_COUNT + 1 + __UNIT_TYPE_BIT_COUNT;

	mov	ecx, DWORD PTR [edi+12]

; 216  :     __UNIT_TYPE* q_buf = AllocateBlock(q_buf_bit_count, &q_buf_words, &q_buf_code);

	lea	ebx, DWORD PTR _q_buf_code$[ebp]
	push	ebx
	lea	ebx, DWORD PTR _q_buf_words$[ebp]
	push	ebx
	lea	edx, DWORD PTR [ecx+ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 490  :     return (x >= y ? x : y);

	cmp	DWORD PTR [esi+12], edx
	cmovae	edx, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 216  :     __UNIT_TYPE* q_buf = AllocateBlock(q_buf_bit_count, &q_buf_words, &q_buf_code);

	sub	edx, ecx
	add	edx, 33					; 00000021H
	push	edx
	call	_AllocateBlock

; 217  :     if (q_buf == NULL)

	mov	ebx, DWORD PTR _m_count$1$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _q_buf$1$[ebp], eax
	test	eax, eax
	jne	SHORT $LN14@ModulePowe

; 218  :     {
; 219  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 220  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 221  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 222  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 32					; 00000020H

; 223  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	pop	edi

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@ModulePowe:

; 224  :     }
; 225  : 
; 226  :     __UNIT_TYPE r_bit_count = m->UNIT_BIT_COUNT;
; 227  :     __UNIT_TYPE r_check_code;
; 228  :     if ((result = AllocateNumber(r, r_bit_count, &r_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _r_check_code$[ebp]
	push	eax
	push	DWORD PTR [edi+12]
	mov	edi, DWORD PTR _r$[ebp]
	push	edi
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN15@ModulePowe

; 229  :     {
; 230  :         DeallocateBlock(q_buf, q_buf_words);

	push	DWORD PTR _q_buf_words$[ebp]
	push	DWORD PTR _q_buf$1$[ebp]
	call	_DeallocateBlock

; 231  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 232  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 233  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 234  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 40					; 00000028H

; 235  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	pop	edi

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@ModulePowe:

; 236  :     }
; 237  : 
; 238  :     __UNIT_TYPE v_count;
; 239  :     int cmp = Compare_Easy(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count);

	mov	eax, DWORD PTR [esi+8]

; 88   :     if (u_count > v_count)

	cmp	eax, ebx
	jbe	$LN50@ModulePowe

; 89   :         return (1);

	mov	eax, 1
$LN16@ModulePowe:

; 252  :         *r = &number_zero;
; 253  : #ifdef DO_TRACE
; 254  :         ReportOUT(*r);
; 255  : #endif
; 256  :         return (PMC_STATUS_OK);
; 257  :     }
; 258  :     else if (cmp > 0)

	mov	ecx, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+32]
	test	eax, eax
	jle	$LN18@ModulePowe

; 259  :     {
; 260  :         // v > m である場合
; 261  : 
; 262  :         // v2 を v % m に設定する。
; 263  : 
; 264  :         DivRem_X_X(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count, work_v_buf, q_buf, v_2_buf);

	push	DWORD PTR _v_2_buf$1$[ebp]
	mov	edi, DWORD PTR _q_buf$1$[ebp]
	push	edi
	push	DWORD PTR _work_v_buf$1$[ebp]
	push	ebx
	push	DWORD PTR _m_buf$1$[ebp]
	push	ecx
	push	esi
	call	_DivRem_X_X

; 265  :         if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN1@ModulePowe

; 266  :             return (result);
; 267  :         if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _q_buf_code$[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 268  :             return (result);
; 269  :         if ((result = CheckBlockLight(v_2_buf, v_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _v_2_buf_code$[ebp]
	mov	esi, DWORD PTR _v_2_buf$1$[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 270  :             return (result);
; 271  :         v_count = m_count;

	mov	ecx, ebx
	mov	DWORD PTR _v_count$1$[ebp], ecx

; 272  :         while (v_count > 0 && v_2_buf[v_count - 1] == 0)

	test	ebx, ebx
	je	$LN118@ModulePowe

; 270  :             return (result);
; 271  :         v_count = m_count;

	lea	eax, DWORD PTR [ebx-1]
	lea	eax, DWORD PTR [esi+eax*4]
	npad	1
$LL2@ModulePowe:

; 272  :         while (v_count > 0 && v_2_buf[v_count - 1] == 0)

	cmp	DWORD PTR [eax], 0
	jne	$LN3@ModulePowe

; 273  :             --v_count;

	dec	ecx
	sub	eax, 4
	mov	DWORD PTR _v_count$1$[ebp], ecx
	test	ecx, ecx
	jne	SHORT $LL2@ModulePowe

; 274  : 
; 275  :         if (v_count <= 0)

	jmp	SHORT $LN118@ModulePowe
$LN50@ModulePowe:

; 90   :     else if (u_count < v_count)

	jae	SHORT $LN52@ModulePowe

; 91   :         return (-1);

	or	eax, -1
	jmp	$LN16@ModulePowe
$LN52@ModulePowe:

; 92   :     else
; 93   :         return (Compare_Imp(u, v, u_count));

	push	eax
	push	DWORD PTR _m_buf$1$[ebp]
	push	DWORD PTR [esi+32]
	call	_Compare_Imp
	add	esp, 12					; 0000000cH

; 240  :     if (cmp == 0)

	test	eax, eax
	jne	$LN16@ModulePowe

; 241  :     {
; 242  :         // v == m である場合
; 243  : 
; 244  :         // v を何乗してもその剰余は 0 であるため、0 を返す。
; 245  : 
; 246  :         DeallocateNumber(*r);

	push	DWORD PTR [edi]
	call	_DeallocateNumber

; 247  :         DeallocateBlock(q_buf, q_buf_words);

	push	DWORD PTR _q_buf_words$[ebp]
	push	DWORD PTR _q_buf$1$[ebp]
	call	_DeallocateBlock

; 248  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 249  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 250  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 251  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	add	esp, 44					; 0000002cH
	mov	DWORD PTR [edi], OFFSET _number_zero
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@ModulePowe:

; 274  : 
; 275  :         if (v_count <= 0)

	test	ecx, ecx
	jne	SHORT $LN19@ModulePowe
$LN118@ModulePowe:

; 276  :         {
; 277  :             // v2 が 0 になってしまった場合はべき乗を繰り返しても 0 になることが確定なので 0 を返す
; 278  :             DeallocateNumber(*r);

	mov	ebx, DWORD PTR _r$[ebp]
	push	DWORD PTR [ebx]
	call	_DeallocateNumber

; 279  :             DeallocateBlock(q_buf, q_buf_words);

	push	DWORD PTR _q_buf_words$[ebp]
	push	edi
	call	_DeallocateBlock

; 280  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 281  :             DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 282  :             DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 283  :             DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	esi
	call	_DeallocateBlock

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	add	esp, 44					; 0000002cH
	mov	DWORD PTR [ebx], OFFSET _number_zero
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@ModulePowe:

; 296  :         v_count = v->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _v$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 354  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _v_2_buf$1$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 296  :         v_count = v->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR [eax+8]
	mov	esi, DWORD PTR _v_2_buf$1$[ebp]
	mov	DWORD PTR _v_count$1$[ebp], eax
$LN19@ModulePowe:

; 297  :     }
; 298  : 
; 299  : #ifdef DO_TRACE
; 300  :     ReportLabel("vの初期化");
; 301  :     ReportDump("v", v_2_buf, v_count);
; 302  : #endif
; 303  :     __UNIT_TYPE e_count = e->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+8]

; 304  :     __UNIT_TYPE e_mask = ~((__UNIT_TYPE)-1 >> 1);
; 305  :     e_mask = e_mask >> _LZCNT_ALT_UNIT(e->BLOCK[e_count - 1]);

	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR _e_count$1$[ebp], ecx
	mov	eax, DWORD PTR [eax+ecx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 916  :     if (x == 0)

	test	eax, eax
	jne	SHORT $LN58@ModulePowe

; 917  :         return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [eax+32]
	jmp	SHORT $LN57@ModulePowe
$LN58@ModulePowe:

; 918  : #ifdef _M_IX86
; 919  :     _UINT32_T pos;
; 920  : #ifdef _MSC_VER
; 921  :     _BitScanReverse(&pos, x);

	bsr	eax, eax

; 922  : #elif defined(__GNUC__)
; 923  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 924  : #else
; 925  : #error unknown compiler
; 926  : #endif
; 927  : #elif defined(_M_X64)
; 928  : #ifdef _MSC_VER
; 929  :     _UINT32_T pos;
; 930  :     _BitScanReverse64(&pos, x);
; 931  : #elif defined(__GNUC__)
; 932  :     _UINT64_T pos;
; 933  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 934  : #else
; 935  : #error unknown compiler
; 936  : #endif
; 937  : #else
; 938  : #error unknown platform
; 939  : #endif
; 940  :     return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN57@ModulePowe:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 315  :     __UNIT_TYPE* u_ptr = work_1_buf;

	mov	edx, DWORD PTR _work_1_buf$1$[ebp]
	mov	eax, -2147483648			; 80000000H
	mov	edi, eax
	mov	DWORD PTR tv912[ebp], eax
	shr	edi, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 354  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 320  :     while (e_count > 0)

	cmp	DWORD PTR _e_count$1$[ebp], 0
	mov	ebx, DWORD PTR _v_count$1$[ebp]
	mov	DWORD PTR _e_mask$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 354  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _work_1_buf$1$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 317  :     __UNIT_TYPE* w_ptr = work_2_buf;

	mov	edi, DWORD PTR _work_2_buf$1$[ebp]
	mov	DWORD PTR _u_ptr$1$[ebp], edx
	mov	DWORD PTR _w_ptr$1$[ebp], edi

; 320  :     while (e_count > 0)

	jbe	$LN5@ModulePowe
	mov	esi, DWORD PTR _m_count$1$[ebp]
$LL4@ModulePowe:

; 321  :     {
; 322  : #ifdef DO_TRACE
; 323  :         ReportLabel("ループ開始");
; 324  :         ReportVar("e_count", e_count);
; 325  :         ReportVar("e_mask", e_mask);
; 326  : #endif
; 327  : 
; 328  :         // 次の桁の準備をする
; 329  :         e_mask >>= 1;

	mov	eax, DWORD PTR _e_mask$1$[ebp]
	shr	eax, 1
	mov	ecx, eax

; 330  :         if (e_mask == 0)

	cmove	eax, DWORD PTR tv912[ebp]
	mov	DWORD PTR _e_mask$1$[ebp], eax

; 331  :         {
; 332  :             e_mask = ~((__UNIT_TYPE)-1 >> 1);
; 333  :             --e_count;
; 334  :         }
; 335  : 
; 336  :         if (e_count <= 0)

	mov	eax, DWORD PTR _e_count$1$[ebp]
	dec	eax
	test	ecx, ecx
	cmovne	eax, DWORD PTR _e_count$1$[ebp]
	mov	DWORD PTR _e_count$1$[ebp], eax
	test	eax, eax
	je	$LN5@ModulePowe
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 404  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	xor	eax, eax
	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 351  :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	edi, DWORD PTR _w_ptr$1$[ebp]
	push	edi
	push	ebx
	push	edx
	push	ebx
	push	edx
	call	_Multiply_X_X_Imp

; 352  :         if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_1_buf_code$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@ModulePowe

; 353  :             return (result);
; 354  :         if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_2_buf_code$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 98   :     __UNIT_TYPE* t = *u;

	mov	eax, DWORD PTR _u_ptr$1$[ebp]

; 100  :     *v = t;

	lea	ecx, DWORD PTR [ebx+ebx]
	mov	edx, edi
	mov	DWORD PTR _t$1$[ebp], eax
	mov	DWORD PTR _w_ptr$1$[ebp], eax

; 355  :             return (result);
; 356  :         SwapPointer(&u_ptr, &w_ptr);
; 357  :         u_count *= 2;
; 358  :         if (u_ptr[u_count - 1] == 0)
; 359  :             --u_count;
; 360  : #ifdef DO_TRACE
; 361  :         ReportDump("w", u_ptr, u_count);
; 362  : #endif
; 363  : 
; 364  :         // w := u % m を計算する
; 365  : #ifdef DO_TRACE
; 366  :         ReportLabel("w := u % m");
; 367  :         ReportDump("u", u_ptr, u_count);
; 368  :         ReportDump("m", m_buf, m_count);
; 369  : #endif
; 370  :         if (u_count >= m_count)

	lea	eax, DWORD PTR [ecx-1]

; 99   :     *u = *v;

	mov	DWORD PTR _u_ptr$1$[ebp], edx

; 355  :             return (result);
; 356  :         SwapPointer(&u_ptr, &w_ptr);
; 357  :         u_count *= 2;
; 358  :         if (u_ptr[u_count - 1] == 0)
; 359  :             --u_count;
; 360  : #ifdef DO_TRACE
; 361  :         ReportDump("w", u_ptr, u_count);
; 362  : #endif
; 363  : 
; 364  :         // w := u % m を計算する
; 365  : #ifdef DO_TRACE
; 366  :         ReportLabel("w := u % m");
; 367  :         ReportDump("u", u_ptr, u_count);
; 368  :         ReportDump("m", m_buf, m_count);
; 369  : #endif
; 370  :         if (u_count >= m_count)

	cmp	DWORD PTR [edx+ebx*8-4], 0
	cmovne	eax, ecx
	mov	ebx, eax
	cmp	ebx, esi
	jb	$LN123@ModulePowe
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 404  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _work_v_buf_words$[ebp]
	xor	eax, eax
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
	rep stosd
	mov	ecx, DWORD PTR _q_buf_words$[ebp]
	mov	edi, DWORD PTR _q_buf$1$[ebp]
	rep stosd
	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	mov	edi, DWORD PTR _t$1$[ebp]
	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 375  :             DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, q_buf, w_ptr);

	mov	edi, DWORD PTR _t$1$[ebp]
	push	edi
	push	DWORD PTR _q_buf$1$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	push	esi
	push	DWORD PTR _m_buf$1$[ebp]
	push	ebx
	push	edx
	call	_DivRem_X_X

; 376  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN1@ModulePowe

; 377  :                 return (result);
; 378  :             if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _q_buf_code$[ebp]
	push	DWORD PTR _q_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 379  :                 return (result);
; 380  :             if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_1_buf_code$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 381  :                 return (result);
; 382  :             if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_2_buf_code$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 98   :     __UNIT_TYPE* t = *u;

	mov	ecx, DWORD PTR _u_ptr$1$[ebp]

; 99   :     *u = *v;

	mov	edx, edi
	mov	DWORD PTR _w_ptr$1$[ebp], ecx

; 383  :                 return (result);
; 384  :             SwapPointer(&u_ptr, &w_ptr);
; 385  :             u_count = m_count;

	mov	ebx, esi

; 99   :     *u = *v;

	mov	DWORD PTR _u_ptr$1$[ebp], edi

; 386  :             while (u_count > 0 && u_ptr[u_count - 1] == 0)

	test	esi, esi
	je	SHORT $LN99@ModulePowe

; 98   :     __UNIT_TYPE* t = *u;

	lea	eax, DWORD PTR [edi-4]
	lea	eax, DWORD PTR [eax+esi*4]
$LL6@ModulePowe:

; 386  :             while (u_count > 0 && u_ptr[u_count - 1] == 0)

	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@ModulePowe

; 387  :                 --u_count;

	sub	eax, 4
	sub	ebx, 1
	jne	SHORT $LL6@ModulePowe
$LN99@ModulePowe:

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	mov	ebx, DWORD PTR _r$[ebp]
	push	DWORD PTR [ebx]
	call	_DeallocateNumber
	push	DWORD PTR _q_buf_words$[ebp]
	push	DWORD PTR _q_buf$1$[ebp]
	call	_DeallocateBlock
	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock
	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock
	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock
	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 44					; 0000002cH
	mov	DWORD PTR [ebx], OFFSET _number_zero
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN123@ModulePowe:

; 355  :             return (result);
; 356  :         SwapPointer(&u_ptr, &w_ptr);
; 357  :         u_count *= 2;
; 358  :         if (u_ptr[u_count - 1] == 0)
; 359  :             --u_count;
; 360  : #ifdef DO_TRACE
; 361  :         ReportDump("w", u_ptr, u_count);
; 362  : #endif
; 363  : 
; 364  :         // w := u % m を計算する
; 365  : #ifdef DO_TRACE
; 366  :         ReportLabel("w := u % m");
; 367  :         ReportDump("u", u_ptr, u_count);
; 368  :         ReportDump("m", m_buf, m_count);
; 369  : #endif
; 370  :         if (u_count >= m_count)

	mov	ecx, DWORD PTR _w_ptr$1$[ebp]
$LN7@ModulePowe:

; 388  : 
; 389  :             if (u_count <= 0)
; 390  :             {
; 391  :                 // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 392  :                 DeallocateNumber(*r);
; 393  :                 DeallocateBlock(q_buf, q_buf_words);
; 394  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 395  :                 DeallocateBlock(work_2_buf, work_2_buf_words);
; 396  :                 DeallocateBlock(work_1_buf, work_1_buf_words);
; 397  :                 DeallocateBlock(v_2_buf, v_2_buf_words);
; 398  :                 *r = &number_zero;
; 399  : #ifdef DO_TRACE
; 400  :                 ReportOUT(*r);
; 401  : #endif
; 402  :                 return (PMC_STATUS_OK);
; 403  :             }
; 404  :         }
; 405  : #ifdef DO_TRACE
; 406  :         ReportDump("w", u_ptr, u_count);
; 407  : #endif
; 408  : 
; 409  : #ifdef DO_TRACE
; 410  :         ReportLabel("e のビット検査");
; 411  :         ReportDump("e", e->BLOCK, e->UNIT_WORD_COUNT);
; 412  :         ReportVar("e_count", e_count);
; 413  :         ReportVar("e_mask", e_mask);
; 414  :         ReportVar("e_mask & e->BLOCK[e_count - 1]", e_mask & e->BLOCK[e_count - 1]);
; 415  : #endif
; 416  :         if (e_mask & e->BLOCK[e_count - 1])

	mov	eax, DWORD PTR _e$[ebp]
	mov	esi, DWORD PTR _e_count$1$[ebp]
	mov	edi, DWORD PTR _e_mask$1$[ebp]
	mov	eax, DWORD PTR [eax+32]
	test	DWORD PTR [eax+esi*4-4], edi
	mov	esi, DWORD PTR _m_count$1$[ebp]
	je	$LN122@ModulePowe
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 404  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, ecx
	xor	eax, eax
	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 428  :             Multiply_X_X_Imp(u_ptr, u_count, v_ptr, v_count, w_ptr);

	mov	edi, DWORD PTR _w_ptr$1$[ebp]
	push	edi
	push	DWORD PTR _v_count$1$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	push	ebx
	push	edx
	call	_Multiply_X_X_Imp

; 429  :             if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_1_buf_code$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@ModulePowe

; 430  :                 return (result);
; 431  :             if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_2_buf_code$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 432  :                 return (result);
; 433  :             SwapPointer(&u_ptr, &w_ptr);
; 434  :             u_count += v_count;

	add	ebx, DWORD PTR _v_count$1$[ebp]

; 99   :     *u = *v;

	mov	edx, edi
	mov	eax, DWORD PTR _u_ptr$1$[ebp]

; 100  :     *v = t;

	mov	edi, eax
	mov	DWORD PTR _t$1$[ebp], eax
	mov	DWORD PTR _u_ptr$1$[ebp], edx

; 435  :             if (u_ptr[u_count - 1] == 0)
; 436  :                 --u_count;
; 437  : #ifdef DO_TRACE
; 438  :             ReportDump("w", u_ptr, u_count);
; 439  : #endif
; 440  : 
; 441  :             // w := u % m を計算する
; 442  : 
; 443  : #ifdef DO_TRACE
; 444  :             ReportLabel("w := u % m");
; 445  :             ReportDump("u", u_ptr, u_count);
; 446  :             ReportDump("m", m_buf, m_count);
; 447  : #endif
; 448  :             if (u_count >= m_count)

	cmp	DWORD PTR [edx+ebx*4-4], 0
	lea	eax, DWORD PTR [ebx-1]

; 100  :     *v = t;

	mov	DWORD PTR _w_ptr$1$[ebp], edi

; 435  :             if (u_ptr[u_count - 1] == 0)
; 436  :                 --u_count;
; 437  : #ifdef DO_TRACE
; 438  :             ReportDump("w", u_ptr, u_count);
; 439  : #endif
; 440  : 
; 441  :             // w := u % m を計算する
; 442  : 
; 443  : #ifdef DO_TRACE
; 444  :             ReportLabel("w := u % m");
; 445  :             ReportDump("u", u_ptr, u_count);
; 446  :             ReportDump("m", m_buf, m_count);
; 447  : #endif
; 448  :             if (u_count >= m_count)

	cmovne	eax, ebx
	mov	ebx, eax
	cmp	ebx, esi
	jb	$LL4@ModulePowe
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 404  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _work_v_buf_words$[ebp]
	xor	eax, eax
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
	rep stosd
	mov	ecx, DWORD PTR _q_buf_words$[ebp]
	mov	edi, DWORD PTR _q_buf$1$[ebp]
	rep stosd
	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	mov	edi, DWORD PTR _t$1$[ebp]
	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 453  :                 DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, q_buf, w_ptr);

	mov	edi, DWORD PTR _t$1$[ebp]
	push	edi
	push	DWORD PTR _q_buf$1$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	push	esi
	push	DWORD PTR _m_buf$1$[ebp]
	push	ebx
	push	edx
	call	_DivRem_X_X

; 454  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN1@ModulePowe

; 455  :                     return (result);
; 456  :                 if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _q_buf_code$[ebp]
	push	DWORD PTR _q_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 457  :                     return (result);
; 458  :                 if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_1_buf_code$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 459  :                     return (result);
; 460  :                 if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_2_buf_code$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 98   :     __UNIT_TYPE* t = *u;

	mov	eax, DWORD PTR _u_ptr$1$[ebp]

; 99   :     *u = *v;

	mov	edx, edi
	mov	DWORD PTR _w_ptr$1$[ebp], eax

; 461  :                     return (result);
; 462  :                 SwapPointer(&u_ptr, &w_ptr);
; 463  :                 u_count = m_count;

	mov	ebx, esi

; 99   :     *u = *v;

	mov	DWORD PTR _u_ptr$1$[ebp], edx

; 464  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

	test	esi, esi
	je	$LN99@ModulePowe

; 98   :     __UNIT_TYPE* t = *u;

	lea	eax, DWORD PTR [esi-1]
	lea	eax, DWORD PTR [edi+eax*4]
$LL8@ModulePowe:

; 464  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN124@ModulePowe

; 465  :                     --u_count;

	sub	eax, 4
	sub	ebx, 1
	jne	SHORT $LL8@ModulePowe

; 464  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

	jmp	$LN99@ModulePowe
$LN122@ModulePowe:

; 388  : 
; 389  :             if (u_count <= 0)
; 390  :             {
; 391  :                 // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 392  :                 DeallocateNumber(*r);
; 393  :                 DeallocateBlock(q_buf, q_buf_words);
; 394  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 395  :                 DeallocateBlock(work_2_buf, work_2_buf_words);
; 396  :                 DeallocateBlock(work_1_buf, work_1_buf_words);
; 397  :                 DeallocateBlock(v_2_buf, v_2_buf_words);
; 398  :                 *r = &number_zero;
; 399  : #ifdef DO_TRACE
; 400  :                 ReportOUT(*r);
; 401  : #endif
; 402  :                 return (PMC_STATUS_OK);
; 403  :             }
; 404  :         }
; 405  : #ifdef DO_TRACE
; 406  :         ReportDump("w", u_ptr, u_count);
; 407  : #endif
; 408  : 
; 409  : #ifdef DO_TRACE
; 410  :         ReportLabel("e のビット検査");
; 411  :         ReportDump("e", e->BLOCK, e->UNIT_WORD_COUNT);
; 412  :         ReportVar("e_count", e_count);
; 413  :         ReportVar("e_mask", e_mask);
; 414  :         ReportVar("e_mask & e->BLOCK[e_count - 1]", e_mask & e->BLOCK[e_count - 1]);
; 415  : #endif
; 416  :         if (e_mask & e->BLOCK[e_count - 1])

	mov	edx, DWORD PTR _u_ptr$1$[ebp]
$LN124@ModulePowe:

; 321  :     {
; 322  : #ifdef DO_TRACE
; 323  :         ReportLabel("ループ開始");
; 324  :         ReportVar("e_count", e_count);
; 325  :         ReportVar("e_mask", e_mask);
; 326  : #endif
; 327  : 
; 328  :         // 次の桁の準備をする
; 329  :         e_mask >>= 1;

	mov	edi, DWORD PTR _w_ptr$1$[ebp]
	jmp	$LL4@ModulePowe
$LN5@ModulePowe:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 354  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR _r$[ebp]
	mov	esi, edx
	mov	ecx, ebx
	mov	edi, DWORD PTR [eax]
	mov	edi, DWORD PTR [edi+32]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 491  :     if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [eax]
	push	DWORD PTR _r_check_code$[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@ModulePowe

; 492  :         return (result);
; 493  :     CommitNumber(*r);

	mov	ebx, DWORD PTR _r$[ebp]
	push	DWORD PTR [ebx]
	call	_CommitNumber

; 494  :     DeallocateBlock(q_buf, q_buf_words);

	push	DWORD PTR _q_buf_words$[ebp]
	push	DWORD PTR _q_buf$1$[ebp]
	call	_DeallocateBlock

; 495  :     DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 496  :     DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 497  :     DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 498  :     DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock

; 499  : #ifdef DO_TRACE
; 500  :     ReportOUT(*r);
; 501  : #endif
; 502  :     return (PMC_STATUS_OK);
; 503  : }

	add	esp, 44					; 0000002cH
	xor	eax, eax
$LN1@ModulePowe:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ModulePower ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
;	COMDAT _Remainder
_TEXT	SEGMENT
_r_check_code$1 = -24					; size = 4
_q_buf_code$2 = -20					; size = 4
_work_v_buf_code$3 = -16				; size = 4
_work_v_buf$1$ = -12					; size = 4
_q_buf$1$ = -8						; size = 4
_q_buf_words$4 = -4					; size = 4
_work_v_buf_words$5 = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_r$ = 16						; size = 4
_Remainder PROC						; COMDAT

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx

; 105  :     PMC_STATUS_CODE result;
; 106  : 
; 107  :     if (u->UNIT_BIT_COUNT < v->UNIT_BIT_COUNT)

	mov	ebx, DWORD PTR _u$[ebp]
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [ebx+12], eax
	jae	SHORT $LN2@Remainder

; 108  :     {
; 109  :         if ((result = DuplicateNumber(u, r)) != PMC_STATUS_OK)

	push	DWORD PTR _r$[ebp]
	push	ebx
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN3@Remainder

; 158  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@Remainder:

; 110  :             return (result);
; 111  :     }
; 112  :     else
; 113  :     {
; 114  :         __UNIT_TYPE work_v_buf_code;
; 115  :         __UNIT_TYPE work_v_buf_words;
; 116  :         __UNIT_TYPE* work_v_buf = AllocateBlock(v->UNIT_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	ecx, DWORD PTR _work_v_buf_code$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _work_v_buf_words$5[ebp]
	push	ecx
	push	eax
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], edi

; 117  :         if (work_v_buf == NULL)

	test	edi, edi
	je	SHORT $LN16@Remainder

; 118  :         {
; 119  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 120  :         }
; 121  :         __UNIT_TYPE q_buf_code;
; 122  :         __UNIT_TYPE q_buf_words;
; 123  :         __UNIT_TYPE* q_buf = AllocateBlock(u->UNIT_BIT_COUNT - v->UNIT_BIT_COUNT + 1 + __UNIT_TYPE_BIT_COUNT, &q_buf_words, &q_buf_code);

	lea	eax, DWORD PTR _q_buf_code$2[ebp]
	push	eax
	lea	eax, DWORD PTR _q_buf_words$4[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	sub	eax, DWORD PTR [esi+12]
	add	eax, 33					; 00000021H
	push	eax
	call	_AllocateBlock
	mov	esi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _q_buf$1$[ebp], esi

; 124  :         if (q_buf == NULL)

	test	esi, esi
	jne	SHORT $LN6@Remainder

; 125  :         {
; 126  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 8
$LN16@Remainder:

; 158  : }

	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@Remainder:

; 127  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 128  :         }
; 129  :         __UNIT_TYPE r_check_code;
; 130  :         if ((result = AllocateNumber(r, u->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT, &r_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _r_check_code$1[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	add	eax, 32					; 00000020H
	push	eax
	push	DWORD PTR _r$[ebp]
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@Remainder

; 131  :         {
; 132  :             DeallocateBlock(q_buf, q_buf_words);

	push	DWORD PTR _q_buf_words$4[ebp]
	push	esi
	call	_DeallocateBlock

; 133  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 16					; 00000010H

; 134  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	pop	edi

; 158  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Remainder:

; 135  :         }
; 136  : 
; 137  :         if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR _r$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN8@Remainder

; 138  :         {
; 139  :             q_buf[0] = 0;

	mov	DWORD PTR [esi], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 354  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR [eax]
	mov	esi, DWORD PTR [ebx+32]
	mov	ecx, DWORD PTR [ebx+8]
	mov	edi, DWORD PTR [edi+32]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c

; 141  :         }

	mov	esi, DWORD PTR _q_buf$1$[ebp]
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
	jmp	SHORT $LN12@Remainder
$LN8@Remainder:

; 142  :         else
; 143  :         {
; 144  :             DivRem_X_X(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, q_buf, (*r)->BLOCK);

	mov	eax, DWORD PTR [eax]
	push	DWORD PTR [eax+32]
	push	esi
	push	edi
	push	DWORD PTR [ecx+8]
	push	DWORD PTR [ecx+32]
	push	edx
	push	DWORD PTR [ebx+32]
	call	_DivRem_X_X

; 145  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$3[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	SHORT $LN1@Remainder

; 146  :                 return (result);
; 147  :             if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _q_buf_code$2[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Remainder

; 148  :                 return (result);
; 149  :             if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r$[ebp]
	push	DWORD PTR _r_check_code$1[ebp]
	mov	eax, DWORD PTR [eax]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Remainder
$LN12@Remainder:

; 150  :                 return (result);
; 151  :         }
; 152  : 
; 153  :         DeallocateBlock(q_buf, q_buf_words);

	push	DWORD PTR _q_buf_words$4[ebp]
	push	esi
	call	_DeallocateBlock

; 154  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock

; 155  :         CommitNumber(*r);

	mov	eax, DWORD PTR _r$[ebp]
	push	DWORD PTR [eax]
	call	_CommitNumber
	add	esp, 20					; 00000014H
$LN3@Remainder:

; 156  :     }
; 157  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Remainder:
	pop	edi

; 158  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Remainder ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
;	COMDAT _SwapPointer
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_SwapPointer PROC					; COMDAT

; 97   : {

	push	ebp
	mov	ebp, esp

; 98   :     __UNIT_TYPE* t = *u;

	mov	edx, DWORD PTR _u$[ebp]

; 99   :     *u = *v;

	mov	ecx, DWORD PTR _v$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 100  :     *v = t;

	mov	DWORD PTR [ecx], esi
	pop	esi

; 101  : }

	pop	ebp
	ret	0
_SwapPointer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
;	COMDAT _Compare_Easy
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_Compare_Easy PROC					; COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp

; 88   :     if (u_count > v_count)

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _v_count$[ebp]
	jbe	SHORT $LN2@Compare_Ea

; 89   :         return (1);

	mov	eax, 1

; 94   : }

	pop	ebp
	ret	0
$LN2@Compare_Ea:

; 90   :     else if (u_count < v_count)

	jae	SHORT $LN4@Compare_Ea

; 91   :         return (-1);

	or	eax, -1

; 94   : }

	pop	ebp
	ret	0
$LN4@Compare_Ea:

; 92   :     else
; 93   :         return (Compare_Imp(u, v, u_count));

	push	eax
	push	DWORD PTR _v$[ebp]
	push	DWORD PTR _u$[ebp]
	call	_Compare_Imp
	add	esp, 12					; 0000000cH

; 94   : }

	pop	ebp
	ret	0
_Compare_Easy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 915  : {

	push	ebp
	mov	ebp, esp

; 916  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 917  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 941  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 918  : #ifdef _M_IX86
; 919  :     _UINT32_T pos;
; 920  : #ifdef _MSC_VER
; 921  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 922  : #elif defined(__GNUC__)
; 923  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 924  : #else
; 925  : #error unknown compiler
; 926  : #endif
; 927  : #elif defined(_M_X64)
; 928  : #ifdef _MSC_VER
; 929  :     _UINT32_T pos;
; 930  :     _BitScanReverse64(&pos, x);
; 931  : #elif defined(__GNUC__)
; 932  :     _UINT64_T pos;
; 933  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 934  : #else
; 935  : #error unknown compiler
; 936  : #endif
; 937  : #else
; 938  : #error unknown platform
; 939  : #endif
; 940  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 941  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MAXIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC					; COMDAT

; 489  : {

	push	ebp
	mov	ebp, esp

; 490  :     return (x >= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovae	eax, DWORD PTR _x$[ebp]

; 491  : }

	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ZERO_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT PROC					; COMDAT

; 402  : {

	push	ebp
	mov	ebp, esp

; 403  : #ifdef _M_IX86
; 404  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 405  : #elif defined(_M_X64)
; 406  :     __stosq(d, 0, count);
; 407  : #else
; 408  : #error unknown platform
; 409  : #endif
; 410  : }

	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 352  : {

	push	ebp
	mov	ebp, esp

; 353  : #ifdef _M_IX86
; 354  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 355  : #elif defined(_M_X64)
; 356  :     __movsq(d, s, count);
; 357  : #else
; 358  : #error unknown platform
; 359  : #endif
; 360  : }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
;	COMDAT _PMC_ModPow_X_X_X@16
_TEXT	SEGMENT
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_ModPow_X_X_X@16 PROC				; COMDAT

; 601  : {

	push	ebp
	mov	ebp, esp
	push	ebx

; 602  :     if (v == NULL)

	mov	ebx, DWORD PTR _v$[ebp]
	push	esi
	push	edi
	test	ebx, ebx
	je	SHORT $LN35@PMC_ModPow

; 603  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 604  :     if (e == NULL)

	mov	edi, DWORD PTR _e$[ebp]
	test	edi, edi
	je	SHORT $LN35@PMC_ModPow

; 605  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 606  :     if (m == NULL)

	cmp	DWORD PTR _m$[ebp], 0
	je	SHORT $LN35@PMC_ModPow

; 607  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 608  :     if (r == NULL)

	mov	esi, DWORD PTR _r$[ebp]
	test	esi, esi
	je	SHORT $LN35@PMC_ModPow

; 609  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 610  :     PMC_STATUS_CODE result;
; 611  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_ModPow

; 612  :         return (result);
; 613  :     if ((result = CheckNumber((NUMBER_HEADER*)e)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_ModPow

; 614  :         return (result);
; 615  :     if ((result = CheckNumber((NUMBER_HEADER*)m)) != PMC_STATUS_OK)

	push	DWORD PTR _m$[ebp]
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_ModPow

; 509  :     if (m->IS_ZERO)

	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+24]
	test	dl, 2
	je	SHORT $LN12@PMC_ModPow

; 624  : }

	pop	edi
	pop	esi

; 514  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH

; 624  : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN12@PMC_ModPow:

; 516  :     else if (m->IS_ONE)

	mov	ecx, DWORD PTR [ebx+24]
	and	ecx, 2
	test	dl, 4
	je	SHORT $LN14@PMC_ModPow

; 517  :     {
; 518  :         // m が 1 の場合
; 519  :         if (v->IS_ZERO)

	test	ecx, ecx
	je	SHORT $LN22@PMC_ModPow

; 520  :         {
; 521  :             // v が 0 の場合
; 522  :             if (e->IS_ZERO)

	test	BYTE PTR [edi+24], 2
	je	SHORT $LN22@PMC_ModPow
$LN35@PMC_ModPow:

; 624  : }

	or	eax, -1
$LN1@PMC_ModPow:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN14@PMC_ModPow:

; 548  :         if (v->IS_ZERO)

	test	ecx, ecx
	je	SHORT $LN20@PMC_ModPow

; 549  :         {
; 550  :             // v が 0 の場合
; 551  :             if (e->IS_ZERO)

	test	BYTE PTR [edi+24], 2
	jne	SHORT $LN35@PMC_ModPow
$LN22@PMC_ModPow:
	pop	edi

; 619  : #ifdef _DEBUG
; 620  :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 621  :         return (result);
; 622  : #endif
; 623  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], OFFSET _number_zero
	xor	eax, eax

; 624  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN20@PMC_ModPow:

; 565  :         else if (v->IS_ONE)

	test	BYTE PTR [ebx+24], 4
	jne	SHORT $LN34@PMC_ModPow

; 566  :         {
; 567  :             // v が 1 の場合
; 568  : 
; 569  :             // 1 を何乗しても 1 であり、1 を 2 以上の数で割ればその剰余は必ず 1 となる
; 570  :             *r = &number_one;
; 571  :         }
; 572  :         else
; 573  :         {
; 574  :             // v が 2 以上の場合
; 575  :             if (e->IS_ZERO)

	mov	ecx, DWORD PTR [edi+24]
	test	cl, 2
	jne	SHORT $LN34@PMC_ModPow

; 579  :             }
; 580  :             else if (e->IS_ONE)

	push	esi
	push	eax
	test	cl, 4
	je	SHORT $LN28@PMC_ModPow

; 581  :             {
; 582  :                 // e が 1 の場合
; 583  : 
; 584  :                 // v % m を計算して返す
; 585  :                 if ((result = Remainder(v, m, r)) != PMC_STATUS_OK)

	push	ebx
	call	_Remainder
	add	esp, 12					; 0000000cH

; 586  :                     return (result);

	jmp	SHORT $LN37@PMC_ModPow
$LN28@PMC_ModPow:

; 587  :             }
; 588  :             else
; 589  :             {
; 590  :                 // v、e、m がすべて 2 以上である場合
; 591  :                 // v の e 乗 の m による剰余を計算して返す
; 592  :                 if ((result = ModulePower(v, e, m, r)) != PMC_STATUS_OK)

	push	edi
	push	ebx
	call	_ModulePower
	add	esp, 16					; 00000010H
$LN37@PMC_ModPow:

; 616  :         return (result);
; 617  :     if ((result = PMC_ModPow_X_X_X_Imp((NUMBER_HEADER*)v, (NUMBER_HEADER*)e, (NUMBER_HEADER*)m, (NUMBER_HEADER**)r)) != PMC_STATUS_OK)
; 618  :         return (result);

	test	eax, eax
	je	SHORT $LN9@PMC_ModPow

; 624  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN34@PMC_ModPow:

; 578  :                 *r = &number_one;

	mov	DWORD PTR [esi], OFFSET _number_one
$LN9@PMC_ModPow:
	pop	edi

; 624  : }

	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
_PMC_ModPow_X_X_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_modpow.c
;	COMDAT _Initialize_ModPow
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_ModPow PROC					; COMDAT

; 628  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 629  : }

	ret	0
_Initialize_ModPow ENDP
_TEXT	ENDS
END
