; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_multiply.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_Multiply
PUBLIC	_PMC_Multiply_X_I@12
PUBLIC	_PMC_Multiply_X_L@16
PUBLIC	_PMC_Multiply_X_X@12
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
_BSS	SEGMENT
_fp_Multiply_X_1W DD 01H DUP (?)
_fp_Multiply_X_2W DD 01H DUP (?)
_fp_Multiply_X_X DD 01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_X
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_Multiply_X_X PROC					; COMDAT

; 452  : {

	push	ebp
	mov	ebp, esp

; 454  : }

	pop	ebp

; 453  :     return ((*fp_Multiply_X_X)(x, y, z));

	jmp	DWORD PTR _fp_Multiply_X_X
_Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_X_using_MULX_ADCX
_TEXT	SEGMENT
_x_count$1$ = 8						; size = 4
_x$ = 8							; size = 4
_xp$1$ = 12						; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_Multiply_X_X_using_MULX_ADCX PROC			; COMDAT

; 425  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 426  :     // x のワード長が y のワード長以上であるようにする
; 427  :     if (x->UNIT_WORD_COUNT < y->UNIT_WORD_COUNT)

	mov	esi, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [esi]

; 428  :     {
; 429  :         NUMBER_HEADER* t = x;
; 430  :         x = y;
; 431  :         y = t;
; 432  :     }
; 433  :     __UNIT_TYPE x_count = x->UNIT_WORD_COUNT;

	mov	eax, ecx
	mov	edx, DWORD PTR [edi]
	cmp	edx, ecx
	mov	ebx, edx
	cmovae	eax, edx
	cmovae	ebx, ecx
	mov	DWORD PTR _x_count$1$[ebp], eax
	mov	eax, esi
	cmovae	eax, edi
	cmovae	edi, esi

; 434  :     __UNIT_TYPE y_count = y->UNIT_WORD_COUNT;
; 435  :     __UNIT_TYPE z_count = z->BLOCK_COUNT;
; 436  :     __UNIT_TYPE* xp = &x->BLOCK[0];
; 437  :     __UNIT_TYPE* yp = &y->BLOCK[0];
; 438  :     __UNIT_TYPE* zp = &z->BLOCK[0];

	mov	esi, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+24]
	mov	esi, DWORD PTR [esi+24]
	mov	DWORD PTR _xp$1$[ebp], eax
$LL4@Multiply_X:

; 439  : 
; 440  :     do
; 441  :     {
; 442  :         Multiply_WORD_using_MULX_ADCX(xp, x_count, *yp, zp);

	push	esi
	push	DWORD PTR [edi]
	push	DWORD PTR _x_count$1$[ebp]
	push	eax
	call	_Multiply_WORD_using_MULX_ADCX

; 443  :         ++yp;
; 444  :         ++zp;
; 445  :         --y_count;
; 446  :     } while (y_count != 0);

	mov	eax, DWORD PTR _xp$1$[ebp]
	lea	edi, DWORD PTR [edi+4]
	add	esp, 16					; 00000010H
	add	esi, 4
	sub	ebx, 1
	jne	SHORT $LL4@Multiply_X

; 447  : 
; 448  :     return (PMC_STATUS_OK);

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 449  : }

	pop	ebp
	ret	0
_Multiply_X_X_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_X_using_MUL_ADC
_TEXT	SEGMENT
_x_count$1$ = 8						; size = 4
_x$ = 8							; size = 4
_xp$1$ = 12						; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_Multiply_X_X_using_MUL_ADC PROC			; COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 399  :     // x のワード長が y のワード長以上であるようにする
; 400  :     if (x->UNIT_WORD_COUNT < y->UNIT_WORD_COUNT)

	mov	esi, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [esi]

; 401  :     {
; 402  :         NUMBER_HEADER* t = x;
; 403  :         x = y;
; 404  :         y = t;
; 405  :     }
; 406  :     __UNIT_TYPE x_count = x->UNIT_WORD_COUNT;

	mov	eax, ecx
	mov	edx, DWORD PTR [edi]
	cmp	edx, ecx
	mov	ebx, edx
	cmovae	eax, edx
	cmovae	ebx, ecx
	mov	DWORD PTR _x_count$1$[ebp], eax
	mov	eax, esi
	cmovae	eax, edi
	cmovae	edi, esi

; 407  :     __UNIT_TYPE y_count = y->UNIT_WORD_COUNT;
; 408  :     __UNIT_TYPE z_count = z->BLOCK_COUNT;
; 409  :     __UNIT_TYPE* xp = &x->BLOCK[0];
; 410  :     __UNIT_TYPE* yp = &y->BLOCK[0];
; 411  :     __UNIT_TYPE* zp = &z->BLOCK[0];

	mov	esi, DWORD PTR _z$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+24]
	mov	esi, DWORD PTR [esi+24]
	mov	DWORD PTR _xp$1$[ebp], eax
$LL4@Multiply_X:

; 412  : 
; 413  :     do
; 414  :     {
; 415  :         Multiply_WORD_using_MUL_ADC(xp, x_count, *yp, zp);

	push	esi
	push	DWORD PTR [edi]
	push	DWORD PTR _x_count$1$[ebp]
	push	eax
	call	_Multiply_WORD_using_MUL_ADC

; 416  :         ++yp;
; 417  :         ++zp;
; 418  :         --y_count;
; 419  :     } while (y_count != 0);

	mov	eax, DWORD PTR _xp$1$[ebp]
	lea	edi, DWORD PTR [edi+4]
	add	esp, 16					; 00000010H
	add	esi, 4
	sub	ebx, 1
	jne	SHORT $LL4@Multiply_X

; 420  : 
; 421  :     return (PMC_STATUS_OK);

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 422  : }

	pop	ebp
	ret	0
_Multiply_X_X_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_2W
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y_hi$ = 12						; size = 4
_y_lo$ = 16						; size = 4
_z$ = 20						; size = 4
_Multiply_X_2W PROC					; COMDAT

; 393  : {

	push	ebp
	mov	ebp, esp

; 395  : }

	pop	ebp

; 394  :     return ((*fp_Multiply_X_2W)(x, y_hi, y_lo, z));

	jmp	DWORD PTR _fp_Multiply_X_2W
_Multiply_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_2W_using_MULX_ADCX
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y_hi$ = 12						; size = 4
_y_lo$ = 16						; size = 4
_z$ = 20						; size = 4
_Multiply_X_2W_using_MULX_ADCX PROC			; COMDAT

; 386  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 387  :     Multiply_WORD_using_MULX_ADCX(&x->BLOCK[0], x->UNIT_WORD_COUNT, y_lo, &z->BLOCK[0]);

	mov	esi, DWORD PTR _z$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	push	DWORD PTR [esi+24]
	push	DWORD PTR _y_lo$[ebp]
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_Multiply_WORD_using_MULX_ADCX

; 388  :     Multiply_WORD_using_MULX_ADCX(&x->BLOCK[0], x->UNIT_WORD_COUNT, y_hi, &z->BLOCK[1]);

	mov	eax, DWORD PTR [esi+24]
	add	eax, 4
	push	eax
	push	DWORD PTR _y_hi$[ebp]
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 32					; 00000020H

; 389  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi
	pop	esi

; 390  : }

	pop	ebp
	ret	0
_Multiply_X_2W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_2W_using_MUL_ADC
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y_hi$ = 12						; size = 4
_y_lo$ = 16						; size = 4
_z$ = 20						; size = 4
_Multiply_X_2W_using_MUL_ADC PROC			; COMDAT

; 379  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 380  :     Multiply_WORD_using_MUL_ADC(&x->BLOCK[0], x->UNIT_WORD_COUNT, y_lo, &z->BLOCK[0]);

	mov	esi, DWORD PTR _z$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	push	DWORD PTR [esi+24]
	push	DWORD PTR _y_lo$[ebp]
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_Multiply_WORD_using_MUL_ADC

; 381  :     Multiply_WORD_using_MUL_ADC(&x->BLOCK[0], x->UNIT_WORD_COUNT, y_hi, &z->BLOCK[1]);

	mov	eax, DWORD PTR [esi+24]
	add	eax, 4
	push	eax
	push	DWORD PTR _y_hi$[ebp]
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 32					; 00000020H

; 382  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi
	pop	esi

; 383  : }

	pop	ebp
	ret	0
_Multiply_X_2W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_1W
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_Multiply_X_1W PROC					; COMDAT

; 374  : {

	push	ebp
	mov	ebp, esp

; 376  : }

	pop	ebp

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	jmp	DWORD PTR _fp_Multiply_X_1W
_Multiply_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_1W_using_MULX_ADCX
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_Multiply_X_1W_using_MULX_ADCX PROC			; COMDAT

; 368  : {

	push	ebp
	mov	ebp, esp

; 369  :     Multiply_WORD_using_MULX_ADCX(&x->BLOCK[0], x->UNIT_WORD_COUNT, y, &z->BLOCK[0]);

	mov	eax, DWORD PTR _z$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _x$[ebp]
	push	DWORD PTR _y$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR [eax+24]
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 16					; 00000010H

; 370  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 371  : }

	pop	ebp
	ret	0
_Multiply_X_1W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_1W_using_MUL_ADC
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_Multiply_X_1W_using_MUL_ADC PROC			; COMDAT

; 362  : {

	push	ebp
	mov	ebp, esp

; 363  :     Multiply_WORD_using_MUL_ADC(&x->BLOCK[0], x->UNIT_WORD_COUNT, y, &z->BLOCK[0]);

	mov	eax, DWORD PTR _z$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _x$[ebp]
	push	DWORD PTR _y$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR [eax+24]
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 16					; 00000010H

; 364  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 365  : }

	pop	ebp
	ret	0
_Multiply_X_1W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_WORD_using_MULX_ADCX
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_Multiply_WORD_using_MULX_ADCX PROC			; COMDAT

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 215  :     __UNIT_TYPE k = 0;
; 216  :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	mov	ecx, eax

; 218  :     while (count != 0)

	mov	edx, DWORD PTR _v$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _up$[ebp]
	push	esi
	shr	ecx, 5
	push	edi
	xor	edi, edi
	mov	DWORD PTR _count$1$[ebp], ecx
	test	ecx, ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	je	$LN3@Multiply_W
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+64]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+64]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+68]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+68]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+72]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+72]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+76]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+76]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+80]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+80]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+84]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+84]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+88]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+88]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+92]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+92]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+96]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+96]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+100]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+100]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+104]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+104]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+108]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+108]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+112]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+112]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+116]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+116]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+120]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+120]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+124]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+124]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 254  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
	sub	ebx, -128				; ffffff80H
	dec	edx
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 218  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _v$[ebp]
	jne	$LL2@Multiply_W
	mov	eax, DWORD PTR _u_count$[ebp]
$LN3@Multiply_W:

; 255  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 256  :         if (sizeof(k) == sizeof(_UINT32_T))
; 257  :             AddToMULTI32Counter(32);
; 258  :         else
; 259  :             AddToMULTI64Counter(32);
; 260  : #endif
; 261  :     }
; 262  : 
; 263  :     if (u_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN701@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 281  :         up += 16;

	add	ebx, 64					; 00000040H

; 282  :         wp += 16;

	add	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN701@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 291  :     if (u_count & 0x8)

	test	al, 8
	je	$LN817@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 301  :         up += 8;

	add	ebx, 32					; 00000020H

; 302  :         wp += 8;

	add	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN817@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 311  :     if (u_count & 0x4)

	test	al, 4
	je	$LN877@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 317  :         up += 4;

	add	ebx, 16					; 00000010H

; 318  :         wp += 4;

	add	ecx, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN877@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 327  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN909@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 331  :         up += 2;

	add	ebx, 8

; 332  :         wp += 2;

	add	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
	lock	 xadd	 DWORD PTR [eax], edx
	mov	eax, DWORD PTR _u_count$[ebp]
$LN909@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 341  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN927@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	esi, 0

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adcx	edx, esi
	add	eax, edi
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 345  :         wp += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 962  :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN927@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 354  :     if (k != 0)

	xor	eax, eax
	test	edi, edi
	je	SHORT $LN21@Multiply_W

; 355  :         *wp = k;

	mov	DWORD PTR [ecx], edi
$LN21@Multiply_W:
	pop	edi

; 356  : 
; 357  :     return (PMC_STATUS_OK);
; 358  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_WORD_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_WORD_using_MUL_ADC
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_Multiply_WORD_using_MUL_ADC PROC			; COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 68   :     __UNIT_TYPE k = 0;
; 69   :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	mov	ecx, eax

; 71   :     while (count != 0)

	mov	edx, DWORD PTR _v$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _up$[ebp]
	push	esi
	shr	ecx, 5
	push	edi
	xor	edi, edi
	mov	DWORD PTR _count$1$[ebp], ecx
	test	ecx, ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	je	$LN3@Multiply_W
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+64]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+64]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+68]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+68]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+72]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+72]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+76]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+76]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+80]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+80]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+84]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+84]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+88]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+88]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+92]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+92]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+96]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+96]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+100]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+100]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+104]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+104]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+108]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+108]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+112]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+112]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+116]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+116]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+120]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]
	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+120]
	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+124]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+124]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 107  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 107  :         --count;

	dec	edx
	sub	ebx, -128				; ffffff80H
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 71   :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _v$[ebp]
	jne	$LL2@Multiply_W
	mov	eax, DWORD PTR _u_count$[ebp]
$LN3@Multiply_W:

; 108  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 109  :         if (sizeof(k) == sizeof(_UINT32_T))
; 110  :             AddToMULTI32Counter(32);
; 111  :         else
; 112  :             AddToMULTI64Counter(32);
; 113  : #endif
; 114  :     }
; 115  : 
; 116  :     if (u_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN701@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 134  :         up += 16;

	add	ebx, 64					; 00000040H

; 135  :         wp += 16;

	add	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN701@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 144  :     if (u_count & 0x8)

	test	al, 8
	je	$LN817@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 154  :         up += 8;

	add	ebx, 32					; 00000020H

; 155  :         wp += 8;

	add	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN817@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 164  :     if (u_count & 0x4)

	test	al, 4
	je	SHORT $LN877@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 170  :         up += 4;

	add	ebx, 16					; 00000010H

; 171  :         wp += 4;

	add	ecx, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN877@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 180  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN909@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 184  :         up += 2;

	add	ebx, 8

; 185  :         wp += 2;

	add	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	eax, DWORD PTR _u_count$[ebp]
$LN909@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 194  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN927@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adc	edx, 0
	add	eax, edi
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 198  :         wp += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 962  :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN927@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 207  :     if (k != 0)

	xor	eax, eax
	test	edi, edi
	je	SHORT $LN21@Multiply_W

; 208  :         *wp = k;

	mov	DWORD PTR [ecx], edi
$LN21@Multiply_W:
	pop	edi

; 209  : 
; 210  :     return (PMC_STATUS_OK);
; 211  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_WORD_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT __MULTIPLYX_DIGIT_UNIT
_TEXT	SEGMENT
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
__MULTIPLYX_DIGIT_UNIT PROC				; COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 59   :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	esi, 0

; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _v$[ebp]

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adcx	edx, esi
	add	eax, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 454  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edx, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 63   :     return (k);

	mov	eax, edx
	pop	esi

; 64   : }

	pop	ebp
	ret	0
__MULTIPLYX_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT __MULTIPLY_DIGIT_UNIT
_TEXT	SEGMENT
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
__MULTIPLY_DIGIT_UNIT PROC				; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 47   :     _ADD_UNIT(_ADD_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	mov	ecx, DWORD PTR _wp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _v$[ebp]

; 426  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adc	edx, 0
	add	eax, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 426  :     return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 51   :     return (k);

	mov	eax, edx

; 52   : }

	pop	ebp
	ret	0
__MULTIPLY_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToMULTI64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC				; COMDAT

; 990  : {

	push	ebp
	mov	ebp, esp

; 991  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 992  : }

	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToMULTI32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC				; COMDAT

; 984  : {

	push	ebp
	mov	ebp, esp

; 985  :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 986  : }

	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementMULTI64Counter
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC				; COMDAT

; 968  :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 969  : }

	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementMULTI32Counter
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC				; COMDAT

; 962  :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 963  : }

	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 840  : {

	push	ebp
	mov	ebp, esp

; 841  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 842  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 866  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 843  : #ifdef _M_IX86
; 844  :     _UINT32_T pos;
; 845  : #ifdef _MSC_VER
; 846  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 847  : #elif defined(__GNUC__)
; 848  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 849  : #else
; 850  : #error unknown compiler
; 851  : #endif
; 852  : #elif defined(_M_X64)
; 853  : #ifdef _MSC_VER
; 854  :     _UINT32_T pos;
; 855  :     _BitScanReverse64(&pos, x);
; 856  : #elif defined(__GNUC__)
; 857  :     _UINT64_T pos;
; 858  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 859  : #else
; 860  : #error unknown compiler
; 861  : #endif
; 862  : #else
; 863  : #error unknown platform
; 864  : #endif
; 865  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 866  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 807  : {

	push	ebp
	mov	ebp, esp

; 808  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 809  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 819  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 810  :     _UINT32_T pos;
; 811  : #ifdef _MSC_VER
; 812  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 813  : #elif defined(__GNUC__)
; 814  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 815  : #else
; 816  : #error unknown compiler
; 817  : #endif
; 818  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 819  : }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MULTIPLYX_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC					; COMDAT

; 546  : {

	push	ebp
	mov	ebp, esp

; 547  : #ifdef _MSC_VER
; 548  : #ifdef _M_IX86
; 549  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 550  : #elif defined(_M_X64)
; 551  :     return (_mulx_u64(u, v, w_hi));
; 552  : #else
; 553  : #error unknown platform
; 554  : #endif
; 555  : #elif defined(__GNUC__)
; 556  : #ifdef _M_IX86
; 557  :     _UINT32_T w_lo;
; 558  :     __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 559  :     return (w_lo);
; 560  : #elif defined(_M_X64)
; 561  :     _UINT64_T w_lo;
; 562  :     __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 563  :     return (w_lo);
; 564  : #else
; 565  : #error unknown platform
; 566  : #endif
; 567  : #else
; 568  : #error unknown compiler
; 569  : #endif
; 570  : }

	pop	ebp
	ret	0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MULTIPLY_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC					; COMDAT

; 508  : {

	push	ebp
	mov	ebp, esp

; 509  : #ifdef _M_IX86
; 510  : #ifdef _MSC_VER
; 511  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 512  : #elif defined(__GNUC__)
; 513  :     _UINT32_T w_lo;
; 514  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 515  :     return (w_lo);
; 516  : #else
; 517  : #error unknown compiler
; 518  : #endif
; 519  : #elif defined(_M_X64)
; 520  :     return (_umul128(u, v, w_hi));
; 521  : #else
; 522  : #error unknown platform
; 523  : #endif
; 524  : }

	pop	ebp
	ret	0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ADDX_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC					; COMDAT

; 452  : {

	push	ebp
	mov	ebp, esp

; 453  : #ifdef _M_IX86
; 454  :     return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adcx	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 455  : #elif defined(_M_X64)
; 456  :     return (_addcarryx_u64(carry, u, v, w));
; 457  : #else
; 458  : #error unknown platform
; 459  : #endif
; 460  : }

	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ADD_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC						; COMDAT

; 424  : {

	push	ebp
	mov	ebp, esp

; 425  : #ifdef _M_IX86
; 426  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adc	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 427  : #elif defined(_M_X64)
; 428  :     return (_addcarry_u64(carry, u, v, w));
; 429  : #else
; 430  : #error unknown platform
; 431  : #endif
; 432  : }

	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 393  : {

	push	ebp
	mov	ebp, esp

; 394  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 395  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 396  : }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_X@12
_TEXT	SEGMENT
_nz$ = 8						; size = 4
_x$ = 8							; size = 4
_nz_light_check_code$1 = 12				; size = 4
_y$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_Multiply_X_X@12 PROC				; COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 687  :     if (x == NULL)

	mov	edi, DWORD PTR _x$[ebp]
	test	edi, edi
	je	$LN25@PMC_Multip

; 688  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 689  :     if (y == NULL)

	mov	ebx, DWORD PTR _y$[ebp]
	test	ebx, ebx
	je	$LN25@PMC_Multip

; 690  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 691  :     if (o == NULL)

	mov	esi, DWORD PTR _o$[ebp]
	test	esi, esi
	je	$LN25@PMC_Multip

; 693  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 694  :     NUMBER_HEADER* ny = (NUMBER_HEADER*)y;
; 695  :     PMC_STATUS_CODE result;
; 696  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Multip

; 697  :         return (result);
; 698  :     if ((result = CheckNumber(ny)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Multip

; 699  :         return (result);
; 700  :     NUMBER_HEADER* nz;
; 701  :     if (nx->IS_ZERO)

	mov	ecx, DWORD PTR [edi+16]
	test	cl, 2
	je	SHORT $LN7@PMC_Multip
$LN29@PMC_Multip:
	pop	edi

; 766  :         }
; 767  :         *o = nz;
; 768  :     }
; 769  : #ifdef _DEBUG
; 770  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 771  :         return (result);
; 772  : #endif
; 773  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], OFFSET _number_zero
	xor	eax, eax

; 774  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Multip:

; 702  :     {
; 703  :         // x が 0 である場合
; 704  : 
; 705  :         // y の値にかかわらず 0 を返す。
; 706  :         *o = &number_zero;
; 707  :     }
; 708  :     else if (nx->IS_ONE)

	mov	edx, DWORD PTR [ebx+16]
	mov	eax, edx
	and	eax, 2
	test	cl, 4
	je	SHORT $LN9@PMC_Multip

; 709  :     {
; 710  :         // x が 1 である場合
; 711  :         if (ny->IS_ZERO)

	test	eax, eax
	jne	SHORT $LN29@PMC_Multip

; 712  :         {
; 713  :             // y が 0 である場合
; 714  : 
; 715  :             //  0  を返す。
; 716  :             *o = &number_zero;
; 717  :         }
; 718  :         else
; 719  :         {
; 720  :             // y が 0 ではない場合
; 721  : 
; 722  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 723  :             if ((result = DuplicateNumber(ny, &nz)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	push	ebx
$LN28@PMC_Multip:

; 766  :         }
; 767  :         *o = nz;
; 768  :     }
; 769  : #ifdef _DEBUG
; 770  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 771  :         return (result);
; 772  : #endif
; 773  :     return (PMC_STATUS_OK);

	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Multip
	mov	eax, DWORD PTR _nz$[ebp]
	pop	edi
	mov	DWORD PTR [esi], eax
	xor	eax, eax

; 774  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN9@PMC_Multip:

; 724  :                 return (result);
; 725  :             *o = nz;
; 726  :         }
; 727  :     }
; 728  :     else
; 729  :     {
; 730  :         // x が 0 と 1 のどちらでもない場合
; 731  : 
; 732  :         if (ny->IS_ZERO)

	test	eax, eax
	je	SHORT $LN14@PMC_Multip

; 733  :         {
; 734  :             // y が 0 である場合
; 735  : 
; 736  :             //  0  を返す。
; 737  :             nz = &number_zero;

	mov	eax, OFFSET _number_zero
	pop	edi

; 766  :         }
; 767  :         *o = nz;
; 768  :     }
; 769  : #ifdef _DEBUG
; 770  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 771  :         return (result);
; 772  : #endif
; 773  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], eax
	xor	eax, eax

; 774  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN14@PMC_Multip:

; 738  :         }
; 739  :         else if (ny->IS_ONE)

	test	dl, 4
	je	SHORT $LN16@PMC_Multip

; 740  :         {
; 741  :             // y が 1 である場合
; 742  : 
; 743  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 744  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	push	edi
	jmp	SHORT $LN28@PMC_Multip
$LN16@PMC_Multip:

; 745  :                 return (result);
; 746  :         }
; 747  :         else
; 748  :         {
; 749  :             // x と y がともに 0 、1 のどちらでもない場合
; 750  : 
; 751  :             // x と y の積を計算する
; 752  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;
; 753  :             __UNIT_TYPE y_bit_count = ny->UNIT_BIT_COUNT;
; 754  :             __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	eax, DWORD PTR [edi+4]

; 755  :             __UNIT_TYPE nz_light_check_code;
; 756  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nz_light_check_code$1[ebp]
	add	eax, DWORD PTR [ebx+4]
	push	ecx
	push	eax
	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 453  :     return ((*fp_Multiply_X_X)(x, y, z));

	push	DWORD PTR _nz$[ebp]
	push	ebx
	push	edi
	call	DWORD PTR _fp_Multiply_X_X

; 757  :                 return (result);
; 758  :             if ((result = Multiply_X_X(nx, ny, nz)) != PMC_STATUS_OK)

	mov	edi, eax

; 453  :     return ((*fp_Multiply_X_X)(x, y, z));

	add	esp, 12					; 0000000cH

; 757  :                 return (result);
; 758  :             if ((result = Multiply_X_X(nx, ny, nz)) != PMC_STATUS_OK)

	test	edi, edi
	je	SHORT $LN20@PMC_Multip

; 759  :             {
; 760  :                 DeallocateNumber(nz);

	push	DWORD PTR _nz$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 761  :                 return (result);

	mov	eax, edi
	pop	edi

; 774  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN20@PMC_Multip:

; 762  :             }
; 763  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz$[ebp]
	push	DWORD PTR _nz_light_check_code$1[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 764  :                 return (result);
; 765  :             CommitNumber(nz);

	push	DWORD PTR _nz$[ebp]
	call	_CommitNumber

; 766  :         }
; 767  :         *o = nz;
; 768  :     }
; 769  : #ifdef _DEBUG
; 770  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 771  :         return (result);
; 772  : #endif
; 773  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _nz$[ebp]
	add	esp, 4
	mov	DWORD PTR [esi], eax
	xor	eax, eax
	pop	edi

; 774  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN25@PMC_Multip:

; 692  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Multip:
	pop	edi

; 774  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_L@16
_TEXT	SEGMENT
_nz$ = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 8
_nz_light_check_code$1 = 20				; size = 4
_nz_light_check_code$2 = 20				; size = 4
_o$ = 20						; size = 4
_PMC_Multiply_X_L@16 PROC				; COMDAT

; 548  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 549  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(y) * 8)
; 550  :     {
; 551  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 552  :         return (PMC_STATUS_INTERNAL_ERROR);
; 553  :     }
; 554  :     if (x == NULL)

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	test	esi, esi
	je	$LN43@PMC_Multip

; 555  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 556  :     if (o == NULL)

	mov	edi, DWORD PTR _o$[ebp]
	test	edi, edi
	je	$LN43@PMC_Multip

; 558  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 559  :     PMC_STATUS_CODE result;
; 560  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 561  :         return (result);
; 562  :     NUMBER_HEADER* nz;
; 563  :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR [esi+16]
	push	ebx
	test	al, 2
	je	SHORT $LN6@PMC_Multip
$LN47@PMC_Multip:
	pop	ebx

; 654  :             }
; 655  :             else
; 656  :             {
; 657  :                 // _UINT64_T が 1 ワードで表現できる場合
; 658  : 
; 659  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;
; 660  :                 __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)y);
; 661  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 662  :                 __UNIT_TYPE nz_light_check_code;
; 663  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 664  :                     return (result);
; 665  :                 if ((result = Multiply_X_1W(nx, (__UNIT_TYPE)y, nz)) != PMC_STATUS_OK)
; 666  :                 {
; 667  :                     DeallocateNumber(nz);
; 668  :                     return (result);
; 669  :                 }
; 670  :                 if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 671  :                     return (result);
; 672  :                 CommitNumber(nz);
; 673  :             }
; 674  : 
; 675  :         }
; 676  :         *o = nz;
; 677  :     }
; 678  : #ifdef _DEBUG
; 679  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 680  :         return (result);
; 681  : #endif
; 682  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], OFFSET _number_zero
	xor	eax, eax
	pop	edi

; 683  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN6@PMC_Multip:

; 564  :     {
; 565  :         // x が 0 である場合
; 566  : 
; 567  :         // y の値にかかわらず 0 を返す。
; 568  :         *o = &number_zero;
; 569  :     }
; 570  :     else if (nx->IS_ONE)

	mov	ecx, DWORD PTR _y$[ebp]
	test	al, 4
	mov	eax, ecx
	je	SHORT $LN8@PMC_Multip

; 571  :     {
; 572  :         // x が 1 である場合
; 573  :         if (y == 0)

	mov	edx, DWORD PTR _y$[ebp+4]
	or	eax, edx
	je	SHORT $LN47@PMC_Multip

; 574  :         {
; 575  :             // y が 0 である場合
; 576  : 
; 577  :             //  0  を返す。
; 578  :             *o = &number_zero;
; 579  :         }
; 580  :         else
; 581  :         {
; 582  :             // y が 0 ではない場合
; 583  : 
; 584  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 585  :             if ((result = From_L_Imp(y, &nz)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	push	edx
	push	ecx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN46@PMC_Multip
$LN45@PMC_Multip:
	pop	ebx
$LN1@PMC_Multip:
	pop	edi

; 683  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Multip:

; 586  :                 return (result);
; 587  :             *o = nz;
; 588  :         }
; 589  :     }
; 590  :     else
; 591  :     {
; 592  :         // x が 0 と 1 のどちらでもない場合
; 593  : 
; 594  :         if (y == 0)

	mov	ebx, DWORD PTR _y$[ebp+4]
	or	eax, ebx
	jne	SHORT $LN13@PMC_Multip

; 595  :         {
; 596  :             // y が 0 である場合
; 597  : 
; 598  :             //  0  を返す。
; 599  :             nz = &number_zero;

	mov	eax, OFFSET _number_zero
	pop	ebx

; 654  :             }
; 655  :             else
; 656  :             {
; 657  :                 // _UINT64_T が 1 ワードで表現できる場合
; 658  : 
; 659  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;
; 660  :                 __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)y);
; 661  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 662  :                 __UNIT_TYPE nz_light_check_code;
; 663  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 664  :                     return (result);
; 665  :                 if ((result = Multiply_X_1W(nx, (__UNIT_TYPE)y, nz)) != PMC_STATUS_OK)
; 666  :                 {
; 667  :                     DeallocateNumber(nz);
; 668  :                     return (result);
; 669  :                 }
; 670  :                 if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 671  :                     return (result);
; 672  :                 CommitNumber(nz);
; 673  :             }
; 674  : 
; 675  :         }
; 676  :         *o = nz;
; 677  :     }
; 678  : #ifdef _DEBUG
; 679  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 680  :         return (result);
; 681  : #endif
; 682  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 683  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN13@PMC_Multip:

; 600  :         }
; 601  :         else if (y == 1)

	cmp	ecx, 1
	jne	SHORT $LN15@PMC_Multip
	test	ebx, ebx
	jne	SHORT $LN15@PMC_Multip

; 602  :         {
; 603  :             // y が 1 である場合
; 604  : 
; 605  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 606  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN45@PMC_Multip

; 654  :             }
; 655  :             else
; 656  :             {
; 657  :                 // _UINT64_T が 1 ワードで表現できる場合
; 658  : 
; 659  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;
; 660  :                 __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)y);
; 661  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 662  :                 __UNIT_TYPE nz_light_check_code;
; 663  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 664  :                     return (result);
; 665  :                 if ((result = Multiply_X_1W(nx, (__UNIT_TYPE)y, nz)) != PMC_STATUS_OK)
; 666  :                 {
; 667  :                     DeallocateNumber(nz);
; 668  :                     return (result);
; 669  :                 }
; 670  :                 if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 671  :                     return (result);
; 672  :                 CommitNumber(nz);
; 673  :             }
; 674  : 
; 675  :         }
; 676  :         *o = nz;
; 677  :     }
; 678  : #ifdef _DEBUG
; 679  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 680  :         return (result);
; 681  : #endif
; 682  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _nz$[ebp]
	pop	ebx
	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 683  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN15@PMC_Multip:

; 607  :                 return (result);
; 608  :         }
; 609  :         else
; 610  :         {
; 611  :             // x と y がともに 0 、1 のどちらでもない場合
; 612  : 
; 613  :             // x と y の積を計算する
; 614  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(y) * 8)
; 615  :             {
; 616  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 617  : 
; 618  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+4]

; 619  :                 _UINT32_T y_hi;
; 620  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(y, &y_hi);
; 621  :                 if (y_hi == 0)

	test	ebx, ebx
	jne	SHORT $LN20@PMC_Multip

; 622  :                 {
; 623  :                     // y の値が 32bit で表現可能な場合
; 624  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);

	push	ecx
	call	__LZCNT_ALT_32
	sub	edx, eax

; 625  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 626  :                     __UNIT_TYPE nz_light_check_code;
; 627  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz_light_check_code$2[ebp]
	push	eax
	add	edx, 32					; 00000020H
	lea	eax, DWORD PTR _nz$[ebp]
	push	edx
	push	eax
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN45@PMC_Multip

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	push	DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	push	esi
	call	DWORD PTR _fp_Multiply_X_1W

; 628  :                         return (result);
; 629  :                     if ((result = Multiply_X_1W(nx, y_lo, nz)) != PMC_STATUS_OK)

	mov	esi, eax

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	add	esp, 12					; 0000000cH

; 628  :                         return (result);
; 629  :                     if ((result = Multiply_X_1W(nx, y_lo, nz)) != PMC_STATUS_OK)

	test	esi, esi
	jne	SHORT $LN48@PMC_Multip

; 630  :                     {
; 631  :                         DeallocateNumber(nz);
; 632  :                         return (result);
; 633  :                     }
; 634  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz$[ebp]
	push	DWORD PTR _nz_light_check_code$2[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	je	SHORT $LN27@PMC_Multip

; 683  : }

	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN20@PMC_Multip:

; 635  :                         return (result);
; 636  :                 }
; 637  :                 else
; 638  :                 {
; 639  :                     // y の値が 32bit では表現できない場合
; 640  :                     __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_32(y_hi);

	push	ebx
	call	__LZCNT_ALT_32
	sub	edx, eax

; 641  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 642  :                     __UNIT_TYPE nz_light_check_code;
; 643  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz_light_check_code$1[ebp]
	push	eax
	add	edx, 64					; 00000040H
	lea	eax, DWORD PTR _nz$[ebp]
	push	edx
	push	eax
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN45@PMC_Multip

; 394  :     return ((*fp_Multiply_X_2W)(x, y_hi, y_lo, z));

	push	DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	push	ebx
	push	esi
	call	DWORD PTR _fp_Multiply_X_2W

; 644  :                         return (result);
; 645  :                     if ((result = Multiply_X_2W(nx, y_hi, y_lo, nz)) != PMC_STATUS_OK)

	mov	esi, eax

; 394  :     return ((*fp_Multiply_X_2W)(x, y_hi, y_lo, z));

	add	esp, 16					; 00000010H

; 644  :                         return (result);
; 645  :                     if ((result = Multiply_X_2W(nx, y_hi, y_lo, nz)) != PMC_STATUS_OK)

	test	esi, esi
	je	SHORT $LN26@PMC_Multip
$LN48@PMC_Multip:

; 646  :                     {
; 647  :                         DeallocateNumber(nz);

	push	DWORD PTR _nz$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 648  :                         return (result);

	mov	eax, esi
	pop	ebx
	pop	edi

; 683  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN26@PMC_Multip:

; 649  :                     }
; 650  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz$[ebp]
	push	DWORD PTR _nz_light_check_code$1[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN45@PMC_Multip
$LN27@PMC_Multip:

; 651  :                         return (result);
; 652  :                 }
; 653  :                 CommitNumber(nz);

	push	DWORD PTR _nz$[ebp]
	call	_CommitNumber
	add	esp, 4
$LN46@PMC_Multip:

; 654  :             }
; 655  :             else
; 656  :             {
; 657  :                 // _UINT64_T が 1 ワードで表現できる場合
; 658  : 
; 659  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;
; 660  :                 __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)y);
; 661  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 662  :                 __UNIT_TYPE nz_light_check_code;
; 663  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 664  :                     return (result);
; 665  :                 if ((result = Multiply_X_1W(nx, (__UNIT_TYPE)y, nz)) != PMC_STATUS_OK)
; 666  :                 {
; 667  :                     DeallocateNumber(nz);
; 668  :                     return (result);
; 669  :                 }
; 670  :                 if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 671  :                     return (result);
; 672  :                 CommitNumber(nz);
; 673  :             }
; 674  : 
; 675  :         }
; 676  :         *o = nz;
; 677  :     }
; 678  : #ifdef _DEBUG
; 679  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 680  :         return (result);
; 681  : #endif
; 682  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _nz$[ebp]
	pop	ebx
	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 683  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN43@PMC_Multip:
	pop	edi

; 557  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 683  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
_PMC_Multiply_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_I@12
_TEXT	SEGMENT
_nz$ = 8						; size = 4
_x$ = 8							; size = 4
_nz_light_check_code$1 = 12				; size = 4
_y$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_Multiply_X_I@12 PROC				; COMDAT

; 457  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 458  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(y) * 8)
; 459  :     {
; 460  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 461  :         return (PMC_STATUS_INTERNAL_ERROR);
; 462  :     }
; 463  :     if (x == NULL)

	mov	edi, DWORD PTR _x$[ebp]
	test	edi, edi
	je	$LN24@PMC_Multip

; 464  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 465  :     if (o == NULL)

	mov	esi, DWORD PTR _o$[ebp]
	test	esi, esi
	je	$LN24@PMC_Multip

; 467  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 468  :     PMC_STATUS_CODE result;
; 469  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 470  :         return (result);
; 471  :     NUMBER_HEADER* nz;
; 472  :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR [edi+16]
	push	ebx
	test	al, 2
	je	SHORT $LN6@PMC_Multip
$LN28@PMC_Multip:
	pop	ebx
	pop	edi

; 537  :         }
; 538  :         *o = nz;
; 539  :     }
; 540  : #ifdef _DEBUG
; 541  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 542  :         return (result);
; 543  : #endif
; 544  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], OFFSET _number_zero
	xor	eax, eax

; 545  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN6@PMC_Multip:

; 473  :     {
; 474  :         // x が 0 である場合
; 475  : 
; 476  :         // y の値にかかわらず 0 を返す。
; 477  :         *o = &number_zero;
; 478  :     }
; 479  :     else if (nx->IS_ONE)

	test	al, 4
	je	SHORT $LN8@PMC_Multip

; 480  :     {
; 481  :         // x が 1 である場合
; 482  :         if (y == 0)

	mov	eax, DWORD PTR _y$[ebp]
	test	eax, eax
	je	SHORT $LN28@PMC_Multip

; 483  :         {
; 484  :             // y が 0 である場合
; 485  : 
; 486  :             //  0  を返す。
; 487  :             *o = &number_zero;
; 488  :         }
; 489  :         else
; 490  :         {
; 491  :             // y が 0 ではない場合
; 492  : 
; 493  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 494  :             if ((result = From_I_Imp(y, &nz)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	push	eax
	call	_From_I_Imp
	add	esp, 8
	test	eax, eax
	je	$LN27@PMC_Multip
$LN26@PMC_Multip:
	pop	ebx
$LN1@PMC_Multip:
	pop	edi

; 545  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Multip:

; 495  :                 return (result);
; 496  :             *o = nz;
; 497  :         }
; 498  :     }
; 499  :     else
; 500  :     {
; 501  :         // x が 0 と 1 のどちらでもない場合
; 502  : 
; 503  :         if (y == 0)

	mov	ebx, DWORD PTR _y$[ebp]
	test	ebx, ebx
	jne	SHORT $LN13@PMC_Multip

; 504  :         {
; 505  :             // y が 0 である場合
; 506  : 
; 507  :             //  0  を返す。
; 508  :             nz = &number_zero;

	pop	ebx
	mov	eax, OFFSET _number_zero

; 537  :         }
; 538  :         *o = nz;
; 539  :     }
; 540  : #ifdef _DEBUG
; 541  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 542  :         return (result);
; 543  : #endif
; 544  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], eax
	xor	eax, eax
	pop	edi

; 545  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN13@PMC_Multip:

; 509  :         }
; 510  :         else if (y == 1)

	cmp	ebx, 1
	jne	SHORT $LN15@PMC_Multip

; 511  :         {
; 512  :             // y が 1 である場合
; 513  : 
; 514  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 515  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN26@PMC_Multip

; 537  :         }
; 538  :         *o = nz;
; 539  :     }
; 540  : #ifdef _DEBUG
; 541  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 542  :         return (result);
; 543  : #endif
; 544  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _nz$[ebp]
	pop	ebx
	mov	DWORD PTR [esi], eax
	xor	eax, eax
	pop	edi

; 545  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN15@PMC_Multip:

; 516  :                 return (result);
; 517  :         }
; 518  :         else
; 519  :         {
; 520  :             // x と y がともに 0 、1 のどちらでもない場合
; 521  : 
; 522  :             // x と y の積を計算する
; 523  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [edi+4]

; 524  :             __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_32(y);

	push	ebx
	call	__LZCNT_ALT_32
	sub	edx, eax

; 525  :             __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 526  :             __UNIT_TYPE nz_light_check_code;
; 527  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz_light_check_code$1[ebp]
	push	eax
	add	edx, 32					; 00000020H
	lea	eax, DWORD PTR _nz$[ebp]
	push	edx
	push	eax
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN26@PMC_Multip

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	push	DWORD PTR _nz$[ebp]
	push	ebx
	push	edi
	call	DWORD PTR _fp_Multiply_X_1W

; 528  :                 return (result);
; 529  :             if ((result = Multiply_X_1W(nx, y, nz)) != PMC_STATUS_OK)

	mov	edi, eax

; 375  :     return ((*fp_Multiply_X_1W)(x, y, z));

	add	esp, 12					; 0000000cH

; 528  :                 return (result);
; 529  :             if ((result = Multiply_X_1W(nx, y, nz)) != PMC_STATUS_OK)

	test	edi, edi
	je	SHORT $LN19@PMC_Multip

; 530  :             {
; 531  :                 DeallocateNumber(nz);

	push	DWORD PTR _nz$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 532  :                 return (result);

	mov	eax, edi
	pop	ebx
	pop	edi

; 545  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN19@PMC_Multip:

; 533  :             }
; 534  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz$[ebp]
	push	DWORD PTR _nz_light_check_code$1[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN26@PMC_Multip

; 535  :                 return (result);
; 536  :             CommitNumber(nz);

	push	DWORD PTR _nz$[ebp]
	call	_CommitNumber
	add	esp, 4
$LN27@PMC_Multip:

; 537  :         }
; 538  :         *o = nz;
; 539  :     }
; 540  : #ifdef _DEBUG
; 541  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 542  :         return (result);
; 543  : #endif
; 544  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _nz$[ebp]
	pop	ebx
	mov	DWORD PTR [esi], eax
	xor	eax, eax
	pop	edi

; 545  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN24@PMC_Multip:
	pop	edi

; 466  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 545  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Initialize_Multiply
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Multiply PROC				; COMDAT

; 777  : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _feature$[ebp]

; 778  :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 779  :     {
; 780  :         fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;
; 781  :         fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;
; 782  :         fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;
; 783  :     }
; 784  :     else
; 785  :     {
; 786  :         fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;
; 787  :         fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;
; 788  :         fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;
; 789  :     }
; 790  :     return (PMC_STATUS_OK);

	mov	edx, OFFSET _Multiply_X_1W_using_MUL_ADC
	mov	ecx, DWORD PTR [eax]
	mov	eax, OFFSET _Multiply_X_1W_using_MULX_ADCX
	and	ecx, 10					; 0000000aH
	cmp	ecx, 10					; 0000000aH
	cmovne	eax, edx
	mov	edx, OFFSET _Multiply_X_2W_using_MUL_ADC
	mov	DWORD PTR _fp_Multiply_X_1W, eax
	mov	eax, OFFSET _Multiply_X_2W_using_MULX_ADCX
	cmovne	eax, edx
	mov	edx, OFFSET _Multiply_X_X_using_MUL_ADC
	mov	DWORD PTR _fp_Multiply_X_2W, eax
	mov	eax, OFFSET _Multiply_X_X_using_MULX_ADCX
	cmovne	eax, edx
	mov	DWORD PTR _fp_Multiply_X_X, eax
	xor	eax, eax

; 791  : }

	pop	ebp
	ret	0
_Initialize_Multiply ENDP
_TEXT	ENDS
END
