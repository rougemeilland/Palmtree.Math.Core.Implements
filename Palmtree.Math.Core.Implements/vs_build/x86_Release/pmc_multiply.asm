; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_multiply.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_Multiply
PUBLIC	_PMC_Multiply_I_X@12
PUBLIC	_PMC_Multiply_L_X@16
PUBLIC	_PMC_Multiply_X_I@12
PUBLIC	_PMC_Multiply_X_L@16
PUBLIC	_PMC_Multiply_X_X@12
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
_BSS	SEGMENT
_fp_Multiply_X_1W DD 01H DUP (?)
_fp_Multiply_X_2W DD 01H DUP (?)
_fp_Multiply_X_X DD 01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_L_Imp
_TEXT	SEGMENT
_nz_light_check_code$1 = 8				; size = 4
_nz_light_check_code$2 = 8				; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Multiply_X_L_Imp PROC				; COMDAT

; 560  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 561  :     PMC_STATUS_CODE result;
; 562  :     if (u->IS_ZERO)

	mov	edi, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edi+16]
	test	al, 2
	jne	SHORT $LN33@PMC_Multip

; 563  :     {
; 564  :         // x が 0 である場合
; 565  : 
; 566  :         // y の値にかかわらず 0 を返す。
; 567  :         *w = &number_zero;
; 568  :     }
; 569  :     else if (u->IS_ONE)

	mov	ecx, DWORD PTR _v$[ebp]
	test	al, 4
	mov	eax, ecx
	je	SHORT $LN4@PMC_Multip

; 570  :     {
; 571  :         // x が 1 である場合
; 572  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp+4]
	or	eax, edx
	je	SHORT $LN33@PMC_Multip

; 573  :         {
; 574  :             // y が 0 である場合
; 575  : 
; 576  :             //  0  を返す。
; 577  :             *w = &number_zero;
; 578  :         }
; 579  :         else
; 580  :         {
; 581  :             // y が 0 ではない場合
; 582  : 
; 583  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 584  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	edx
	push	ecx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN15@PMC_Multip

; 675  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN4@PMC_Multip:

; 585  :                 return (result);
; 586  :         }
; 587  :     }
; 588  :     else
; 589  :     {
; 590  :         // x が 0 と 1 のどちらでもない場合
; 591  : 
; 592  :         if (v == 0)

	mov	ebx, DWORD PTR _v$[ebp+4]
	or	eax, ebx
	jne	SHORT $LN9@PMC_Multip
$LN33@PMC_Multip:

; 652  :             }
; 653  :             else
; 654  :             {
; 655  :                 // _UINT64_T が 1 ワードで表現できる場合
; 656  : 
; 657  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;
; 658  :                 __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 659  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 660  :                 __UNIT_TYPE nz_light_check_code;
; 661  :                 if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 662  :                     return (result);
; 663  :                 if ((result = (*fp_Multiply_X_1W)(u, (__UNIT_TYPE)v, *w)) != PMC_STATUS_OK)
; 664  :                 {
; 665  :                     DeallocateNumber(*w);
; 666  :                     return (result);
; 667  :                 }
; 668  :                 if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 669  :                     return (result);
; 670  :                 CommitNumber(*w);
; 671  :             }
; 672  :         }
; 673  :     }
; 674  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _w$[ebp]
	pop	edi

; 675  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax
	pop	ebp
	ret	0
$LN9@PMC_Multip:

; 593  :         {
; 594  :             // y が 0 である場合
; 595  : 
; 596  :             //  0  を返す。
; 597  :             *w = &number_zero;
; 598  :         }
; 599  :         else if (v == 1)

	cmp	ecx, 1
	jne	SHORT $LN11@PMC_Multip
	test	ebx, ebx
	jne	SHORT $LN11@PMC_Multip

; 600  :         {
; 601  :             // y が 1 である場合
; 602  : 
; 603  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 604  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN15@PMC_Multip

; 675  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN11@PMC_Multip:

; 605  :                 return (result);
; 606  :         }
; 607  :         else
; 608  :         {
; 609  :             // x と y がともに 0 、1 のどちらでもない場合
; 610  : 
; 611  :             // x と y の積を計算する
; 612  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 613  :             {
; 614  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 615  : 
; 616  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [edi+4]

; 617  :                 _UINT32_T y_hi;
; 618  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(v, &y_hi);
; 619  :                 if (y_hi == 0)

	test	ebx, ebx
	jne	SHORT $LN16@PMC_Multip

; 620  :                 {
; 621  :                     // y の値が 32bit で表現可能な場合
; 622  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);

	push	ecx
	call	__LZCNT_ALT_32

; 623  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 624  :                     __UNIT_TYPE nz_light_check_code;
; 625  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	mov	esi, DWORD PTR _w$[ebp]
	sub	edx, eax
	lea	eax, DWORD PTR _nz_light_check_code$2[ebp]
	add	edx, 32					; 00000020H
	push	eax
	push	edx
	push	esi
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN1@PMC_Multip

; 626  :                         return (result);
; 627  :                     if ((result = (*fp_Multiply_X_1W)(u, y_lo, *w)) != PMC_STATUS_OK)

	push	DWORD PTR [esi]
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	edi
	call	DWORD PTR _fp_Multiply_X_1W
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	SHORT $LN19@PMC_Multip
$LN34@PMC_Multip:

; 675  : }

	push	ecx
	call	_DeallocateNumber
	add	esp, 4
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN19@PMC_Multip:

; 628  :                     {
; 629  :                         DeallocateNumber(*w);
; 630  :                         return (result);
; 631  :                     }
; 632  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	push	DWORD PTR _nz_light_check_code$2[ebp]
	push	DWORD PTR [ecx+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@PMC_Multip

; 675  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN16@PMC_Multip:

; 633  :                         return (result);
; 634  :                 }
; 635  :                 else
; 636  :                 {
; 637  :                     // y の値が 32bit では表現できない場合
; 638  :                     __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(y_hi);

	push	ebx
	call	__LZCNT_ALT_32

; 639  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 640  :                     __UNIT_TYPE nz_light_check_code;
; 641  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	mov	esi, DWORD PTR _w$[ebp]
	sub	edx, eax
	lea	eax, DWORD PTR _nz_light_check_code$1[ebp]
	add	edx, 64					; 00000040H
	push	eax
	push	edx
	push	esi
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 642  :                         return (result);
; 643  :                     if ((result = (*fp_Multiply_X_2W)(u, y_hi, y_lo, *w)) != PMC_STATUS_OK)

	push	DWORD PTR [esi]
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	ebx
	push	edi
	call	DWORD PTR _fp_Multiply_X_2W
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	add	esp, 16					; 00000010H
	test	edi, edi
	jne	SHORT $LN34@PMC_Multip

; 644  :                     {
; 645  :                         DeallocateNumber(*w);
; 646  :                         return (result);
; 647  :                     }
; 648  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	push	DWORD PTR _nz_light_check_code$1[ebp]
	push	DWORD PTR [ecx+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip
$LN23@PMC_Multip:

; 649  :                         return (result);
; 650  :                 }
; 651  :                 CommitNumber(*w);

	push	DWORD PTR [esi]
	call	_CommitNumber
	add	esp, 4
$LN15@PMC_Multip:

; 652  :             }
; 653  :             else
; 654  :             {
; 655  :                 // _UINT64_T が 1 ワードで表現できる場合
; 656  : 
; 657  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;
; 658  :                 __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 659  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 660  :                 __UNIT_TYPE nz_light_check_code;
; 661  :                 if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 662  :                     return (result);
; 663  :                 if ((result = (*fp_Multiply_X_1W)(u, (__UNIT_TYPE)v, *w)) != PMC_STATUS_OK)
; 664  :                 {
; 665  :                     DeallocateNumber(*w);
; 666  :                     return (result);
; 667  :                 }
; 668  :                 if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 669  :                     return (result);
; 670  :                 CommitNumber(*w);
; 671  :             }
; 672  :         }
; 673  :     }
; 674  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:
	pop	edi

; 675  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_PMC_Multiply_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_I_Imp
_TEXT	SEGMENT
_w_light_check_code$1 = 8				; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_X_I_Imp PROC				; COMDAT

; 442  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 443  :     PMC_STATUS_CODE result;
; 444  :     if (u->IS_ZERO)

	mov	edi, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edi+16]
	test	al, 2
	jne	SHORT $LN21@PMC_Multip

; 445  :     {
; 446  :         // u が 0 である場合
; 447  : 
; 448  :         // v の値にかかわらず 0 を返す。
; 449  :         *w = &number_zero;
; 450  :     }
; 451  :     else if (u->IS_ONE)

	test	al, 4
	je	SHORT $LN4@PMC_Multip

; 452  :     {
; 453  :         // u が 1 である場合
; 454  :         if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	test	eax, eax
	je	SHORT $LN21@PMC_Multip

; 455  :         {
; 456  :             // v が 0 である場合
; 457  : 
; 458  :             //  0  を返す。
; 459  :             *w = &number_zero;
; 460  :         }
; 461  :         else
; 462  :         {
; 463  :             // y が 0 ではない場合
; 464  : 
; 465  :             // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 466  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	eax
	call	_From_I_Imp
	add	esp, 8
	test	eax, eax
	je	$LN12@PMC_Multip

; 511  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN4@PMC_Multip:

; 467  :                 return (result);
; 468  :         }
; 469  :     }
; 470  :     else
; 471  :     {
; 472  :         // u が 0 と 1 のどちらでもない場合
; 473  : 
; 474  :         if (v == 0)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	jne	SHORT $LN9@PMC_Multip
$LN21@PMC_Multip:

; 508  :         }
; 509  :     }
; 510  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _w$[ebp]
	pop	edi

; 511  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax
	pop	ebp
	ret	0
$LN9@PMC_Multip:

; 475  :         {
; 476  :             // v が 0 である場合
; 477  : 
; 478  :             //  0  を返す。
; 479  :             *w = &number_zero;
; 480  :         }
; 481  :         else if (v == 1)

	cmp	esi, 1
	jne	SHORT $LN11@PMC_Multip

; 482  :         {
; 483  :             // v が 1 である場合
; 484  : 
; 485  :             // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 486  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@PMC_Multip

; 511  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN11@PMC_Multip:

; 487  :                 return (result);
; 488  :         }
; 489  :         else
; 490  :         {
; 491  :             // u と v がともに 0 、1 のどちらでもない場合
; 492  : 
; 493  :             // u と v の積を計算する
; 494  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [edi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 857  :     return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 498  :             if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _w$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 851  :     _BitScanReverse(&pos, x);

	bsr	eax, esi

; 857  :     return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 498  :             if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _w_light_check_code$1[ebp]
	sub	edx, ecx
	push	eax
	add	edx, 32					; 00000020H
	push	edx
	push	ebx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 499  :                 return (result);
; 500  :             if ((result = (*fp_Multiply_X_1W)(u, v, *w)) != PMC_STATUS_OK)

	push	DWORD PTR [ebx]
	push	esi
	push	edi
	call	DWORD PTR _fp_Multiply_X_1W
	mov	ecx, DWORD PTR [ebx]
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN15@PMC_Multip

; 501  :             {
; 502  :                 DeallocateNumber(*w);

	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 503  :                 return (result);

	mov	eax, esi
	pop	edi

; 511  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN15@PMC_Multip:

; 504  :             }
; 505  :             if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	push	DWORD PTR _w_light_check_code$1[ebp]
	push	DWORD PTR [ecx+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 506  :                 return (result);
; 507  :             CommitNumber(*w);

	push	DWORD PTR [ebx]
	call	_CommitNumber
	add	esp, 4
$LN12@PMC_Multip:

; 508  :         }
; 509  :     }
; 510  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:
	pop	edi

; 511  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_PMC_Multiply_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_X_using_MULX_ADCX
_TEXT	SEGMENT
_u_count$1$ = 8						; size = 4
_u$ = 8							; size = 4
_up$1$ = 12						; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_Multiply_X_X_using_MULX_ADCX PROC			; COMDAT

; 415  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 416  :     // x のワード長が y のワード長以上であるようにする
; 417  :     if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	mov	edi, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [esi]

; 418  :     {
; 419  :         NUMBER_HEADER* t = u;
; 420  :         u = v;
; 421  :         v = t;
; 422  :     }
; 423  :     __UNIT_TYPE u_count = u->UNIT_WORD_COUNT;

	mov	eax, ecx
	mov	edx, DWORD PTR [edi]
	cmp	edx, ecx
	mov	ebx, edx
	cmovae	eax, edx
	cmovae	ebx, ecx
	mov	DWORD PTR _u_count$1$[ebp], eax
	mov	eax, esi
	cmovae	eax, edi
	cmovae	edi, esi

; 424  :     __UNIT_TYPE v_count = v->UNIT_WORD_COUNT;
; 425  :     __UNIT_TYPE w_count = w->BLOCK_COUNT;
; 426  :     __UNIT_TYPE* up = &u->BLOCK[0];
; 427  :     __UNIT_TYPE* vp = &v->BLOCK[0];
; 428  :     __UNIT_TYPE* wp = &w->BLOCK[0];

	mov	esi, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+24]
	mov	esi, DWORD PTR [esi+24]
	mov	DWORD PTR _up$1$[ebp], eax
$LL4@Multiply_X:

; 429  : 
; 430  :     do
; 431  :     {
; 432  :         Multiply_WORD_using_MULX_ADCX(up, u_count, *vp, wp);

	push	esi
	push	DWORD PTR [edi]
	push	DWORD PTR _u_count$1$[ebp]
	push	eax
	call	_Multiply_WORD_using_MULX_ADCX

; 433  :         ++vp;
; 434  :         ++wp;
; 435  :         --v_count;
; 436  :     } while (v_count != 0);

	mov	eax, DWORD PTR _up$1$[ebp]
	lea	edi, DWORD PTR [edi+4]
	add	esp, 16					; 00000010H
	add	esi, 4
	sub	ebx, 1
	jne	SHORT $LL4@Multiply_X

; 437  : 
; 438  :     return (PMC_STATUS_OK);

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 439  : }

	pop	ebp
	ret	0
_Multiply_X_X_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_X_using_MUL_ADC
_TEXT	SEGMENT
_u_count$1$ = 8						; size = 4
_u$ = 8							; size = 4
_up$1$ = 12						; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_Multiply_X_X_using_MUL_ADC PROC			; COMDAT

; 388  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 389  :     // x のワード長が y のワード長以上であるようにする
; 390  :     if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	mov	edi, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [esi]

; 391  :     {
; 392  :         NUMBER_HEADER* t = u;
; 393  :         u = v;
; 394  :         v = t;
; 395  :     }
; 396  :     __UNIT_TYPE u_count = u->UNIT_WORD_COUNT;

	mov	eax, ecx
	mov	edx, DWORD PTR [edi]
	cmp	edx, ecx
	mov	ebx, edx
	cmovae	eax, edx
	cmovae	ebx, ecx
	mov	DWORD PTR _u_count$1$[ebp], eax
	mov	eax, esi
	cmovae	eax, edi
	cmovae	edi, esi

; 397  :     __UNIT_TYPE v_count = v->UNIT_WORD_COUNT;
; 398  :     __UNIT_TYPE w_count = w->BLOCK_COUNT;
; 399  :     __UNIT_TYPE* up = &u->BLOCK[0];
; 400  :     __UNIT_TYPE* vp = &v->BLOCK[0];
; 401  :     __UNIT_TYPE* wp = &w->BLOCK[0];

	mov	esi, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [edi+24]
	mov	esi, DWORD PTR [esi+24]
	mov	DWORD PTR _up$1$[ebp], eax
$LL4@Multiply_X:

; 402  : 
; 403  :     do
; 404  :     {
; 405  :         Multiply_WORD_using_MUL_ADC(up, u_count, *vp, wp);

	push	esi
	push	DWORD PTR [edi]
	push	DWORD PTR _u_count$1$[ebp]
	push	eax
	call	_Multiply_WORD_using_MUL_ADC

; 406  :         ++vp;
; 407  :         ++wp;
; 408  :         --v_count;
; 409  :     } while (v_count != 0);

	mov	eax, DWORD PTR _up$1$[ebp]
	lea	edi, DWORD PTR [edi+4]
	add	esp, 16					; 00000010H
	add	esi, 4
	sub	ebx, 1
	jne	SHORT $LL4@Multiply_X

; 410  : 
; 411  :     return (PMC_STATUS_OK);

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 412  : }

	pop	ebp
	ret	0
_Multiply_X_X_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_2W_using_MULX_ADCX
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v_hi$ = 12						; size = 4
_w_lo$ = 16						; size = 4
_z$ = 20						; size = 4
_Multiply_X_2W_using_MULX_ADCX PROC			; COMDAT

; 381  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 382  :     Multiply_WORD_using_MULX_ADCX(&u->BLOCK[0], u->UNIT_WORD_COUNT, w_lo, &z->BLOCK[0]);

	mov	esi, DWORD PTR _z$[ebp]
	push	edi
	mov	edi, DWORD PTR _u$[ebp]
	push	DWORD PTR [esi+24]
	push	DWORD PTR _w_lo$[ebp]
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_Multiply_WORD_using_MULX_ADCX

; 383  :     Multiply_WORD_using_MULX_ADCX(&u->BLOCK[0], u->UNIT_WORD_COUNT, v_hi, &z->BLOCK[1]);

	mov	eax, DWORD PTR [esi+24]
	add	eax, 4
	push	eax
	push	DWORD PTR _v_hi$[ebp]
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 32					; 00000020H

; 384  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi
	pop	esi

; 385  : }

	pop	ebp
	ret	0
_Multiply_X_2W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_2W_using_MUL_ADC
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v_hi$ = 12						; size = 4
_v_lo$ = 16						; size = 4
_w$ = 20						; size = 4
_Multiply_X_2W_using_MUL_ADC PROC			; COMDAT

; 374  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 375  :     Multiply_WORD_using_MUL_ADC(&u->BLOCK[0], u->UNIT_WORD_COUNT, v_lo, &w->BLOCK[0]);

	mov	esi, DWORD PTR _w$[ebp]
	push	edi
	mov	edi, DWORD PTR _u$[ebp]
	push	DWORD PTR [esi+24]
	push	DWORD PTR _v_lo$[ebp]
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_Multiply_WORD_using_MUL_ADC

; 376  :     Multiply_WORD_using_MUL_ADC(&u->BLOCK[0], u->UNIT_WORD_COUNT, v_hi, &w->BLOCK[1]);

	mov	eax, DWORD PTR [esi+24]
	add	eax, 4
	push	eax
	push	DWORD PTR _v_hi$[ebp]
	push	DWORD PTR [edi]
	push	DWORD PTR [edi+24]
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 32					; 00000020H

; 377  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi
	pop	esi

; 378  : }

	pop	ebp
	ret	0
_Multiply_X_2W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_1W_using_MULX_ADCX
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_Multiply_X_1W_using_MULX_ADCX PROC			; COMDAT

; 368  : {

	push	ebp
	mov	ebp, esp

; 369  :     Multiply_WORD_using_MULX_ADCX(&u->BLOCK[0], u->UNIT_WORD_COUNT, v, &w->BLOCK[0]);

	mov	eax, DWORD PTR _w$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _u$[ebp]
	push	DWORD PTR _v$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR [eax+24]
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 16					; 00000010H

; 370  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 371  : }

	pop	ebp
	ret	0
_Multiply_X_1W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_X_1W_using_MUL_ADC
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_Multiply_X_1W_using_MUL_ADC PROC			; COMDAT

; 362  : {

	push	ebp
	mov	ebp, esp

; 363  :     Multiply_WORD_using_MUL_ADC(&u->BLOCK[0], u->UNIT_WORD_COUNT, v, &w->BLOCK[0]);

	mov	eax, DWORD PTR _w$[ebp]
	push	DWORD PTR [eax+24]
	mov	eax, DWORD PTR _u$[ebp]
	push	DWORD PTR _v$[ebp]
	push	DWORD PTR [eax]
	push	DWORD PTR [eax+24]
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 16					; 00000010H

; 364  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 365  : }

	pop	ebp
	ret	0
_Multiply_X_1W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_WORD_using_MULX_ADCX
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_Multiply_WORD_using_MULX_ADCX PROC			; COMDAT

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 215  :     __UNIT_TYPE k = 0;
; 216  :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	mov	ecx, eax

; 218  :     while (count != 0)

	mov	edx, DWORD PTR _v$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _up$[ebp]
	push	esi
	shr	ecx, 5
	push	edi
	xor	edi, edi
	mov	DWORD PTR _count$1$[ebp], ecx
	test	ecx, ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	je	$LN3@Multiply_W
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+64]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+64]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+68]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+68]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+72]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+72]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+76]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+76]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+80]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+80]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+84]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+84]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+88]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+88]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+92]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+92]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+96]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+96]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+100]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+100]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+104]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+104]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+108]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+108]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+112]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+112]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+116]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+116]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+120]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+120]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+124]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+124]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 254  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
	sub	ebx, -128				; ffffff80H
	dec	edx
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 218  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _v$[ebp]
	jne	$LL2@Multiply_W
	mov	eax, DWORD PTR _u_count$[ebp]
$LN3@Multiply_W:

; 255  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 256  :         if (sizeof(k) == sizeof(_UINT32_T))
; 257  :             AddToMULTI32Counter(32);
; 258  :         else
; 259  :             AddToMULTI64Counter(32);
; 260  : #endif
; 261  :     }
; 262  : 
; 263  :     if (u_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN701@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 281  :         up += 16;

	add	ebx, 64					; 00000040H

; 282  :         wp += 16;

	add	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN701@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 291  :     if (u_count & 0x8)

	test	al, 8
	je	$LN817@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 301  :         up += 8;

	add	ebx, 32					; 00000020H

; 302  :         wp += 8;

	add	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN817@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 311  :     if (u_count & 0x4)

	test	al, 4
	je	$LN877@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 317  :         up += 4;

	add	ebx, 16					; 00000010H

; 318  :         wp += 4;

	add	ecx, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN877@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 327  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN909@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 331  :         up += 2;

	add	ebx, 8

; 332  :         wp += 2;

	add	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
	lock	 xadd	 DWORD PTR [eax], edx
	mov	eax, DWORD PTR _u_count$[ebp]
$LN909@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 341  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN927@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	esi, 0

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adcx	edx, esi
	add	eax, edi
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 345  :         wp += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1001 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN927@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 354  :     if (k != 0)

	xor	eax, eax
	test	edi, edi
	je	SHORT $LN21@Multiply_W

; 355  :         *wp = k;

	mov	DWORD PTR [ecx], edi
$LN21@Multiply_W:
	pop	edi

; 356  : 
; 357  :     return (PMC_STATUS_OK);
; 358  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_WORD_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Multiply_WORD_using_MUL_ADC
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_Multiply_WORD_using_MUL_ADC PROC			; COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 68   :     __UNIT_TYPE k = 0;
; 69   :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	mov	ecx, eax

; 71   :     while (count != 0)

	mov	edx, DWORD PTR _v$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _up$[ebp]
	push	esi
	shr	ecx, 5
	push	edi
	xor	edi, edi
	mov	DWORD PTR _count$1$[ebp], ecx
	test	ecx, ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	je	$LN3@Multiply_W
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+64]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+64]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+68]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+68]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+72]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+72]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+76]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+76]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+80]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+80]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+84]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+84]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+88]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+88]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+92]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+92]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+96]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+96]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+100]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+100]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+104]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+104]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+108]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+108]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+112]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+112]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+116]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+116]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+120]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]
	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+120]
	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+124]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+124]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 107  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 107  :         --count;

	dec	edx
	sub	ebx, -128				; ffffff80H
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 71   :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _v$[ebp]
	jne	$LL2@Multiply_W
	mov	eax, DWORD PTR _u_count$[ebp]
$LN3@Multiply_W:

; 108  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 109  :         if (sizeof(k) == sizeof(_UINT32_T))
; 110  :             AddToMULTI32Counter(32);
; 111  :         else
; 112  :             AddToMULTI64Counter(32);
; 113  : #endif
; 114  :     }
; 115  : 
; 116  :     if (u_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN701@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 134  :         up += 16;

	add	ebx, 64					; 00000040H

; 135  :         wp += 16;

	add	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN701@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 144  :     if (u_count & 0x8)

	test	al, 8
	je	$LN817@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 154  :         up += 8;

	add	ebx, 32					; 00000020H

; 155  :         wp += 8;

	add	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN817@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 164  :     if (u_count & 0x4)

	test	al, 4
	je	SHORT $LN877@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 170  :         up += 4;

	add	ebx, 16					; 00000010H

; 171  :         wp += 4;

	add	ecx, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN877@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 180  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN909@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 184  :         up += 2;

	add	ebx, 8

; 185  :         wp += 2;

	add	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	eax, DWORD PTR _u_count$[ebp]
$LN909@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 194  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN927@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adc	edx, 0
	add	eax, edi
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 198  :         wp += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 1001 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN927@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 207  :     if (k != 0)

	xor	eax, eax
	test	edi, edi
	je	SHORT $LN21@Multiply_W

; 208  :         *wp = k;

	mov	DWORD PTR [ecx], edi
$LN21@Multiply_W:
	pop	edi

; 209  : 
; 210  :     return (PMC_STATUS_OK);
; 211  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_WORD_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT __MULTIPLYX_DIGIT_UNIT
_TEXT	SEGMENT
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
__MULTIPLYX_DIGIT_UNIT PROC				; COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 59   :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	esi, 0

; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _v$[ebp]

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adcx	edx, esi
	add	eax, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 61   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 493  :     return (_addcarryx_u32(carry, u, v, w));

	adcx	edx, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 63   :     return (k);

	mov	eax, edx
	pop	esi

; 64   : }

	pop	ebp
	ret	0
__MULTIPLYX_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT __MULTIPLY_DIGIT_UNIT
_TEXT	SEGMENT
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
__MULTIPLY_DIGIT_UNIT PROC				; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 47   :     _ADD_UNIT(_ADD_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	mov	ecx, DWORD PTR _wp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _v$[ebp]

; 465  :     return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adc	edx, 0
	add	eax, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 49   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 465  :     return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c

; 51   :     return (k);

	mov	eax, edx

; 52   : }

	pop	ebp
	ret	0
__MULTIPLY_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToMULTI64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC				; COMDAT

; 1029 : {

	push	ebp
	mov	ebp, esp

; 1030 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 1031 : }

	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToMULTI32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC				; COMDAT

; 1023 : {

	push	ebp
	mov	ebp, esp

; 1024 :     _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 1025 : }

	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementMULTI64Counter
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC				; COMDAT

; 1007 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 1008 : }

	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementMULTI32Counter
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC				; COMDAT

; 1001 :     _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 1002 : }

	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 879  : {

	push	ebp
	mov	ebp, esp

; 880  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 881  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 905  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 882  : #ifdef _M_IX86
; 883  :     _UINT32_T pos;
; 884  : #ifdef _MSC_VER
; 885  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 886  : #elif defined(__GNUC__)
; 887  :     __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 888  : #else
; 889  : #error unknown compiler
; 890  : #endif
; 891  : #elif defined(_M_X64)
; 892  : #ifdef _MSC_VER
; 893  :     _UINT32_T pos;
; 894  :     _BitScanReverse64(&pos, x);
; 895  : #elif defined(__GNUC__)
; 896  :     _UINT64_T pos;
; 897  :     __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 898  : #else
; 899  : #error unknown compiler
; 900  : #endif
; 901  : #else
; 902  : #error unknown platform
; 903  : #endif
; 904  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 905  : }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 846  : {

	push	ebp
	mov	ebp, esp

; 847  :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 848  :         return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 858  : }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 849  :     _UINT32_T pos;
; 850  : #ifdef _MSC_VER
; 851  :     _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 852  : #elif defined(__GNUC__)
; 853  :     __asm__( "bsrl %1, %0" : "=r"(pos) : "rm"(x) );
; 854  : #else
; 855  : #error unknown compiler
; 856  : #endif
; 857  :     return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 858  : }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MULTIPLYX_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC					; COMDAT

; 585  : {

	push	ebp
	mov	ebp, esp

; 586  : #ifdef _MSC_VER
; 587  : #ifdef _M_IX86
; 588  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 433  :     *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 589  : #elif defined(_M_X64)
; 590  :     return (_mulx_u64(u, v, w_hi));
; 591  : #else
; 592  : #error unknown platform
; 593  : #endif
; 594  : #elif defined(__GNUC__)
; 595  : #ifdef _M_IX86
; 596  :     _UINT32_T w_lo;
; 597  :     __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 598  :     return (w_lo);
; 599  : #elif defined(_M_X64)
; 600  :     _UINT64_T w_lo;
; 601  :     __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 602  :     return (w_lo);
; 603  : #else
; 604  : #error unknown platform
; 605  : #endif
; 606  : #else
; 607  : #error unknown compiler
; 608  : #endif
; 609  : }

	pop	ebp
	ret	0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __MULTIPLY_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC					; COMDAT

; 547  : {

	push	ebp
	mov	ebp, esp

; 548  : #ifdef _M_IX86
; 549  : #ifdef _MSC_VER
; 550  :     return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 433  :     *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 551  : #elif defined(__GNUC__)
; 552  :     _UINT32_T w_lo;
; 553  :     __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 554  :     return (w_lo);
; 555  : #else
; 556  : #error unknown compiler
; 557  : #endif
; 558  : #elif defined(_M_X64)
; 559  :     return (_umul128(u, v, w_hi));
; 560  : #else
; 561  : #error unknown platform
; 562  : #endif
; 563  : }

	pop	ebp
	ret	0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ADDX_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC					; COMDAT

; 491  : {

	push	ebp
	mov	ebp, esp

; 492  : #ifdef _M_IX86
; 493  :     return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adcx	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 494  : #elif defined(_M_X64)
; 495  :     return (_addcarryx_u64(carry, u, v, w));
; 496  : #else
; 497  : #error unknown platform
; 498  : #endif
; 499  : }

	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ADD_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC						; COMDAT

; 463  : {

	push	ebp
	mov	ebp, esp

; 464  : #ifdef _M_IX86
; 465  :     return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adc	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 466  : #elif defined(_M_X64)
; 467  :     return (_addcarry_u64(carry, u, v, w));
; 468  : #else
; 469  : #error unknown platform
; 470  : #endif
; 471  : }

	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 432  : {

	push	ebp
	mov	ebp, esp

; 433  :     *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 434  :     return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 435  : }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_X@12
_TEXT	SEGMENT
_nz$ = 8						; size = 4
_x$ = 8							; size = 4
_nz_light_check_code$1 = 12				; size = 4
_y$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_Multiply_X_X@12 PROC				; COMDAT

; 724  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 725  :     if (x == NULL)

	mov	edi, DWORD PTR _x$[ebp]
	test	edi, edi
	je	$LN23@PMC_Multip

; 726  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 727  :     if (y == NULL)

	mov	ebx, DWORD PTR _y$[ebp]
	test	ebx, ebx
	je	$LN23@PMC_Multip

; 728  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 729  :     if (o == NULL)

	mov	esi, DWORD PTR _o$[ebp]
	test	esi, esi
	je	$LN23@PMC_Multip

; 731  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 732  :     NUMBER_HEADER* ny = (NUMBER_HEADER*)y;
; 733  :     PMC_STATUS_CODE result;
; 734  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Multip

; 735  :         return (result);
; 736  :     if ((result = CheckNumber(ny)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Multip

; 737  :         return (result);
; 738  :     NUMBER_HEADER* nz;
; 739  :     if (nx->IS_ZERO)

	mov	ecx, DWORD PTR [edi+16]
	test	cl, 2
	je	SHORT $LN7@PMC_Multip
$LN27@PMC_Multip:
	pop	edi

; 804  :         }
; 805  :         *o = nz;
; 806  :     }
; 807  : #ifdef _DEBUG
; 808  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 809  :         return (result);
; 810  : #endif
; 811  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], OFFSET _number_zero
	xor	eax, eax

; 812  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Multip:

; 740  :     {
; 741  :         // x が 0 である場合
; 742  : 
; 743  :         // y の値にかかわらず 0 を返す。
; 744  :         *o = &number_zero;
; 745  :     }
; 746  :     else if (nx->IS_ONE)

	mov	edx, DWORD PTR [ebx+16]
	mov	eax, edx
	and	eax, 2
	test	cl, 4
	je	SHORT $LN9@PMC_Multip

; 747  :     {
; 748  :         // x が 1 である場合
; 749  :         if (ny->IS_ZERO)

	test	eax, eax
	jne	SHORT $LN27@PMC_Multip

; 750  :         {
; 751  :             // y が 0 である場合
; 752  : 
; 753  :             //  0  を返す。
; 754  :             *o = &number_zero;
; 755  :         }
; 756  :         else
; 757  :         {
; 758  :             // y が 0 ではない場合
; 759  : 
; 760  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 761  :             if ((result = DuplicateNumber(ny, &nz)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	push	ebx
$LN26@PMC_Multip:

; 804  :         }
; 805  :         *o = nz;
; 806  :     }
; 807  : #ifdef _DEBUG
; 808  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 809  :         return (result);
; 810  : #endif
; 811  :     return (PMC_STATUS_OK);

	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Multip
	mov	eax, DWORD PTR _nz$[ebp]
	pop	edi
	mov	DWORD PTR [esi], eax
	xor	eax, eax

; 812  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN9@PMC_Multip:

; 762  :                 return (result);
; 763  :             *o = nz;
; 764  :         }
; 765  :     }
; 766  :     else
; 767  :     {
; 768  :         // x が 0 と 1 のどちらでもない場合
; 769  : 
; 770  :         if (ny->IS_ZERO)

	test	eax, eax
	je	SHORT $LN14@PMC_Multip

; 771  :         {
; 772  :             // y が 0 である場合
; 773  : 
; 774  :             //  0  を返す。
; 775  :             nz = &number_zero;

	mov	eax, OFFSET _number_zero
	pop	edi

; 804  :         }
; 805  :         *o = nz;
; 806  :     }
; 807  : #ifdef _DEBUG
; 808  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 809  :         return (result);
; 810  : #endif
; 811  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [esi], eax
	xor	eax, eax

; 812  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN14@PMC_Multip:

; 776  :         }
; 777  :         else if (ny->IS_ONE)

	test	dl, 4
	je	SHORT $LN16@PMC_Multip

; 778  :         {
; 779  :             // y が 1 である場合
; 780  : 
; 781  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 782  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	push	edi
	jmp	SHORT $LN26@PMC_Multip
$LN16@PMC_Multip:

; 783  :                 return (result);
; 784  :         }
; 785  :         else
; 786  :         {
; 787  :             // x と y がともに 0 、1 のどちらでもない場合
; 788  : 
; 789  :             // x と y の積を計算する
; 790  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;
; 791  :             __UNIT_TYPE y_bit_count = ny->UNIT_BIT_COUNT;
; 792  :             __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;

	mov	eax, DWORD PTR [edi+4]

; 793  :             __UNIT_TYPE nz_light_check_code;
; 794  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nz_light_check_code$1[ebp]
	add	eax, DWORD PTR [ebx+4]
	push	ecx
	push	eax
	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 795  :                 return (result);
; 796  :             if ((result = (*fp_Multiply_X_X)(nx, ny, nz)) != PMC_STATUS_OK)

	push	DWORD PTR _nz$[ebp]
	push	ebx
	push	edi
	call	DWORD PTR _fp_Multiply_X_X
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	SHORT $LN20@PMC_Multip

; 797  :             {
; 798  :                 DeallocateNumber(nz);

	push	DWORD PTR _nz$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 799  :                 return (result);

	mov	eax, edi
	pop	edi

; 812  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN20@PMC_Multip:

; 800  :             }
; 801  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz$[ebp]
	push	DWORD PTR _nz_light_check_code$1[ebp]
	push	DWORD PTR [eax+24]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 802  :                 return (result);
; 803  :             CommitNumber(nz);

	push	DWORD PTR _nz$[ebp]
	call	_CommitNumber

; 804  :         }
; 805  :         *o = nz;
; 806  :     }
; 807  : #ifdef _DEBUG
; 808  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 809  :         return (result);
; 810  : #endif
; 811  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _nz$[ebp]
	add	esp, 4
	mov	DWORD PTR [esi], eax
	xor	eax, eax
	pop	edi

; 812  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN23@PMC_Multip:

; 730  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Multip:
	pop	edi

; 812  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Multiply_X_L@16 PROC				; COMDAT

; 701  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 702  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 703  :     {
; 704  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 705  :         return (PMC_STATUS_INTERNAL_ERROR);
; 706  :     }
; 707  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Multip

; 708  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 709  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Multip

; 711  :     PMC_STATUS_CODE result;
; 712  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 713  :         return (result);
; 714  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp+4]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_Multiply_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 715  :         return (result);
; 716  : #ifdef _DEBUG
; 717  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 718  :         return (result);
; 719  : #endif
; 720  :     return (PMC_STATUS_OK);
; 721  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Multip:

; 710  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Multip:
	pop	esi

; 715  :         return (result);
; 716  : #ifdef _DEBUG
; 717  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 718  :         return (result);
; 719  : #endif
; 720  :     return (PMC_STATUS_OK);
; 721  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_Multiply_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_X_I@12 PROC				; COMDAT

; 537  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 538  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 539  :     {
; 540  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 541  :         return (PMC_STATUS_INTERNAL_ERROR);
; 542  :     }
; 543  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Multip

; 544  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 545  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Multip

; 547  :     PMC_STATUS_CODE result;
; 548  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 549  :         return (result);
; 550  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_Multiply_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 551  :         return (result);
; 552  : #ifdef _DEBUG
; 553  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 554  :         return (result);
; 555  : #endif
; 556  :     return (PMC_STATUS_OK);
; 557  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Multip:

; 546  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Multip:
	pop	esi

; 551  :         return (result);
; 552  : #ifdef _DEBUG
; 553  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 554  :         return (result);
; 555  : #endif
; 556  :     return (PMC_STATUS_OK);
; 557  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_L_X@16
_TEXT	SEGMENT
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Multiply_L_X@16 PROC				; COMDAT

; 678  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 679  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 680  :     {
; 681  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 682  :         return (PMC_STATUS_INTERNAL_ERROR);
; 683  :     }
; 684  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Multip

; 685  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 686  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Multip

; 688  :     PMC_STATUS_CODE result;
; 689  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 690  :         return (result);
; 691  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp+4]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_Multiply_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 692  :         return (result);
; 693  : #ifdef _DEBUG
; 694  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 695  :         return (result);
; 696  : #endif
; 697  :     return (PMC_STATUS_OK);
; 698  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Multip:

; 687  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Multip:
	pop	esi

; 692  :         return (result);
; 693  : #ifdef _DEBUG
; 694  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 695  :         return (result);
; 696  : #endif
; 697  :     return (PMC_STATUS_OK);
; 698  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_Multiply_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _PMC_Multiply_I_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_I_X@12 PROC				; COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 515  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 516  :     {
; 517  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 518  :         return (PMC_STATUS_INTERNAL_ERROR);
; 519  :     }
; 520  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Multip

; 521  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 522  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Multip

; 524  :     PMC_STATUS_CODE result;
; 525  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 526  :         return (result);
; 527  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_Multiply_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 528  :         return (result);
; 529  : #ifdef _DEBUG
; 530  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 531  :         return (result);
; 532  : #endif
; 533  :     return (PMC_STATUS_OK);
; 534  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Multip:

; 523  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Multip:
	pop	esi

; 528  :         return (result);
; 529  : #ifdef _DEBUG
; 530  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 531  :         return (result);
; 532  : #endif
; 533  :     return (PMC_STATUS_OK);
; 534  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_multiply.c
;	COMDAT _Initialize_Multiply
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Multiply PROC				; COMDAT

; 815  : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _feature$[ebp]

; 816  :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 817  :     {
; 818  :         fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;
; 819  :         fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;
; 820  :         fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;
; 821  :     }
; 822  :     else
; 823  :     {
; 824  :         fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;
; 825  :         fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;
; 826  :         fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;
; 827  :     }
; 828  :     return (PMC_STATUS_OK);

	mov	edx, OFFSET _Multiply_X_1W_using_MUL_ADC
	mov	ecx, DWORD PTR [eax]
	mov	eax, OFFSET _Multiply_X_1W_using_MULX_ADCX
	and	ecx, 10					; 0000000aH
	cmp	ecx, 10					; 0000000aH
	cmovne	eax, edx
	mov	edx, OFFSET _Multiply_X_2W_using_MUL_ADC
	mov	DWORD PTR _fp_Multiply_X_1W, eax
	mov	eax, OFFSET _Multiply_X_2W_using_MULX_ADCX
	cmovne	eax, edx
	mov	edx, OFFSET _Multiply_X_X_using_MUL_ADC
	mov	DWORD PTR _fp_Multiply_X_2W, eax
	mov	eax, OFFSET _Multiply_X_X_using_MULX_ADCX
	cmovne	eax, edx
	mov	DWORD PTR _fp_Multiply_X_X, eax
	xor	eax, eax

; 829  : }

	pop	ebp
	ret	0
_Initialize_Multiply ENDP
_TEXT	ENDS
END
