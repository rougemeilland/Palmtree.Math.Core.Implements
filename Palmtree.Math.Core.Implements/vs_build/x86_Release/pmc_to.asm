; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_to.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_To
PUBLIC	_PMC_To_X_I@8
PUBLIC	_PMC_To_X_L@8
PUBLIC	_PMC_To_X_B@16
EXTRN	_CheckNumber:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC				; COMDAT

; 409  : {

	push	ebp
	mov	ebp, esp

; 410  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 411  : }

	pop	ebp
	ret	0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 388  : {

	push	ebp
	mov	ebp, esp

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR _value_high$[ebp]
	xor	eax, eax
	or	eax, DWORD PTR _value_low$[ebp]

; 390  : }

	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __COPY_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_BYTE PROC					; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  :     __movsb(d, s, count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsb
	pop	edi
	pop	esi

; 262  : }

	pop	ebp
	ret	0
__COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c
;	COMDAT _PMC_To_X_B@16
_TEXT	SEGMENT
_p$ = 8							; size = 4
_buffer$ = 12						; size = 4
_buffer_size$ = 16					; size = 4
_count$ = 20						; size = 4
_PMC_To_X_B@16 PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	push	edi

; 93   :     if (buffer == NULL)

	mov	edi, DWORD PTR _buffer$[ebp]
	test	edi, edi
	jne	SHORT $LN2@PMC_To_X_B

; 94   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	pop	edi

; 112  : }

	pop	ebp
	ret	16					; 00000010H
$LN2@PMC_To_X_B:
	push	ebx

; 95   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 96   :     PMC_STATUS_CODE result;
; 97   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _p$[ebp]
	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN14@PMC_To_X_B

; 98   :         return (result);
; 99   :     if (np->UNIT_BIT_COUNT > sizeof(*buffer) * 8 * buffer_size)

	mov	eax, DWORD PTR _buffer_size$[ebp]
	mov	ecx, DWORD PTR [ebx+4]
	shl	eax, 3
	cmp	ecx, eax
	jbe	SHORT $LN4@PMC_To_X_B

; 100  :         return (PMC_STATUS_INSUFFICIENT_BUFFER);

	pop	ebx
	mov	eax, -4					; fffffffcH
	pop	edi

; 112  : }

	pop	ebp
	ret	16					; 00000010H
$LN4@PMC_To_X_B:

; 101  :     if (np->IS_ZERO)

	test	BYTE PTR [ebx+16], 2
	je	SHORT $LN5@PMC_To_X_B

; 111  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, 1
	mov	BYTE PTR [edi], 0
	pop	ebx
	pop	edi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax

; 112  : }

	pop	ebp
	ret	16					; 00000010H
$LN5@PMC_To_X_B:

; 111  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _count$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 410  :     return ((u + v - 1) / v);

	add	ecx, 7
	shr	ecx, 3
	push	esi

; 261  :     __movsb(d, s, count);

	mov	esi, DWORD PTR [ebx+24]
	rep movsb

; 410  :     return ((u + v - 1) / v);

	mov	ecx, DWORD PTR [ebx+4]
	add	ecx, 7
	shr	ecx, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c

; 111  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [eax], ecx
	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 410  :     return ((u + v - 1) / v);

	pop	esi
$LN14@PMC_To_X_B:
	pop	ebx
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c

; 112  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_To_X_B@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c
;	COMDAT _PMC_To_X_L@8
_TEXT	SEGMENT
_p$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_To_X_L@8 PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _p$[ebp]

; 59   :     if (sizeof(__UNIT_TYPE) * 2 < sizeof(*o))
; 60   :     {
; 61   :         // 32bit未満のCPUは未対応
; 62   :         return (PMC_STATUS_NOT_SUPPORTED);
; 63   :     }
; 64   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 65   :     PMC_STATUS_CODE result;
; 66   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN9@PMC_To_X_L

; 67   :         return (result);
; 68   :     if (np->UNIT_BIT_COUNT > sizeof(*o) * 8)

	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, 64					; 00000040H
	jbe	SHORT $LN4@PMC_To_X_L

; 69   :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	pop	esi

; 85   :         return (PMC_STATUS_OK);
; 86   :     }
; 87   :     else
; 88   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 89   : }

	pop	ebp
	ret	8
$LN4@PMC_To_X_L:

; 70   :     if (np->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	je	SHORT $LN5@PMC_To_X_L

; 71   :     {
; 72   :         *o = 0;

	mov	eax, DWORD PTR _o$[ebp]
	pop	esi
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 85   :         return (PMC_STATUS_OK);
; 86   :     }
; 87   :     else
; 88   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 89   : }

	xor	eax, eax
	pop	ebp
	ret	8
$LN5@PMC_To_X_L:

; 73   :         return (PMC_STATUS_OK);
; 74   :     }
; 75   :     if (np->UNIT_BIT_COUNT <= __UNIT_TYPE_BIT_COUNT)

	mov	eax, DWORD PTR [esi+24]
	cmp	ecx, 32					; 00000020H
	ja	SHORT $LN6@PMC_To_X_L

; 76   :     {
; 77   :         // 値が 1 ワードで表現できる場合
; 78   :         *o = np->BLOCK[0];

	mov	ecx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	esi
	mov	DWORD PTR [ecx], eax

; 85   :         return (PMC_STATUS_OK);
; 86   :     }
; 87   :     else
; 88   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 89   : }

	xor	eax, eax
	mov	DWORD PTR [ecx+4], 0
	pop	ebp
	ret	8
$LN6@PMC_To_X_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 389  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR [eax+4]
	xor	ecx, ecx
	or	ecx, DWORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c

; 84   :         *o = _FROMWORDTODWORD((_UINT32_T)np->BLOCK[1], (_UINT32_T)np->BLOCK[0]);

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 85   :         return (PMC_STATUS_OK);
; 86   :     }
; 87   :     else
; 88   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 89   : }

	xor	eax, eax
$LN9@PMC_To_X_L:
	pop	esi
	pop	ebp
	ret	8
_PMC_To_X_L@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c
;	COMDAT _PMC_To_X_I@8
_TEXT	SEGMENT
_p$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_To_X_I@8 PROC					; COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 39   :     if (sizeof(__UNIT_TYPE) < sizeof(*o))
; 40   :     {
; 41   :         // 32bit未満のCPUは未対応
; 42   :         return (PMC_STATUS_NOT_SUPPORTED);
; 43   :     }
; 44   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 45   :     PMC_STATUS_CODE result;
; 46   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	esi, DWORD PTR _p$[ebp]
	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_To_X_I

; 47   :         return (result);
; 48   :     if (np->UNIT_BIT_COUNT > sizeof(*o) * 8)

	cmp	DWORD PTR [esi+4], 32			; 00000020H
	jbe	SHORT $LN4@PMC_To_X_I

; 49   :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	pop	esi

; 55   : }   

	pop	ebp
	ret	8
$LN4@PMC_To_X_I:

; 50   :     if (np->IS_ZERO)

	test	BYTE PTR [esi+16], 2
	je	SHORT $LN5@PMC_To_X_I

; 54   :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _o$[ebp]
	xor	ecx, ecx
	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax

; 55   : }   

	pop	ebp
	ret	8
$LN5@PMC_To_X_I:

; 51   :         *o = 0;
; 52   :     else
; 53   :         *o = (_UINT32_T)np->BLOCK[0];

	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [eax]

; 54   :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
$LN1@PMC_To_X_I:
	pop	esi

; 55   : }   

	pop	ebp
	ret	8
_PMC_To_X_I@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_to.c
;	COMDAT _Initialize_To
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_To PROC					; COMDAT

; 116  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 117  : }

	ret	0
_Initialize_To ENDP
_TEXT	ENDS
END
