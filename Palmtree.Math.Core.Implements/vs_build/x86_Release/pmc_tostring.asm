; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Implements\Palmtree.Math.Core.Implements\pmc_tostring.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_ToString
PUBLIC	_PMC_ToString@24
PUBLIC	??_C@_13DEFPDAGF@?$AA?0@			; `string'
PUBLIC	??_C@_13JOFGPIOO@?$AA?4@			; `string'
PUBLIC	??_C@_01EKENIIDA@3@				; `string'
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL@			; `string'
PUBLIC	??_C@_13IMODFHAA@?$AA?9@			; `string'
EXTRN	__imp__lstrcpyA@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DivRem_X_1W:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aulldvrm:PROC
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_default_number_format_option DB 028H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_13IMODFHAA@?$AA?9@
CONST	SEGMENT
??_C@_13IMODFHAA@?$AA?9@ DB '-', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL@ DB '+', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3@
CONST	SEGMENT
??_C@_01EKENIIDA@3@ DB '3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13JOFGPIOO@?$AA?4@
CONST	SEGMENT
??_C@_13JOFGPIOO@?$AA?4@ DB '.', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13DEFPDAGF@?$AA?0@
CONST	SEGMENT
??_C@_13DEFPDAGF@?$AA?0@ DB ',', 00H, 00H, 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_decimal_digits DB '0', 00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H, '5', 00H
	DB	'6', 00H, '7', 00H, '8', 00H, '9', 00H, 00H, 00H
	ORG $+2
_hexadecimal_lower_digits DB '0', 00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H
	DB	'5', 00H, '6', 00H, '7', 00H, '8', 00H, '9', 00H, 'a', 00H, 'b'
	DB	00H, 'c', 00H, 'd', 00H, 'e', 00H, 'f', 00H, 00H, 00H
	ORG $+2
_hexadecimal_upper_digits DB '0', 00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H
	DB	'5', 00H, '6', 00H, '7', 00H, '8', 00H, '9', 00H, 'A', 00H, 'B'
	DB	00H, 'C', 00H, 'D', 00H, 'E', 00H, 'F', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _ToStringX
_TEXT	SEGMENT
tv339 = -4						; size = 4
_digit_table$1$ = 8					; size = 4
_x$ = 8							; size = 4
_buffer$ = 12						; size = 4
_buffer_size$ = 16					; size = 4
_width$ = 20						; size = 4
_format_option$ = 24					; size = 4
_using_upper_letter$ = 28				; size = 4
_ToStringX PROC						; COMDAT

; 479  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi

; 480  :     if (x->IS_ZERO)

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	test	BYTE PTR [esi+16], 2
	je	SHORT $LN4@ToStringX

; 481  :     {
; 482  :         // x が 0 である場合
; 483  :         // 最低で 1 桁、最高で format_option->MinimumWidth 桁だけ '0' を出力する。
; 484  : 
; 485  :         if (width < 1)
; 486  :             width = 1;
; 487  :         if (buffer_size < width + 1)

	mov	esi, 1
	cmp	DWORD PTR _width$[ebp], esi
	cmovae	esi, DWORD PTR _width$[ebp]
	lea	eax, DWORD PTR [esi+1]
	cmp	DWORD PTR _buffer_size$[ebp], eax
	jb	SHORT $LN23@ToStringX
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 380  :     __stosw(d, x, count);

	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, 48					; 00000030H
	mov	ecx, esi
	mov	edi, edx
	rep stosw
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 490  :         buffer[width] = L'\0';

	xor	eax, eax
	pop	edi
	mov	WORD PTR [edx+esi*2], ax

; 527  :     }
; 528  :     return (PMC_STATUS_OK);
; 529  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@ToStringX:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	mov	ebx, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 498  :         if (output_len < width)

	mov	ecx, DWORD PTR _width$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 424  :     return ((u + v - 1) / v);

	add	ebx, 3
	shr	ebx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 508  :         if (buffer_size < total_length + 1)

	mov	eax, ecx
	cmp	ebx, ecx
	mov	edx, ebx
	cmovb	edx, ecx
	sub	eax, ebx
	cmp	ebx, ecx
	sbb	ecx, ecx
	and	ecx, eax
	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR tv339[ebp], ecx
	cmp	DWORD PTR _buffer_size$[ebp], eax
	jae	SHORT $LN10@ToStringX
$LN23@ToStringX:
	pop	edi

; 527  :     }
; 528  :     return (PMC_STATUS_OK);
; 529  : }

	pop	esi
	mov	eax, -4					; fffffffcH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@ToStringX:

; 509  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);
; 510  :         __UNIT_TYPE filling_digit_count = filling_digit_len;
; 511  :         if (filling_digit_len > 0)

	mov	edx, DWORD PTR _buffer$[ebp]
	test	ecx, ecx
	je	SHORT $LN17@ToStringX
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 380  :     __stosw(d, x, count);

	mov	eax, 48					; 00000030H
	mov	edi, edx
	rep stosw
$LN17@ToStringX:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 513  :         __UNIT_TYPE* s_ptr = x->BLOCK + x->UNIT_WORD_COUNT - 1;

	mov	eax, DWORD PTR _x$[ebp]

; 514  :         wchar_t* d_ptr = buffer + filling_digit_len;
; 515  :         wchar_t* digit_table = using_upper_letter ? hexadecimal_upper_digits : hexadecimal_lower_digits;

	mov	ecx, OFFSET _hexadecimal_upper_digits
	mov	esi, DWORD PTR [esi]
	cmp	DWORD PTR _using_upper_letter$[ebp], 0
	mov	eax, DWORD PTR [eax+24]
	lea	edi, DWORD PTR [eax+esi*4]
	mov	eax, OFFSET _hexadecimal_lower_digits
	cmove	ecx, eax
	mov	eax, DWORD PTR tv339[ebp]
	mov	DWORD PTR _digit_table$1$[ebp], ecx
	lea	eax, DWORD PTR [edx+eax*2]

; 516  :         __UNIT_TYPE w_count = x->UNIT_WORD_COUNT;
; 517  :         d_ptr = ToStringX_1WORD(*s_ptr, (int)(x->UNIT_WORD_COUNT * (__UNIT_TYPE_BIT_COUNT / 4) - output_len), digit_table, d_ptr);

	push	eax
	push	ecx
	lea	eax, DWORD PTR [esi*8]
	sub	eax, ebx
	push	eax
	push	DWORD PTR [edi-4]
	call	_ToStringX_1WORD
	add	esp, 16					; 00000010H

; 518  :         --s_ptr;

	sub	edi, 8

; 519  :         --w_count;

	add	esi, -1

; 520  :         while (w_count > 0)

	je	SHORT $LN3@ToStringX
	mov	ebx, DWORD PTR _digit_table$1$[ebp]
	npad	4
$LL2@ToStringX:

; 521  :         {
; 522  :             d_ptr = ToStringX_1WORD(*s_ptr, 0, digit_table, d_ptr);

	push	eax
	push	ebx
	push	0
	push	DWORD PTR [edi]
	call	_ToStringX_1WORD
	add	esp, 16					; 00000010H

; 523  :             --s_ptr;

	lea	edi, DWORD PTR [edi-4]

; 524  :             --w_count;

	sub	esi, 1
	jne	SHORT $LL2@ToStringX
$LN3@ToStringX:
	pop	edi

; 525  :         }
; 526  :         *d_ptr = '\0';

	xor	ecx, ecx

; 527  :     }
; 528  :     return (PMC_STATUS_OK);
; 529  : }

	pop	esi
	mov	WORD PTR [eax], cx
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ToStringX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _ToStringX_1WORD
_TEXT	SEGMENT
_x$ = 8							; size = 4
_skip_digit_len$ = 12					; size = 4
_digit_table$ = 16					; size = 4
_ptr$ = 20						; size = 4
_ToStringX_1WORD PROC					; COMDAT

; 411  : {

	push	ebp
	mov	ebp, esp

; 412  :     if (sizeof(__UNIT_TYPE) > sizeof(_UINT64_T))
; 413  :     {
; 414  :         // 64bit を超える __UNIT_TYPE には未対応
; 415  :         // 対応するには以降のコーディングを見直す必要がある
; 416  :         return (NULL);
; 417  :     }
; 418  :     int count = __UNIT_TYPE_BIT_COUNT / 4;
; 419  :     if (skip_digit_len > 0)

	mov	eax, DWORD PTR _skip_digit_len$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	push	ebx
	mov	ebx, 8
	push	esi
	test	eax, eax
	jle	SHORT $LN3@ToStringX_

; 420  :     {
; 421  :         x = _ROTATE_L_UNIT(x, 4 * skip_digit_len);

	lea	ecx, DWORD PTR [eax*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 422  :         count -= skip_digit_len;

	sub	ebx, eax
$LN3@ToStringX_:

; 423  :     }
; 424  :     if (count & 0x10)

	mov	ecx, DWORD PTR _digit_table$[ebp]
	mov	esi, DWORD PTR _ptr$[ebp]
	test	bl, 16					; 00000010H
	je	$LN4@ToStringX_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 426  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 426  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	and	eax, 15					; 0000000fH
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi], ax

; 427  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 427  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+2], ax

; 428  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 428  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+4], ax

; 429  :         x = _ROTATE_L_UNIT(x, 4); ptr[3] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 429  :         x = _ROTATE_L_UNIT(x, 4); ptr[3] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+6], ax

; 430  :         x = _ROTATE_L_UNIT(x, 4); ptr[4] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 430  :         x = _ROTATE_L_UNIT(x, 4); ptr[4] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+8], ax

; 431  :         x = _ROTATE_L_UNIT(x, 4); ptr[5] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 431  :         x = _ROTATE_L_UNIT(x, 4); ptr[5] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+10], ax

; 432  :         x = _ROTATE_L_UNIT(x, 4); ptr[6] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 432  :         x = _ROTATE_L_UNIT(x, 4); ptr[6] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+12], ax

; 433  :         x = _ROTATE_L_UNIT(x, 4); ptr[7] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 433  :         x = _ROTATE_L_UNIT(x, 4); ptr[7] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+14], ax

; 434  :         x = _ROTATE_L_UNIT(x, 4); ptr[8] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 434  :         x = _ROTATE_L_UNIT(x, 4); ptr[8] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+16], ax

; 435  :         x = _ROTATE_L_UNIT(x, 4); ptr[9] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 435  :         x = _ROTATE_L_UNIT(x, 4); ptr[9] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+18], ax

; 436  :         x = _ROTATE_L_UNIT(x, 4); ptr[10] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 436  :         x = _ROTATE_L_UNIT(x, 4); ptr[10] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+20], ax

; 437  :         x = _ROTATE_L_UNIT(x, 4); ptr[11] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 437  :         x = _ROTATE_L_UNIT(x, 4); ptr[11] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+22], ax

; 438  :         x = _ROTATE_L_UNIT(x, 4); ptr[12] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 438  :         x = _ROTATE_L_UNIT(x, 4); ptr[12] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+24], ax

; 439  :         x = _ROTATE_L_UNIT(x, 4); ptr[13] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 439  :         x = _ROTATE_L_UNIT(x, 4); ptr[13] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+26], ax

; 440  :         x = _ROTATE_L_UNIT(x, 4); ptr[14] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 440  :         x = _ROTATE_L_UNIT(x, 4); ptr[14] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+28], ax

; 441  :         x = _ROTATE_L_UNIT(x, 4); ptr[15] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+30], ax

; 442  :         ptr += 16;

	add	esi, 32					; 00000020H
$LN4@ToStringX_:

; 443  :     }
; 444  :     if (count & 0x8)

	test	bl, 8
	je	$LN5@ToStringX_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 446  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 446  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	and	eax, 15					; 0000000fH
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi], ax

; 447  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 447  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+2], ax

; 448  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 448  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+4], ax

; 449  :         x = _ROTATE_L_UNIT(x, 4); ptr[3] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 449  :         x = _ROTATE_L_UNIT(x, 4); ptr[3] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+6], ax

; 450  :         x = _ROTATE_L_UNIT(x, 4); ptr[4] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 450  :         x = _ROTATE_L_UNIT(x, 4); ptr[4] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+8], ax

; 451  :         x = _ROTATE_L_UNIT(x, 4); ptr[5] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 451  :         x = _ROTATE_L_UNIT(x, 4); ptr[5] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+10], ax

; 452  :         x = _ROTATE_L_UNIT(x, 4); ptr[6] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 452  :         x = _ROTATE_L_UNIT(x, 4); ptr[6] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+12], ax

; 453  :         x = _ROTATE_L_UNIT(x, 4); ptr[7] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+14], ax

; 454  :         ptr+=8;

	add	esi, 16					; 00000010H
$LN5@ToStringX_:

; 455  :     }
; 456  :     if (count & 0x4)

	test	bl, 4
	je	SHORT $LN6@ToStringX_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 458  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 458  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	and	eax, 15					; 0000000fH
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi], ax

; 459  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 459  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+2], ax

; 460  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 460  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+4], ax

; 461  :         x = _ROTATE_L_UNIT(x, 4); ptr[3] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+6], ax

; 462  :         ptr += 4;

	add	esi, 8
$LN6@ToStringX_:

; 463  :     }
; 464  :     if (count & 0x2)

	test	bl, 2
	je	SHORT $LN7@ToStringX_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 466  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 466  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	and	eax, 15					; 0000000fH
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi], ax

; 467  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	mov	eax, edx
	and	eax, 15					; 0000000fH
	movzx	eax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [esi+2], ax

; 468  :         ptr += 2;

	add	esi, 4
$LN7@ToStringX_:

; 469  :     }
; 470  :     if (count & 0x1)

	test	bl, 1
	je	SHORT $LN74@ToStringX_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 713  :     return (_rotl(x, count));

	rol	edx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 473  :         ptr += 1;

	lea	eax, DWORD PTR [esi+2]
	and	edx, 15					; 0000000fH
	mov	cx, WORD PTR [ecx+edx*2]
	mov	WORD PTR [esi], cx
	pop	esi

; 476  : }

	pop	ebx
	pop	ebp
	ret	0
$LN74@ToStringX_:

; 474  :     }
; 475  :     return (ptr);

	mov	eax, esi
	pop	esi

; 476  : }

	pop	ebx
	pop	ebp
	ret	0
_ToStringX_1WORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _ToStringDN
_TEXT	SEGMENT
_rev_str_buf_code$1 = -56				; size = 4
_r_buf_code$2 = -52					; size = 4
_work_buf_2_words$3 = -48				; size = 4
_work_buf_1_code$4 = -44				; size = 4
_work_buf_2_code$5 = -40				; size = 4
_x_buf_size$1$ = -36					; size = 4
_r_value$6 = -36					; size = 4
_x_buf$1$ = -32						; size = 4
_rev_str_buf_words$7 = -28				; size = 4
_r_buf_words$8 = -24					; size = 4
_work_buf_1$1$ = -20					; size = 4
_work_buf_2$1$ = -16					; size = 4
_u_ptr$1$ = -12						; size = 4
_work_buf_1_words$9 = -8				; size = 4
_r_buf$1$ = -4						; size = 4
_q_ptr$1$ = 8						; size = 4
_rev_str_buf_count$10 = 8				; size = 4
_x$ = 8							; size = 4
_buffer$ = 12						; size = 4
_buffer_size$ = 16					; size = 4
_format$ = 20						; size = 1
_width$ = 24						; size = 4
_format_option$ = 28					; size = 4
_ToStringDN PROC					; COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	ebx
	push	esi

; 319  :     __UNIT_TYPE_DIV base_value;
; 320  :     int word_digit_count;
; 321  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 322  :     {
; 323  :         base_value = 1000000000U; // 10^9
; 324  :         word_digit_count = 9;
; 325  :     }
; 326  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 327  :     {
; 328  :         base_value = (__UNIT_TYPE_DIV)10000000000000000000UL; // 10^19
; 329  :         word_digit_count = 19;
; 330  :     }
; 331  :     else
; 332  :         return (PMC_STATUS_NOT_SUPPORTED);
; 333  : 
; 334  :     if (x->IS_ZERO)

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	test	BYTE PTR [esi+16], 2
	je	$LN6@ToStringDN

; 335  :     {
; 336  :         // x が 0 である場合
; 337  :         if (format == 'N')

	cmp	BYTE PTR _format$[ebp], 78		; 0000004eH
	jne	SHORT $LN8@ToStringDN

; 338  :         {
; 339  :             // format が 'N' である場合
; 340  : 
; 341  :             // 整数部が 1 桁の 0、小数部が width 桁の 0 である文字列を出力する。
; 342  :             buffer[0] = '0';
; 343  :             if (width == 0)

	cmp	DWORD PTR _width$[ebp], 0
	mov	eax, 48					; 00000030H
	mov	ebx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [ebx], ax
	lea	ecx, DWORD PTR [ebx+2]
	jne	SHORT $LN10@ToStringDN

; 344  :                 buffer[1] = L'\0';

	pop	edi
	xor	eax, eax

; 408  : }

	pop	esi
	mov	WORD PTR [ecx], ax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@ToStringDN:

; 345  :             else
; 346  :             {
; 347  :                 lstrcpyW(&buffer[1], format_option->DecimalSeparator);

	mov	esi, DWORD PTR _format_option$[ebp]
	add	esi, 10					; 0000000aH
	push	esi
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8

; 348  :                 int decimal_separator_len = lstrlenW(format_option->DecimalSeparator);

	push	esi
	call	DWORD PTR __imp__lstrlenW@4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 380  :     __stosw(d, x, count);

	mov	esi, DWORD PTR _width$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 349  :                 _FILL_MEMORY_16(buffer + 1 + decimal_separator_len, L'0', width);

	lea	edi, DWORD PTR [ebx+2]
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 380  :     __stosw(d, x, count);

	mov	ecx, esi
	mov	eax, 48					; 00000030H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 349  :                 _FILL_MEMORY_16(buffer + 1 + decimal_separator_len, L'0', width);

	lea	edi, DWORD PTR [edi+edx*2]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 380  :     __stosw(d, x, count);

	rep stosw
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 350  :                 buffer[1 + decimal_separator_len + width] = L'\0';

	lea	eax, DWORD PTR [edx+esi]
	xor	ecx, ecx
	pop	edi
	mov	WORD PTR [ebx+eax*2+2], cx

; 406  :     }
; 407  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 408  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@ToStringDN:

; 351  :             }
; 352  :         }
; 353  :         else
; 354  :         {
; 355  :             // format が 'D' である場合
; 356  : 
; 357  :             // 最低で 1 桁、最高で width 桁だけ '0' を出力する。
; 358  :             if (width < 1)
; 359  :                 width = 1;
; 360  :             if (buffer_size < width + 1)

	mov	esi, 1
	cmp	DWORD PTR _width$[ebp], esi
	cmovae	esi, DWORD PTR _width$[ebp]
	lea	eax, DWORD PTR [esi+1]
	cmp	DWORD PTR _buffer_size$[ebp], eax
	jb	$LN64@ToStringDN
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 380  :     __stosw(d, x, count);

	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, 48					; 00000030H
	mov	ecx, esi
	mov	edi, edx
	rep stosw
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 363  :             buffer[width] = L'\0';

	xor	eax, eax
	pop	edi
	mov	WORD PTR [edx+esi*2], ax

; 408  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@ToStringDN:

; 364  :         }
; 365  :     }
; 366  :     else
; 367  :     {
; 368  :         // x が 0 ではない場合
; 369  :         PMC_STATUS_CODE result;
; 370  :         __UNIT_TYPE r_buf_code;
; 371  :         __UNIT_TYPE r_buf_words;
; 372  :         // xを base_value 基数として変換した数値が r に格納される。約 7% ほど余分に領域が必要な計算になるが、余裕を見て 12.5% 程度の領域を獲得している。
; 373  :         __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(x->UNIT_BIT_COUNT + (x->UNIT_BIT_COUNT >> 3) + __UNIT_TYPE_BIT_COUNT, &r_buf_words, &r_buf_code);

	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR _r_buf_code$2[ebp]
	push	eax
	lea	eax, DWORD PTR _r_buf_words$8[ebp]
	push	eax
	mov	eax, ecx
	add	ecx, 32					; 00000020H
	shr	eax, 3
	add	eax, ecx
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r_buf$1$[ebp], eax

; 374  :         if (r_buf == NULL)

	test	eax, eax
	jne	SHORT $LN14@ToStringDN

; 408  : }

	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@ToStringDN:

; 375  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 376  :         __UNIT_TYPE r_buf_count;
; 377  :         if ((result = ConvertCardinalNumber((__UNIT_TYPE_DIV*)x->BLOCK, x->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), x->UNIT_BIT_COUNT, base_value, r_buf, &r_buf_count)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	and	eax, 1073741823				; 3fffffffH
	mov	DWORD PTR _x_buf_size$1$[ebp], eax
	mov	eax, DWORD PTR [esi+24]

; 62   :     __UNIT_TYPE_DIV* work_buf_1 = (__UNIT_TYPE_DIV*)AllocateBlock(x_bit_count + __UNIT_TYPE_BIT_COUNT, &work_buf_1_words, &work_buf_1_code);

	mov	esi, DWORD PTR [esi+4]

; 375  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 376  :         __UNIT_TYPE r_buf_count;
; 377  :         if ((result = ConvertCardinalNumber((__UNIT_TYPE_DIV*)x->BLOCK, x->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), x->UNIT_BIT_COUNT, base_value, r_buf, &r_buf_count)) != PMC_STATUS_OK)

	mov	DWORD PTR _x_buf$1$[ebp], eax

; 62   :     __UNIT_TYPE_DIV* work_buf_1 = (__UNIT_TYPE_DIV*)AllocateBlock(x_bit_count + __UNIT_TYPE_BIT_COUNT, &work_buf_1_words, &work_buf_1_code);

	add	esi, 32					; 00000020H
	lea	eax, DWORD PTR _work_buf_1_code$4[ebp]
	push	eax
	lea	eax, DWORD PTR _work_buf_1_words$9[ebp]
	push	eax
	push	esi
	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf_1$1$[ebp], ebx

; 63   :     if (work_buf_1 == NULL)

	test	ebx, ebx
	je	SHORT $LN63@ToStringDN

; 64   :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 65   :     __UNIT_TYPE work_buf_2_code;
; 66   :     __UNIT_TYPE work_buf_2_words;
; 67   :     __UNIT_TYPE_DIV* work_buf_2 = (__UNIT_TYPE_DIV*)AllocateBlock(x_bit_count + __UNIT_TYPE_BIT_COUNT, &work_buf_2_words, &work_buf_2_code);

	lea	eax, DWORD PTR _work_buf_2_code$5[ebp]
	push	eax
	lea	eax, DWORD PTR _work_buf_2_words$3[ebp]
	push	eax
	push	esi
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf_2$1$[ebp], eax

; 68   :     if (work_buf_2 == NULL)

	test	eax, eax
	jne	SHORT $LN33@ToStringDN

; 69   :     {
; 70   :         DeallocateBlock((__UNIT_TYPE*)work_buf_1, work_buf_1_words);

	push	DWORD PTR _work_buf_1_words$9[ebp]
	push	ebx
	call	_DeallocateBlock
	add	esp, 8
$LN63@ToStringDN:

; 378  :         {
; 379  :             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	edi, -5					; fffffffbH
$LN49@ToStringDN:
	push	DWORD PTR _r_buf_words$8[ebp]
	push	DWORD PTR _r_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 8

; 380  :             return (result);

	mov	eax, edi
	pop	edi

; 408  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@ToStringDN:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 309  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	esi, DWORD PTR _x_buf$1$[ebp]
	mov	edi, ebx
	mov	ecx, DWORD PTR _x_buf_size$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 73   :     __UNIT_TYPE_DIV* u_ptr = work_buf_1;

	mov	edx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 309  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 77   :     __UNIT_TYPE work_u_count = work_buf_1_words * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));

	mov	esi, DWORD PTR _work_buf_1_words$9[ebp]
	mov	DWORD PTR _u_ptr$1$[ebp], ebx
	mov	ebx, DWORD PTR _r_buf$1$[ebp]
	mov	DWORD PTR _q_ptr$1$[ebp], eax
	test	esi, esi

; 78   :     while (work_u_count > 0)

	je	SHORT $LN29@ToStringDN
	npad	6
$LL28@ToStringDN:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 359  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, eax
	mov	ecx, esi
	xor	eax, eax
	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 82   :         DivRem_X_1W(u_ptr, work_u_count, base_value, q_ptr, &r_value);

	lea	eax, DWORD PTR _r_value$6[ebp]
	push	eax
	push	DWORD PTR _q_ptr$1$[ebp]
	push	1000000000				; 3b9aca00H
	push	esi
	push	edx
	call	_DivRem_X_1W

; 83   :         if ((result = CheckBlockLight((__UNIT_TYPE*)work_buf_2, work_buf_2_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_buf_2_code$5[ebp]
	push	DWORD PTR _work_buf_2$1$[ebp]
	call	_CheckBlockLight
	mov	edi, eax
	add	esp, 28					; 0000001cH
	test	edi, edi
	jne	SHORT $LN49@ToStringDN

; 84   :             return (result);
; 85   :         if ((result = CheckBlockLight((__UNIT_TYPE*)work_buf_1, work_buf_1_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_buf_1_code$4[ebp]
	push	DWORD PTR _work_buf_1$1$[ebp]
	call	_CheckBlockLight
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	jne	SHORT $LN49@ToStringDN

; 86   :             return (result);
; 87   :         *r_ptr++ = r_value;
; 88   :         __UNIT_TYPE_DIV* temp = u_ptr;
; 89   :         u_ptr = q_ptr;

	mov	edx, DWORD PTR _q_ptr$1$[ebp]
	mov	eax, DWORD PTR _r_value$6[ebp]
	mov	DWORD PTR [ebx], eax
	add	ebx, 4
	mov	eax, DWORD PTR _u_ptr$1$[ebp]

; 90   :         q_ptr = temp;

	mov	DWORD PTR _q_ptr$1$[ebp], eax
	lea	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _u_ptr$1$[ebp], edx
	lea	eax, DWORD PTR [eax+esi*4]
	npad	3
$LL30@ToStringDN:

; 91   :         while (work_u_count > 0 && u_ptr[work_u_count - 1] == 0)

	cmp	DWORD PTR [eax], 0
	jne	$LN62@ToStringDN

; 92   :             --work_u_count;

	sub	eax, 4
	sub	esi, 1
	jne	SHORT $LL30@ToStringDN
$LN29@ToStringDN:

; 93   :     }
; 94   :     *r_buf_count = r_ptr - r_buf;
; 95   :     DeallocateBlock((__UNIT_TYPE*)work_buf_2, work_buf_2_words);

	push	DWORD PTR _work_buf_2_words$3[ebp]
	mov	esi, DWORD PTR _r_buf$1$[ebp]
	sub	ebx, esi
	push	DWORD PTR _work_buf_2$1$[ebp]
	sar	ebx, 2
	call	_DeallocateBlock

; 96   :     DeallocateBlock((__UNIT_TYPE*)work_buf_1, work_buf_1_words);

	push	DWORD PTR _work_buf_1_words$9[ebp]
	push	DWORD PTR _work_buf_1$1$[ebp]
	call	_DeallocateBlock

; 381  :         }
; 382  :         if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _r_buf_code$2[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$LN1@ToStringDN

; 383  :             return (result);
; 384  : 
; 385  :         __UNIT_TYPE rev_str_buf_code;
; 386  :         __UNIT_TYPE rev_str_buf_words;
; 387  :         // 獲得領域長の * 2 は、桁区切りのワーストケースにより文字列が膨らんだ場合を考慮したもの。
; 388  :         wchar_t* rev_str_buf = (wchar_t*)AllocateBlock((max(r_buf_count * word_digit_count, width) * 2 + width + 2) * sizeof(wchar_t) * 8, &rev_str_buf_words, &rev_str_buf_code);

	mov	esi, DWORD PTR _width$[ebp]
	lea	eax, DWORD PTR [ebx+ebx*8]
	cmp	eax, esi
	mov	ecx, esi
	cmova	ecx, eax
	lea	eax, DWORD PTR _rev_str_buf_code$1[ebp]
	push	eax
	inc	ecx
	lea	eax, DWORD PTR _rev_str_buf_words$7[ebp]
	push	eax
	lea	eax, DWORD PTR [esi+ecx*2]
	shl	eax, 4
	push	eax
	call	_AllocateBlock

; 389  :         if (r_buf == NULL)
; 390  :         {
; 391  :             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);
; 392  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 393  :         }
; 394  :         __UNIT_TYPE rev_str_buf_count;
; 395  :         PrintDecimal(r_buf, r_buf_count, rev_str_buf, &rev_str_buf_count, format, width, format_option);

	push	DWORD PTR _format_option$[ebp]
	mov	edi, eax
	lea	eax, DWORD PTR _rev_str_buf_count$10[ebp]
	push	esi
	push	DWORD PTR _format$[ebp]
	push	eax
	push	edi
	push	ebx
	mov	ebx, DWORD PTR _r_buf$1$[ebp]
	push	ebx
	call	_PrintDecimal

; 396  :         if ((result = CheckBlockLight((__UNIT_TYPE*)rev_str_buf, rev_str_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _rev_str_buf_code$1[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN1@ToStringDN

; 397  :             return (result);
; 398  :         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	DWORD PTR _r_buf_words$8[ebp]
	push	ebx
	call	_DeallocateBlock

; 399  :         if (rev_str_buf_count + 1 > buffer_size)

	mov	esi, DWORD PTR _rev_str_buf_count$10[ebp]
	add	esp, 8
	lea	eax, DWORD PTR [esi+1]
	cmp	eax, DWORD PTR _buffer_size$[ebp]
	jbe	SHORT $LN19@ToStringDN

; 400  :         {
; 401  :             DeallocateBlock((__UNIT_TYPE*)rev_str_buf, rev_str_buf_words);

	push	DWORD PTR _rev_str_buf_words$7[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 8
$LN64@ToStringDN:

; 408  : }

	pop	edi
	pop	esi
	mov	eax, -4					; fffffffcH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN62@ToStringDN:
	mov	eax, DWORD PTR _q_ptr$1$[ebp]
	jmp	$LL28@ToStringDN
$LN19@ToStringDN:

; 307  :     wchar_t* out_ptr = out_buf;

	mov	ecx, DWORD PTR _buffer$[ebp]
	lea	edx, DWORD PTR [esi-1]
	lea	edx, DWORD PTR [edi+edx*2]

; 308  :     __UNIT_TYPE count = in_buf_count;

	test	esi, esi

; 309  :     while (count > 0)

	je	SHORT $LN43@ToStringDN
$LL42@ToStringDN:

; 310  :     {
; 311  :         *out_ptr++ = *in_ptr--;

	mov	ax, WORD PTR [edx]
	lea	edx, DWORD PTR [edx-2]
	mov	WORD PTR [ecx], ax
	add	ecx, 2

; 312  :         --count;

	sub	esi, 1
	jne	SHORT $LL42@ToStringDN
$LN43@ToStringDN:

; 402  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);
; 403  :         }
; 404  :         ToStringDN_Finalize(rev_str_buf, rev_str_buf_count, buffer, buffer_size);
; 405  :         DeallocateBlock((__UNIT_TYPE*)rev_str_buf, rev_str_buf_words);

	push	DWORD PTR _rev_str_buf_words$7[ebp]

; 314  :     *out_ptr = L'\0';

	xor	eax, eax

; 402  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);
; 403  :         }
; 404  :         ToStringDN_Finalize(rev_str_buf, rev_str_buf_count, buffer, buffer_size);
; 405  :         DeallocateBlock((__UNIT_TYPE*)rev_str_buf, rev_str_buf_words);

	push	edi

; 314  :     *out_ptr = L'\0';

	mov	WORD PTR [ecx], ax

; 402  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);
; 403  :         }
; 404  :         ToStringDN_Finalize(rev_str_buf, rev_str_buf_count, buffer, buffer_size);
; 405  :         DeallocateBlock((__UNIT_TYPE*)rev_str_buf, rev_str_buf_words);

	call	_DeallocateBlock
	add	esp, 8

; 406  :     }
; 407  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ToStringDN:

; 408  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ToStringDN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _ToStringDN_Finalize
_TEXT	SEGMENT
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_out_buf_count$ = 20					; size = 4
_ToStringDN_Finalize PROC				; COMDAT

; 305  : {

	push	ebp
	mov	ebp, esp

; 306  :     wchar_t* in_ptr = in_buf + in_buf_count - 1;

	mov	edx, DWORD PTR _in_buf$[ebp]

; 307  :     wchar_t* out_ptr = out_buf;

	mov	eax, DWORD PTR _out_buf$[ebp]
	add	edx, -2					; fffffffeH
	push	esi
	mov	esi, DWORD PTR _in_buf_count$[ebp]
	lea	edx, DWORD PTR [edx+esi*2]

; 308  :     __UNIT_TYPE count = in_buf_count;
; 309  :     while (count > 0)

	test	esi, esi
	je	SHORT $LN9@ToStringDN
	npad	9
$LL2@ToStringDN:

; 310  :     {
; 311  :         *out_ptr++ = *in_ptr--;

	mov	cx, WORD PTR [edx]
	lea	eax, DWORD PTR [eax+2]
	mov	WORD PTR [eax-2], cx
	lea	edx, DWORD PTR [edx-2]

; 312  :         --count;

	sub	esi, 1
	jne	SHORT $LL2@ToStringDN
$LN9@ToStringDN:

; 313  :     }
; 314  :     *out_ptr = L'\0';
; 315  : }

	xor	ecx, ecx
	mov	WORD PTR [eax], cx
	pop	esi
	pop	ebp
	ret	0
_ToStringDN_Finalize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _PrintDecimal
_TEXT	SEGMENT
_out_buf_count$GSCopy$1$ = -60				; size = 4
_in_count$1$ = -56					; size = 4
_state$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_out_buf_count$ = 20					; size = 4
_format$ = 24						; size = 1
_width$ = 28						; size = 4
_format_option$ = 32					; size = 4
_PrintDecimal PROC					; COMDAT

; 263  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _out_buf_count$[ebp]
	push	ebx

; 102  :     state->FORMAT = format;

	mov	bl, BYTE PTR _format$[ebp]

; 263  : {

	push	esi
	push	edi
	mov	edi, DWORD PTR _format_option$[ebp]
	mov	DWORD PTR _out_buf_count$GSCopy$1$[ebp], eax

; 102  :     state->FORMAT = format;

	mov	BYTE PTR _state$[ebp], bl

; 103  : 
; 104  :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(format_option->GroupSeparator);

	lea	esi, DWORD PTR [edi+4]
	push	esi
	call	DWORD PTR __imp__lstrlenW@4
	mov	DWORD PTR _state$[ebp+24], eax

; 105  :     wchar_t* in_ptr = format_option->GroupSeparator;
; 106  :     wchar_t* out_ptr = state->GROUP_SEPARATOR + state->GROUP_SEPARATOR_LENGTH;

	lea	ecx, DWORD PTR _state$[ebp+2]
	lea	ecx, DWORD PTR [ecx+eax*2]

; 107  :     *out_ptr-- = '\0';

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	sub	ecx, 2

; 108  :     while (*in_ptr != L'\0')

	movzx	eax, WORD PTR [esi]
	test	ax, ax
	je	SHORT $LN14@PrintDecim
	mov	edx, eax
	npad	9
$LL13@PrintDecim:
	movzx	eax, WORD PTR [esi+2]

; 109  :     {
; 110  :         *out_ptr = *in_ptr;
; 111  :         --out_ptr;
; 112  :         ++in_ptr;

	lea	esi, DWORD PTR [esi+2]
	mov	WORD PTR [ecx], dx
	lea	ecx, DWORD PTR [ecx-2]
	mov	edx, eax
	test	ax, ax
	jne	SHORT $LL13@PrintDecim
$LN14@PrintDecim:

; 113  :     }
; 114  : 
; 115  :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(format_option->DecimalSeparator);

	lea	esi, DWORD PTR [edi+10]
	push	esi
	call	DWORD PTR __imp__lstrlenW@4
	mov	DWORD PTR _state$[ebp+28], eax

; 116  :     in_ptr = format_option->DecimalSeparator;
; 117  :     out_ptr = state->DECIMAL_SEPARATOR + state->DECIMAL_SEPARATOR_LENGTH;

	lea	ecx, DWORD PTR _state$[ebp+12]
	lea	ecx, DWORD PTR [ecx+eax*2]

; 118  :     *out_ptr-- = '\0';

	xor	eax, eax
	mov	WORD PTR [ecx], ax
	sub	ecx, 2

; 119  :     while (*in_ptr != L'\0')

	movzx	eax, WORD PTR [esi]
	test	ax, ax
	je	SHORT $LN16@PrintDecim
	mov	edx, eax
	npad	7
$LL15@PrintDecim:
	movzx	eax, WORD PTR [esi+2]

; 120  :     {
; 121  :         *out_ptr = *in_ptr;
; 122  :         --out_ptr;
; 123  :         ++in_ptr;

	lea	esi, DWORD PTR [esi+2]
	mov	WORD PTR [ecx], dx
	lea	ecx, DWORD PTR [ecx-2]
	mov	edx, eax
	test	ax, ax
	jne	SHORT $LL15@PrintDecim
$LN16@PrintDecim:

; 124  :     }
; 125  : 
; 126  :     state->CURRENT_GROUP = &format_option->GroupSizes[0];
; 127  :     state->CURRENT_GROUP_SIZE = *state->CURRENT_GROUP - '0';
; 128  :     state->CURRENT_GROUP_INDEX = 0;
; 129  :     state->OUT_PTR = out_buf;

	mov	ecx, DWORD PTR _out_buf$[ebp]
	lea	eax, DWORD PTR [edi+28]
	mov	DWORD PTR _state$[ebp+32], eax
	movsx	eax, BYTE PTR [eax]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _state$[ebp+40], 0
	mov	DWORD PTR _state$[ebp+36], eax
	mov	DWORD PTR _state$[ebp+44], ecx

; 264  :     struct TOSTRINGN_OUTPUT_STATE state;
; 265  :     InitializeOutputState(&state, out_buf, format, format_option);
; 266  :     if (format == 'N' && width > 0)

	cmp	bl, 78					; 0000004eH
	jne	SHORT $LN20@PrintDecim
	mov	eax, DWORD PTR _width$[ebp]
	test	eax, eax
	je	SHORT $LN20@PrintDecim

; 267  :     {
; 268  :         _UINT32_T count = width;

	mov	edx, eax
	npad	2
$LL2@PrintDecim:

; 140  :     *state->OUT_PTR = decimal_digits[x];

	mov	ax, WORD PTR _decimal_digits
	mov	WORD PTR [ecx], ax

; 141  :     state->OUT_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp+44]
	add	ecx, 2
	mov	DWORD PTR _state$[ebp+44], ecx

; 269  :         while (count > 0)
; 270  :         {
; 271  :             OutputUngroupedOneChar(&state, 0);
; 272  :             --count;

	sub	edx, 1
	jne	SHORT $LL2@PrintDecim

; 134  :     lstrcpyW(state->OUT_PTR, state->DECIMAL_SEPARATOR);

	lea	eax, DWORD PTR _state$[ebp+12]
	push	eax
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8

; 135  :     state->OUT_PTR += state->DECIMAL_SEPARATOR_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp+28]
	lea	eax, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp+44], eax
$LN20@PrintDecim:

; 273  :         }
; 274  :         OutputDecimalSeparator(&state);
; 275  :     }
; 276  :     __UNIT_TYPE_DIV* in_ptr = in_buf;
; 277  :     __UNIT_TYPE in_count = in_buf_count - 1;

	mov	eax, DWORD PTR _in_buf_count$[ebp]
	add	eax, -1
	mov	DWORD PTR _in_count$1$[ebp], eax

; 278  :     while (in_count != 0)

	mov	eax, DWORD PTR _in_buf$[ebp]
	je	$LN5@PrintDecim
$LL4@PrintDecim:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 408  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	esi, DWORD PTR [eax]

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	esi
	call	__aulldiv
	mov	ebx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 226  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	lea	ecx, DWORD PTR [ebx+ebx*4]
	add	ecx, ecx
	sub	esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 226  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	esi
	push	eax
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	ebx
	call	__aulldiv
	mov	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 227  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	lea	ecx, DWORD PTR [edi+edi*4]
	add	ecx, ecx
	sub	ebx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 227  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	ebx
	push	eax
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	edi
	call	__aulldiv
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 228  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	lea	ecx, DWORD PTR [esi+esi*4]
	add	ecx, ecx
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 228  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	edi
	push	eax
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	esi
	call	__aulldiv
	mov	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 229  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	lea	ecx, DWORD PTR [edi+edi*4]
	add	ecx, ecx
	sub	esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 229  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	esi
	push	eax
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	edi
	call	__aulldiv
	mov	ebx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 230  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	lea	ecx, DWORD PTR [ebx+ebx*4]
	add	ecx, ecx
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 230  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	edi
	push	eax
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 992  :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 5
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	ebx
	call	__aulldiv
	mov	esi, eax
	lea	ecx, DWORD PTR [esi+esi*4]
	add	ecx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 240  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	sub	ebx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 240  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	ebx
	push	eax
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	esi
	call	__aulldiv
	mov	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 241  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	lea	ecx, DWORD PTR [edi+edi*4]
	add	ecx, ecx
	sub	esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 241  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	esi
	push	eax
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 992  :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 2
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	edi
	call	__aulldiv
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 251  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	lea	ecx, DWORD PTR [esi+esi*4]
	add	ecx, ecx
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 251  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	edi
	push	eax
	call	_OutputOneChar

; 252  :         OutputOneChar(state, x);

	lea	eax, DWORD PTR _state$[ebp]
	push	esi
	push	eax
	call	_OutputOneChar
	add	esp, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 969  :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 281  :         ++in_ptr;

	mov	eax, DWORD PTR _in_buf$[ebp]
	add	eax, 4

; 282  :         --in_count;

	sub	DWORD PTR _in_count$1$[ebp], 1
	mov	DWORD PTR _in_buf$[ebp], eax
	jne	$LL4@PrintDecim

; 278  :     while (in_count != 0)

	mov	bl, BYTE PTR _format$[ebp]
$LN5@PrintDecim:

; 283  :     }
; 284  :     ToStringDN_LEADING_1WORD(&state, *in_ptr);

	mov	esi, DWORD PTR [eax]
$LL199@PrintDecim:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 621  :         return ((_UINT32_T)(t / v));

	push	0
	push	10					; 0000000aH
	push	0
	push	esi

; 408  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edi, esi

; 621  :         return ((_UINT32_T)(t / v));

	call	__aulldiv
	mov	esi, eax
	lea	eax, DWORD PTR [esi+esi*4]
	add	eax, eax
	sub	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 191  :         OutputOneChar(state, r);

	lea	eax, DWORD PTR _state$[ebp]
	push	edi
	push	eax
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 969  :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 198  :     } while (x != 0);

	test	esi, esi
	jne	SHORT $LL199@PrintDecim

; 285  :     ++in_ptr;
; 286  :     --in_count;
; 287  :     if (format == 'D')

	mov	esi, DWORD PTR _out_buf$[ebp]
	mov	ecx, DWORD PTR _state$[ebp+44]
	cmp	bl, 68					; 00000044H
	jne	SHORT $LN7@PrintDecim

; 288  :     {
; 289  :         if (state.OUT_PTR < out_buf + width)

	mov	ebx, DWORD PTR _width$[ebp]
	lea	eax, DWORD PTR [esi+ebx*2]
	cmp	ecx, eax
	jae	SHORT $LN7@PrintDecim

; 290  :         {
; 291  :             int count = width - (int)(state.OUT_PTR - out_buf);

	mov	eax, ecx
	sub	eax, esi
	sar	eax, 1
	sub	ebx, eax

; 292  :             while (count > 0)

	test	ebx, ebx
	jle	SHORT $LN7@PrintDecim
$LL6@PrintDecim:

; 293  :             {
; 294  :                 OutputOneChar(&state, 0);

	lea	eax, DWORD PTR _state$[ebp]
	push	0
	push	eax
	call	_OutputOneChar

; 295  :                 --count;

	dec	ebx
	add	esp, 8
	test	ebx, ebx
	jg	SHORT $LL6@PrintDecim
	mov	ecx, DWORD PTR _state$[ebp+44]
$LN7@PrintDecim:

; 296  :             }
; 297  :         }
; 298  :     }
; 299  :     *out_buf_count = state.OUT_PTR - out_buf;

	mov	edx, DWORD PTR _out_buf_count$GSCopy$1$[ebp]
	mov	eax, ecx
	sub	eax, esi
	sar	eax, 1

; 300  :     *state.OUT_PTR = '\0';

	pop	edi
	mov	DWORD PTR [edx], eax
	xor	eax, eax
	mov	WORD PTR [ecx], ax

; 301  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_PrintDecimal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _ToStringDN_1WORD
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_ToStringDN_1WORD PROC					; COMDAT

; 203  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	mov	esi, DWORD PTR _x$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 203  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	esi
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 226  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	mov	ebx, DWORD PTR _state$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	mov	edi, eax
	lea	ecx, DWORD PTR [edi+edi*4]
	add	ecx, ecx
	sub	esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 226  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	esi
	push	ebx
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	edi
	call	__aulldiv
	mov	esi, eax
	lea	ecx, DWORD PTR [esi+esi*4]
	add	ecx, ecx
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 227  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	edi
	push	ebx
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	esi
	call	__aulldiv
	mov	edi, eax
	lea	ecx, DWORD PTR [edi+edi*4]
	add	ecx, ecx
	sub	esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 228  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	esi
	push	ebx
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	edi
	call	__aulldiv
	mov	esi, eax
	lea	ecx, DWORD PTR [esi+esi*4]
	add	ecx, ecx
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 229  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	edi
	push	ebx
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	esi
	call	__aulldiv
	mov	edi, eax
	lea	ecx, DWORD PTR [edi+edi*4]
	add	ecx, ecx
	sub	esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 230  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	esi
	push	ebx
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 992  :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	ecx, 5
	mov	eax, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [eax], ecx

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	edi
	call	__aulldiv
	mov	esi, eax
	lea	ecx, DWORD PTR [esi+esi*4]
	add	ecx, ecx
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 240  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	edi
	push	ebx
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	esi
	call	__aulldiv
	mov	edi, eax
	lea	ecx, DWORD PTR [edi+edi*4]
	add	ecx, ecx
	sub	esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 241  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	esi
	push	ebx
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 992  :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	ecx, 2
	mov	eax, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [eax], ecx

; 620  :         *r = (_UINT32_T)(t % v);

	push	0
	push	10					; 0000000aH
	push	0
	push	edi
	call	__aulldiv
	mov	esi, eax
	lea	ecx, DWORD PTR [esi+esi*4]
	add	ecx, ecx
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 251  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	push	edi
	push	ebx
	call	_OutputOneChar

; 252  :         OutputOneChar(state, x);

	push	esi
	push	ebx
	call	_OutputOneChar
	add	esp, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 969  :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
	pop	edi
	pop	esi
	pop	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 260  : }

	pop	ebp
	ret	0
_ToStringDN_1WORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _ToStringDN_LEADING_1WORD
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_ToStringDN_LEADING_1WORD PROC				; COMDAT

; 186  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, DWORD PTR _state$[ebp]
	push	esi
	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	npad	4
$LL4@ToStringDN:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 621  :         return ((_UINT32_T)(t / v));

	push	0
	push	10					; 0000000aH
	push	0
	push	esi

; 408  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edi, esi

; 621  :         return ((_UINT32_T)(t / v));

	call	__aulldiv
	mov	esi, eax
	lea	eax, DWORD PTR [esi+esi*4]
	add	eax, eax
	sub	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 191  :         OutputOneChar(state, r);

	push	edi
	push	ebx
	call	_OutputOneChar
	add	esp, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 969  :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 198  :     } while (x != 0);

	test	esi, esi
	jne	SHORT $LL4@ToStringDN

; 199  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_ToStringDN_LEADING_1WORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _OutputOneChar
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_OutputOneChar PROC					; COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 146  :     if (state->FORMAT == 'N')

	mov	esi, DWORD PTR _state$[ebp]
	cmp	BYTE PTR [esi], 78			; 0000004eH
	jne	SHORT $LN2@OutputOneC

; 147  :     {
; 148  :         // 書式が N である場合
; 149  :         if (state->CURRENT_GROUP_SIZE > 0 && state->CURRENT_GROUP_INDEX >= state->CURRENT_GROUP_SIZE)

	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	jle	SHORT $LN9@OutputOneC
	cmp	DWORD PTR [esi+40], eax
	jl	SHORT $LN9@OutputOneC

; 150  :         {
; 151  :             // 現在のグループ幅が 0 ではなく、かつ既に出力した文字数がグループ幅に達した場合
; 152  : 
; 153  :             // グループ区切り文字を出力してから与えられた文字を出力する
; 154  :             lstrcpyW(state->OUT_PTR, state->GROUP_SEPARATOR);

	lea	eax, DWORD PTR [esi+2]
	push	eax
	push	DWORD PTR [esi+44]
	call	DWORD PTR __imp__lstrcpyW@8

; 155  :             state->OUT_PTR += state->GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR [esi+24]
	add	eax, eax
	add	DWORD PTR [esi+44], eax

; 156  :             *state->OUT_PTR = decimal_digits[x];

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [esi+44]
	mov	ax, WORD PTR _decimal_digits[eax*2]
	mov	WORD PTR [ecx], ax

; 157  :             state->OUT_PTR += 1;
; 158  :             state->CURRENT_GROUP_INDEX = 1;
; 159  : 
; 160  :             // 次のグループが存在すればそのグループに移行する
; 161  :             if (state->CURRENT_GROUP[1] != '\0')

	mov	eax, DWORD PTR [esi+32]
	add	DWORD PTR [esi+44], 2
	inc	eax
	mov	DWORD PTR [esi+40], 1
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN3@OutputOneC

; 162  :             {
; 163  :                 state->CURRENT_GROUP += 1;

	mov	DWORD PTR [esi+32], eax

; 164  :                 state->CURRENT_GROUP_SIZE = *state->CURRENT_GROUP - '0';

	movsx	eax, BYTE PTR [eax]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR [esi+36], eax
	pop	esi

; 181  :     }
; 182  : }

	pop	ebp
	ret	0
$LN9@OutputOneC:

; 165  :             }
; 166  :         }
; 167  :         else
; 168  :         {
; 169  :             // 現在のグループの幅が 0 であるかあるいは出力した文字数がグループ幅に達していない場合
; 170  :             *state->OUT_PTR = decimal_digits[x];

	mov	ecx, DWORD PTR [esi+44]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ax, WORD PTR _decimal_digits[eax*2]
	mov	WORD PTR [ecx], ax

; 171  :             state->OUT_PTR += 1;

	add	DWORD PTR [esi+44], 2

; 172  :             state->CURRENT_GROUP_INDEX += 1;

	inc	DWORD PTR [esi+40]
	pop	esi

; 181  :     }
; 182  : }

	pop	ebp
	ret	0
$LN2@OutputOneC:

; 173  :         }
; 174  :     }
; 175  :     else
; 176  :     {
; 177  :         // 書式が N ではない (つまり D である) 場合
; 178  :         
; 179  :         *state->OUT_PTR = decimal_digits[x];

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [esi+44]
	mov	ax, WORD PTR _decimal_digits[eax*2]
	mov	WORD PTR [ecx], ax

; 180  :         state->OUT_PTR += 1;

	add	DWORD PTR [esi+44], 2
$LN3@OutputOneC:
	pop	esi

; 181  :     }
; 182  : }

	pop	ebp
	ret	0
_OutputOneChar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _OutputUngroupedOneChar
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_OutputUngroupedOneChar PROC				; COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp

; 140  :     *state->OUT_PTR = decimal_digits[x];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	mov	ax, WORD PTR _decimal_digits[eax*2]
	mov	WORD PTR [ecx], ax

; 141  :     state->OUT_PTR += 1;

	add	DWORD PTR [edx+44], 2

; 142  : }

	pop	ebp
	ret	0
_OutputUngroupedOneChar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _OutputDecimalSeparator
_TEXT	SEGMENT
_state$ = 8						; size = 4
_OutputDecimalSeparator PROC				; COMDAT

; 133  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 134  :     lstrcpyW(state->OUT_PTR, state->DECIMAL_SEPARATOR);

	mov	esi, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [esi+12]
	push	eax
	push	DWORD PTR [esi+44]
	call	DWORD PTR __imp__lstrcpyW@8

; 135  :     state->OUT_PTR += state->DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR [esi+28]
	add	eax, eax
	add	DWORD PTR [esi+44], eax
	pop	esi

; 136  : }

	pop	ebp
	ret	0
_OutputDecimalSeparator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _InitializeOutputState
_TEXT	SEGMENT
_state$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_format$ = 16						; size = 1
_format_option$ = 20					; size = 4
_InitializeOutputState PROC				; COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp

; 102  :     state->FORMAT = format;

	mov	al, BYTE PTR _format$[ebp]
	push	ebx

; 103  : 
; 104  :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(format_option->GroupSeparator);

	mov	ebx, DWORD PTR _format_option$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _state$[ebp]
	lea	esi, DWORD PTR [ebx+4]
	push	esi
	mov	BYTE PTR [edi], al
	call	DWORD PTR __imp__lstrlenW@4
	mov	DWORD PTR [edi+24], eax

; 105  :     wchar_t* in_ptr = format_option->GroupSeparator;
; 106  :     wchar_t* out_ptr = state->GROUP_SEPARATOR + state->GROUP_SEPARATOR_LENGTH;

	lea	ecx, DWORD PTR [edi+eax*2]

; 107  :     *out_ptr-- = '\0';

	xor	eax, eax
	mov	WORD PTR [ecx+2], ax

; 108  :     while (*in_ptr != L'\0')

	movzx	eax, WORD PTR [esi]
	test	ax, ax
	je	SHORT $LN3@Initialize
	mov	edx, eax
$LL2@Initialize:

; 109  :     {
; 110  :         *out_ptr = *in_ptr;

	mov	WORD PTR [ecx], dx

; 111  :         --out_ptr;
; 112  :         ++in_ptr;

	lea	esi, DWORD PTR [esi+2]
	movzx	eax, WORD PTR [esi]
	lea	ecx, DWORD PTR [ecx-2]
	mov	edx, eax
	test	ax, ax
	jne	SHORT $LL2@Initialize
$LN3@Initialize:

; 113  :     }
; 114  : 
; 115  :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(format_option->DecimalSeparator);

	lea	esi, DWORD PTR [ebx+10]
	push	esi
	call	DWORD PTR __imp__lstrlenW@4
	mov	DWORD PTR [edi+28], eax

; 116  :     in_ptr = format_option->DecimalSeparator;
; 117  :     out_ptr = state->DECIMAL_SEPARATOR + state->DECIMAL_SEPARATOR_LENGTH;

	lea	ecx, DWORD PTR [edi+eax*2]

; 118  :     *out_ptr-- = '\0';

	xor	eax, eax
	mov	WORD PTR [ecx+12], ax
	sub	ecx, -10				; fffffff6H

; 119  :     while (*in_ptr != L'\0')

	movzx	eax, WORD PTR [esi]
	test	ax, ax
	je	SHORT $LN5@Initialize
	mov	edx, eax
$LL4@Initialize:

; 120  :     {
; 121  :         *out_ptr = *in_ptr;

	mov	WORD PTR [ecx], dx

; 122  :         --out_ptr;
; 123  :         ++in_ptr;

	lea	esi, DWORD PTR [esi+2]
	movzx	eax, WORD PTR [esi]
	lea	ecx, DWORD PTR [ecx-2]
	mov	edx, eax
	test	ax, ax
	jne	SHORT $LL4@Initialize
$LN5@Initialize:

; 124  :     }
; 125  : 
; 126  :     state->CURRENT_GROUP = &format_option->GroupSizes[0];

	lea	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [edi+32], eax

; 127  :     state->CURRENT_GROUP_SIZE = *state->CURRENT_GROUP - '0';

	movsx	eax, BYTE PTR [eax]
	sub	eax, 48					; 00000030H

; 128  :     state->CURRENT_GROUP_INDEX = 0;

	mov	DWORD PTR [edi+40], 0
	mov	DWORD PTR [edi+36], eax

; 129  :     state->OUT_PTR = out_buf;

	mov	eax, DWORD PTR _out_buf$[ebp]
	mov	DWORD PTR [edi+44], eax
	pop	edi
	pop	esi
	pop	ebx

; 130  : }

	pop	ebp
	ret	0
_InitializeOutputState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _ConvertCardinalNumber
_TEXT	SEGMENT
_work_buf_2_words$ = -32				; size = 4
_r_value$1 = -28					; size = 4
_work_buf_1_code$ = -24					; size = 4
_work_buf_2_code$ = -20					; size = 4
_work_buf_1$1$ = -16					; size = 4
_work_buf_2$1$ = -12					; size = 4
_u_ptr$1$ = -8						; size = 4
_work_buf_1_words$ = -4					; size = 4
_x_buf$ = 8						; size = 4
_x_buf_size$ = 12					; size = 4
_q_ptr$1$ = 16						; size = 4
_x_bit_count$ = 16					; size = 4
_base_value$ = 20					; size = 4
_r_buf$ = 24						; size = 4
_r_buf_count$ = 28					; size = 4
_ConvertCardinalNumber PROC				; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi

; 59   :     PMC_STATUS_CODE result;
; 60   :     __UNIT_TYPE work_buf_1_code;
; 61   :     __UNIT_TYPE work_buf_1_words;
; 62   :     __UNIT_TYPE_DIV* work_buf_1 = (__UNIT_TYPE_DIV*)AllocateBlock(x_bit_count + __UNIT_TYPE_BIT_COUNT, &work_buf_1_words, &work_buf_1_code);

	mov	esi, DWORD PTR _x_bit_count$[ebp]
	lea	eax, DWORD PTR _work_buf_1_code$[ebp]
	push	eax
	lea	eax, DWORD PTR _work_buf_1_words$[ebp]
	add	esi, 32					; 00000020H
	push	eax
	push	esi
	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf_1$1$[ebp], ebx

; 63   :     if (work_buf_1 == NULL)

	test	ebx, ebx
	je	SHORT $LN30@ConvertCar

; 64   :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 65   :     __UNIT_TYPE work_buf_2_code;
; 66   :     __UNIT_TYPE work_buf_2_words;
; 67   :     __UNIT_TYPE_DIV* work_buf_2 = (__UNIT_TYPE_DIV*)AllocateBlock(x_bit_count + __UNIT_TYPE_BIT_COUNT, &work_buf_2_words, &work_buf_2_code);

	lea	eax, DWORD PTR _work_buf_2_code$[ebp]
	push	eax
	lea	eax, DWORD PTR _work_buf_2_words$[ebp]
	push	eax
	push	esi
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf_2$1$[ebp], eax

; 68   :     if (work_buf_2 == NULL)

	test	eax, eax
	jne	SHORT $LN7@ConvertCar

; 69   :     {
; 70   :         DeallocateBlock((__UNIT_TYPE*)work_buf_1, work_buf_1_words);

	push	DWORD PTR _work_buf_1_words$[ebp]
	push	ebx
	call	_DeallocateBlock
	add	esp, 8
$LN30@ConvertCar:

; 98   : }

	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@ConvertCar:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 309  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	esi, DWORD PTR _x_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 73   :     __UNIT_TYPE_DIV* u_ptr = work_buf_1;

	mov	edx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 309  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	edi
	mov	edi, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 73   :     __UNIT_TYPE_DIV* u_ptr = work_buf_1;

	mov	DWORD PTR _u_ptr$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 309  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 77   :     __UNIT_TYPE work_u_count = work_buf_1_words * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));

	mov	esi, DWORD PTR _work_buf_1_words$[ebp]
	mov	ecx, DWORD PTR _r_buf$[ebp]
	mov	ebx, ecx
	mov	DWORD PTR _q_ptr$1$[ebp], eax
	test	esi, esi

; 78   :     while (work_u_count > 0)

	je	SHORT $LN3@ConvertCar
$LL2@ConvertCar:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h

; 359  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, eax
	mov	ecx, esi
	xor	eax, eax
	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c

; 82   :         DivRem_X_1W(u_ptr, work_u_count, base_value, q_ptr, &r_value);

	mov	edi, DWORD PTR _q_ptr$1$[ebp]
	lea	eax, DWORD PTR _r_value$1[ebp]
	push	eax
	push	edi
	push	DWORD PTR _base_value$[ebp]
	push	esi
	push	edx
	call	_DivRem_X_1W

; 83   :         if ((result = CheckBlockLight((__UNIT_TYPE*)work_buf_2, work_buf_2_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_buf_2_code$[ebp]
	push	DWORD PTR _work_buf_2$1$[ebp]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN29@ConvertCar

; 84   :             return (result);
; 85   :         if ((result = CheckBlockLight((__UNIT_TYPE*)work_buf_1, work_buf_1_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_buf_1_code$[ebp]
	push	DWORD PTR _work_buf_1$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@ConvertCar

; 86   :             return (result);
; 87   :         *r_ptr++ = r_value;

	mov	eax, DWORD PTR _r_value$1[ebp]

; 88   :         __UNIT_TYPE_DIV* temp = u_ptr;
; 89   :         u_ptr = q_ptr;

	mov	edx, edi
	mov	DWORD PTR [ebx], eax
	add	ebx, 4
	mov	eax, DWORD PTR _u_ptr$1$[ebp]

; 90   :         q_ptr = temp;

	mov	DWORD PTR _q_ptr$1$[ebp], eax
	lea	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _u_ptr$1$[ebp], edi
	lea	eax, DWORD PTR [eax+esi*4]
	npad	3
$LL4@ConvertCar:

; 91   :         while (work_u_count > 0 && u_ptr[work_u_count - 1] == 0)

	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN27@ConvertCar

; 92   :             --work_u_count;

	sub	eax, 4
	sub	esi, 1
	jne	SHORT $LL4@ConvertCar

; 91   :         while (work_u_count > 0 && u_ptr[work_u_count - 1] == 0)

	mov	ecx, DWORD PTR _r_buf$[ebp]
$LN3@ConvertCar:

; 93   :     }
; 94   :     *r_buf_count = r_ptr - r_buf;

	mov	eax, DWORD PTR _r_buf_count$[ebp]
	sub	ebx, ecx

; 95   :     DeallocateBlock((__UNIT_TYPE*)work_buf_2, work_buf_2_words);

	push	DWORD PTR _work_buf_2_words$[ebp]
	sar	ebx, 2
	push	DWORD PTR _work_buf_2$1$[ebp]
	mov	DWORD PTR [eax], ebx
	call	_DeallocateBlock

; 96   :     DeallocateBlock((__UNIT_TYPE*)work_buf_1, work_buf_1_words);

	push	DWORD PTR _work_buf_1_words$[ebp]
	push	DWORD PTR _work_buf_1$1$[ebp]
	call	_DeallocateBlock
	add	esp, 16					; 00000010H

; 97   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN29@ConvertCar:

; 98   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@ConvertCar:
	mov	eax, DWORD PTR _q_ptr$1$[ebp]
	jmp	$LL2@ConvertCar
_ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToDIV64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV64Counter PROC					; COMDAT

; 997  : {

	push	ebp
	mov	ebp, esp

; 998  :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+8
	lock	 xadd	 DWORD PTR [ecx], eax

; 999  : }

	pop	ebp
	ret	0
_AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _AddToDIV32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV32Counter PROC					; COMDAT

; 991  : {

	push	ebp
	mov	ebp, esp

; 992  :     _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax

; 993  : }

	pop	ebp
	ret	0
_AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementDIV64Counter
_TEXT	SEGMENT
_IncrementDIV64Counter PROC				; COMDAT

; 975  :     _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock	 inc	 (null) PTR _statistics_info+8

; 976  : }

	ret	0
_IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT _IncrementDIV32Counter
_TEXT	SEGMENT
_IncrementDIV32Counter PROC				; COMDAT

; 969  :     _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 970  : }

	ret	0
_IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ROTATE_L_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC					; COMDAT

; 711  : {

	push	ebp
	mov	ebp, esp

; 712  : #ifdef _M_IX86
; 713  :     return (_rotl(x, count));

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rol	eax, cl

; 714  : #elif defined(_M_X64)
; 715  :     return (_rotl64(x, count));
; 716  : #else
; 717  : #error unknown platform
; 718  : #endif
; 719  : }

	pop	ebp
	ret	0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __DIVREM_UNIT
_TEXT	SEGMENT
tv70 = -8						; size = 8
tv69 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC					; COMDAT

; 614  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 408  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _u_high$[ebp]
	xor	ecx, ecx
	or	ecx, DWORD PTR _u_low$[ebp]

; 614  : {

	push	ebx

; 615  : #ifdef _MSC_VER
; 616  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 617  :     {
; 618  :         // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 619  :         _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 620  :         *r = (_UINT32_T)(t % v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	eax
	push	ecx
	call	__aulldvrm
	mov	DWORD PTR tv69[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv70[ebp+4], edx
	mov	edx, DWORD PTR _r$[ebp]

; 621  :         return ((_UINT32_T)(t / v));

	pop	ebx
	mov	DWORD PTR [edx], ecx

; 622  :     }
; 623  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 624  :     {
; 625  :         // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 626  :         // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 627  :         // ・128bit 整数のデータ型が用意されていない。
; 628  :         // ・x64 ではインラインアセンブラがサポートされていない。
; 629  :         *r = 0;
; 630  :         return (0);
; 631  :     }
; 632  :     else
; 633  :     {
; 634  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 635  :         *r = 0;
; 636  :         return (0);
; 637  :     }
; 638  : #elif defined(__GNUC__)
; 639  :     __UNIT_TYPE q;
; 640  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 641  :         __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 642  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 643  :         __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 644  :     else
; 645  :     {
; 646  :         // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 647  :         *r = 0;
; 648  :         q = 0;
; 649  :     }
; 650  :     return (q);
; 651  : #else
; 652  : #error unknown compiler
; 653  : #endif
; 654  : }

	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 423  : {

	push	ebp
	mov	ebp, esp

; 424  :     return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 425  : }

	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 407  : {

	push	ebp
	mov	ebp, esp

; 408  :     return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR _value_high$[ebp]
	xor	eax, eax
	or	eax, DWORD PTR _value_low$[ebp]

; 409  : }

	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __FILL_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC					; COMDAT

; 379  : {

	push	ebp
	mov	ebp, esp

; 380  :     __stosw(d, x, count);

	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosw
	pop	edi

; 381  : }

	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __ZERO_MEMORY_UNIT_DIV
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT_DIV PROC				; COMDAT

; 357  : {

	push	ebp
	mov	ebp, esp

; 358  : #ifdef _M_IX86
; 359  :     __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 360  : #elif defined(_M_X64)
; 361  : #ifdef _MSC_VER
; 362  :     __stosd((unsigned long*)d, 0, (unsigned long)count);
; 363  : #elif defined(__GNUC__)
; 364  :     __stosq(d, 0, count);
; 365  : #else
; 366  : #error unknown compiler
; 367  : #endif
; 368  : #else
; 369  : #error unknown platform
; 370  : #endif
; 371  : }

	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_internal.h
;	COMDAT __COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 307  : {

	push	ebp
	mov	ebp, esp

; 308  : #ifdef _M_IX86
; 309  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 310  : #elif defined(_M_X64)
; 311  : #ifdef _MSC_VER
; 312  :     __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 313  : #elif defined(__GNUC__)
; 314  :     __movsq(d, s, count);
; 315  : #else
; 316  : #error unknown compiler
; 317  : #endif
; 318  : #else
; 319  : #error unknown platform
; 320  : #endif
; 321  : }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _PMC_ToString@24
_TEXT	SEGMENT
_x$ = 8							; size = 4
_buffer$ = 12						; size = 4
_buffer_size$ = 16					; size = 4
_format$ = 20						; size = 1
_width$ = 24						; size = 4
_format_option$ = 28					; size = 4
_PMC_ToString@24 PROC					; COMDAT

; 532  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 533  :     if (x == NULL)

	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	test	esi, esi
	je	$LN12@PMC_ToStri

; 534  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 535  :     if (buffer == NULL)

	mov	ebx, DWORD PTR _buffer$[ebp]
	test	ebx, ebx
	je	$LN12@PMC_ToStri

; 536  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 537  :     if (format_option == NULL)
; 538  :         format_option = &default_number_format_option;
; 539  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	eax, DWORD PTR _format_option$[ebp]
	mov	edi, OFFSET _default_number_format_option
	test	eax, eax

; 540  :     PMC_STATUS_CODE result;
; 541  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	push	esi
	cmovne	edi, eax
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_ToStri

; 542  :         return (result);
; 543  :     switch (format)

	movsx	eax, BYTE PTR _format$[ebp]
	add	eax, -68				; ffffffbcH
	cmp	eax, 52					; 00000034H
	ja	SHORT $LN12@PMC_ToStri
	movzx	eax, BYTE PTR $LN16@PMC_ToStri[eax]
	jmp	DWORD PTR $LN20@PMC_ToStri[eax*4]
$LN8@PMC_ToStri:

; 544  :     {
; 545  :     case 'n':
; 546  :     case 'N':
; 547  :         return (ToStringDN(nx, buffer, buffer_size, 'N', width >= 0 ? width : format_option->DecimalDigits, format_option));

	mov	eax, DWORD PTR _width$[ebp]
	test	eax, eax
	jns	SHORT $LN15@PMC_ToStri
	mov	eax, DWORD PTR [edi]
$LN15@PMC_ToStri:
	push	edi
	push	eax
	push	78					; 0000004eH
	push	DWORD PTR _buffer_size$[ebp]
	push	ebx
	push	esi
	call	_ToStringDN
	add	esp, 24					; 00000018H
	pop	edi

; 557  :     }
; 558  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	24					; 00000018H
$LN9@PMC_ToStri:

; 548  :     case 'x':
; 549  :         return (ToStringX(nx, buffer, buffer_size, width >= 0 ? width : 0, format_option, 0));

	push	0
$LN17@PMC_ToStri:

; 557  :     }
; 558  : }

	mov	eax, DWORD PTR _width$[ebp]
	xor	ecx, ecx
	test	eax, eax
	push	edi
	cmovns	ecx, eax
	push	ecx
	push	DWORD PTR _buffer_size$[ebp]
	push	ebx
	push	esi
	call	_ToStringX
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	24					; 00000018H
$LN10@PMC_ToStri:

; 550  :     case 'X':
; 551  :         return (ToStringX(nx, buffer, buffer_size, width >= 0 ? width : 0, format_option, 1));

	push	1
	jmp	SHORT $LN17@PMC_ToStri
$LN11@PMC_ToStri:

; 552  :     case 'd':
; 553  :     case 'D':
; 554  :         return (ToStringDN(nx, buffer, buffer_size, 'D', width >= 0 ? width : 0, format_option));

	mov	eax, DWORD PTR _width$[ebp]
	xor	ecx, ecx
	push	edi
	test	eax, eax
	cmovns	ecx, eax
	push	ecx
	push	68					; 00000044H
	push	DWORD PTR _buffer_size$[ebp]
	push	ebx
	push	esi
	call	_ToStringDN

; 557  :     }
; 558  : }

	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	24					; 00000018H
$LN12@PMC_ToStri:

; 555  :     default:
; 556  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_ToStri:
	pop	edi

; 557  :     }
; 558  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN20@PMC_ToStri:
	DD	$LN11@PMC_ToStri
	DD	$LN8@PMC_ToStri
	DD	$LN10@PMC_ToStri
	DD	$LN9@PMC_ToStri
	DD	$LN12@PMC_ToStri
$LN16@PMC_ToStri:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_PMC_ToString@24 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.implements\palmtree.math.core.implements\pmc_tostring.c
;	COMDAT _Initialize_ToString
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_ToString PROC				; COMDAT

; 561  : {

	push	esi

; 562  :     default_number_format_option.DecimalDigits = 2;
; 563  :     lstrcpyW(default_number_format_option.GroupSeparator, L",");

	mov	esi, DWORD PTR __imp__lstrcpyW@8
	push	OFFSET ??_C@_13DEFPDAGF@?$AA?0@
	push	OFFSET _default_number_format_option+4
	mov	DWORD PTR _default_number_format_option, 2
	call	esi

; 564  :     lstrcpyW(default_number_format_option.DecimalSeparator, L".");

	push	OFFSET ??_C@_13JOFGPIOO@?$AA?4@
	push	OFFSET _default_number_format_option+10
	call	esi

; 565  :     lstrcpy(default_number_format_option.GroupSizes, "3");

	push	OFFSET ??_C@_01EKENIIDA@3@
	push	OFFSET _default_number_format_option+28
	call	DWORD PTR __imp__lstrcpyA@8

; 566  :     lstrcpyW(default_number_format_option.PositiveSign, L"+");

	push	OFFSET ??_C@_13KJIIAINM@?$AA?$CL@
	push	OFFSET _default_number_format_option+16
	call	esi

; 567  :     lstrcpyW(default_number_format_option.NegativeSign, L"-");

	push	OFFSET ??_C@_13IMODFHAA@?$AA?9@
	push	OFFSET _default_number_format_option+22
	call	esi

; 568  : 
; 569  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi

; 570  : }

	ret	0
_Initialize_ToString ENDP
_TEXT	ENDS
END
